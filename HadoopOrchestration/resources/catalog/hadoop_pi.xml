<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.9"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.9 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.9/schedulerjob.xsd"
	name="Hadoop_PI" projectName="Basic Big Data" priority="normal"
	onTaskError="continueJobExecution" maxNumberOfExecution="2">
	<variables>
		<variable name="CONTAINER_NAME" value="hadoop_pi" />
		<variable name="DOCKER_IMAGE" value="sequenceiq/hadoop-docker:2.7.1" />
	</variables>
	<description>
    <![CDATA[ An example for calculating PI on Hadoop ]]>
	</description>
	<genericInformation>
		<info name="bucketName" value="big-data" />
		<info name="workflow.icon"
			value="/automation-dashboard/styles/patterns/img/wf-icons/hadoop.png" />
		<info name="group" value="public-objects" />
	</genericInformation>
	<taskFlow>
		<task name="Deploy_Hadoop">
			<description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
			</description>
			<genericInformation>
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/hadoop.png" />
			</genericInformation>
			<scriptExecutable>
				<script>
					<code language="bash">
            <![CDATA[
echo "Updating local docker image"
#docker run -it sequenceiq/hadoop-docker:2.7.1 /etc/bootstrap.sh -bash
export RUN_DOCKER="docker run -dit --name=$variables_CONTAINER_NAME $variables_DOCKER_IMAGE /etc/bootstrap.sh -bash"
echo "Checking if docker container is running"
if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
then 
  echo "OK. The $variables_CONTAINER_NAME container is running!"
else 
  echo "$variables_CONTAINER_NAME container is not running."
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "false" ]; 
  then 
    echo "Starting it..."
    docker start $variables_CONTAINER_NAME
  else 
    echo "Running it..."
    echo $RUN_DOCKER
    $($RUN_DOCKER)
    sleep 5
  fi
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
  then 
    echo "OK. The $variables_CONTAINER_NAME container is running now!"
  else 
    echo "$variables_CONTAINER_NAME container is not running."
    echo "An error occurred while running the container."
    exit
  fi
fi
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="Calcul_PI">
			<description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
			</description>
			<genericInformation>
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/hadoop.png" />
			</genericInformation>
			<depends>
				<task ref="Deploy_Hadoop" />
			</depends>
			<scriptExecutable>
				<script>
					<code language="bash">
            <![CDATA[
docker exec $variables_CONTAINER_NAME /bin/sh -c '$HADOOP_PREFIX/bin/hadoop dfsadmin -safemode leave'
docker exec $variables_CONTAINER_NAME /bin/sh -c '$HADOOP_PREFIX/bin/hadoop jar $HADOOP_PREFIX/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.1.jar pi 16 1000000'
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="Stop_Hadoop">
			<description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
			</description>
			<genericInformation>
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/hadoop.png" />
			</genericInformation>
			<depends>
				<task ref="Calcul_PI" />
			</depends>
			<scriptExecutable>
				<script>
					<code language="bash">
            <![CDATA[
echo docker rm -fv $(docker ps -a -q --filter "name=$variables_CONTAINER_NAME")
docker rm -fv $(docker ps -a -q --filter "name=$variables_CONTAINER_NAME")
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
	</taskFlow>
</job>