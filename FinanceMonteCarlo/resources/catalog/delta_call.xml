<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.10"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
    name="delta_call" projectName="Basic Finance"
    priority="normal"
    onTaskError="continueJobExecution"
>
  <variables>
    <variable name="stock_price" value="120" />
    <variable name="strike_price" value="100" />
    <variable name="time_to_expiry" value="3" />
    <variable name="discount_rate" value="0.03" />
    <variable name="cost_of_carry" value="0" />
    <variable name="volatility" value="0.02" />
  </variables>
  <description>
    <![CDATA[ European call delta. Delta measures an option's price sensitivity relative to changes in the price of the underlying asset, and is the number of points that an option's price is expected to move for each one-point change in the underlying. ]]>
  </description>
  <genericInformation>
    <info name="pca.action.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/scala.png"/>
    <info name="Documentation" value="https://github.com/navaidya/optionpricing"/>
  </genericInformation>
  <taskFlow>
    <task name="Scala_Task"
>
    <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/scala.png"/>
    </genericInformation>
      <scriptExecutable>
        <script
>
          <code language="scala">
            <![CDATA[
import org.ow2.proactive.scheduler.task.utils._
val vars : VariablesMap = variables.asInstanceOf[VariablesMap];


 def d1d2(stockPrice: Double,
    strikePrice: Double,
    timeToExpiry: Double,
    discountRate: Double,
    volatility: Double) = {
    val d1 = (math.log(stockPrice / strikePrice) +
      (discountRate + math.pow(volatility, 2) / 2) * timeToExpiry) / (volatility * math.sqrt(timeToExpiry))
    val d2 = d1 - volatility * math.sqrt(timeToExpiry)
    (d1, d2)
  }
  
   def CNDApprox(X: Double) = {
    val a1 = 0.31938153
    val a2 = -0.356563782
    val a3 = 1.781477937
    val a4 = -1.821255978
    val a5 = 1.330274429

    val L = Math.abs(X);
    val K = 1.0 / (1.0 + 0.2316419 * L);
    var w = 1.0 - 1.0 / Math.sqrt(2.0 * Math.PI) * Math.exp(-L * L / 2) * (a1 * K + a2 * K * K + a3
      * Math.pow(K, 3) + a4 * Math.pow(K, 4) + a5 * Math.pow(K, 5))

    if (X < 0.0) {
      w = 1.0 - w
    }
    w
  }

  def deltaCall(stockPrice: Double,
    strikePrice: Double,
    timeToExpiry: Double,
    discountRate: Double,
    costOfCarry: Double,
    volatility: Double) = {
    val (d1, d2) = d1d2(stockPrice, strikePrice, timeToExpiry, costOfCarry, volatility)
    math.exp((costOfCarry - discountRate) * timeToExpiry) * CNDApprox(d1)
  }

  val stock_price = (vars.get("stock_price") + "").toDouble
  val strike_price = (vars.get("strike_price") + "").toDouble
  val time_to_expiry = (vars.get("time_to_expiry") + "").toDouble
  val discount_rate = (vars.get("discount_rate") + "").toDouble
  val cost_of_carry = (vars.get("cost_of_carry") + "").toDouble
  val volatility = (vars.get("volatility") + "").toDouble
  val call_delta = deltaCall(stock_price, strike_price, time_to_expiry, discount_rate, cost_of_carry, volatility)
  val str = "stock_price " + stock_price + "\nstrike_price " + strike_price + "\ntime_to_expiry " + time_to_expiry + "\ndiscount_rate " + discount_rate + "\ncost_of_carry " + cost_of_carry + "\nvolatility " + volatility + " \ncall_delta " + call_delta
  println(str)
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>