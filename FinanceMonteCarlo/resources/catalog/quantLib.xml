<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.8"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
	name="quantLib" projectName="Basic Finance" priority="normal"
	onTaskError="continueJobExecution">
	<description>
        <![CDATA[ Example of using QuanLib. Here we simulate the stock price paths (GBM) of a given portfolio. Use your own C++ QuantLib binary file and execute it from a docker container for a highly portable workflow. ]]>
    </description>
	<genericInformation>
		<info name="pca.action.icon"
			value="/automation-dashboard/styles/patterns/img/wf-icons/quantlib.png" />
		<info name="Documentation" value="http://quantlib.org/index.shtml" />
	</genericInformation>
	<taskFlow>
		<task name="quantLib">
			<description>
                <![CDATA[ Example of using QuanLib. Here we simulate the stock price paths (GBM) of a given portfolio. Use your own C++ QuantLib binary file and execute it from a docker container for a highly portable workflow. ]]>
            </description>
			<genericInformation>
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/quantlib.png" />
			</genericInformation>
			<inputFiles>
				<files includes="ptfSimulations" accessMode="transferFromGlobalSpace" />
				<files includes="assets.txt" accessMode="transferFromGlobalSpace" />
				<files includes="assets_correlations.txt" accessMode="transferFromGlobalSpace" />
			</inputFiles>
			<scriptExecutable>
				<script>
					<code language="groovy">
                        <![CDATA[
println "quantLib ..."

// Retrieve variables
def nbMC_task = 10000
def nbTimeSteps = 255
def horizon = 1
def nbAssets = 3
def assets_params_file_path_from_dataspace = "assets.txt"
def assets_correlations_file_path_from_dataspace = "assets_correlations.txt"

// Set executable permission
def executable_file_path = new File(localspace, "ptfSimulations").absolutePath
["chmod","+x", executable_file_path].execute().waitForProcessOutput(System.out, System.err)

// Build the command to simulate your ptf PnLs at horizon
def cmd = ['/bin/sh', '-c', "docker run -v " + new File('.').absolutePath + ":/defaultglobal lballabio/quantlib:1.9-xenial /bin/bash -c 'cd defaultglobal; ./ptfSimulations " + nbMC_task + " " + nbTimeSteps + " " + horizon + " " + nbAssets + " " + assets_params_file_path_from_dataspace + " " +  assets_correlations_file_path_from_dataspace + " 0'"]
println cmd

// Execute the command
def sout = new StringBuilder()
cmd.execute().waitForProcessOutput(System.out, System.err)

println "... quantLib"
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
	</taskFlow>
</job>