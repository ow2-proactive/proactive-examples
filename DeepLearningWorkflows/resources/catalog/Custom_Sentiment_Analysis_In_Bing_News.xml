<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.13" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd"  name="Custom_Sentiment_Analysis_In_Bing_News" projectName="3. Mixed Workflows" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
  <variables>
    <variable name="CONTAINER_PLATFORM" value="docker" model="PA:LIST(no-container,docker,podman,singularity)" description="Container platform used for executing the workflow tasks." group="Container Parameters" advanced="true" hidden="false"/>
    <variable name="CONTAINER_GPU_ENABLED" value="True" model="PA:Boolean" description="If True, it will activate the use of GPU for the workflow tasks on the selected container platform." group="Container Parameters" advanced="true" hidden="false"/>
    <variable name="CONTAINER_IMAGE" value="" model="PA:LIST(,docker://activeeon/dlm3,docker://activeeon/cuda,docker://activeeon/cuda2)" description="Name of the container image being used to run the workflow tasks." group="Container Parameters" advanced="true" hidden="false"/>
  </variables>
  <description>
    <![CDATA[ Search for news related to a given search term using Azure Bing News API then perform a sentiment analysis. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="ai-deep-learning-workflows"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_bing_news_search.png"/>
    <info name="Documentation" value="PML/PMLUserGuide.html#_mixed_workflows"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="NewsTextExtractor" fork="true">
      <description>
        <![CDATA[ This task extracts news snippets from Bing News then prepares them as an custom format input for Predict_Text_Model task. ]]>
      </description>
      <depends>
        <task ref="BingNews"/>
      </depends>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw" language="groovy"></file>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import json
import pandas as pd
import os
from os.path import basename, splitext, exists, join
from os import remove, listdir, makedirs
import shutil

# Create output directory
GLOBALSPACE = 'text_data/'
DATASET_PATH = os.path.join(GLOBALSPACE,"BING_NEWS_TEXT")
if exists(DATASET_PATH):
    shutil.rmtree(DATASET_PATH)
makedirs(DATASET_PATH)

train_path=os.path.join(DATASET_PATH,"train.csv")
test_path=os.path.join(DATASET_PATH,"test.csv")
val_path=os.path.join(DATASET_PATH,"val.csv")

# Get Google News search results
OUTPUT_DATA=variables.get("BING_NEWS_SEARCH_OUTPUT")["value"]
text_json={'documents':[]}
# Extract news snippets and add 'unlabeled' as a label
for document in OUTPUT_DATA:
    description=document["description"]
    text_json['documents'].append({'text': description, 'label':'unlabeled'})

# Create a dataframe to prepare data export
dataframe=pd.read_json(json.dumps(text_json['documents']).encode('utf-8'),orient='records')
# Export data as a csv to the file "text.csv"
dataframe.to_csv(test_path,columns=["text","label"],index=False,header=False)

# Create empty "train.csv" and "val.csv"
# THIS IS A TEMPORARY WORKAROUD
# TODO avoid creating empty csv files
open(train_path, 'a').close()
open(val_path, 'a').close()


# CODE TO EXPORT
DATASET_ITERATOR_UNL="""
text_field = data.Field(lower=True)#, tokenize=TOKENIZER)
print("text_field=",text_field)
label_field = data.Field(sequential=False)
print("label_field",label_field)
#Dataset of columns stored in CSV, TSV, or JSON format
train, val, test = data.TabularDataset.splits(path=DATASET_PATH, train='train.csv',
                                                  validation='val.csv', test='test.csv', format='csv',
                                                  fields=[('text', text_field), ('label', label_field)])
train_iter, val_iter, test_iter = data.BucketIterator.splits((train, val, test),
                                                                  repeat=False,
                                                             batch_sizes=(BATCH_SIZE,len(val),len(test)), sort_key=lambda x: len(x.text), device=DEVICE)


text_field.build_vocab(test)
label_field.build_vocab(test)
"""

variables.put("DATASET_ITERATOR_UNL",DATASET_ITERATOR_UNL)
variables.put("DATASET_PATH",DATASET_PATH)
variables.put("IS_LABELED_DATA","False")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <outputFiles>
        <files  includes="$DATASET_PATH/**" accessMode="transferToGlobalSpace"/>
      </outputFiles>
      <metadata>
        <positionTop>
            268.22052001953125
        </positionTop>
        <positionLeft>
            379.765625
        </positionLeft>
      </metadata>
    </task>
    <task name="Import_Model" 
    
    
    
    
    fork="true">
      <description>
        <![CDATA[ Import a trained model by a deep learning algorithm. ]]>
      </description>
      <variables>
        <variable name="MODEL_URL" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/models/basic_sentiment_analysis.zip" inherited="false"  description="Valid URL specified by the user referencing the model that needs to be deployed."  advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/import_deep_model.png"/>
        <info name="task.documentation" value="PML/PMLUserGuide.html#_import_model_2"/>
      </genericInformation>
      <selection>
        <script type="static">
          <file url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_node_source_name/raw" language="groovy"></file>
        </script>
      </selection>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw" language="groovy"></file>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/ai-deep-learning/resources/Import_Model_Script/raw" language="cpython"></file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <outputFiles>
        <files  includes="$MODEL_FOLDER/**" accessMode="transferToGlobalSpace"/>
      </outputFiles>
      <metadata>
        <positionTop>
            267.092041015625
        </positionTop>
        <positionLeft>
            675.9722900390625
        </positionLeft>
      </metadata>
    </task>
    <task name="Predict_Text_Classification_Model" 
    
    
    
    
    fork="true">
      <description>
        <![CDATA[ Predict a model using a text classification network. ]]>
      </description>
      <variables>
        <variable name="LOSS_FUNCTION" value="NLLLoss" inherited="false" model="PA:List(L1Loss, MSELoss, CrossEntropyLoss, NLLLoss)" description="Function used to compute the loss."  advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/deep_predict.png"/>
        <info name="task.documentation" value="PML/PMLUserGuide.html#_predict_text_classification_model"/>
      </genericInformation>
      <depends>
        <task ref="NewsTextExtractor"/>
        <task ref="Import_Model"/>
        <task ref="RNN"/>
      </depends>
      <inputFiles>
        <files  includes="$DATASET_PATH/**" accessMode="transferFromGlobalSpace"/>
        <files  includes="$MODEL_FOLDER/**" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <selection>
        <script type="static">
          <file url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_node_source_name/raw" language="groovy"></file>
        </script>
      </selection>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw" language="groovy"></file>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/ai-deep-learning/resources/Predict_Text_Classification_Model_Script/raw" language="cpython"></file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <metadata>
        <positionTop>
            396.1632080078125
        </positionTop>
        <positionLeft>
            435.72052001953125
        </positionLeft>
      </metadata>
    </task>
    <task name="Preview_Results" 
    
    
    
    preciousResult="true" 
    fork="true">
      <description>
        <![CDATA[ Preview the results of the predictions generated by the trained model. ]]>
      </description>
      <variables>
        <variable name="OUTPUT_FILE" value="HTML" inherited="false"  description="Converts the prediction results into the specified file type."  advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/deep_export_results.png"/>
        <info name="task.documentation" value="PML/PMLUserGuide.html#_preview_results_2"/>
      </genericInformation>
      <depends>
        <task ref="Predict_Text_Classification_Model"/>
      </depends>
      <inputFiles>
        <files  includes="$DATASET_PATH/**" accessMode="transferFromGlobalSpace"/>
        <files  includes="$OUTPUT_FOLDER/**" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <selection>
        <script type="static">
          <file url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_node_source_name/raw" language="groovy"></file>
        </script>
      </selection>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw" language="groovy"></file>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/ai-deep-learning/resources/Preview_Results_Script/raw" language="cpython"></file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <metadata>
        <positionTop>
            503.45489501953125
        </positionTop>
        <positionLeft>
            478.9757080078125
        </positionLeft>
      </metadata>
    </task>
    <task name="BingNews" 
    
    
    
    
    fork="true">
      <description>
        <![CDATA[ This task wraps the Bing News Search API of Microsoft which provides an experience similar to Bing.com/search by returning search results that Bing determines are relevant to a user's query. The results include Web pages and may also include images, videos, and more. The task requires this third-party credential : $BING_SEARCH_API_KEY which provides access to this API. Please refer to the User documentation to learn how to add third-party credentials.
$COUNT (optional) is the number of news articles to return in the response.
$FRESHNESS (optional) filter news articles by {"Day", "Week", "Month"}.
$MARKET is the market where the results come from. Market codes are listed here: https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#market-codes
$CATEGORY (optional) is the category of articles to return. For example, Sports articles or Entertainment articles.
$SORTED_BY (optional) is the order to return the trending topics in. For example, sorted by "Date"
The task's output $BING_NEWS_SEARCH_OUTPUT is the result of the API call in a JSON format. ]]>
      </description>
      <variables>
        <variable name="SEARCH_TERM" value="activeeon" inherited="true"  description="Used to specify the user&#39;s search terms."  advanced="false" hidden="false"/>
        <variable name="COUNT" value="-1" inherited="true" model="PA:Integer" description="Used to page image results."  advanced="false" hidden="false"/>
        <variable name="FRESHNESS" value="" inherited="true"  description="Control the freshness of the articles."  advanced="false" hidden="false"/>
        <variable name="MARKET" value="" inherited="true"  description="Used to specify the market where the results come from, which is typically the market where the user is making the request from."  advanced="false" hidden="false"/>
        <variable name="CATEGORY" value="" inherited="true"  description="Used to specify the news category to get news from. For a list of possible news categories that you may specify, see News categories by market. If not specified, the API returns up to 10 headline news articles."  advanced="false" hidden="false"/>
        <variable name="SORT_BY" value="" inherited="true"  description="Sort the news articles."  advanced="false" hidden="false"/>
        <variable name="OUTPUT_FORMAT" value="HTML" inherited="true" model="PA:LIST(CSV, HTML)" description="The format of the output file."  advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_bing_news_search.png"/>
      </genericInformation>
      <forkEnvironment >
        <envScript>
          <script>
            <file url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw" language="groovy"></file>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import requests
import json
import urllib
from pprint import pprint
import pandas as pd
import re

# You can customize the api server location
#api_location="westcentralus"

# Congitive Services - Bing Video Search API URL:
#bing_news_search_url = "https://{0}.api.cognitive.microsoft.com/bing/v7.0/news/search".format(api_location)
bing_news_search_url = "https://api.cognitive.microsoft.com/bing/v7.0/news/search"

# READ TASK VARIABLES
if 'variables' in locals():
    if variables.get("SEARCH_TERM") is not None:
        SEARCH_TERM = variables.get("SEARCH_TERM")
    else:
        print("You first need to specify the search term")
        sys.exit(1)
    if variables.get("COUNT") is not None:
        COUNT = int(variables.get("COUNT"))
    if variables.get("FRESHNESS") is not None:
        FRESHNESS = variables.get("FRESHNESS")
    if variables.get("MARKET") is not None:
        MARKET = variables.get("MARKET")
    if variables.get("CATEGORY") is not None:
        CATEGORY = variables.get("CATEGORY")
    if variables.get("SORT_BY") is not None:
        SORT_BY = variables.get("SORT_BY")
    if variables.get("OUTPUT_FORMAT") is not None:
        OUTPUT_FORMAT = variables.get("OUTPUT_FORMAT")
    # Provide a valid subscription API token
    if credentials.get("BING_SEARCH_API_KEY") is not None:
        subscription_key = credentials.get("BING_SEARCH_API_KEY")
    else:
        print("You first need to add your Azure Cognitive Services API key to the third party credentials")
        sys.exit(1)

# Set API request parameters
#params  = {"q": SEARCH_TERM, "count":COUNT, "mkt": MARKET_CODE, "freshness": FRESHNESS, "category":CATEGORY}
params={'q':SEARCH_TERM}
if COUNT >0:
    params['count'] = COUNT
# Market Code: https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#market-codes
if MARKET is not None and len(MARKET)>0:
    params['mkt'] = MARKET
# Freshness values: 'Day', 'Week', 'Month'
if FRESHNESS is not None and len(FRESHNESS)>0:
    params['freshness'] = FRESHNESS
if CATEGORY is not None and len(CATEGORY)>0:
    params['category'] = CATEGORY
if SORT_BY is not None and len(SORT_BY)>0:
    params['sortBy'] = SORT_BY

# Send API request
headers   = {
    "Ocp-Apim-Subscription-Key": subscription_key,
    'Content-Type': 'text/plain'
}
response = requests.get(bing_news_search_url, headers=headers, params=params)
response.raise_for_status()

# Get a JSON response
search_results = response.json()

# Print the results
#pprint(search_results)

if 'variables' in locals():
    variables.put('BING_NEWS_SEARCH_OUTPUT', search_results)

print("BEGIN Export_Results")

OUTPUT_DATA = search_results["value"]
table = []
for document in OUTPUT_DATA:
    try:
        image=document["image"]
    except KeyError:
        video=None
        pass
    description= document["description"]
    name= document["name"]
    url= document["url"]
    table.append("""<tr><td>{0}</td><td>{1}</td><td><a href="{2}">{2}</a></td>""".format(name, description, url))

css_style="""table {
  border: 1px solid #999999;
  text-align: center;
  border-collapse: collapse;
  width: 100%;
}
td {
  border: 1px solid #999999;
  padding: 3px 2px;
  font-size: 13px;
  border-bottom: 1px solid #999999;
}
th {
  font-size: 17px;
  font-weight: bold;
  color: #FFFFFF;
  text-align: center;
  background: #0B6FA4;
  border-left: 2px solid #999999;
}"""
html = ("""<table><tr><th>Title</th><th>Snippet</th><th>Url</th></tr>{0}</table>""").format("\n".join(table))
html_container="""<!DOCTYPE html>
                  <html>
                    <head>
                      <meta charset="UTF-8">
                        <meta name="description" content="Bing Video Search API Results">
                          <style>{0}</style>
                        </head>
                        <body>{1}</body></html>""".format(css_style,html)

if OUTPUT_DATA != None and 'resultMetadata' in locals(): 
    dataframe=pd.read_html(html_container,header=0, encoding='utf-8')[0]
    
    if OUTPUT_FORMAT == 'CSV':
        result = dataframe.to_csv(index=False).encode('utf-8')
        resultMetadata.put("file.extension", ".csv")
        resultMetadata.put("file.name", "result.csv")
        resultMetadata.put("content.type", "text/csv")
    elif OUTPUT_FORMAT == 'HTML':
        result = html_container.encode('utf-8')
        resultMetadata.put("file.extension", ".html")
        resultMetadata.put("file.name", "result.html")
        resultMetadata.put("content.type", "text/html")
    print("END Export_Results")  
else:
    print('It is not possible to export the data')

# Uncomment this to render the HTML result locally in your python notebook
#from IPython.display import HTML
#HTML(html_container)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            149.54861450195312
        </positionTop>
        <positionLeft>
            379.9913330078125
        </positionLeft>
      </metadata>
    </task>
    <task name="RNN" 
    
    
    
    
    fork="true">
      <description>
        <![CDATA[ RNN is a class of artificial neural network where connections between units form a directed cycle. ]]>
      </description>
      <variables>
        <variable name="EMBEDDING_DIM" value="50" inherited="false"  description="Dimension of the vectors that will be used to map words in some languages."  advanced="false" hidden="false"/>
        <variable name="HIDDEN_DIM" value="40" inherited="false"  description="Hidden dimension of the neural network."  advanced="false" hidden="false"/>
        <variable name="DROPOUT" value="0.5" inherited="false"  description="Percentage of the neurons that will be ignored during the training."  advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/deep_text_classification.png"/>
        <info name="task.documentation" value="PML/PMLUserGuide.html#_rnn"/>
      </genericInformation>
      <selection>
        <script type="static">
          <file url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_node_source_name/raw" language="groovy"></file>
        </script>
      </selection>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw" language="groovy"></file>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/ai-deep-learning/resources/RNN_Script/raw" language="cpython"></file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <metadata>
        <positionTop>
            258.9149475097656
        </positionTop>
        <positionLeft>
            516.9791870117188
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2386px;
            height:2885px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-144.54861450195312px;left:-374.765625px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_533" style="top: 268.229px; left: 379.766px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task extracts news snippets from Bing News then prepares them as an custom format input for Predict_Text_Model task."><img src="/studio/images/Python.png" width="20px">&nbsp;<span class="name">NewsTextExtractor</span></a></div><div class="task ui-draggable" id="jsPlumb_1_536" style="top: 267.1px; left: 675.973px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Import a trained model by a deep learning algorithm."><img src="/automation-dashboard/styles/patterns/img/wf-icons/import_deep_model.png" width="20px">&nbsp;<span class="name">Import_Model</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_539" style="top: 396.171px; left: 435.721px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Predict a model using a text classification network."><img src="/automation-dashboard/styles/patterns/img/wf-icons/deep_predict.png" width="20px">&nbsp;<span class="name">Predict_Text_Classification_Model</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_542" style="top: 503.463px; left: 478.976px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Preview the results of the predictions generated by the trained model."><img src="/automation-dashboard/styles/patterns/img/wf-icons/deep_export_results.png" width="20px">&nbsp;<span class="name">Preview_Results</span></a></div><div class="task ui-draggable" id="jsPlumb_1_545" style="top: 149.557px; left: 379.992px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task wraps the Bing News Search API of Microsoft which provides an experience similar to Bing.com/search by returning search results that Bing determines are relevant to a user's query. The results include Web pages and may also include images, videos, and more. The task requires this third-party credential : $BING_SEARCH_API_KEY which provides access to this API. Please refer to the User documentation to learn how to add third-party credentials.
$COUNT (optional) is the number of news articles to return in the response.
$FRESHNESS (optional) filter news articles by {&quot;Day&quot;, &quot;Week&quot;, &quot;Month&quot;}.
$MARKET is the market where the results come from. Market codes are listed here: https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#market-codes
$CATEGORY (optional) is the category of articles to return. For example, Sports articles or Entertainment articles.
$SORTED_BY (optional) is the order to return the trending topics in. For example, sorted by &quot;Date&quot;
The task's output $BING_NEWS_SEARCH_OUTPUT is the result of the API call in a JSON format."><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_bing_news_search.png" width="20px">&nbsp;<span class="name">BingNews</span></a></div><div class="task ui-draggable active-task" id="jsPlumb_1_548" style="top: 258.915px; left: 516.983px; z-index: 24;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="RNN is a class of artificial neural network where connections between units form a directed cycle."><img src="/automation-dashboard/styles/patterns/img/wf-icons/deep_text_classification.png" width="20px">&nbsp;<span class="name">RNN</span></a></div><svg style="position:absolute;left:419.5px;top:188.5px" width="30" height="80" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 9 79 C 19 29 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M11.11506075,59.41104325000002 L15.014629551615812,38.58333662729514 L9.000949425784741,45.571587577581944 L1.1751738791977369,40.6974479515104 L11.11506075,59.41104325000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M11.11506075,59.41104325000002 L15.014629551615812,38.58333662729514 L9.000949425784741,45.571587577581944 L1.1751738791977369,40.6974479515104 L11.11506075,59.41104325000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:428.5px;top:307.5px" width="111.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 90.5 88 C 100.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M81.694203125,62.2538125 L69.47258728935412,44.943927856655606 L70.2946015013283,54.12675381794402 L61.34552860729815,56.343529480327305 L81.694203125,62.2538125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M81.694203125,62.2538125 L69.47258728935412,44.943927856655606 L70.2946015013283,54.12675381794402 L61.34552860729815,56.343529480327305 L81.694203125,62.2538125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:519px;top:306.5px" width="217.5" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 89 C -10 39 206.5 50 196.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M30.172271999999996,60.226527999999995 L51.35000378801664,60.936229567441586 L43.533776797892955,56.04679241794657 L47.17026820596322,47.574724769548624 L30.172271999999996,60.226527999999995" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M30.172271999999996,60.226527999999995 L51.35000378801664,60.936229567441586 L43.533776797892955,56.04679241794657 L47.17026820596322,47.574724769548624 L30.172271999999996,60.226527999999995" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:519px;top:435.5px" width="25" height="68" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 4 67 C 14 17 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M6.4127565,49.97915325000001 L11.891439752551529,29.510053860476024 L5.361664229490149,36.01866597201166 L-2.069047525436817,30.561146130985872 L6.4127565,49.97915325000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M6.4127565,49.97915325000001 L11.891439752551529,29.510053860476024 L5.361664229490149,36.01866597201166 L-2.069047525436817,30.561146130985872 L6.4127565,49.97915325000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 429px; top: 298px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 429px; top: 258px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 716px; top: 297px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 519.5px; top: 426px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected connected" style="position: absolute; height: 20px; width: 20px; left: 519.5px; top: 386px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 523.5px; top: 533px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 523.5px; top: 493px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 420px; top: 179px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable endpointDrag _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 557px; top: 289px; visibility: visible;" dragid="jsPlumb_1_562" elid="jsPlumb_1_548"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><svg style="position:absolute;left:519px;top:298.5px" width="58.5" height="98" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 97 C -10 47 47.5 50 37.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M1.0199999999999987,72.51200000000001 L16.261642595837422,57.791526808531124 L7.311878739578011,60.00551120711949 L3.7551538029568974,51.499648068953114 L1.0199999999999987,72.51200000000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
