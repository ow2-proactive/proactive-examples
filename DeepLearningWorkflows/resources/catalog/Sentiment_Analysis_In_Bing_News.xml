<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.12" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Sentiment_Analysis_In_Bing_News" onTaskError="continueJobExecution" priority="normal" projectName="1. Azure Cognitive Services" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd">
  <variables>
    <variable name="NS" value=""/>
    <variable name="NS_BATCH" value=""/>
    <variable name="NODE_ACCESS_TOKEN" value=""/>
    <variable model="PA:LIST(CSV, HTML)" name="OUTPUT_FORMAT" value="HTML"/>
    <variable model="PA:LIST(languages, sentiment, keyPhrases)" name="FUNCTION" value="sentiment"/>
    <variable name="DOCUMENTS_JSON" value=""/>
    <variable name="SEARCH_TERM" value="Donald Trump"/>
    <variable model="PA:Integer" name="COUNT" value="3"/>
    <variable name="FRESHNESS" value=""/>
    <variable name="MARKET" value="en-US"/>
    <variable name="CATEGORY" value=""/>
    <variable name="SORT_BY" value=""/>
  </variables>
  <description>
    <![CDATA[ Sentiment Analysis workflow searches for news related to a given search term using Azure Bing News API then performs a sentiment analysis using Azure Text Analytics API. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="deep-learning-workflows"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/cognitive_services.png"/>
<info name="Documentation" value="MLOS/MLOSUserGuide.html#_azure_cognitive_services"/>
<info name="NS" value="$NS"/>
<info name="NS_BATCH" value="$NS_BATCH"/>
<info name="NODE_ACCESS_TOKEN" value="$NODE_ACCESS_TOKEN"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="TextAnalytics">
      <description>
        <![CDATA[ This task wraps the Text Analytics API of Microsoft which is a cloud-based service that provides advanced natural language processing over raw text, and includes three main functions: sentiment analysis, key phrase extraction, and language detection.
The task requires this third-party credential : $TEXT_ANALYTICS_API_KEY which provides access to this API. Please refer to the User documentation to learn how to add third-party credentials.
$FUNCTION (required) is a list containing different types of text analysis. Possible values are {"sentiment, "language, "keyPhrases"}
$DOCUMENT_JSON (required) is the input json document.
The task's output $TEXT_ANALYTICS_OUTPUT is the result of the API call in a JSON format. ]]>
      </description>
      <variables>
        <variable inherited="true" model="PA:LIST(languages, sentiment, keyPhrases)" name="FUNCTION" value="sentiment"/>
        <variable inherited="true" name="DOCUMENTS_JSON" value=""/>
        <variable inherited="true" model="PA:LIST(CSV, HTML)" name="OUTPUT_FORMAT" value="HTML"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_textanalytics.png"/>
      </genericInformation>
      <depends>
        <task ref="NewsTextExtractor"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_vars_dlm3/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import requests
import json
from pprint import pprint
import pandas as pd
import csv

# You can customize the api server location
api_location="westcentralus"

# Congitive Services - Text Analytics API URL:
text_analytics_base_url = "https://{0}.api.cognitive.microsoft.com/text/analytics/v2.0/".format(api_location)

functions_list = ["languages", "sentiment", "keyPhrases"]

# READ TASK VARIABLES
if 'variables' in locals():
    if variables.get('FUNCTION') is not None:
        FUNCTION = variables.get('FUNCTION')
        if FUNCTION in functions_list:
            function_url = text_analytics_base_url + FUNCTION
        else:
            print("You must provide a valid Azure Text Analytics function name.")
            sys.exit(1)
    if variables.get("DOCUMENTS_JSON") is not None:
        DOCUMENTS_JSON = variables.get("DOCUMENTS_JSON")        
    if variables.get("OUTPUT_FORMAT") is not None:
        OUTPUT_FORMAT = variables.get("OUTPUT_FORMAT")
    # Provide a valid subscription API token
    if credentials.get("TEXT_ANALYTICS_API_KEY") is not None:
        subscription_key = credentials.get("TEXT_ANALYTICS_API_KEY")
    else:
        print("You first need to add your Azure Text Analytics Service API key to the third party credentials")
        sys.exit(1)

# Example Input documents with different languages:
# Structure:
#           {
#            "documents": [
#                {
#                  "id": "string",
#                  "text": "string"
#                }
#            ]
#           }
documents=json.loads(DOCUMENTS_JSON)

function_url = text_analytics_base_url + FUNCTION

# Send API request
headers   = {
    "Ocp-Apim-Subscription-Key": subscription_key,
    'Content-Type': 'application/json'
}
response  = requests.post(function_url, headers=headers, data=DOCUMENTS_JSON.encode('utf-8'))

# Get a JSON response
api_results = response.json()

if 'variables' in locals():
    variables.put('TEXT_ANALYTICS_OUTPUT', api_results)

# Print the results
#pprint(api_results)

print("BEGIN Export_Results")

OUTPUT_DATA = api_results["documents"]

# Convert the results into HTML
table = []
for document in OUTPUT_DATA:
    text  = next(filter(lambda d: d["id"] == document["id"], documents["documents"]))["text"]
    id  = next(filter(lambda d: d["id"] == document["id"], documents["documents"]))["id"]
    if(FUNCTION == functions_list[0]):
        res = ", ".join(["{0}({1})".format(lang["name"], lang["score"]) for lang in document["detectedLanguages"]])
    elif(FUNCTION == functions_list[1]):
        res = "({0})".format(document["score"]) 
    elif(FUNCTION == functions_list[2]):
        res = ", ".join(['"{0}"'.format(lang) for lang in document["keyPhrases"]])
    table.append("""<tr><td><a href="{0}">{0}</a></td><td>{1}</td><td>{2}</td>""".format(id, text, res))

if(FUNCTION == functions_list[0]):
    table_header_column = "Detected languages (scores)"
elif(FUNCTION == functions_list[1]):
    table_header_column = "Sentiment score"
elif(FUNCTION == functions_list[2]):
    table_header_column = "Keyphrases"
    

css_style="""table {
  border: 1px solid #999999;
  text-align: center;
  border-collapse: collapse;
  width: 100%;
}
td {
  border: 1px solid #999999;
  padding: 3px 2px;
  font-size: 13px;
  border-bottom: 1px solid #999999;
}
th {
  font-size: 17px;
  font-weight: bold;
  color: #FFFFFF;
  text-align: center;
  background: #0B6FA4;
  border-left: 2px solid #999999;
}"""
html = ("""<table><tr><th>id</th><th width=65%>Text</th><th>"""+table_header_column+"</th></tr>{0}</table>").format("\n".join(table))
html_container="""<!DOCTYPE html>
            <html>
              <head>
                <meta charset="UTF-8">
                  <meta name="description" content="{2}">
                    <style>{0}</style>
                  </head>
                  <body>{1}</body></html>""".format(css_style,html,table_header_column)
if OUTPUT_DATA != None and 'resultMetadata' in locals(): 
    #dataframe = pd.read_json(json.dumps(OUTPUT_DATA), orient='table', encoding='utf-8')
    dataframe=pd.read_html(html_container,header=0, encoding='utf-8')[0]
    
    if OUTPUT_FORMAT == 'CSV':
        result = dataframe.to_csv(index=False).encode('utf-8')
        resultMetadata.put("file.extension", ".csv")
        resultMetadata.put("file.name", "result.csv")
        resultMetadata.put("content.type", "text/csv")
    elif OUTPUT_FORMAT == 'HTML':
        result = html_container.encode('utf-8')
        resultMetadata.put("file.extension", ".html")
        resultMetadata.put("file.name", "result.html")
        resultMetadata.put("content.type", "text/html")
    print("END Export_Results")  
else:
    print('It is not possible to export the data')

# Uncomment this to render the HTML result locally in your python notebook
#from IPython.display import HTML
#HTML(html_container)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            364.00390625
        </positionTop>
        <positionLeft>
            138.33984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="BingNews">
      <description>
        <![CDATA[ This task wraps the Bing News Search API of Microsoft which provides an experience similar to Bing.com/search by returning search results that Bing determines are relevant to a user's query. The results include Web pages and may also include images, videos, and more. The task requires this third-party credential : $BING_SEARCH_API_KEY which provides access to this API. Please refer to the User documentation to learn how to add third-party credentials.
$COUNT (optional) is the number of news articles to return in the response.
$FRESHNESS (optional) filter news articles by {"Day", "Week", "Month"}.
$MARKET is the market where the results come from. Market codes are listed here: https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#market-codes
$CATEGORY (optional) is the category of articles to return. For example, Sports articles or Entertainment articles.
$SORTED_BY (optional) is the order to return the trending topics in. For example, sorted by "Date"
The task's output $BING_NEWS_SEARCH_OUTPUT is the result of the API call in a JSON format. ]]>
      </description>
      <variables>
        <variable inherited="true" name="SEARCH_TERM" value="activeeon"/>
        <variable inherited="true" model="PA:Integer" name="COUNT" value="-1"/>
        <variable inherited="true" name="FRESHNESS" value=""/>
        <variable inherited="true" name="MARKET" value=""/>
        <variable inherited="true" name="CATEGORY" value=""/>
        <variable inherited="true" name="SORT_BY" value=""/>
        <variable inherited="true" model="PA:LIST(CSV, HTML)" name="OUTPUT_FORMAT" value="HTML"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_bing_news_search.png"/>
      </genericInformation>
      <forkEnvironment>
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_vars_dlm3/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import requests
import json
import urllib
from pprint import pprint
import pandas as pd
import re

# You can customize the api server location
#api_location="westcentralus"

# Congitive Services - Bing Video Search API URL:
#bing_news_search_url = "https://{0}.api.cognitive.microsoft.com/bing/v7.0/news/search".format(api_location)
bing_news_search_url = "https://api.cognitive.microsoft.com/bing/v7.0/news/search"

# READ TASK VARIABLES
if 'variables' in locals():
    if variables.get("SEARCH_TERM") is not None:
        SEARCH_TERM = variables.get("SEARCH_TERM")
    else:
        print("You first need to specify the search term")
        sys.exit(1)
    if variables.get("COUNT") is not None:
        COUNT = int(variables.get("COUNT"))
    if variables.get("FRESHNESS") is not None:
        FRESHNESS = variables.get("FRESHNESS")
    if variables.get("MARKET") is not None:
        MARKET = variables.get("MARKET")
    if variables.get("CATEGORY") is not None:
        CATEGORY = variables.get("CATEGORY")
    if variables.get("SORT_BY") is not None:
        SORT_BY = variables.get("SORT_BY")
    if variables.get("OUTPUT_FORMAT") is not None:
        OUTPUT_FORMAT = variables.get("OUTPUT_FORMAT")
    # Provide a valid subscription API token
    if credentials.get("BING_SEARCH_API_KEY") is not None:
        subscription_key = credentials.get("BING_SEARCH_API_KEY")
    else:
        print("You first need to add your Azure Cognitive Services API key to the third party credentials")
        sys.exit(1)

# Set API request parameters
#params  = {"q": SEARCH_TERM, "count":COUNT, "mkt": MARKET_CODE, "freshness": FRESHNESS, "category":CATEGORY}
params={'q':SEARCH_TERM}
if COUNT >0:
    params['count'] = COUNT
# Market Code: https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#market-codes
if MARKET is not None and len(MARKET)>0:
    params['mkt'] = MARKET
# Freshness values: 'Day', 'Week', 'Month'
if FRESHNESS is not None and len(FRESHNESS)>0:
    params['freshness'] = FRESHNESS
if CATEGORY is not None and len(CATEGORY)>0:
    params['category'] = CATEGORY
if SORT_BY is not None and len(SORT_BY)>0:
    params['sortBy'] = SORT_BY

# Send API request
headers   = {
    "Ocp-Apim-Subscription-Key": subscription_key,
    'Content-Type': 'text/plain'
}
response = requests.get(bing_news_search_url, headers=headers, params=params)
response.raise_for_status()

# Get a JSON response
search_results = response.json()

# Print the results
#pprint(search_results)

if 'variables' in locals():
    variables.put('BING_NEWS_SEARCH_OUTPUT', search_results)

print("BEGIN Export_Results")

OUTPUT_DATA = search_results["value"]
table = []
for document in OUTPUT_DATA:
    try:
        image=document["image"]
    except KeyError:
        video=None
        pass
    description= document["description"]
    name= document["name"]
    url= document["url"]
    table.append("""<tr><td>{0}</td><td>{1}</td><td><a href="{2}">{2}</a></td>""".format(name, description, url))

css_style="""table {
  border: 1px solid #999999;
  text-align: center;
  border-collapse: collapse;
  width: 100%;
}
td {
  border: 1px solid #999999;
  padding: 3px 2px;
  font-size: 13px;
  border-bottom: 1px solid #999999;
}
th {
  font-size: 17px;
  font-weight: bold;
  color: #FFFFFF;
  text-align: center;
  background: #0B6FA4;
  border-left: 2px solid #999999;
}"""
html = ("""<table><tr><th>Title</th><th>Snippet</th><th>Url</th></tr>{0}</table>""").format("\n".join(table))
html_container="""<!DOCTYPE html>
                  <html>
                    <head>
                      <meta charset="UTF-8">
                        <meta name="description" content="Bing Video Search API Results">
                          <style>{0}</style>
                        </head>
                        <body>{1}</body></html>""".format(css_style,html)

if OUTPUT_DATA != None and 'resultMetadata' in locals(): 
    dataframe=pd.read_html(html_container,header=0, encoding='utf-8')[0]
    
    if OUTPUT_FORMAT == 'CSV':
        result = dataframe.to_csv(index=False).encode('utf-8')
        resultMetadata.put("file.extension", ".csv")
        resultMetadata.put("file.name", "result.csv")
        resultMetadata.put("content.type", "text/csv")
    elif OUTPUT_FORMAT == 'HTML':
        result = html_container.encode('utf-8')
        resultMetadata.put("file.extension", ".html")
        resultMetadata.put("file.name", "result.html")
        resultMetadata.put("content.type", "text/html")
    print("END Export_Results")  
else:
    print('It is not possible to export the data')

# Uncomment this to render the HTML result locally in your python notebook
#from IPython.display import HTML
#HTML(html_container)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            108.0078125
        </positionTop>
        <positionLeft>
            138.33984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="NewsTextExtractor">
      <description>
        <![CDATA[ The simplest task, ran by a python engine. ]]>
      </description>
      <depends>
        <task ref="BingNews"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_vars_dlm3/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import re
import json

print(variables.get("BING_NEWS_SEARCH_OUTPUT"))
OUTPUT_DATA=variables.get("BING_NEWS_SEARCH_OUTPUT")["value"]
text_json={'documents':[]}
for document in OUTPUT_DATA:
    description=document["description"]
    news_url=document["url"]
    language=re.search(r"([\w]{2})-[\w]+", variables.get("MARKET")).group(1)
    text_json['documents'].append({'id':news_url, 'language':language, 'text': description})
    

variables.put("DOCUMENTS_JSON", json.dumps(text_json))
result=json.dumps(text_json)  
print(result)
#print("image_urls= ", image_urls)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            235.99609375
        </positionTop>
        <positionLeft>
            138.33984375
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2646px;
            height:3501px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-103.0078125px;left:-133.33984375px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_503" style="top: 364.012px; left: 138.356px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task wraps the Text Analytics API of Microsoft which is a cloud-based service that provides advanced natural language processing over raw text, and includes three main functions: sentiment analysis, key phrase extraction, and language detection.
The task requires this third-party credential : $TEXT_ANALYTICS_API_KEY which provides access to this API. Please refer to the User documentation to learn how to add third-party credentials.
$FUNCTION (required) is a list containing different types of text analysis. Possible values are {&quot;sentiment, &quot;language, &quot;keyPhrases&quot;}
$DOCUMENT_JSON (required) is the input json document.
The task's output $TEXT_ANALYTICS_OUTPUT is the result of the API call in a JSON format."><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_textanalytics.png" width="20px">&nbsp;<span class="name">TextAnalytics</span></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_506" style="top: 108.012px; left: 138.356px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task wraps the Bing News Search API of Microsoft which provides an experience similar to Bing.com/search by returning search results that Bing determines are relevant to a user's query. The results include Web pages and may also include images, videos, and more. The task requires this third-party credential : $BING_SEARCH_API_KEY which provides access to this API. Please refer to the User documentation to learn how to add third-party credentials.
$COUNT (optional) is the number of news articles to return in the response.
$FRESHNESS (optional) filter news articles by {&quot;Day&quot;, &quot;Week&quot;, &quot;Month&quot;}.
$MARKET is the market where the results come from. Market codes are listed here: https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#market-codes
$CATEGORY (optional) is the category of articles to return. For example, Sports articles or Entertainment articles.
$SORTED_BY (optional) is the order to return the trending topics in. For example, sorted by &quot;Date&quot;
The task's output $BING_NEWS_SEARCH_OUTPUT is the result of the API call in a JSON format."><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_bing_news_search.png" width="20px">&nbsp;<span class="name">BingNews</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_509" style="top: 236.012px; left: 138.356px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="The simplest task, ran by a python engine."><img src="images/Python.png" width="20px">&nbsp;<span class="name">NewsTextExtractor</span></a></div><svg style="position:absolute;left:179px;top:275.5px" width="35.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 88 C -10 38 24.5 50 14.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.5936480000000006,66.303232 L9.583726311642035,48.301390330397275 L1.4475197586608088,52.63753411574681 L-4.081971572611152,45.26022257173647 L-1.5936480000000006,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.5936480000000006,66.303232 L9.583726311642035,48.301390330397275 L1.4475197586608088,52.63753411574681 L-4.081971572611152,45.26022257173647 L-1.5936480000000006,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:178.5px;top:147.5px" width="36" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 15 88 C 25 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M16.55088,66.303232 L18.90737940053047,45.245052815291274 L13.424194637075896,52.656846447727325 L5.260993848257804,48.37173817821538 L16.55088,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M16.55088,66.303232 L18.90737940053047,45.245052815291274 L13.424194637075896,52.656846447727325 L5.260993848257804,48.37173817821538 L16.55088,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 179.5px; top: 394px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 179.5px; top: 354px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 179px; top: 138px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 194px; top: 266px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 194px; top: 226px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
