<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.12" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="CNTK_ConvNet" onTaskError="continueJobExecution" priority="normal" projectName="2. Microsoft Cognitive Toolkit" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd">
  <variables>
    <variable model="PA:Boolean" name="DOCKER_ENABLED" value="True"/>
    <variable model="PA:Boolean" name="DOCKER_GPU_ENABLED" value="False"/>
    <variable model="" name="NODE_ACCESS_TOKEN" value=""/>
    <variable model="PA:Integer" name="EPOCHS" value="2"/>
  </variables>
  <description>
    <![CDATA[ CNTK ConvNet workflow trains a convolutional neural network (CNN) on CIFAR-10 dataset. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="deep-learning-workflows"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/cntk.png"/>
<info name="NODE_ACCESS_TOKEN" value="$NODE_ACCESS_TOKEN"/>
<info name="Documentation" value="MLOS/MLOSUserGuide.html#_microsoft_cognitive_toolkit"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="CNTK_ConvNet">
      <description>
        <![CDATA[ Train a convolutional neural network (CNN) on CIFAR-10 dataset. https://github.com/Microsoft/CNTK/tree/master/Examples/Image/Classification/ConvNet ]]>
      </description>
      <variables>
        <variable inherited="true" model="PA:Boolean" name="DOCKER_ENABLED" value="True"/>
      </variables>
      <genericInformation>
        <info name="PYTHON_COMMAND" value="/root/anaconda3/envs/cntk-py35/bin/python"/>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/cntk.png"/>
      </genericInformation>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_nvidia_cntk_v2/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="bash">
            <![CDATA[
wget https://raw.githubusercontent.com/Microsoft/CNTK/master/Examples/Image/DataSets/CIFAR-10/CIFAR-10_mean.xml
wget https://raw.githubusercontent.com/Microsoft/CNTK/master/Examples/Image/DataSets/CIFAR-10/cifar_utils.py
wget https://raw.githubusercontent.com/Microsoft/CNTK/master/Examples/Image/DataSets/CIFAR-10/install_cifar10.py
/root/anaconda3/envs/cntk-py35/bin/python install_cifar10.py
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
# Copyright (c) Microsoft. All rights reserved.
# Licensed under the MIT license. See LICENSE.md file in the project root
# for full license information.
# ==============================================================================
# Requirements:
# wget https://raw.githubusercontent.com/Microsoft/CNTK/master/Examples/Image/DataSets/CIFAR-10/CIFAR-10_mean.xml
# wget https://raw.githubusercontent.com/Microsoft/CNTK/master/Examples/Image/DataSets/CIFAR-10/cifar_utils.py
# wget https://raw.githubusercontent.com/Microsoft/CNTK/master/Examples/Image/DataSets/CIFAR-10/install_cifar10.py
# /root/anaconda3/envs/cntk-py35/bin/python install_cifar10.py

import numpy as np
import sys
import os
import cntk as C
import _cntk_py

# explicitly set the device to GPU
#from cntk.device import try_set_default_device, gpu
#try_set_default_device(gpu(0))

print('CNTK VERSION: ' + str(C.__version__))
print('CNTK DEVICES:')
print(C.all_devices())

# Paths relative to current python file.
abs_path = '.'
#abs_path  = os.path.dirname(os.path.abspath(__file__))
data_path = abs_path
#data_path = os.path.join(abs_path, "..", "..", "..", "DataSets", "CIFAR-10")
model_path = os.path.join(abs_path, "Models")

# Define the reader for both training and evaluation action.
def create_reader(path, is_training, input_dim, label_dim):
  return C.io.MinibatchSource(C.io.CTFDeserializer(path, C.io.StreamDefs(
      features  = C.io.StreamDef(field='features', shape=input_dim),
      labels    = C.io.StreamDef(field='labels',   shape=label_dim)
  )), randomize=is_training, max_sweeps = C.io.INFINITELY_REPEAT if is_training else 1)


# Creates and trains a feedforward classification model for MNIST images
def convnet_cifar10(debug_output=False, data_path=data_path, epoch_size=50000, minibatch_size=64, max_epochs=int(variables.get("EPOCHS"))):
  _cntk_py.set_computation_network_trace_level(0)

  image_height = 32
  image_width  = 32
  num_channels = 3
  input_dim = image_height * image_width * num_channels
  num_output_classes = 10

  # Input variables denoting the features and label data
  input_var = C.ops.input_variable((num_channels, image_height, image_width), np.float32)
  label_var = C.ops.input_variable(num_output_classes, np.float32)

  # Instantiate the feedforward classification model
  input_removemean = C.ops.minus(input_var, C.ops.constant(128))
  scaled_input = C.ops.element_times(C.ops.constant(0.00390625), input_removemean)

  with C.layers.default_options(activation=C.ops.relu, pad=True):
    z = C.layers.Sequential([
        C.layers.For(range(2), lambda : [
            C.layers.Convolution2D((3,3), 64),
            C.layers.Convolution2D((3,3), 64),
            C.layers.MaxPooling((3,3), (2,2))
        ]),
        C.layers.For(range(2), lambda i: [
            C.layers.Dense([256,128][i]),
            C.layers.Dropout(0.5)
        ]),
        C.layers.Dense(num_output_classes, activation=None)
    ])(scaled_input)

  ce = C.losses.cross_entropy_with_softmax(z, label_var)
  pe = C.metrics.classification_error(z, label_var)

  reader_train = create_reader(os.path.join(data_path, 'Train_cntk_text.txt'), True, input_dim, num_output_classes)

  # Set learning parameters
  lr_per_sample          = [0.0015625]*10 + [0.00046875]*10 + [0.00015625]
  lr_schedule            = C.learning_parameter_schedule(lr_per_sample, minibatch_size=1, epoch_size=epoch_size)
  mm                     = [0.9] * 20
  mm_schedule            = C.learners.momentum_schedule(mm, epoch_size=epoch_size, minibatch_size=minibatch_size)
  l2_reg_weight          = 0.002

  # Instantiate the trainer object to drive the model training
  learner = C.learners.momentum_sgd(z.parameters, lr_schedule, mm_schedule, minibatch_size=minibatch_size,
                                      l2_regularization_weight = l2_reg_weight)
  progress_printer = C.logging.ProgressPrinter(tag='Training', num_epochs=max_epochs)
  trainer = C.Trainer(z, (ce, pe), learner, progress_printer)

  # define mapping from reader streams to network inputs
  input_map = {
      input_var  : reader_train.streams.features,
      label_var  : reader_train.streams.labels
  }

  C.logging.log_number_of_parameters(z) ; print()

  # Get minibatches of images to train with and perform model training
  for epoch in range(max_epochs):       # loop over epochs
    sample_count = 0
    while sample_count < epoch_size:  # loop over minibatches in the epoch
      data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map) # fetch minibatch.
      trainer.train_minibatch(data)                                   # update model with it
      sample_count += trainer.previous_minibatch_sample_count         # count samples processed so far

    trainer.summarize_training_progress()
    z.save(os.path.join(model_path, "ConvNet_CIFAR10_{}.dnn".format(epoch)))

  # Load test data
  reader_test = create_reader(os.path.join(data_path, 'Test_cntk_text.txt'), False, input_dim, num_output_classes)

  input_map = {
      input_var  : reader_test.streams.features,
      label_var  : reader_test.streams.labels
  }

  # Test data for trained model
  epoch_size = 5
  minibatch_size = 16

  # process minibatches and evaluate the model
  metric_numer    = 0
  metric_denom    = 0
  sample_count    = 0
  minibatch_index = 0

  while sample_count < epoch_size:
    current_minibatch = min(minibatch_size, epoch_size - sample_count)
    # Fetch next test min batch.
    data = reader_test.next_minibatch(current_minibatch, input_map=input_map)
    # minibatch data to be trained with
    metric_numer += trainer.test_minibatch(data) * current_minibatch
    metric_denom += current_minibatch
    # Keep track of the number of samples processed so far.
    sample_count += data[label_var].num_samples
    minibatch_index += 1

  print("")
  print("Final Results: Minibatch[1-{}]: errs = {:0.2f}% * {}".format(minibatch_index+1, (metric_numer*100.0)/metric_denom, metric_denom))
  print("")

  return metric_numer/metric_denom

if __name__=='__main__':
  convnet_cifar10()
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            144.47265625
        </positionTop>
        <positionLeft>
            214.35546875
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2646px;
            height:3501px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-139.47265625px;left:-209.35546875px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_500" style="top: 144.477px; left: 214.356px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Train a convolutional neural network (CNN) on CIFAR-10 dataset. https://github.com/Microsoft/CNTK/tree/master/Examples/Image/Classification/ConvNet"><img src="/automation-dashboard/styles/patterns/img/wf-icons/cntk.png" width="20px">&nbsp;<span class="name">CNTK_ConvNet</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 262px; top: 175px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
