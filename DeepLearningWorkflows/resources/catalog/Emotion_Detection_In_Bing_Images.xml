<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.10"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
    name="Emotion_Detection_In_Bing_Images" projectName="1. Azure Cognitive Services"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="SEARCH_TERM" value="Denis Caromel" />
    <variable name="LICENCE" value="" />
    <variable name="IMAGE_TYPE" value="" />
    <variable name="OUTPUT_FORMAT" value="HTML" model="PA:LIST(CSV, HTML)"/>
    <variable name="COUNT" value="10" />
    <variable name="MARKET" value="fr-FR" />
  </variables>
  <description>
    <![CDATA[ This workflow is a mashup that searches for images of a person using Azure Bing Image Search then performs an emotion detection using Azure Emotion API. ]]>
  </description>
  <genericInformation>
    <info name="pca.action.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/cognitive_services.png"/>
  </genericInformation>
  <taskFlow>
    <task name="BingImageSearch">
      <description>
        <![CDATA[ This task wraps the Bing Image Search API of Microsoft which provides an experience similar to Bing.com/images by returning images that Bing determines are relevant to a query.
The task requires this third-party credential : $BING_SEARCH_API_KEY which provides access to this API. Please refer to the User documentation to learn how to add third-party credentials.
$SEARCH_TERM (required) is the user's search query string.
$LICENCE (optional) filters images by the following license types: {"Any", "Public", "Share" ,"ShareCommercially" ,"Modify" ,"ModifyCommercially", "All"}
$IMAGE_TYPE (optional) filter images by the following image types: {"AnimatedGif", "Clipart", "Line" ,"Photo" ,"Modify" ,"Shopping", "Transparent"}
The task's output $BING_IMAGE_SEARCH_OUTPUT is the result of the API call in a JSON format. ]]>
      </description>
      <variables>
        <variable name="SEARCH_TERM" value="activeeon" inherited="true" />
        <variable name="LICENCE" value="" inherited="true" />
        <variable name="IMAGE_TYPE" value="" inherited="true" />
        <variable name="COUNT" value="2" inherited="true" model="PA:Integer"/>
        <variable name="OUTPUT_FORMAT" value="HTML" inherited="true" model="PA:LIST(CSV, HTML)"/>
        <variable name="MARKET" value="" inherited="true" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_bing_image_search.svg"/>
      </genericInformation>
      <forkEnvironment javaHome="${PA_SCHEDULER_HOME}/jre" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters 
containerName = 'activeeon/dlm3' 
dockerRunCommand =  'docker run ' 
dockerParameters = '--rm ' 
# Prepare ProActive home volume 
paHomeHost = variables.get("PA_SCHEDULER_HOME") 
paHomeContainer = variables.get("PA_SCHEDULER_HOME") 
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' 
# Prepare working directory (For Dataspaces and serialized task file) 
workspaceHost = localspace 
workspaceContainer = localspace 
workspaceVolume = '-v '+localspace +':'+localspace+' ' 
# Prepare container working directory 
containerWorkingDirectory = '-w '+workspaceContainer+' ' 
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node 
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="bash">
            <![CDATA[
pip install lxml
pip install BeautifulSoup4
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import requests
import json
import urllib
from pprint import pprint
import pandas as pd

# You can customize the api server location
#api_location="westcentralus"

# Congitive Services - Bing Image Search API URL:
#bing_image_search_url = "https://{0}.api.cognitive.microsoft.com/bing/v7.0/images/search".format(api_location)
bing_image_search_url = "https://api.cognitive.microsoft.com/bing/v7.0/images/search"


# READ TASK VARIABLES
if 'variables' in locals():
    if variables.get("SEARCH_TERM") is not None:
        SEARCH_TERM = variables.get("SEARCH_TERM")
    else:
        print("You first need to specify the search term")
        sys.exit(1)
    if variables.get("LICENCE") is not None:
        LICENCE = variables.get("LICENCE")
    if variables.get("IMAGE_TYPE") is not None:
        IMAGE_TYPE = variables.get("IMAGE_TYPE")
    if variables.get("COUNT") is not None:
        COUNT = int(variables.get("COUNT"))
    if variables.get("MARKET") is not None:
        MARKET = variables.get("MARKET")
    if variables.get("OUTPUT_FORMAT") is not None:
        OUTPUT_FORMAT = variables.get("OUTPUT_FORMAT")
    # Provide a valid subscription API token
    if credentials.get("BING_SEARCH_API_KEY") is not None:
        subscription_key = credentials.get("BING_SEARCH_API_KEY")
    else:
        print("You first need to add your Azure Cognitive Services API key to the third party credentials")
        sys.exit(1)

# Set API request parameters
#params  = {"q": SEARCH_TERM, "licence": LICENCE, "imageType": IMAGE_TYPE}
params={'q':SEARCH_TERM}
if LICENCE is not None and len(LICENCE)>0:
    params['licence'] = LICENCE
if IMAGE_TYPE is not None and len(IMAGE_TYPE)>0:
    params['imageType'] = IMAGE_TYPE
if COUNT >0:
    params['count'] = COUNT
# Market Code: https://docs.microsoft.com/fr-fr/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes
if MARKET is not None and len(MARKET)>0:
    params['mkt'] = MARKET

# Send API request
headers   = {
    "Ocp-Apim-Subscription-Key": subscription_key,
    'Content-Type': 'text/plain'
}
response = requests.get(bing_image_search_url, headers=headers, params=params)
response.raise_for_status()

# Get a JSON response
search_results = response.json()

# Print the results
#pprint(search_results)

if 'variables' in locals():
    variables.put('BING_IMAGE_SEARCH_OUTPUT', search_results)

OUTPUT_DATA = search_results["value"]
table = []
for document in OUTPUT_DATA:
    thumbnail= document["thumbnailUrl"]
    image_url= document["contentUrl"]
    encodingFormat= document["encodingFormat"]
    name= document["name"]
    table.append("""<tr><td><a href="{3}"><img src="{0}" alt="{2}" height="150" width="150"/></a></td><td>{1}</td><td>{2}</td>""".format(thumbnail, encodingFormat, name, image_url))
    
css_style="""table {
  border: 1px solid #999999;
  text-align: center;
  border-collapse: collapse;
  width: 100%;
}
td {
  border: 1px solid #999999;
  padding: 3px 2px;
  font-size: 13px;
  border-bottom: 1px solid #999999;
}
th {
  font-size: 17px;
  font-weight: bold;
  color: #FFFFFF;
  text-align: center;
  background: #0B6FA4;
  border-left: 2px solid #999999;
}"""
html = ("""<table><tr><th width="100">Image</th><th width="100">Type</th><th>Description</th></tr>{0}</table>""").format("\n".join(table))
html_container="""
            
            
            <!DOCTYPE html>
            <html>
              <head>
                <meta charset="UTF-8">
                  <meta name="description" content="Bing Video Search API Results">
                    <style>{0}</style>
                  </head>
                  <body>{1}</body></html>""".format(css_style,html)
if OUTPUT_DATA != None and 'resultMetadata' in locals(): 
    dataframe=pd.read_html(html_container,header=0, encoding='utf-8')[0]
    
    if OUTPUT_FORMAT == 'JSON':
        result = json.dumps(search_results).encode('utf-8')
        resultMetadata.put("file.extension", ".json")
        resultMetadata.put("file.name", "result.json")
        resultMetadata.put("content.type", "application/json")
    elif OUTPUT_FORMAT == 'CSV':
        result = dataframe.to_csv(index=False)
        resultMetadata.put("file.extension", ".csv")
        resultMetadata.put("file.name", "result.csv")
        resultMetadata.put("content.type", "text/csv")
    elif OUTPUT_FORMAT == 'HTML':
        result = html_container.encode('utf-8')
        resultMetadata.put("file.extension", ".html")
        resultMetadata.put("file.name", "result.html")
        resultMetadata.put("content.type", "text/html")
    print("END Export_Results")  
else:
    print('It is not possible to export the data')

# Uncomment this to render the HTML result locally in your python notebook
#from IPython.display import HTML
#HTML(html_container)
]]>
                </code>
              </script>
            </scriptExecutable>
          </task>
          <task name="Split">
            <description>
              <![CDATA[ This task defines some input, here strings to be processed. ]]>
            </description>
            <genericInformation>
              <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
            </genericInformation>
            <depends>
              <task ref="BingImageSearch"/>
            </depends>
            <scriptExecutable>
              <script>
                <code language="cpython">
                  <![CDATA[
print(variables.get("BING_IMAGE_SEARCH_OUTPUT"))
OUTPUT_DATA=variables.get("BING_IMAGE_SEARCH_OUTPUT")["value"]
urls=[]
for document in OUTPUT_DATA:
    image_url=str('{0}'.format(document["contentUrl"]))
    print(image_url)
    urls.append(image_url)

result=urls  
print(result)
#print("image_urls= ", image_urls)
]]>
                </code>
              </script>
            </scriptExecutable>
            <controlFlow >
              <replicate>
                <script>
                  <code language="groovy">
                    <![CDATA[
runs=variables.get("COUNT")
]]>
                  </code>
                </script>
              </replicate>
            </controlFlow>
          </task>
          <task name="Merge">
            <description>
              <![CDATA[ As a merge operation, we simply print the results from previous tasks. ]]>
            </description>
            <genericInformation>
              <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
            </genericInformation>
            <depends>
              <task ref="Emotion_API"/>
            </depends>
            <scriptExecutable>
              <script>
                <code language="cpython">
                  <![CDATA[
from bs4 import BeautifulSoup
import copy


print("results=",results)
print("values=",results[1].value().decode("utf-8"))
merged_html=BeautifulSoup(str(results[0].value().decode("utf-8") ))
print('len==',len(results))
i=0
for html in results:
    if i==0:
    	i=i+1
        continue
    i=i+1
    soup = BeautifulSoup(str(html.value()).decode('utf-8'))
    print('***************')
    print('BODY==',soup)
    for element in soup.body:
    	print('element=====',element)
        merged_html.body.append(copy.copy(element))

result=str(merged_html).encode('utf-8')
resultMetadata.put("file.extension", ".html")
resultMetadata.put("file.name", "result.html")
resultMetadata.put("content.type", "text/html")
]]>
                </code>
              </script>
            </scriptExecutable>
          </task>
          <task name="Emotion_API">
            <description>
              <![CDATA[ Welcome to the Microsoft Emotion API, which allows you to build more personalized apps with Microsoft as cutting edge cloud-based emotion recognition algorithm. https://azure.microsoft.com/en-us/services/cognitive-services/emotion/ ]]>
            </description>
            <variables>
              <variable name="AZURE_EMOTION_API_ENDPOINT" value="https://westus.api.cognitive.microsoft.com" inherited="false" />
              <variable name="IMAGE_URL" value="https://upload.wikimedia.org/wikipedia/commons/c/c3/RH_Louise_Lillian_Gish.jpg" inherited="true" />
            </variables>
            <genericInformation>
              <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_emotion.svg"/>
            </genericInformation>
            <depends>
              <task ref="Split"/>
            </depends>
            <forkEnvironment javaHome="${PA_SCHEDULER_HOME}/jre" >
              <envScript>
                <script>
                  <code language="python">
                    <![CDATA[
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters 
containerName = 'activeeon/dlm3' 
dockerRunCommand =  'docker run ' 
dockerParameters = '--rm ' 
# Prepare ProActive home volume 
paHomeHost = variables.get("PA_SCHEDULER_HOME") 
paHomeContainer = variables.get("PA_SCHEDULER_HOME") 
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' 
# Prepare working directory (For Dataspaces and serialized task file) 
workspaceHost = localspace 
workspaceContainer = localspace 
workspaceVolume = '-v '+localspace +':'+localspace+' ' 
# Prepare container working directory 
containerWorkingDirectory = '-w '+workspaceContainer+' ' 
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node 
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
                  </code>
                </script>
              </envScript>
            </forkEnvironment>
            <scriptExecutable>
              <script>
                <code language="cpython">
                  <![CDATA[
print("BEGIN Emotion_API")

import http.client, urllib.request, urllib.parse, urllib.error, base64, requests, json
import pandas as pd
from pandas.io.json import json_normalize

if 'variables' in locals():
  replication = variables.get('PA_TASK_REPLICATION')
  IMAGE_URL = str(results[0].value()[replication])
  #print(URL_IMAGE)
  #print(variables.get("URL_IMAGE"))
  #IMAGE_URL = variables.get("IMAGE_URL")
  # Replace the subscription_key string value with your valid subscription key.
  subscription_key = credentials.get("AZURE_EMOTION_API_KEY")
  # Replace or verify the region.
  #
  # You must use the same region in your REST API call as you used to obtain your subscription keys.
  # For example, if you obtained your subscription keys from the westus region, replace 
  # "westcentralus" in the URI below with "westus".
  #
  # NOTE: Free trial subscription keys are generated in the westcentralus region, so if you are using
  # a free trial subscription key, you should not need to change this region.
  #uri_base = 'https://westcentralus.api.cognitive.microsoft.com'
  uri_base = variables.get("AZURE_EMOTION_API_ENDPOINT")

# Request headers.
headers = {
    'Content-Type': 'application/json',
    'Ocp-Apim-Subscription-Key': subscription_key,
}

# Request parameters.
params = {
    'returnFaceId': 'true',
    'returnFaceLandmarks': 'false',
    'returnFaceAttributes': 'age,gender,headPose,smile,facialHair,glasses,emotion,hair,makeup,occlusion,accessories,blur,exposure,noise',
}

# Body. The URL of a JPEG image to analyze.
body = {'url': IMAGE_URL}

try:
  # Execute the REST API call and get the response.
  #response = requests.request('POST', uri_base + '/face/v1.0/detect', json=body, data=None, headers=headers, params=params)
  response = requests.request('POST', uri_base + '/emotion/v1.0/recognize', json=body, data=None, headers=headers, params=params)
  print('Response:')
  print(response)
  parsed = json.loads(response.text)
  if len(response.text) > 2 and response.status_code == 200:
    emotion = parsed[0]["scores"]
  else:
    emotion = {'error': 'face or emotion not detected.' }
  #rect = parsed[0]["faceAttributes"]["emotion"]
  #print(rect)
  #print (json.dumps(max(rect, key=rect.get), sort_keys=True, indent=2))
except Exception as ex:
  print('Error:')
  print(ex)

output_json = json.dumps(parsed)
print(output_json)

if 'variables' in locals():
  variables.put("AZURE_EMOTION_API_OUTPUT_JSON", output_json)

df = json_normalize(emotion)

table = []
table.append("""<tr><td><a href="{0}"><img src="{0}" height="150" width="150"/></a></td><td>{1}</td>""".format(IMAGE_URL, df.to_html()))
        
css_style="""
table {
  border: 1px solid #999999;
  text-align: center;
  border-collapse: collapse;
  width: 100%;
}
td {
  border: 1px solid #999999;
  padding: 3px 2px;
  font-size: 13px;
  border-bottom: 1px solid #999999;
}
th {
  font-size: 17px;
  font-weight: bold;
  color: #FFFFFF;
  text-align: center;
  background: #0B6FA4;
  border-left: 2px solid #999999
}
"""

html = """<table><th width=200>Image</th><th>Reponse</th></tr>{0}</table>""".format("\n".join(table))

html_container = """
                  <!DOCTYPE html>
                  <html>
                    <head>
                      <meta charset="UTF-8">
                        <meta name="description" content="Face API">
                          <style>{0}</style>
                        </head>
                        <body>{1}</body></html>
""".format(css_style, html)

if 'variables' in locals():
  result = html_container.encode('utf-8')
  resultMetadata.put("file.extension", ".html")
  resultMetadata.put("file.name", "result.html")
  resultMetadata.put("content.type", "text/html")

print("END Emotion_API")
]]>
                      </code>
                    </script>
                  </scriptExecutable>
                  <controlFlow block="none"></controlFlow>
                </task>
              </taskFlow>
            </job>