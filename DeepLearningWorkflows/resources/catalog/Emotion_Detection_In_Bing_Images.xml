<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.12" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Emotion_Detection_In_Bing_Images" onTaskError="continueJobExecution" priority="normal" projectName="1. Azure Cognitive Services" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd">
  <variables>
    <variable name="NATIVE_SCHEDULER" value=""/>
    <variable name="NATIVE_SCHEDULER_PARAMS" value=""/>
    <variable name="NODE_ACCESS_TOKEN" value=""/>
    <variable model="PA:LIST(no-container,docker,podman,singularity)" name="CONTAINER_PLATFORM" value="docker"/>
    <variable model="PA:Boolean" name="CONTAINER_GPU_ENABLED" value="True"/>
    <variable model="PA:LIST(,docker://activeeon/dlm3,docker://activeeon/cuda,docker://activeeon/cuda2)" name="CONTAINER_IMAGE" value=""/>
    <variable name="SEARCH_TERM" value="Denis Caromel"/>
    <variable name="LICENCE" value=""/>
    <variable name="IMAGE_TYPE" value=""/>
    <variable model="PA:LIST(CSV, HTML)" name="OUTPUT_FORMAT" value="HTML"/>
    <variable name="COUNT" value="10"/>
    <variable name="MARKET" value="fr-FR"/>
  </variables>
  <description>
    <![CDATA[ Search for images of a person using Azure Bing Image Search then perform an emotion detection using Azure Emotion API. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="deep-learning-workflows"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/cognitive_services.png"/>
<info name="NS" value="$NATIVE_SCHEDULER"/>
<info name="PYTHON_COMMAND" value="python3"/>
<info name="NODE_ACCESS_TOKEN" value="$NODE_ACCESS_TOKEN"/>
<info name="Documentation" value="PML/PMLUserGuide.html#_azure_cognitive_services"/>
<info name="NS_BATCH" value="$NATIVE_SCHEDULER_PARAMS"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="BingImageSearch">
      <description>
        <![CDATA[ This task wraps the Bing Image Search API of Microsoft which provides an experience similar to Bing.com/images by returning images that Bing determines are relevant to a query.
The task requires this third-party credential : $BING_SEARCH_API_KEY which provides access to this API. Please refer to the User documentation to learn how to add third-party credentials.
$SEARCH_TERM (required) is the user's search query string.
$LICENCE (optional) filters images by the following license types: {"Any", "Public", "Share" ,"ShareCommercially" ,"Modify" ,"ModifyCommercially", "All"}
$IMAGE_TYPE (optional) filter images by the following image types: {"AnimatedGif", "Clipart", "Line" ,"Photo" ,"Modify" ,"Shopping", "Transparent"}
The task's output $BING_IMAGE_SEARCH_OUTPUT is the result of the API call in a JSON format. ]]>
      </description>
      <variables>
        <variable inherited="true" name="SEARCH_TERM" value="activeeon"/>
        <variable inherited="true" name="LICENCE" value=""/>
        <variable inherited="true" name="IMAGE_TYPE" value=""/>
        <variable inherited="true" model="PA:Integer" name="COUNT" value="2"/>
        <variable inherited="true" model="PA:LIST(CSV, HTML)" name="OUTPUT_FORMAT" value="HTML"/>
        <variable inherited="true" name="MARKET" value=""/>
      </variables>
      <genericInformation>
        <info name="TASK.ICON" value="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_bing_image_search.png"/>
      </genericInformation>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import requests
import json
import urllib
from pprint import pprint
import pandas as pd

# You can customize the api server location
#api_location="westcentralus"

# Congitive Services - Bing Image Search API URL:
#bing_image_search_url = "https://{0}.api.cognitive.microsoft.com/bing/v7.0/images/search".format(api_location)
bing_image_search_url = "https://api.cognitive.microsoft.com/bing/v7.0/images/search"


# READ TASK VARIABLES
if 'variables' in locals():
    if variables.get("SEARCH_TERM") is not None:
        SEARCH_TERM = variables.get("SEARCH_TERM")
    else:
        print("You first need to specify the search term")
        sys.exit(1)
    if variables.get("LICENCE") is not None:
        LICENCE = variables.get("LICENCE")
    if variables.get("IMAGE_TYPE") is not None:
        IMAGE_TYPE = variables.get("IMAGE_TYPE")
    if variables.get("COUNT") is not None:
        COUNT = int(variables.get("COUNT"))
    if variables.get("MARKET") is not None:
        MARKET = variables.get("MARKET")
    if variables.get("OUTPUT_FORMAT") is not None:
        OUTPUT_FORMAT = variables.get("OUTPUT_FORMAT")
    # Provide a valid subscription API token
    if credentials.get("BING_SEARCH_API_KEY") is not None:
        subscription_key = credentials.get("BING_SEARCH_API_KEY")
    else:
        print("You first need to add your Azure Cognitive Services API key to the third party credentials")
        sys.exit(1)

# Set API request parameters
#params  = {"q": SEARCH_TERM, "licence": LICENCE, "imageType": IMAGE_TYPE}
params={'q':SEARCH_TERM}
if LICENCE is not None and len(LICENCE)>0:
    params['licence'] = LICENCE
if IMAGE_TYPE is not None and len(IMAGE_TYPE)>0:
    params['imageType'] = IMAGE_TYPE
if COUNT >0:
    params['count'] = COUNT
# Market Code: https://docs.microsoft.com/fr-fr/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes
if MARKET is not None and len(MARKET)>0:
    params['mkt'] = MARKET

# Send API request
headers   = {
    "Ocp-Apim-Subscription-Key": subscription_key,
    'Content-Type': 'text/plain'
}
response = requests.get(bing_image_search_url, headers=headers, params=params)
response.raise_for_status()

# Get a JSON response
search_results = response.json()

# Print the results
#pprint(search_results)

if 'variables' in locals():
    variables.put('BING_IMAGE_SEARCH_OUTPUT', search_results)

OUTPUT_DATA = search_results["value"]
table = []
for document in OUTPUT_DATA:
    thumbnail= document["thumbnailUrl"]
    image_url= document["contentUrl"]
    encodingFormat= document["encodingFormat"]
    name= document["name"]
    table.append("""<tr><td><a href="{3}"><img src="{0}" alt="{2}" height="150" width="150"/></a></td><td>{1}</td><td>{2}</td>""".format(thumbnail, encodingFormat, name, image_url))
    
css_style="""table {
  border: 1px solid #999999;
  text-align: center;
  border-collapse: collapse;
  width: 100%;
}
td {
  border: 1px solid #999999;
  padding: 3px 2px;
  font-size: 13px;
  border-bottom: 1px solid #999999;
}
th {
  font-size: 17px;
  font-weight: bold;
  color: #FFFFFF;
  text-align: center;
  background: #0B6FA4;
  border-left: 2px solid #999999;
}"""
html = ("""<table><tr><th width="100">Image</th><th width="100">Type</th><th>Description</th></tr>{0}</table>""").format("\n".join(table))
html_container="""<!DOCTYPE html>
            <html>
              <head>
                <meta charset="UTF-8">
                  <meta name="description" content="Bing Video Search API Results">
                    <style>{0}</style>
                  </head>
                  <body>{1}</body></html>""".format(css_style,html)
if OUTPUT_DATA != None and 'resultMetadata' in locals(): 
    dataframe=pd.read_html(html_container,header=0, encoding='utf-8')[0]
    
    if OUTPUT_FORMAT == 'JSON':
        result = json.dumps(search_results).encode('utf-8')
        resultMetadata.put("file.extension", ".json")
        resultMetadata.put("file.name", "result.json")
        resultMetadata.put("content.type", "application/json")
    elif OUTPUT_FORMAT == 'CSV':
        result = dataframe.to_csv(index=False)
        resultMetadata.put("file.extension", ".csv")
        resultMetadata.put("file.name", "result.csv")
        resultMetadata.put("content.type", "text/csv")
    elif OUTPUT_FORMAT == 'HTML':
        result = html_container.encode('utf-8')
        resultMetadata.put("file.extension", ".html")
        resultMetadata.put("file.name", "result.html")
        resultMetadata.put("content.type", "text/html")
    print("END Export_Results")  
else:
    print('It is not possible to export the data')

# Uncomment this to render the HTML result locally in your python notebook
#from IPython.display import HTML
#HTML(html_container)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            46.515625
        </positionTop>
        <positionLeft>
            82.546875
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Split">
      <description>
        <![CDATA[ Defines some input, here strings to be processed. ]]>
      </description>
      <genericInformation>
        <info name="TASK.ICON" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
        <info name="task.documentation" value="user/ProActiveUserGuide.html#_replicate"/>
      </genericInformation>
      <depends>
        <task ref="BingImageSearch"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
print(variables.get("BING_IMAGE_SEARCH_OUTPUT"))
OUTPUT_DATA=variables.get("BING_IMAGE_SEARCH_OUTPUT")["value"]
urls=[]
for document in OUTPUT_DATA:
    image_url=str('{0}'.format(document["contentUrl"]))
    print(image_url)
    urls.append(image_url)

result=urls  
print(result)
#print("image_urls= ", image_urls)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
runs=variables.get("COUNT")
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
      <metadata>
        <positionTop>
            175.515625
        </positionTop>
        <positionLeft>
            83.546875
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Merge">
      <description>
        <![CDATA[ As a merge operation, we simply print the results from previous tasks. ]]>
      </description>
      <genericInformation>
        <info name="TASK.ICON" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
        <info name="task.documentation" value="user/ProActiveUserGuide.html#_replicate"/>
      </genericInformation>
      <depends>
        <task ref="Emotion_API"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
from bs4 import BeautifulSoup
import copy


print("results=",results)
print("values=",results[0].value().decode("utf-8"))
merged_html=BeautifulSoup(str(results[0].value().decode("utf-8") ))
print('len==',len(results))
i=0
for html in results:
    if i==0:
        i=i+1
        continue
    i=i+1
    soup = BeautifulSoup(html.value())
    print('***************')
    print('BODY==',soup)
    for element in soup.body:
        print('element=====',element)
        merged_html.body.append(copy.copy(element))

result=str(merged_html).encode('utf-8')
resultMetadata.put("file.extension", ".html")
resultMetadata.put("file.name", "result.html")
resultMetadata.put("content.type", "text/html")
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            430.515625
        </positionTop>
        <positionLeft>
            82.546875
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Emotion_API">
      <description>
        <![CDATA[ Welcome to the Microsoft Emotion API, which allows you to build more personalized apps with Microsoft as cutting edge cloud-based emotion recognition algorithm. https://azure.microsoft.com/en-us/services/cognitive-services/emotion/ ]]>
      </description>
      <variables>
        <variable inherited="false" name="AZURE_EMOTION_API_ENDPOINT" value="https://westus.api.cognitive.microsoft.com"/>
        <variable inherited="true" name="IMAGE_URL" value="https://upload.wikimedia.org/wikipedia/commons/c/c3/RH_Louise_Lillian_Gish.jpg"/>
      </variables>
      <genericInformation>
        <info name="TASK.ICON" value="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_emotion.png"/>
      </genericInformation>
      <depends>
        <task ref="Split"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
print("BEGIN Emotion_API")

import http.client, urllib.request, urllib.parse, urllib.error, base64, requests, json
import pandas as pd
from pandas.io.json import json_normalize

if 'variables' in locals():
  replication = variables.get('PA_TASK_REPLICATION')
  IMAGE_URL = str(results[0].value()[replication])
  #print(URL_IMAGE)
  #print(variables.get("URL_IMAGE"))
  #IMAGE_URL = variables.get("IMAGE_URL")
  # Replace the subscription_key string value with your valid subscription key.
  subscription_key = credentials.get("AZURE_EMOTION_API_KEY")
  # Replace or verify the region.
  #
  # You must use the same region in your REST API call as you used to obtain your subscription keys.
  # For example, if you obtained your subscription keys from the westus region, replace 
  # "westcentralus" in the URI below with "westus".
  #
  # NOTE: Free trial subscription keys are generated in the westcentralus region, so if you are using
  # a free trial subscription key, you should not need to change this region.
  #uri_base = 'https://westcentralus.api.cognitive.microsoft.com'
  uri_base = variables.get("AZURE_EMOTION_API_ENDPOINT")

# Request headers.
headers = {
    'Content-Type': 'application/json',
    'Ocp-Apim-Subscription-Key': subscription_key,
}

# Request parameters.
params = {
    'returnFaceId': 'true',
    'returnFaceLandmarks': 'false',
    'returnFaceAttributes': 'age,gender,headPose,smile,facialHair,glasses,emotion,hair,makeup,occlusion,accessories,blur,exposure,noise',
}

# Body. The URL of a JPEG image to analyze.
body = {'url': IMAGE_URL}

try:
  # Execute the REST API call and get the response.
  #response = requests.request('POST', uri_base + '/face/v1.0/detect', json=body, data=None, headers=headers, params=params)
  response = requests.request('POST', uri_base + '/emotion/v1.0/recognize', json=body, data=None, headers=headers, params=params)
  print('Response:')
  print(response)
  parsed = json.loads(response.text)
  if len(response.text) > 2 and response.status_code == 200:
    emotion = parsed[0]["scores"]
  else:
    emotion = {'error': 'face or emotion not detected.' }
  #rect = parsed[0]["faceAttributes"]["emotion"]
  #print(rect)
  #print (json.dumps(max(rect, key=rect.get), sort_keys=True, indent=2))
except Exception as ex:
  print('Error:')
  print(ex)

output_json = json.dumps(parsed).encode('utf-8')
print(output_json)

if 'variables' in locals():
  variables.put("AZURE_EMOTION_API_OUTPUT_JSON", output_json)

df = json_normalize(emotion)

table = []
table.append("""<tr><td><a href="{0}"><img src="{0}" height="150" width="150"/></a></td><td>{1}</td>""".format(IMAGE_URL, df.to_html()))
        
css_style="""
table {
  border: 1px solid #999999;
  text-align: center;
  border-collapse: collapse;
  width: 100%;
}
td {
  border: 1px solid #999999;
  padding: 3px 2px;
  font-size: 13px;
  border-bottom: 1px solid #999999;
}
th {
  font-size: 17px;
  font-weight: bold;
  color: #FFFFFF;
  text-align: center;
  background: #0B6FA4;
  border-left: 2px solid #999999
}
"""

html = """<table><th width=200>Image</th><th>Reponse</th></tr>{0}</table>""".format("\n".join(table))

html_container = """<!DOCTYPE html>
                  <html>
                    <head>
                      <meta charset="UTF-8">
                        <meta name="description" content="Face API">
                          <style>{0}</style>
                        </head>
                        <body>{1}</body></html>
""".format(css_style, html)

if 'variables' in locals():
  result = html_container.encode('utf-8')
  resultMetadata.put("file.extension", ".html")
  resultMetadata.put("file.name", "result.html")
  resultMetadata.put("content.type", "text/html")

print("END Emotion_API")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            302.515625
        </positionTop>
        <positionLeft>
            82.546875
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2144px;
            height:3048px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-41.515625px;left:-77.546875px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_166" style="top: 46.5156px; left: 82.5469px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task wraps the Bing Image Search API of Microsoft which provides an experience similar to Bing.com/images by returning images that Bing determines are relevant to a query.
The task requires this third-party credential : $BING_SEARCH_API_KEY which provides access to this API. Please refer to the User documentation to learn how to add third-party credentials.
$SEARCH_TERM (required) is the user's search query string.
$LICENCE (optional) filters images by the following license types: {&quot;Any&quot;, &quot;Public&quot;, &quot;Share&quot; ,&quot;ShareCommercially&quot; ,&quot;Modify&quot; ,&quot;ModifyCommercially&quot;, &quot;All&quot;}
$IMAGE_TYPE (optional) filter images by the following image types: {&quot;AnimatedGif&quot;, &quot;Clipart&quot;, &quot;Line&quot; ,&quot;Photo&quot; ,&quot;Modify&quot; ,&quot;Shopping&quot;, &quot;Transparent&quot;}
The task's output $BING_IMAGE_SEARCH_OUTPUT is the result of the API call in a JSON format."><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_bing_image_search.png" width="20px">&nbsp;<span class="name">BingImageSearch</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_169" style="top: 175.516px; left: 83.5469px; z-index: 24;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Defines some input, here strings to be processed."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">Split</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_172" style="top: 430.516px; left: 82.5469px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="As a merge operation, we simply print the results from previous tasks."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">Merge</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_175" style="top: 302.516px; left: 82.5469px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Welcome to the Microsoft Emotion API, which allows you to build more personalized apps with Microsoft as cutting edge cloud-based emotion recognition algorithm. https://azure.microsoft.com/en-us/services/cognitive-services/emotion/"><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_emotion.png" width="20px">&nbsp;<span class="name">Emotion_API</span></a></div><svg style="position:absolute;left:123.046875px;top:86.5px" width="27.453125" height="89.515625" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 88.515625 C -10 38.515625 16.453125 50 6.453125 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.2819455,66.77475249999999 L6.972797838559856,47.71301790586134 L-0.6710810354762313,52.86773572151962 L-6.934218939920516,46.10215344133757 L-2.2819455,66.77475249999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.2819455,66.77475249999999 L6.972797838559856,47.71301790586134 L-0.6710810354762313,52.86773572151962 L-6.934218939920516,46.10215344133757 L-2.2819455,66.77475249999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:152.5px;top:205.015625px" width="21.546875" height="98.484375" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 87.484375 C -10 87.484375 10.546875 -10 0.546875 0 " transform="translate(10.5,10.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#e5db3d" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.82513302734375,76.95986382421876 L4.993114313587868,57.2653212167852 L-2.248197437293941,62.971756542497836 L-8.994992968133054,56.68838562673539 L-2.82513302734375,76.95986382421876" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.82513302734375,76.95986382421876 L4.993114313587868,57.2653212167852 L-2.248197437293941,62.971756542497836 L-8.994992968133054,56.68838562673539 L-2.82513302734375,76.95986382421876" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_186" style="position: absolute; transform: translate(-50%, -50%); left: 162.773px; top: 255.008px;">replicate</div><svg style="position:absolute;left:117.98171321138253px;top:342.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path></svg><svg style="position:absolute;left:122.5px;top:215.015625px" width="21.546875" height="88.484375" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 87.484375 C -10 37.484375 10.546875 50 0.546875 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.77093017578125,66.30790869140627 L4.939353572962037,46.57084901895594 L-2.2706014413759323,52.31685186364918 L-9.051703254795058,46.070520284550625 L-2.77093017578125,66.30790869140627" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.77093017578125,66.30790869140627 L4.939353572962037,46.57084901895594 L-2.2706014413759323,52.31685186364918 L-9.051703254795058,46.070520284550625 L-2.77093017578125,66.30790869140627" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 130px; top: 77px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 123.547px; top: 205.516px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 123.547px; top: 165.516px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint replicate-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 153.547px; top: 205.516px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 123px; top: 461px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 123px; top: 421px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 123px; top: 333px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint replicate-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 153px; top: 293px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 123px; top: 293px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
