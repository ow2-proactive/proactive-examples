<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.8"
        xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
        name="TensorFlow_Demo_Parallel_Prediction" projectName="Machine Learning"
        priority="normal"
        onTaskError="continueJobExecution"
        maxNumberOfExecution="2">
  <variables>
    <variable name="CONTAINER_NAME" value="ml" />
    <variable name="MODEL_PATH" value="/tmp/output_graph.pb" />
    <variable name="LABEL_PATH" value="/tmp/output_labels.txt" />
    <variable name="PREDICTION_PATH" value="flower_photos/roses/" />
    <variable name="PREDICTION_IMAGE_1" value="410425647_4586667858.jpg" />
    <variable name="PREDICTION_IMAGE_2" value="537207677_f96a0507bb.jpg" />
    <variable name="PREDICTION_IMAGE_3" value="685724528_6cd5cbe203.jpg" />
  </variables>
  <description>
    <![CDATA[ Predict 3 different images of flower species in parallel ]]>
  </description>
  <genericInformation>
    <info name="Documentation" value="http://activeeon.com/resources/automated-machine-learning-activeeon.pdf"/>
  </genericInformation>
  <taskFlow>
    <task name="Prediction1">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <depends>
        <task ref="Input_Preview1"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
# python image_prediction.py -i flower_photos/roses/2141413229_3f0425f972_n.jpg -o test.jpg
echo docker exec $variables_CONTAINER_NAME /bin/sh -c "python image_prediction.py -i $variables_PREDICTION_PATH/$variables_PREDICTION_IMAGE_1 -o test1.jpg"
docker exec $variables_CONTAINER_NAME /bin/sh -c "python image_prediction.py -i $variables_PREDICTION_PATH/$variables_PREDICTION_IMAGE_1 -o test1.jpg"

echo mkdir -p /tmp/output_images
mkdir -p /tmp/output_images

echo docker cp $variables_CONTAINER_NAME:/root/test1.jpg /tmp/output_images/$variables_PREDICTION_IMAGE_1
docker cp $variables_CONTAINER_NAME:/root/test1.jpg /tmp/output_images/$variables_PREDICTION_IMAGE_1
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Download_Data">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo mkdir -p /tmp/input_images
mkdir -p /tmp/input_images

# Uncomment for prediction without training
echo docker exec $variables_CONTAINER_NAME /bin/sh -c 'curl -O http://download.tensorflow.org/example_images/flower_photos.tgz'
docker exec $variables_CONTAINER_NAME /bin/sh -c 'curl -O http://download.tensorflow.org/example_images/flower_photos.tgz'
echo docker exec $variables_CONTAINER_NAME /bin/sh -c 'tar xzf flower_photos.tgz'
docker exec $variables_CONTAINER_NAME /bin/sh -c 'tar xzf flower_photos.tgz'
echo docker exec $variables_CONTAINER_NAME /bin/sh -c 'curl -o /tmp/output_graph.pb https://raw.githubusercontent.com/sophiesongge/tensorflow_demo/master/output_graph.pb'
docker exec $variables_CONTAINER_NAME /bin/sh -c 'curl -o /tmp/output_graph.pb https://raw.githubusercontent.com/sophiesongge/tensorflow_demo/master/output_graph.pb'
echo docker exec $variables_CONTAINER_NAME /bin/sh -c 'curl -o /tmp/output_labels.txt https://raw.githubusercontent.com/sophiesongge/tensorflow_demo/master/output_labels.txt'
docker exec $variables_CONTAINER_NAME /bin/sh -c 'curl -o /tmp/output_labels.txt https://raw.githubusercontent.com/sophiesongge/tensorflow_demo/master/output_labels.txt'
# end

echo docker exec $variables_CONTAINER_NAME /bin/sh -c 'curl -O https://raw.githubusercontent.com/sophiesongge/tensorflow_demo/master/image_prediction.py'
docker exec $variables_CONTAINER_NAME /bin/sh -c 'curl -O https://raw.githubusercontent.com/sophiesongge/tensorflow_demo/master/image_prediction.py'

echo docker cp $variables_CONTAINER_NAME:/root/$variables_PREDICTION_PATH/$variables_PREDICTION_IMAGE_1 /tmp/input_images/$variables_PREDICTION_IMAGE_1
docker cp $variables_CONTAINER_NAME:/root/$variables_PREDICTION_PATH/$variables_PREDICTION_IMAGE_1 /tmp/input_images/$variables_PREDICTION_IMAGE_1

echo docker cp $variables_CONTAINER_NAME:/root/$variables_PREDICTION_PATH/$variables_PREDICTION_IMAGE_2 /tmp/input_images/$variables_PREDICTION_IMAGE_2
docker cp $variables_CONTAINER_NAME:/root/$variables_PREDICTION_PATH/$variables_PREDICTION_IMAGE_2 /tmp/input_images/$variables_PREDICTION_IMAGE_2

echo docker cp $variables_CONTAINER_NAME:/root/$variables_PREDICTION_PATH/$variables_PREDICTION_IMAGE_3 /tmp/input_images/$variables_PREDICTION_IMAGE_3
docker cp $variables_CONTAINER_NAME:/root/$variables_PREDICTION_PATH/$variables_PREDICTION_IMAGE_3 /tmp/input_images/$variables_PREDICTION_IMAGE_3
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Input_Preview1">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <depends>
        <task ref="Download_Data"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// def task_id = variables.get("PA_TASK_REPLICATION")
// def image_name = variables.get("image_" + task_id)


//def home = variables.get("home")
def home = "/tmp/input_images"
def input_image = variables.get("PREDICTION_IMAGE_1")

image_path  = home + "/" + input_image

println "home: " + home
println "input_image: " + input_image
println "image_path  : " + image_path

def image_file = new File(image_path)
println "exists? " + image_file.exists()

result = image_file.getBytes()
resultMetadata.put("file.name", input_image)
resultMetadata.put("content.type", "image/jpg")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Output_Preview1">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <depends>
        <task ref="Prediction1"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// def task_id = variables.get("PA_TASK_REPLICATION")
// def image_name = variables.get("image_" + task_id)


//def home = variables.get("home")
def home = "/tmp/output_images"
def output_image = variables.get("PREDICTION_IMAGE_1")

image_path  = home + "/" + output_image

println "home: " + home
println "output_image: " + output_image
println "image_path  : " + image_path

def image_file = new File(image_path)
println "exists? " + image_file.exists()

result = image_file.getBytes()
resultMetadata.put("file.name", output_image)
resultMetadata.put("content.type", "image/jpg")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Input_Preview2">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <depends>
        <task ref="Download_Data"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// def task_id = variables.get("PA_TASK_REPLICATION")
// def image_name = variables.get("image_" + task_id)


//def home = variables.get("home")
def home = "/tmp/input_images"
def input_image = variables.get("PREDICTION_IMAGE_2")

image_path  = home + "/" + input_image

println "home: " + home
println "input_image: " + input_image
println "image_path  : " + image_path

def image_file = new File(image_path)
println "exists? " + image_file.exists()

result = image_file.getBytes()
resultMetadata.put("file.name", input_image)
resultMetadata.put("content.type", "image/jpg")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Prediction2">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <depends>
        <task ref="Input_Preview2"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
# python image_prediction.py -i flower_photos/roses/2141413229_3f0425f972_n.jpg -o test.jpg
echo docker exec $variables_CONTAINER_NAME /bin/sh -c "python image_prediction.py -i $variables_PREDICTION_PATH/$variables_PREDICTION_IMAGE_2 -o test2.jpg"
docker exec $variables_CONTAINER_NAME /bin/sh -c "python image_prediction.py -i $variables_PREDICTION_PATH/$variables_PREDICTION_IMAGE_2 -o test2.jpg"

echo mkdir -p /tmp/output_images
mkdir -p /tmp/output_images

echo docker cp $variables_CONTAINER_NAME:/root/test2.jpg /tmp/output_images/$variables_PREDICTION_IMAGE_2
docker cp $variables_CONTAINER_NAME:/root/test2.jpg /tmp/output_images/$variables_PREDICTION_IMAGE_2
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Output_Preview2">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <depends>
        <task ref="Prediction2"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// def task_id = variables.get("PA_TASK_REPLICATION")
// def image_name = variables.get("image_" + task_id)


//def home = variables.get("home")
def home = "/tmp/output_images"
def output_image = variables.get("PREDICTION_IMAGE_2")

image_path  = home + "/" + output_image

println "home: " + home
println "output_image: " + output_image
println "image_path  : " + image_path

def image_file = new File(image_path)
println "exists? " + image_file.exists()

result = image_file.getBytes()
resultMetadata.put("file.name", output_image)
resultMetadata.put("content.type", "image/jpg")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Input_Preview3">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <depends>
        <task ref="Download_Data"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// def task_id = variables.get("PA_TASK_REPLICATION")
// def image_name = variables.get("image_" + task_id)


//def home = variables.get("home")
def home = "/tmp/input_images"
def input_image = variables.get("PREDICTION_IMAGE_3")

image_path  = home + "/" + input_image

println "home: " + home
println "input_image: " + input_image
println "image_path  : " + image_path

def image_file = new File(image_path)
println "exists? " + image_file.exists()

result = image_file.getBytes()
resultMetadata.put("file.name", input_image)
resultMetadata.put("content.type", "image/jpg")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Prediction3">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <depends>
        <task ref="Input_Preview3"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
# python image_prediction.py -i flower_photos/roses/2141413229_3f0425f972_n.jpg -o test.jpg
echo docker exec $variables_CONTAINER_NAME /bin/sh -c "python image_prediction.py -i $variables_PREDICTION_PATH/$variables_PREDICTION_IMAGE_3 -o test3.jpg"
docker exec $variables_CONTAINER_NAME /bin/sh -c "python image_prediction.py -i $variables_PREDICTION_PATH/$variables_PREDICTION_IMAGE_3 -o test3.jpg"

echo mkdir -p /tmp/output_images
mkdir -p /tmp/output_images

echo docker cp $variables_CONTAINER_NAME:/root/test3.jpg /tmp/output_images/$variables_PREDICTION_IMAGE_3
docker cp $variables_CONTAINER_NAME:/root/test3.jpg /tmp/output_images/$variables_PREDICTION_IMAGE_3
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Output_Preview3">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <depends>
        <task ref="Prediction3"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// def task_id = variables.get("PA_TASK_REPLICATION")
// def image_name = variables.get("image_" + task_id)


//def home = variables.get("home")
def home = "/tmp/output_images"
def output_image = variables.get("PREDICTION_IMAGE_3")

image_path  = home + "/" + output_image

println "home: " + home 
println "output_image: " + output_image
println "image_path  : " + image_path  

def image_file = new File(image_path)
println "exists? " + image_file.exists()

result = image_file.getBytes()
resultMetadata.put("file.name", output_image)
resultMetadata.put("content.type", "image/jpg")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>