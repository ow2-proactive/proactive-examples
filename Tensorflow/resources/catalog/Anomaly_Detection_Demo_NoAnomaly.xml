<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.8"
        xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
        name="Anomaly_Detection_Demo_NoAnomaly" projectName="Machine Learning"
        priority="normal"
        onTaskError="continueJobExecution"
        maxNumberOfExecution="2">
  <variables>
    <variable name="INPUT_IMAGE" value="images/normal.jpg" />
    <variable name="OUTPUT_IMAGE" value="output/predictions.jpg" />
    <variable name="CONTAINER_NAME" value="ml" />
  </variables>
  <description>
    <![CDATA[ Perform anomaly detection of an input image (only pedestrians are supposed to be present) ]]>
  </description>
  <genericInformation>
    <info name="Documentation" value="http://activeeon.com/resources/automated-machine-learning-activeeon.pdf"/>
  </genericInformation>
  <taskFlow>
    <task name="Anomaly_Det">
      <description>
        <![CDATA[ The simplest task, ran by a cmd engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <depends>
        <task ref="Preview_Input"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
# $variables_INPUT_IMAGE  = images/anomaly.jpg
# $variables_OUTPUT_IMAGE = output/predictions.jpg

# docker exec tf /bin/bash -c "./darknet detect cfg/yolo.cfg yolo.weights /root/deeplearning_demo/images/anomaly.jpg"
echo docker exec $variables_CONTAINER_NAME /bin/bash -c "cd darknet && ./darknet detect cfg/yolo.cfg yolo.weights /root/deeplearning_demo/$variables_INPUT_IMAGE"
docker exec $variables_CONTAINER_NAME /bin/bash -c "cd darknet && ./darknet detect cfg/yolo.cfg yolo.weights /root/deeplearning_demo/$variables_INPUT_IMAGE"
# generates predictions.json predictions.png at /root/darknet

# docker exec tf /bin/sh -c "cp /root/darknet/predictions.json /root/deeplearning_demo/json/predictions.json"
echo docker exec $variables_CONTAINER_NAME /bin/sh -c "cp /root/darknet/predictions.json /root/deeplearning_demo/json/predictions.json"
docker exec $variables_CONTAINER_NAME /bin/sh -c "cp /root/darknet/predictions.json /root/deeplearning_demo/json/predictions.json"

# python anomaly_prediction.py -i images/anomaly.jpg -o output/prediction.jpg -j json/predictions_anomaly.json

# docker exec tf /bin/sh -c "cd /root/deeplearning_demo && python anomaly_prediction.py -i images/anomaly.jpg -o output/prediction.jpg -j json/predictions.json"
echo docker exec $variables_CONTAINER_NAME /bin/sh -c "cd deeplearning_demo && python anomaly_prediction.py -i $variables_INPUT_IMAGE -o $variables_OUTPUT_IMAGE -j json/predictions.json"
docker exec $variables_CONTAINER_NAME /bin/sh -c "cd deeplearning_demo && python anomaly_prediction.py -i $variables_INPUT_IMAGE -o $variables_OUTPUT_IMAGE -j json/predictions.json"

# rm -r /tmp/output
echo mkdir -p /tmp/output
mkdir -p /tmp/output

echo docker cp $variables_CONTAINER_NAME:/root/deeplearning_demo/$variables_OUTPUT_IMAGE /tmp/$variables_OUTPUT_IMAGE
docker cp $variables_CONTAINER_NAME:/root/deeplearning_demo/$variables_OUTPUT_IMAGE /tmp/$variables_OUTPUT_IMAGE
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Preview_Input">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <depends>
        <task ref="Download_Data"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// def task_id = variables.get("PA_TASK_REPLICATION")
// def image_name = variables.get("image_" + task_id)


//def home = variables.get("home")
def home = "/tmp"
def input_image = variables.get("INPUT_IMAGE")

image_path  = home + "/" + input_image

println "home: " + home
println "input_image: " + input_image
println "image_path  : " + image_path

def image_file = new File(image_path)
println "exists? " + image_file.exists()

result = image_file.getBytes()
resultMetadata.put("file.name", input_image)
resultMetadata.put("content.type", "image/jpg")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Preview_Output">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="TensorFlow"/>
      </genericInformation>
      <depends>
        <task ref="Anomaly_Det"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// def task_id = variables.get("PA_TASK_REPLICATION")
// def image_name = variables.get("image_" + task_id)


//def home = variables.get("home")
def home = "/tmp"
def output_image = variables.get("OUTPUT_IMAGE")

image_path  = home + "/" + output_image

println "home: " + home
println "output_image: " + output_image
println "image_path  : " + image_path

def image_file = new File(image_path)
println "exists? " + image_file.exists()

result = image_file.getBytes()
resultMetadata.put("file.name", output_image)
resultMetadata.put("content.type", "image/jpg")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Download_Data">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
# $variables_INPUT_IMAGE  = images/anomaly.jpg
# $variables_OUTPUT_IMAGE = output/predictions.jpg

echo docker exec $variables_CONTAINER_NAME /bin/sh -c "rm -r deeplearning_demo"
docker exec $variables_CONTAINER_NAME /bin/sh -c "rm -r deeplearning_demo"

# docker exec tf /bin/sh -c "cd /root && git clone https://github.com/carolinepacheco/deeplearning_demo.git"
echo docker exec $variables_CONTAINER_NAME /bin/sh -c "git clone https://github.com/carolinepacheco/deeplearning_demo.git"
docker exec $variables_CONTAINER_NAME /bin/sh -c "git clone https://github.com/carolinepacheco/deeplearning_demo.git"

echo mkdir -p /tmp/images
mkdir -p /tmp/images

# docker cp tf:/root/deeplearning_demo/images/anomaly.jpg /tmp/images/anomaly.jpg
echo docker cp $variables_CONTAINER_NAME:/root/deeplearning_demo/$variables_INPUT_IMAGE /tmp/$variables_INPUT_IMAGE
docker cp $variables_CONTAINER_NAME:/root/deeplearning_demo/$variables_INPUT_IMAGE /tmp/$variables_INPUT_IMAGE

#mkdir /tmp/data
#docker cp $variables_CONTAINER_NAME:/root/darknet/$variables_INPUT_IMAGE /tmp/$variables_INPUT_IMAGE
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
  </taskFlow>
</job>