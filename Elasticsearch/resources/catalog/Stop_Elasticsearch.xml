<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.10"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
    name="Stop_Elasticsearch" projectName="Cloud Automation - Lifecycle"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="ELASTICSEARCH_INSTANCE_NAME" value="elasticsearch-server-1" />
  </variables>
  <description>
    <![CDATA[ Stop Elasticsearch instance. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="cloud-automation"/>
    <info name="group" value="public-objects"/>
    <info name="pca.service.id" value="Elasticsearch"/>
    <info name="pca.states" value="(RUNNING,STOPPED)"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.svg"/>
  </genericInformation>
  <taskFlow>
    <task name="Stop_Elasticsearch">
      <description>
        <![CDATA[ Stop Elasticsearch instance ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.svg"/>
      </genericInformation>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN PRE-SCRIPT Stop_Elasticsearch ---")

// Acquire service instance id
def service_instance_id = Long.valueOf(variables.get("PCA_INSTANCE_ID"))
println("service_instance_id (PCA_INSTANCE_ID): " + service_instance_id)

// Construct synchro channel name
channel = "Service_Instance_" + service_instance_id  
println("channel: " + channel)

//Acquire docker container to delete from synchro channel
def instance_name = synchronizationapi.get(channel, "INSTANCE_NAME")
variables.put("elasticsearch_instance_name", instance_name)
println("*_instance_name: " + instance_name)

// Inform the Activation workflow that the delete is triggered
synchronizationapi.put(channel, "DELETE_LAUNCHED", true) 
println("DELETE_LAUNCHED = true")

println("--- END PRE-SCRIPT Stop_Elasticsearch ---")
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo "--- BEGIN Stop_Elasticsearch ---"

echo "*_instance name: $variables_ELASTICSEARCH_INSTANCE_NAME"
docker stop $variables_ELASTICSEARCH_INSTANCE_NAME

echo "--- END Stop_Elasticsearch ---"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Update_Deployment_Status">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.svg"/>
      </genericInformation>
      <depends>
        <task ref="Stop_Elasticsearch"/>
      </depends>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN Update_Deployment_Status ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service");

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Acquire service instance id
def service_instance_id = Long.valueOf(variables.get("PCA_INSTANCE_ID"))
println("service_instance_id (PCA_INSTANCE_ID): " + service_instance_id)

// Update service instance status
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
service_instance_data.setInstanceStatus("STOPPED")
service_instance_data = service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)

println("--- END Update_Deployment_Status ---")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>