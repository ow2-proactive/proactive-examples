<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Kibana" onTaskError="continueJobExecution" priority="normal" projectName="Cloud Automation - Deployment" xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd">
  <variables>
    <variable name="elasticsearch_endpoint" value=""/>
    <variable name="kibana_instance_name" value="kibana-server-1"/>
  </variables>
  <description>
    <![CDATA[ Deployment of the Elasticsearch server. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="cloud-automation"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/kibana.png"/>
<info name="pca.states" value="(VOID,RUNNING)(STOPPED,RUNNING)"/>
<info name="Documentation" value="https://www.elastic.co/guide/en/kibana/current/index.html"/>
<info name="pca.service.id" value="Kibana"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task name="Loop_Over_Instance_Status">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/kibana.png"/>
        <info name="task.documentation" value="https://www.elastic.co/guide/en/kibana/current/index.html"/>
      </genericInformation>
      <depends>
        <task ref="Update_Service_Instance"/>
      </depends>
      <inputFiles>
        <files accessMode="transferFromGlobalSpace" includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
      </inputFiles>
      <forkEnvironment>
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN Loop_Over_Instance_Status ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Acquire service instance id
def service_instance_id = Long.valueOf(variables.get("PCA_INSTANCE_ID"))
println("service_instance_id (PCA_INSTANCE_ID): " + service_instance_id)

// Construct synchro channel
channel = "Service_Instance_" + service_instance_id
println("channel: " + channel)
//synchronizationapi.createChannelIfAbsent(channel, false)

// Delete service instance from database is set to false
synchronizationapi.put(channel, "DELETE_LAUNCHED", false) 
synchronizationapi.put(channel, "DELETE_INSTANCE", false) 

// Loop over service instance status
def current_status = "RUNNING"
def container = variables.get("kibana_instance_name")
println("container (*_instance_name): " + container)

while(current_status == "RUNNING")
{
  sleep(30000);
  
  // Check docker container status 
  def ByteArrayOutputStream sout = new ByteArrayOutputStream();
  def ByteArrayOutputStream serr = new ByteArrayOutputStream();
  def proc = ["docker", "inspect", "--format", "{{ .State.Running }}", "${container}"].execute().waitForProcessOutput(sout, serr)
  def container_running = new String(sout.toByteArray()).trim()
  
  if ((container_running != "true") && (synchronizationapi.get(channel, "DELETE_LAUNCHED") == false))
  {
    current_status = 'ERROR'
    // Update docker container is not running
    def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
    service_instance_data.setInstanceStatus(current_status)
    service_instance_data = service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)
    break
  }
  
  // Check service instance status
  current_status = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id).getInstanceStatus() 
  println("current_status: " + current_status)
}

// Allow the Delete workflow to be fulfilled
synchronizationapi.put(channel, "DELETE_INSTANCE", true)

println("--- BEGIN Loop_Over_Instance_Status ---")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Start_Kibana" onTaskError="cancelJob">
      <description>
        <![CDATA[ Pull Kibana image and start a container ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/kibana.png"/>
        <info name="task.documentation" value="https://www.elastic.co/guide/en/kibana/current/index.html"/>
      </genericInformation>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN PRE-SCRIPT Start_Kibana ---")

def endpoint = variables.get("elasticsearch_endpoint")
println("elasticsearch_endpoint: " + endpoint)

assert (endpoint != null) : "endpoint must not be null"
assert (endpoint.trim() != '') : "endpoint must not be empty"

println("--- END PRE-SCRIPT Start_Kibana ---")
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo "--- BEGIN Start_Kibana ---"
echo "Pulling Kibana image"
docker pull activeeon/kibana

CONTAINER=$variables_kibana_instance_name
ENDPOINT_ELASTICSEARCH=$variables_elasticsearch_endpoint

echo "DOCKER CONTAINER NAME (*_instance_name): $CONTAINER"
echo "ELASTICSEARCH ENDPOINT: $ENDPOINT_ELASTICSEARCH"

if [ "$(docker ps -a | grep $CONTAINER)" ]; then
 RUNNING=$(docker inspect --format="{{ .State.Running }}" $CONTAINER 2> /dev/null)
 STOPPED=$(docker inspect --format="{{ .State.Status }}" $CONTAINER 2> /dev/null)  

 if [ "$RUNNING" == "true" ]; then 
   echo "$CONTAINER container is running"
 elif [ "$STOPPED" == "exited" ]; then 
   echo "Starting $CONTAINER container"
   docker start $CONTAINER
 fi

else 
 echo "Running $CONTAINER container"
 docker run -d --name $CONTAINER -p 5601 -e ELASTICSEARCH_URL=$ENDPOINT_ELASTICSEARCH activeeon/kibana
fi

port=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "5601/tcp") 0).HostPort}}' $CONTAINER)
echo "$port" > $CONTAINER"_port"
pwd
ls -l

echo "--- END Start_Kibana ---"
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN POST-SCRIPT Start_Kibana ---")

def PA_SCHEDULER_REST_URL = variables.get('PA_SCHEDULER_REST_URL')

def instance_name = variables.get("kibana_instance_name")
println("*_instance_name: " + instance_name)

def hostname = new URL(PA_SCHEDULER_REST_URL).getHost()
println("hostname: " + hostname)

def port = new File(instance_name+"_port").text.trim()
println("port: " + port)

def endpoint = 'http://'+hostname + ":" + port
println("*_endpoint: " + endpoint)
variables.put("kibana_endpoint", endpoint)

println("--- END POST-SCRIPT Start_Kibana ---")
]]>
          </code>
        </script>
      </post>
    </task>
    <task name="Update_Service_Instance">
      <description>
        <![CDATA[ Update service instance data ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/kibana.png"/>
        <info name="task.documentation" value="https://www.elastic.co/guide/en/kibana/current/index.html"/>
      </genericInformation>
      <depends>
        <task ref="Start_Kibana"/>
      </depends>
      <inputFiles>
        <files accessMode="transferFromGlobalSpace" includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
      </inputFiles>
      <forkEnvironment>
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN Update_Service_Instance ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Acquire service instance id
def service_instance_id = Long.valueOf(variables.get("PCA_INSTANCE_ID"))
println("service_instance_id (PCA_INSTANCE_ID): " + service_instance_id)

// Set service instance status to running
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
service_instance_data.setInstanceStatus("RUNNING")

// Set service instance status endpoint
instance_name = variables.get("kibana_instance_name")
endpoint = variables.get("kibana_endpoint")
println("*_instance_name: " + instance_name)
println("*_endpoint: " + endpoint)
service_instance_data = service_instance_data.putInstanceEndpointsItem(instance_name, endpoint)

// Update service instance data
service_instance_data = service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)

// Inform other platforms that service is running
channel = "Service_Instance_" + service_instance_id  
println("channel: " + channel)
synchronizationapi.createChannelIfAbsent(channel, false)
synchronizationapi.put(channel, "RUNNING", true)
synchronizationapi.put(channel, "INSTANCE_NAME", instance_name)

println("--- END Update_Service_Instance ---")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>
