<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="SQLServer" projectName="1. Database" tags="SQLServer,Service Automation,Data Base,SQL" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
    <variables>
        <variable name="INSTANCE_NAME" value="SQLServer-server-${PA_JOB_ID}"  description="The name of the service to be deployed."  advanced="false" hidden="false"/>
        <variable name="SA_PASSWORD" value="" model="PA:HIDDEN" description="Password for the System Administrator (SA) account. The password must be at least 8 characters."  advanced="false" hidden="false"/>
        <variable name="ENDPOINT_ID" value="SQLServer-endpoint-${PA_JOB_ID}"  description="The endpoint identifier that will be used."  advanced="false" hidden="true"/>
        <variable name="INIT_DATABASE" value="false" model="PA:BOOLEAN" description="If true, enable to create a new database and user"  advanced="false" hidden="false"/>
        <variable name="USER" value=""  description="Name of the SQL Server user to be created" group="Init Database" advanced="false" hidden="true"/>
        <variable name="PASSWORD" value="" model="PA:HIDDEN" description="Password for the newly created SQL Server user" group="Init Database" advanced="false" hidden="true"/>
        <variable name="DATABASE" value=""  description="Name of the new database to be created on start." group="Init Database" advanced="false" hidden="true"/>
        <variable name="INIT_DATABASE_HANDLER" value="" model="PA:SPEL(variables[&#x27;INIT_DATABASE&#x27;].toLowerCase() == &#x27;true&#x27; ? showGroup(&#x27;Init Database&#x27;) &amp;&amp; t(models[&#x27;USER&#x27;] = &#x27;PA:NOT_EMPTY_STRING&#x27;) &amp;&amp; t(models[&#x27;DATABASE&#x27;] = &#x27;PA:NOT_EMPTY_STRING&#x27;): hideGroup(&#x27;Init Database&#x27;))"   advanced="false" hidden="true"/>
    </variables>
    <description>
        <![CDATA[ Deploy a SQLServer Database server. ]]>
    </description>
    <genericInformation>
        <info name="bucketName" value="service-automation"/>
        <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/sql-server.png"/>
        <info name="pca.states" value="(VOID,RUNNING)"/>
        <info name="pca.service.id" value="SQLServer"/>
        <info name="group" value="public-objects"/>
    </genericInformation>
    <taskFlow>
        <task name="Loop_Over_Instance_Status"




              fork="true">
            <description>
                <![CDATA[ Loop over service instance status and fetch docker container logs.
It will run every minute. ]]>
            </description>
            <genericInformation>
                <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/sql-server.png"/>
                <info name="Documentation" value="PSA/PSAUserGuide.html"/>
                <info name="NODE_ACCESS_TOKEN" value="PSA_$INSTANCE_NAME"/>
            </genericInformation>
            <depends>
                <task ref="Start_SQLServer"/>
            </depends>
            <pre>
                <script>
                    <code language="groovy">
                        <![CDATA[
/*********************************************************************************
* THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE       *
/********************************************************************************/
def username = "sa"
def credentials = variables.get("SA_PASSWORD")
def hostname = variables.get("HOSTNAME")
def port = variables.get("PORT")
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def channel = "Service_Instance_" + instanceId
def credentialsKey

if (Boolean.valueOf(variables.get("INIT_DATABASE"))){
    username = variables.get("USER")
    credentials = variables.get("PASSWORD")
}

credentialsKey = variables.get("PA_JOB_NAME").toLowerCase() + "://" + username + "@" + hostname+ ":" + port
synchronizationapi.put(channel, "CREDENTIALS_KEY", credentialsKey)
variables.put("CREDENTIALS_KEY", credentialsKey)
schedulerapi.connect()
schedulerapi.putThirdPartyCredential(credentialsKey, credentials)
/********************************************************************************/
]]>
                    </code>
                </script>
            </pre>
            <scriptExecutable>
                <script>
                    <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Check_Instance_Status/raw" language="groovy"></file>
                </script>
            </scriptExecutable>
            <controlFlow >
                <loop target="Loop_Over_Instance_Status">
                    <script>
                        <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Fetch_Logs/raw" language="groovy"></file>
                    </script>
                </loop>
            </controlFlow>
            <metadata>
                <positionTop>
                    291.162109375
                </positionTop>
                <positionLeft>
                    398.564453125
                </positionLeft>
            </metadata>
        </task>
        <task name="Start_SQLServer"

              onTaskError="cancelJob"


              fork="true">
            <description>
                <![CDATA[ Pull SQLServer image and start a container ]]>
            </description>
            <genericInformation>
                <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/sql-server.png"/>
                <info name="Documentation" value="PSA/PSAUserGuide.html"/>
            </genericInformation>
            <selection>
                <script type="static">
                    <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Check_Not_Used_By_Other_Service/raw" language="groovy"></file>
                </script>
            </selection>
            <pre>
                <script>
                    <code language="groovy">
                        <![CDATA[

]]>
                    </code>
                </script>
            </pre>
            <scriptExecutable>
                <script>
                    <code language="bash">
                        <![CDATA[
echo BEGIN "$variables_PA_TASK_NAME"

################################################################################
### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
DOCKER_IMAGE=mcr.microsoft.com/SQLServer/server:2022-latest
PORT=1433

SA_PASSWORD="$variables_SA_PASSWORD"

if [ -z "$SA_PASSWORD" ]; then
    SA_PASSWORD="YourStrongPassw0rd"
    echo "[WARNING] SA_PASSWORD not provided by the user. Using the default password: YourStrongPassw0rd"
fi

DATABASE="$variables_DATABASE"
################################################################################

echo "Pulling "$variables_PA_JOB_NAME" image"
docker pull $DOCKER_IMAGE

GET_RANDOM_PORT(){
    read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
    while :
    do
        RND_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
        ss -lpn | grep -q ":$RND_PORT " || break
    done
    echo $RND_PORT
}

INSTANCE_NAME=$variables_INSTANCE_NAME

if [ -z "$INSTANCE_NAME" ]; then
    echo [ERROR] The INSTANCE_NAME is not provided by the user. Empty value is not allowed.
    exit 1
fi

if [ "$(docker ps -a --format '{{.Names}}' | grep "^$INSTANCE_NAME$")" ]; then
    echo [ERROR] "$INSTANCE_NAME" is already used by another service instance.
    exit 128
else
    ################################################################################
    ### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
    echo "Running docker container: $INSTANCE_NAME"
    F_PORT=$(GET_RANDOM_PORT)
    INSTANCE_STATUS=$( eval "docker run --name $INSTANCE_NAME -p $F_PORT:$PORT -e ACCEPT_EULA=Y -e SA_PASSWORD=$SA_PASSWORD -d $DOCKER_IMAGE"  2>&1)
    echo "docker run --name $INSTANCE_NAME -p $F_PORT:$PORT -e ACCEPT_EULA=Y -e SA_PASSWORD=$SA_PASSWORD -d $DOCKER_IMAGE"
    ################################################################################
    if [ "$(docker ps -a --format '{{.Names}}' | grep "^$INSTANCE_NAME$")" ]; then
    	RUNNING=$(docker inspect --format="{{ .State.Running }}" $INSTANCE_NAME 2> /dev/null)
    	if [ "$RUNNING" == "true" ]; then
        	echo $INSTANCE_NAME > $INSTANCE_NAME"_status"
    	fi
	else
    	echo $INSTANCE_STATUS > $INSTANCE_NAME"_status"
	fi
fi

port=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "'$PORT'/tcp") 0).HostPort}}' $INSTANCE_NAME)
echo $port > $INSTANCE_NAME"_port"

containerID=$(docker ps -aqf "name=^/$INSTANCE_NAME$")
echo "$containerID" > $INSTANCE_NAME"_containerID"

# Endpoint added to the job variables using a groovy post-script

if [ "$INIT_DATABASE" == "true" ]; then
	# Define the variables
	my_database="$variables_DATABASE"
	my_user="$variables_USER"
	my_password="$variables_PASSWORD"
    # Create the SQL script with variables
    sql_script=$(cat <<EOF
CREATE DATABASE [$my_database];
GO

USE [$my_database];
GO

CREATE LOGIN [$my_user] WITH PASSWORD = '$my_password';
GO

CREATE USER [$my_user] FOR LOGIN [$my_user];
GO

ALTER ROLE db_owner ADD MEMBER [$my_user];
GO
EOF
)
    # Save the SQL script to a file
    echo "$sql_script" > init.sql

    # Copy the script to the running Docker container
    docker cp init.sql $INSTANCE_NAME:/init.sql

    # Execute the script inside the container using sqlcmd
    docker exec -it $INSTANCE_NAME /opt/SQLServer-tools18/bin/sqlcmd -S localhost -U sa -P "$SA_PASSWORD" -d master -i /init.sql -C
fi
]]>
                    </code>
                </script>
            </scriptExecutable>
            <post>
                <script>
                    <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Post_Start_Service/raw" language="groovy">
                        <arguments>
                            <argument value="SQLServer"/>
                        </arguments>
                    </file>
                </script>
            </post>
            <cleaning>
                <script>
                    <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Clean_Start_Service/raw" language="groovy"></file>
                </script>
            </cleaning>
            <metadata>
                <positionTop>
                    164.16015625
                </positionTop>
                <positionLeft>
                    398.564453125
                </positionLeft>
            </metadata>
        </task>
    </taskFlow>
    <metadata>
        <visualization>
            <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2688px;
            height:3695px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-159.16015625px;left:-393.564453125px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1409" style="top: 291.162px; left: 398.564px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Loop over service instance status and fetch docker container logs.
It will run every minute."><img src="/automation-dashboard/styles/patterns/img/wf-icons/sql-server.png" width="20px">&nbsp;<span class="name">Loop_Over_Instance_Status</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_1412" style="top: 164.16px; left: 398.564px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Pull SQLServer image and start a container"><img src="/automation-dashboard/styles/patterns/img/wf-icons/sql-server.png" width="20px">&nbsp;<span class="name">Start_SQLServer</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><svg style="position:absolute;left:439px;top:203.5px" width="53.5" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 32.5 87 C 42.5 37 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M32.424265625,64.92074025000001 L30.164753924845378,43.85193376085914 L26.41667918406659,52.27523096192809 L17.519244636773465,49.85952020179255 L32.424265625,64.92074025000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M32.424265625,64.92074025000001 L30.164753924845378,43.85193376085914 L26.41667918406659,52.27523096192809 L17.519244636773465,49.85952020179255 L32.424265625,64.92074025000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:554.5px;top:280.5px" width="61" height="61" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C 50 -10 -10 50 0 0 " transform="translate(10.5,10.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.55903999999999,26.37184000000001 L31.950657715430147,15.848133532719785 L22.731266562420885,15.794966176056539 L21.37378389148668,6.67590697029889 L13.55903999999999,26.37184000000001" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,10.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.55903999999999,26.37184000000001 L31.950657715430147,15.848133532719785 L22.731266562420885,15.794966176056539 L21.37378389148668,6.67590697029889 L13.55903999999999,26.37184000000001" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,10.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_1423" style="position: absolute; transform: translate(-50%, -50%); left: 579.5px; top: 310.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 472px; top: 321px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 472px; top: 281px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 555px; top: 281px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 555px; top: 321px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 439.5px; top: 194px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
        </visualization>
    </metadata>
</job>