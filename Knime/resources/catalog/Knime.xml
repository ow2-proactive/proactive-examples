<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="Knime" tags="Visualization,Artificial Intelligence,Knime,Service Automation,Data Preparation" projectName="5. AI" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
  <variables>
    <variable name="INSTANCE_NAME" value="knime-instance-$PA_JOB_ID" model="" description="The name of the service to be deployed." advanced="false" hidden="false"/>
    <variable name="PASSWORD" value="" model="PA:Hidden" description="If the service requires basic http authentication, enter a password." advanced="false" hidden="false"/>
    <variable name="PROXYFIED" value="False" model="PA:Boolean" description="True if a proxy is needed to protect the access to the service endpoint." advanced="true" hidden="false"/>
    <variable name="ENDPOINT_ID" value="knime-gui-$PA_JOB_ID" description="The endpoint identifier that will be used." advanced="false" hidden="true"/>
    <variable name="HTTP_ENABLED" value="True" model="PA:Boolean" description="True if an http endpoint will be exposed as the service endpoint." advanced="false" hidden="true"/>
    <variable name="USE_IP_ADDRESS" value="true" model="PA:Boolean"   advanced="false" hidden="false"/>
    <variable name="USE_PUBLIC_IP" value="true" model="PA:Boolean"   advanced="false" hidden="true"/>
    <variable name="IP_ENABLED_HANDLER" value="" model="PA:SPEL(variables[&#x27;USE_IP_ADDRESS&#x27;].toLowerCase() == &#x27;true&#x27; ? showVar(&#x27;USE_PUBLIC_IP&#x27;) : hideVar(&#x27;USE_PUBLIC_IP&#x27;))"   advanced="false" hidden="true"/>

  </variables>
  <description>
    <![CDATA[ Deployment of the Knime service. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="service-automation"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/knime.jpeg"/>
    <info name="pca.states" value="(VOID,RUNNING)"/>
    <info name="Documentation" value="https://docs.knime.com/"/>
    <info name="pca.service.id" value="Knime"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Start_Knime"




    fork="true">
      <description>
        <![CDATA[ Pull Knime image and start a container ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/knime.jpeg"/>
        <info name="task.documentation" value="https://docs.knime.com/"/>
      </genericInformation>
      <selection>
        <script type="static">
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Check_Not_Used_By_Other_Service/raw" language="groovy"></file>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo BEGIN "$variables_PA_TASK_NAME"

GET_RANDOM_PORT(){
    PCA_SERVICES_PORT_RANGE_FILE=$variables_PA_SCHEDULER_HOME/config/pca_services_port_range
    if [[ -f "$PCA_SERVICES_PORT_RANGE_FILE" ]]; then
        read LOWERPORT UPPERPORT < $PCA_SERVICES_PORT_RANGE_FILE
    else
        read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
    fi
    while :
    do
        RND_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
        ss -lpn | grep -q ":$RND_PORT " || break
    done
    echo $RND_PORT
}

DOCKER_IMAGE=activeeon/knime-vnc
INSTANCE_NAME=$variables_INSTANCE_NAME
KNIME_INTERNAL_PORT=6901
KNIME_PASSWORD=$variables_PASSWORD
KNIME_HOST_PORT=-1


if [[ -z $INSTANCE_NAME ]]; then
    echo [ERROR] The INSTANCE_NAME is not provided by the user. Empty value is not allowed.
    exit 1
fi

if [ "$KNIME_HOST_PORT" -eq "-1" ]; then
    echo "[INFO] Picking a random port number"
    KNIME_HOST_PORT=$(GET_RANDOM_PORT)
fi
echo "The service will be initialized on port $KNIME_HOST_PORT"

echo "Pulling "$variables_PA_JOB_NAME" image"
docker pull $DOCKER_IMAGE

if [ "$(docker ps -a --format '{{.Names}}' | grep "^$INSTANCE_NAME$")" ]; then
    echo [ERROR] "$INSTANCE_NAME" is already used by another service instance.
    exit 128
else
    echo "Running $INSTANCE_NAME container"

    if [[ -z $KNIME_PASSWORD ]]; then
        INSTANCE_STATUS=$(docker run --name $INSTANCE_NAME -p $KNIME_HOST_PORT:$KNIME_INTERNAL_PORT -d $DOCKER_IMAGE)
    else
        INSTANCE_STATUS=$(docker run --name $INSTANCE_NAME -p $KNIME_HOST_PORT:$KNIME_INTERNAL_PORT -e VNC_PW=$KNIME_PASSWORD -d $DOCKER_IMAGE)
    fi

    if [ "$(docker ps -a --format '{{.Names}}' | grep "^$INSTANCE_NAME$")" ]; then
        RUNNING=$(docker inspect --format="{{ .State.Running }}" $INSTANCE_NAME 2> /dev/null)
        if [ "${RUNNING,,}" = "true" ]; then
            echo $INSTANCE_NAME > $INSTANCE_NAME"_status"
        fi
    else
        echo $INSTANCE_STATUS > $INSTANCE_NAME"_status"
    fi
fi

KNIME_PORT=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "'$KNIME_INTERNAL_PORT'/tcp") 0).HostPort}}' $INSTANCE_NAME)
echo "$KNIME_PORT" > $INSTANCE_NAME"_port"

containerID=$(docker ps -aqf "name=^/$INSTANCE_NAME$")
echo "$containerID" > $INSTANCE_NAME"_containerID"

echo END "$variables_PA_TASK_NAME"
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
/*********************************************************************************
* THIS POSTSCRIPT PROPAGATES USEFUL INFORMATION SUCH AS:                         *
* 1) SERVICE ENDPOINT (PROTOCOL://HOSTNAME:PORT)                                 *
* 2) CREDENTIALS (IF THERE ARE ANY) BY ADDING THEM TO 3RD PARTY CREDENTIALS      *
*********************************************************************************/

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.Container
import org.ow2.proactive.pca.service.client.model.Endpoint
import org.ow2.proactive.pca.service.client.model.Deployment
import org.ow2.proactive.pca.service.client.model.Node
import java.util.regex.*
import groovy.json.JsonSlurper
import org.objectweb.proactive.core.util.ProActiveInet



def getExternalIPAddress() {
    def url = 'http://httpbin.org/ip'
    try {
        def apiUrl = new URL(url)
        def connection = apiUrl.openConnection() as HttpURLConnection
        connection.requestMethod = 'GET'
        def responseCode = connection.responseCode
        if (responseCode == 200) {
            def reader = new BufferedReader(new InputStreamReader(connection.inputStream))
            def jsonResponse = reader.text
            def slurper = new JsonSlurper()
            def json = slurper.parseText(jsonResponse)
            if (json.origin) {
                def ip = json.origin
                return ip
            } else {
                println "Failed to retrieve the IP address. Response: $jsonResponse"
            }
        } else {
            println "Failed to retrieve the IP address. Status code: $responseCode"
        }
    } catch (IOException e) {
        e.printStackTrace()
    }
    // Return null if an error occurs
    return null
}

// Regex expression for validating IPv4
String regex="(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])"
Pattern ipPattern = Pattern.compile(regex)


// Acquire variables
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def instanceName = variables.get("INSTANCE_NAME")
def password = variables.get("PASSWORD")
def proxyfied = variables.get("PROXYFIED")
def endpointID = variables.get("ENDPOINT_ID")
def httpEnabled = variables.get("HTTP_ENABLED")
def hostname = variables.get("PA_NODE_HOST")

if (variables.get("USE_IP_ADDRESS").toBoolean()) {
    if(variables.get("USE_PUBLIC_IP").toBoolean()) {
        hostname = getExternalIPAddress()
    } else {
        // Checking if the PA_NODE_HOST is a valid IPv4 addresses
        if (!ipPattern.matcher(hostname).matches()) {
            hostname = ProActiveInet.getInstance().getInetAddress().getHostAddress()
        }
    }
}
println("hostname: " + hostname)

// Handle service parameters
def port = new File(instanceName+"_port").text.trim()
def containerID = new File(instanceName+"_containerID").text.trim()
def containerUrl = hostname+":"+port
if (httpEnabled.toLowerCase()=="true"){
    containerUrl = "http://"+containerUrl
}
if(password){
    containerUrl = containerUrl +"/?password=" + password
} else{
    containerUrl = containerUrl +"/?password=vncpassword"
}
variables.put("HOSTNAME", hostname)
variables.put("PORT", port)

// Determine Cloud Automation URL
def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()

// Connect to Cloud Automation API
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

// Implement service model

// Container
def Container container = new Container()
container.setId(containerID)
container.setName(instanceName)

// Endpoint
def Endpoint endpoint = new Endpoint();
endpoint.setId(endpointID);
endpoint.setUrl(containerUrl);
// Set the endpoint parameters according to the Proxy settings
if (proxyfied.toLowerCase()=="true"){
    proxyfiedURL = pcaUrl+"/services/"+instanceId+"/endpoints/"+endpointID+"/"
    endpoint.setProxyfied(true);
    endpoint.setProxyfiedUrl(proxyfiedURL)
}else{
    endpoint.setProxyfied(false)
}

// Node
def Node node = new Node();
node.setName(variables.get("PA_NODE_NAME"))
node.setHost(variables.get("PA_NODE_HOST"))
node.setNodeSourceName(variables.get("PA_NODE_SOURCE"))
node.setUrl(variables.get("PA_NODE_URL"))

// Deployment
def Deployment deployment = new Deployment()
deployment.setNode(node)
deployment.setContainer(container)
deployment.setEndpoint(endpoint)

// Update service instance model (add Deployment, Groups)
def serviceInstanceData = serviceInstanceRestApi.getServiceInstance(sessionId, instanceId)
serviceInstanceData.setInstanceStatus("RUNNING")
serviceInstanceData = serviceInstanceData.addDeploymentsItem(deployment)
if (proxyfied.toLowerCase()=="true"){
    serviceInstanceData = serviceInstanceData.addGroupsItem("scheduleradmins")
    serviceInstanceData = serviceInstanceData.addGroupsItem("rmcoreadmins")
}
serviceInstanceData = serviceInstanceRestApi.updateServiceInstance(sessionId, instanceId, serviceInstanceData)
println(serviceInstanceData)

schedulerapi.registerService(variables.get("PA_JOB_ID"), instanceId as int, true)

// Inform other platforms that service is running through Synchronization API
channel = "Service_Instance_" + instanceId
synchronizationapi.createChannelIfAbsent(channel, true)
synchronizationapi.put(channel, "RUNNING_STATE", 1)
synchronizationapi.put(channel, "INSTANCE_NAME", instanceName)

// Add token to the current node
token = "PSA_" + instanceName
nodeUrl = variables.get("PA_NODE_URL")
println("Current nodeUrl: " + nodeUrl)
println("Adding token:    " + token)
rmapi.connect()
rmapi.addNodeToken(nodeUrl, token)

// Log output
println(variables.get("PA_JOB_NAME") + "_INSTANCE_ID: " + instanceId)
println(variables.get("PA_JOB_NAME") + "_ENDPOINT: " + endpoint)

println("END " + variables.get("PA_TASK_NAME"))

]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            110.515625
        </positionTop>
        <positionLeft>
            374.5
        </positionLeft>
      </metadata>
    </task>
    <task name="Loop_Over_Instance_Status"




    fork="true">
      <description>
        <![CDATA[ Loop over service instance status and fetch docker container logs.
It will run every minute. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/knime.jpeg"/>
        <info name="Documentation" value="PSA/PSAUserGuide.html"/>
        <info name="NODE_ACCESS_TOKEN" value="PSA_$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="Start_Knime"/>
      </depends>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Check_Instance_Status/raw" language="groovy"></file>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="Loop_Over_Instance_Status">
          <script>
            <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Fetch_Logs/raw" language="groovy"></file>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            238.515625
        </positionTop>
        <positionLeft>
            373.5
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2144px;
            height:2908px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-105.515625px;left:-368.5px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_301" style="top: 110.516px; left: 374.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Pull Knime image and start a container"><img src="/automation-dashboard/styles/patterns/img/wf-icons/knime.jpeg" width="20px">&nbsp;<span class="name">Start_Knime</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_304" style="top: 238.516px; left: 373.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Loop over service instance status and fetch docker container logs.
It will run every minute."><img src="/automation-dashboard/styles/patterns/img/wf-icons/knime.jpeg" width="20px">&nbsp;<span class="name">Loop_Over_Instance_Status</span></a></div><svg style="position:absolute;left:414.5px;top:150.5px" width="50.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 29.5 88 C 39.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M29.694300875,65.8307285 L28.2477891585927,44.69053919492763 L24.178127528694574,52.963256657656245 L15.380317316248938,50.20671254123305 L29.694300875,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M29.694300875,65.8307285 L28.2477891585927,44.69053919492763 L24.178127528694574,52.963256657656245 L15.380317316248938,50.20671254123305 L29.694300875,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:515.0266769263776px;top:188.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_315" style="position: absolute; transform: translate(-50%, -50%); left: 527px; top: 258.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 415px; top: 141px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 444.5px; top: 269px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 444.5px; top: 229px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 525px; top: 229px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 525px; top: 269px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>