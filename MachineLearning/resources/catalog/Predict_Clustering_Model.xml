<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.8"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
	name="Predict_Clustering_Model" projectName="7. Predict" priority="normal"
	onTaskError="continueJobExecution" maxNumberOfExecution="2">
	<description>
    <![CDATA[ Generate predictions using a trained model. ]]>
  </description>
	<genericInformation>
		<info name="bucketName" value="machine-learning" />
		<info name="workflow.icon"
			value="/automation-dashboard/styles/patterns/img/wf-icons/predict.png" />
		<info name="Documentation"
			value="https://doc.activeeon.com/latest/MLOS/MLOSUserGuide.html#_predict_clustering_model" />
		<info name="group" value="public-objects" />
	</genericInformation>
	<taskFlow>
		<task name="Predict_Clustering_Model">
			<description>
        <![CDATA[ Generate predictions using a trained model. ]]>
      </description>
			<genericInformation>
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/predict.png" />
			</genericInformation>
			<forkEnvironment javaHome="${PA_SCHEDULER_HOME}/jre">
				<envScript>
					<script>
						<code language="python">
              <![CDATA[
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters 
containerName = 'activeeon/dlm3' 
dockerRunCommand =  'docker run ' 
dockerParameters = '--rm ' 
# Prepare ProActive home volume 
paHomeHost = variables.get("PA_SCHEDULER_HOME") 
paHomeContainer = variables.get("PA_SCHEDULER_HOME") 
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' 
# Prepare working directory (For Dataspaces and serialized task file) 
workspaceHost = localspace 
workspaceContainer = localspace 
workspaceVolume = '-v '+localspace +':'+localspace+' ' 
# Prepare container working directory 
containerWorkingDirectory = '-w '+workspaceContainer+' ' 
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node 
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
						</code>
					</script>
				</envScript>
			</forkEnvironment>
			<scriptExecutable>
				<script>
					<code language="cpython">
            <![CDATA[
print("BEGIN Predict_Custering_Model")

import os
import pickle
import pandas as pd
from sklearn.metrics.cluster import adjusted_mutual_info_score
from sklearn.metrics.cluster import completeness_score
from sklearn.metrics.cluster import homogeneity_score
from sklearn.metrics.cluster import v_measure_score
from sklearn.metrics import mutual_info_score  

IS_CLUSTERING_ALGORITHM = variables.get("CLUSTERING_ALGORITHM")
MODEL_BIN = variables.get("MODEL")
DATA_TEST_DF_JSON = variables.get("DATA_TEST_DF_JSON")

if MODEL_BIN != None and DATA_TEST_DF_JSON != None:
  data_test_df = pd.read_json(DATA_TEST_DF_JSON,orient='split')
  loaded_model = pickle.loads(MODEL_BIN)
  predict_data = list(loaded_model.predict(data_test_df.values))
  predict_data_df = pd.DataFrame(predict_data)

  # CLUSTERING MEASURES
  try:
    DATA_LABEL_DF_JSON = variables.get("LABEL_TEST_DF_JSON")
    if IS_CLUSTERING_ALGORITHM == 'True' and DATA_LABEL_DF_JSON  != None:
      print("**********************CLUSTERING MEASURES**********************")
      label_test_df  = pd.read_json(DATA_LABEL_DF_JSON, orient='split')
      adjusted_mutual_info_score_result = adjusted_mutual_info_score(label_test_df.values.ravel(), predict_data)
      completeness_score_result = completeness_score(label_test_df.values.ravel(), predict_data)
      homogeneity_score_result = homogeneity_score(label_test_df.values.ravel(), predict_data)
      mutual_info_score_result = mutual_info_score(label_test_df.values.ravel(), predict_data)
      v_measure_score_result = v_measure_score(label_test_df.values.ravel(), predict_data)
      print("ADJUSTED MUTUAL INFORMATION: %.2f" % adjusted_mutual_info_score_result)
      print("COMPLETENESS SCORE: %.2f" % completeness_score_result)
      print("HOMOGENEITY METRIC: %.2f" % homogeneity_score_result)
      print("MUTUAL INFORMATION: %.2f" % mutual_info_score_result)
      print("V-MEASURE CLUSTER MEASURE: %.2f" % v_measure_score_result)
      print("******************************************************************************")

  except NameError:
    IS_CLUSTERING_ALGORITHM = None
    DATA_LABEL_DF_JSON = None
  
  variables.put("PREDICT_DATA_JSON", predict_data_df.to_json(orient='split'))
  print("END Predict_Custering_Model")

else:
  print('Please check your ML pipeline')
]]>
					</code>
				</script>
			</scriptExecutable>
			<controlFlow block="none"></controlFlow>
		</task>
	</taskFlow>
</job>