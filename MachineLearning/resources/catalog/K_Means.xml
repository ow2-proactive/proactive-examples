<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.14" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="K_Means" onTaskError="continueJobExecution" priority="normal" projectName="5.4 ML Clustering" tags="Samples,Big Data,Machine Learning,Analytics" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd">
  <variables>
    <variable advanced="true" description="Container platform used for executing the workflow tasks." group="Container Parameters" hidden="false" model="PA:LIST(no-container,docker,podman,singularity)" name="CONTAINER_PLATFORM" value="docker"/>
    <variable advanced="true" description="If True, it will activate the use of GPU for the workflow tasks on the selected container platform." group="Container Parameters" hidden="false" model="PA:Boolean" name="CONTAINER_GPU_ENABLED" value="False"/>
    <variable advanced="true" description="Name of the container image being used to run the workflow tasks." group="Container Parameters" hidden="false" model="PA:LIST(,docker://activeeon/dlm3,docker://activeeon/cuda,docker://activeeon/cuda2,docker://activeeon/rapidsai,docker://activeeon/nvidia:rapidsai)" name="CONTAINER_IMAGE" value=""/>
  </variables>
  <description>
    <![CDATA[ K-means aims to partition n observations into k clusters in which each observation belongs to the cluster with the nearest mean, serving as a prototype of the cluster. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="ai-machine-learning"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ml_clustering.png"/>
<info name="Documentation" value="PAIO/PAIOUserGuide.html#_kmeans"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="K_Means">
      <description>
        <![CDATA[ K-means aims to partition n observations into k clusters in which each observation belongs to the cluster with the nearest mean, serving as a prototype of the cluster. ]]>
      </description>
      <variables>
        <variable advanced="false" description="If False, the task will be ignored, it will not be executed." hidden="false" inherited="false" model="PA:Boolean" name="TASK_ENABLED" value="True"/>
        <variable advanced="false" description="Parameters' values of the KMeans algorithm." group="" hidden="false" inherited="false" name="INPUT_VARIABLES" value="{&quot;n_clusters&quot;:2}"/>
        <variable advanced="false" description="Function used to evaluate the quality of a given pipeline for the clustering problem." hidden="false" inherited="false" model="PA:LIST(adjusted_mutual_info_score,adjusted_rand_score,completeness_score,fowlkes_mallows_score,homogeneity_score,mutual_info_score,normalized_mutual_info_score,v_measure_score)" name="SCORING" value="v_measure_score"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ml_clustering.png"/>
        <info name="task.documentation" value="PAIO/PAIOUserGuide.html#_kmeans"/>
      </genericInformation>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/ai-auto-ml-optimization/resources/get_automl_params/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <file language="cpython" url="${PA_CATALOG_REST_URL}/buckets/ai-machine-learning/resources/K_means_Script/raw"/>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            119.7421875
        </positionTop>
        <positionLeft>
            132.984375
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ function(data) {
      return render.call(this, data, _$1);
    } ]]>
    </visualization>
  </metadata>
</job>
