<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.8"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
	name="Train_Model" projectName="6. Train" priority="normal"
	onTaskError="continueJobExecution" maxNumberOfExecution="2">
	<description>
    <![CDATA[ Train a model using a classification or regression algorithm. ]]>
  </description>
	<genericInformation>
		<info name="bucketName" value="machine-learning" />
		<info name="workflow.icon"
			value="/automation-dashboard/styles/patterns/img/wf-icons/train.png" />
		<info name="Documentation"
			value="https://doc.activeeon.com/latest/MLOS/MLOSUserGuide.html#_train_model" />
		<info name="group" value="public-objects" />
	</genericInformation>
	<taskFlow>
		<task name="Train_Model">
			<description>
        <![CDATA[ Train a model using a classification or regression algorithm. ]]>
      </description>
			<genericInformation>
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/train.png" />
			</genericInformation>
			<forkEnvironment javaHome="${PA_SCHEDULER_HOME}/jre">
				<envScript>
					<script>
						<code language="python">
              <![CDATA[
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters 
containerName = 'activeeon/dlm3' 
dockerRunCommand =  'docker run ' 
dockerParameters = '--rm ' 
# Prepare ProActive home volume 
paHomeHost = variables.get("PA_SCHEDULER_HOME") 
paHomeContainer = variables.get("PA_SCHEDULER_HOME") 
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' 
# Prepare working directory (For Dataspaces and serialized task file) 
workspaceHost = localspace 
workspaceContainer = localspace 
workspaceVolume = '-v '+localspace +':'+localspace+' ' 
# Prepare container working directory 
containerWorkingDirectory = '-w '+workspaceContainer+' ' 
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node 
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
						</code>
					</script>
				</envScript>
			</forkEnvironment>
			<scriptExecutable>
				<script>
					<code language="cpython">
            <![CDATA[
print("BEGIN Train_Model")

import pandas as pd
import random
import pickle

IS_SUPERVIDED_ALGORITHM = variables.get("SUPERVISED_ALGORITHM")
LABEL_TRAIN_DF_JSON = variables.get("LABEL_TRAIN_DF_JSON")
DATA_TRAIN_DF_JSON  = variables.get("DATA_TRAIN_DF_JSON")

if IS_SUPERVIDED_ALGORITHM == 'True' and LABEL_TRAIN_DF_JSON != None and DATA_TRAIN_DF_JSON != None:
  ALGORITHM_NAME = variables.get("ALGORITHM_NAME")
  data_train_df = pd.read_json(DATA_TRAIN_DF_JSON, orient='split')
  label_train_df = pd.read_json(LABEL_TRAIN_DF_JSON, orient='split')
  model = None
  
  # CLASSIFICATION LEARNING
  if ALGORITHM_NAME == 'SupportVectorMachines':
    from sklearn.svm import SVC
    c_para = variables.get("C_PARA")
    kernel_para = variables.get("KERNEL_PARA")
    model = SVC(C=c_para, kernel=kernel_para)
   
  if ALGORITHM_NAME == 'GaussianNaiveBayes':
    from sklearn.naive_bayes import GaussianNB
    model = GaussianNB()
  
  if ALGORITHM_NAME == 'LogisticRegression':
    from sklearn.linear_model import LogisticRegression
    penalty_para = variables.get("PENALTY_PARA")
    solver_para = variables.get("SOLVER_PARA") 
    max_iter_para = variables.get("MAX_ITERATIONS_PARA")
    n_jobs_para = variables.get("N_JOBS_PARA")
    model = LogisticRegression(penalty=penalty_para, solver=solver_para, max_iter = int(max_iter_para), n_jobs = int(n_jobs_para))
  
  # REGRESSION LEARNING
  if ALGORITHM_NAME == 'LinearRegression':
    from sklearn.linear_model import LinearRegression
    n_jobs_para = variables.get("N_JOBS_PARA")
    model = LinearRegression(n_jobs = int(n_jobs_para))

  if ALGORITHM_NAME == 'SupportVectorRegression':
    from sklearn.svm import SVR
    c_para = variables.get("C_PARA")
    kernel_para = variables.get("KERNEL_PARA")
    epsilon_para = variables.get("EPSILON_PARA")
    model = SVR(C=c_para, kernel=kernel_para, epsilon=epsilon_para) 
  
  if ALGORITHM_NAME == 'BayesianRidgeRegression':
    from sklearn import linear_model
    n_iter_para = variables.get("N_ITERATIONS_PARA")
    alpha1_para = variables.get("ALPHA1_PARA")
    alpha2_para = variables.get("ALPHA2_PARA")
    lambda1_para = variables.get("LAMBDA1_PARA")
    lambda2_para = variables.get("LAMBDA2_PARA")
    model = linear_model.BayesianRidge(alpha_1=alpha1_para, alpha_2=alpha2_para, lambda_1=lambda1_para, lambda_2=lambda2_para, n_iter= int(n_iter_para))
  
  model.fit(data_train_df.values, label_train_df.values.ravel())
  model_bin = pickle.dumps(model)
  variables.put("MODEL", model_bin)
  
  print("END Train_Model")

else:
  print('Please check your ML pipeline')
]]>
					</code>
				</script>
			</scriptExecutable>
			<controlFlow block="none"></controlFlow>
		</task>
	</taskFlow>
</job>