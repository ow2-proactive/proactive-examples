<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.9"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.9 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.9/schedulerjob.xsd"
    name="Add_Label" projectName="3. Data Preprocessing"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <description>
    <![CDATA[ Adds a new column containing the label to the original input data. ]]>
  </description>
    <genericInformation>
    <info name="bucketName" value="machine-learning"/>
    <info name="pca.action.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/add_data_label.png"/>
    <info name="Documentation" value="https://doc.activeeon.com/latest/MLOS/MLOSUserGuide.html#_machine_learning_bucket"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Add_Label">
      <description>
        <![CDATA[ Adds a new column containing the label to the original input data. ]]>
      </description>
      <variables>
        <variable name="FILE_URL" value="" inherited="false" />
        <variable name="FILE_DELIMITER" value=";" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/add_data_label.png"/>
      </genericInformation>
      <forkEnvironment javaHome="${PA_SCHEDULER_HOME}/jre" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters 
containerName = 'activeeon/dlm3' 
dockerRunCommand =  'docker run ' 
dockerParameters = '--rm ' 
# Prepare ProActive home volume 
paHomeHost = variables.get("PA_SCHEDULER_HOME") 
paHomeContainer = variables.get("PA_SCHEDULER_HOME") 
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' 
# Prepare working directory (For Dataspaces and serialized task file) 
workspaceHost = localspace 
workspaceContainer = localspace 
workspaceVolume = '-v '+localspace +':'+localspace+' ' 
# Prepare container working directory 
containerWorkingDirectory = '-w '+workspaceContainer+' ' 
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node 
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
print("BEGIN Add Label")

import pandas as pd
import numpy as np

file_url = str(variables.get("FILE_URL"))
file_sep = str(variables.get("FILE_DELIMITER"))
IS_LABELED_DATA = variables.get("IS_LABELED_DATA")
DATAFRAME_JSON = variables.get("DATAFRAME_JSON")

if IS_LABELED_DATA=='True':
  dataframe_previous = pd.read_json(DATAFRAME_JSON, orient='split')
  label_add = pd.read_csv(file_url,file_sep)
  columns_name = dataframe_previous.columns
  columns_number = len(columns_name)
  frames = []
  frames.append(dataframe_previous)
  frames.append(label_add)
  dataframe = pd.concat(frames, axis=1, ignore_index=False)
  data  = dataframe.values[:,0:columns_number-1]
  label = dataframe.values[:,columns_number-1]
  data_df = pd.DataFrame(data=data, columns=columns_name[0:columns_number-1])
  label_df = pd.DataFrame(data=label, columns=[columns_name[columns_number-1]])
  variables.put("DATAFRAME_JSON", dataframe.to_json(orient='split'))
  variables.put("COLUMNS_NAME_JSON", pd.Series(columns_name).to_json(orient='split'))
  variables.put("DATA_TRAIN_DF_JSON", data_df.to_json(orient='split'))
  variables.put("DATA_TEST_DF_JSON",data_df.to_json(orient='split'))
  variables.put("LABEL_TRAIN_DF_JSON", label_df.to_json(orient='split'))
  variables.put("LABEL_TEST_DF_JSON", label_df.to_json(orient='split'))
  variables.put("IS_LABELED_DATA", IS_LABELED_DATA)
  result = dataframe.to_html()
  resultMetadata.put("file.extension", ".html")
  resultMetadata.put("file.name", "output.html")
  resultMetadata.put("content.type", "text/html")
else:
  print("Your Data is already labeled")

print("END Add Label")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
variables.put("PREVIOUS_PA_TASK_NAME", variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </post>
    </task>
  </taskFlow>
</job>
