<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.9"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.9 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.9/schedulerjob.xsd"
	name="MachineLearning_NodeSource_Deploy" projectName="Machine Learning NodeSource"
	priority="normal" onTaskError="continueJobExecution"
	maxNumberOfExecution="2">
	<variables>
		<variable name="username" value="USERNAME" />
		<variable name="password" value="PASSWORD" />
		<variable name="credentials"
			value="CREDENTIAL_GENERATED_BY_RESOURCE_MANAGER_PORTAL" />
		<variable name="rmAddress" value="https://try.activeeon.com/rest/rm/" />
		<variable name="NodeSourceName" value="MachineLearningNodes" />
		<variable name="nodesNumber" value="4" />
		<variable name="CONTAINER_NAME" value="ml" />
		<variable name="DOCKER_IMAGE" value="activeeon/dlm3" />
	</variables>
	<description>
    <![CDATA[ Deploy a machine learning nodesource ]]>
	</description>
	<genericInformation>
		<info name="bucketName" value="machine-learning-workflows" />
		<info name="pca.action.icon"
			value="/automation-dashboard/styles/patterns/img/wf-icons/machine_learning_node_source_deploy_6.png" />
		<info name="Documentation"
			value="http://activeeon.com/resources/automated-machine-learning-activeeon.pdf" />
		<info name="group" value="public-objects" />
	</genericInformation>
	<taskFlow>
		<task name="Deploy_NodeSource">
			<description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
			</description>
			<genericInformation>
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/machine_learning_node_source_deploy_6.png" />
			</genericInformation>
			<scriptExecutable>
				<script>
					<code language="bash">
            <![CDATA[
sessionid=$(curl -d "username=$variables_username&password=$variables_password" $variables_rmAddress"/login")

echo "The session ID with current user"

echo $sessionid
             
creds=$variables_credentials

echo "The credential for the current username and password generated from the Resource Manager portal"
             
curl -v -H "sessionid:$sessionid" -d "nodeSourceName=$variables_NodeSourceName&infrastructureType=org.ow2.proactive.resourcemanager.nodesource.infrastructure.LocalInfrastructure&&infrastructureParameters=$variables_nodesNumber&infrastructureParameters=30000&infrastructureParameters=" --data-urlencode "infrastructureFileParameters=$creds" -d "policyType=org.ow2.proactive.resourcemanager.nodesource.policy.StaticPolicy&policyParameters=tokens=$variables_NodeSourceName&policyParameters=ME" $variables_rmAddress"/nodesource/create"

echo " A node source is created"
]]>
					</code>
				</script>
			</scriptExecutable>
			<controlFlow block="none"></controlFlow>
		</task>
		<task name="Deploy_Docker_Container">
			<description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
			</description>
			<genericInformation>
				<info name="NODE_ACCESS_TOKEN" value="MachineLearningNodes" />
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/machine_learning_node_source_deploy_6.png" />
			</genericInformation>
			<depends>
				<task ref="Deploy_NodeSource" />
			</depends>
			<scriptExecutable>
				<script>
					<code language="bash">
            <![CDATA[
echo "Updating local docker image"
docker pull $variables_DOCKER_IMAGE
export RUN_DOCKER="docker run -dit -h dlm -w /root --name=$variables_CONTAINER_NAME $variables_DOCKER_IMAGE"
echo "Checking if docker container is running"
if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
then 
  echo "OK. The $variables_CONTAINER_NAME container is running!"
else 
  echo "$variables_CONTAINER_NAME container is not running."
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "false" ]; 
  then 
    echo "Starting it..."
    docker start $variables_CONTAINER_NAME
  else 
    echo "Running it..."
    echo $RUN_DOCKER
    $($RUN_DOCKER)
    sleep 5
  fi
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
  then 
    echo "OK. The $variables_CONTAINER_NAME container is running now!"
  else 
    echo "$variables_CONTAINER_NAME container is not running."
    echo "An error occurred while running the container."
    exit
  fi
fi
]]>
					</code>
				</script>
			</scriptExecutable>
			<controlFlow block="none"></controlFlow>
		</task>
	</taskFlow>
</job>