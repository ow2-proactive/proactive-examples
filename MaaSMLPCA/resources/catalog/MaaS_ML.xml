<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.12" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="MaaS_ML" onTaskError="continueJobExecution" priority="normal" projectName="Cloud Automation - Deployment" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd">
  <variables>
    <variable name="NATIVE_SCHEDULER" value=""/>
    <variable name="NATIVE_SCHEDULER_PARAMS" value=""/>
    <variable name="NODE_NAME" value=""/>
    <variable name="INSTANCE_NAME" value="maas-ml-$PA_JOB_ID"/>
    <variable name="ENDPOINT_ID" value="maas-ml-gui-$PA_JOB_ID"/>
    <variable model="PA:Boolean" name="PROXYFIED" value="False"/>
    <variable model="PA:Boolean" name="HTTPS_ENABLED" value="False"/>
    <variable model="PA:Boolean" name="DEBUG_ENABLED" value="True"/>
    <variable model="PA:Boolean" name="TRACE_ENABLED" value="True"/>
    <variable model="PA:Boolean" name="DRIFT_ENABLED" value="True"/>
    <variable name="DRIFT_THRESHOLD" value="1.9"/>
    <variable name="YAML_FILE" value="ml_service-api"/>
    <variable name="PYTHON_ENTRYPOINT" value="ml_service"/>
    <variable name="SERVICE_PORT" value="-1"/>
    <variable model="PA:List(docker,singularity)" name="ENGINE" value="docker"/>
    <variable name="DOCKER_IMAGE" value="activeeon/maas_ml"/>
    <variable name="SINGULARITY_IMAGE_PATH" value="/tmp/maas_ml.sif"/>
    <variable model="PA:Boolean" name="BUILD_IMAGE_IF_NOT_EXISTS" value="True"/>
  </variables>
  <description>
    <![CDATA[ This service allows to launch an instance of MaaS_ML under the name: INSTANCE_NAME, through ProActive Cloud Automation (PCA) Portal. Using the launched instance, an already built, tested and validated ML model can be deployed to be employed for predictive purposes on new datasets.
The lifecycle of each MaaS_ML instance is constituted of four main phases:
1. Launching the MaaS_ML instance.
2. Deploying the ML model.
3. Calling the deployed ML model for predictions.
4. Finishing or terminating the MaaS_ML instance.
By clicking on the Execute Action button, you will be launching the MaaS_ML instance. The other phases and features can be consequently enacted using the available actions associated to each MaaS_ML instance.
For the descriptions of the workflow variables below, please check the documentation link. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="cloud-automation"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
<info name="pca.states" value="(VOID,RUNNING)"/>
<info name="NS" value="$NATIVE_SCHEDULER"/>
<info name="Documentation" value="../doc/PCA/PCAUserGuide.html#_model_service"/>
<info name="pca.service.id" value="MaaS_ML"/>
<info name="NS_BATCH" value="$NATIVE_SCHEDULER_PARAMS"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Start_MaaS_ML_S" onTaskError="cancelJob">
      <description>
        <![CDATA[ Pull Model_Service image and start a container ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
        <info name="DISABLE_PTK" value="true"/>
      </genericInformation>
      <inputFiles>
        <files accessMode="transferFromGlobalSpace" includes="certificate_mas.pem"/>
        <files accessMode="transferFromGlobalSpace" includes="key_mas.pem"/>
      </inputFiles>
      <selection>
        <script type="static">
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_node_name_not_empty/raw">
            <arguments>
              <argument value="$NODE_NAME"/>
            </arguments>
          </file>
        </script>
      </selection>
      <pre>
        <script>
          <file language="cpython" url="${PA_CATALOG_REST_URL}/buckets/model-as-a-service-scripts/resources/Pre_Start_Model_Service/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo BEGIN "$variables_PA_TASK_NAME"

export XDG_RUNTIME_DIR=/run/user/$UID

################################################################################
### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
SIF_IMAGE_PATH=$variables_SINGULARITY_IMAGE_PATH
BUILD_IMAGE=$variables_BUILD_IMAGE_IF_NOT_EXISTS
INSTANCE_NAME=$variables_INSTANCE_NAME
DOCKER_IMAGE=$variables_DOCKER_IMAGE
HTTPS_ENABLED=$variables_HTTPS_ENABLED
DEBUG_ENABLED=$variables_DEBUG_ENABLED
TRACE_ENABLED=$variables_TRACE_ENABLED
DRIFT_ENABLED=$variables_DRIFT_ENABLED
DRIFT_THRESHOLD=$variables_DRIFT_THRESHOLD
MODEL_SERVICE_HOST_PORT=$variables_SERVICE_PORT
USER_KEY=$variables_USER_KEY
USER_DATA_FILE="${PWD}/${variables_USER_DATA_FILE}"
PYTHON_ENTRYPOINT_FILE="${PWD}/${variables_PYTHON_ENTRYPOINT}.py"
INSTANCE_PATH="${SIF_IMAGE_PATH}/${INSTANCE_NAME}"
YAML_FILE="${PWD}/${variables_YAML_FILE}.yaml"
chmod +x $PYTHON_ENTRYPOINT_FILE $YAML_FILE
################################################################################

PATH=$PATH:/usr/sbin

GET_RANDOM_PORT(){
    PCA_SERVICES_PORT_RANGE_FILE=$variables_PA_SCHEDULER_HOME/config/pca_services_port_range
    if [[ -f "$PCA_SERVICES_PORT_RANGE_FILE" ]]; then
        read LOWERPORT UPPERPORT < $PCA_SERVICES_PORT_RANGE_FILE
    else
        read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
    fi
    while :
    do
        RND_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
        ss -lpn | grep -q ":$RND_PORT " || break
    done
    echo $RND_PORT
}

if [ "$MODEL_SERVICE_HOST_PORT" -eq "-1" ]; then
    echo "[INFO] Picking a random port number"
    MODEL_SERVICE_HOST_PORT=$(GET_RANDOM_PORT)
fi
echo "The service will be initialized on port $MODEL_SERVICE_HOST_PORT"

if [ -z "$INSTANCE_NAME" ]; then
    echo "[ERROR] The INSTANCE_NAME is not provided by the user. Empty value is not allowed."
    exit 1
fi

if [ -z "$SIF_IMAGE_PATH" ]; then
    echo "[ERROR] The singularity image path is not provided by the user. Empty value is not allowed."
    exit 1
else
    echo "Using $SIF_IMAGE_PATH to start the service"
fi

if [ "$(singularity instance list | grep "^$INSTANCE_NAME$")" ]; then
    echo "[ERROR] $INSTANCE_NAME is already used by another service instance."
    exit 128
else
    if [ "${BUILD_IMAGE,,}" = "true" ]; then
        if [ -e "$SIF_IMAGE_PATH" ]; then
            echo "[INFO] Using existing image on $SIF_IMAGE_PATH"
        else
            echo "[INFO] Building the image on $SIF_IMAGE_PATH"
            echo "[INFO] singularity build --sandbox $SIF_IMAGE_PATH docker://$DOCKER_IMAGE"
            singularity build --sandbox $SIF_IMAGE_PATH docker://$DOCKER_IMAGE
        fi
    fi
    
    echo "[INFO] Starting the singularity instance $INSTANCE_NAME"
    echo "[INFO] singularity instance start --writable --no-home $SIF_IMAGE_PATH $INSTANCE_NAME"
    singularity instance start --writable --no-home $SIF_IMAGE_PATH $INSTANCE_NAME
    
    export SINGULARITYENV_HTTPS_ENABLED=$HTTPS_ENABLED
    export SINGULARITYENV_DEBUG_ENABLED=$DEBUG_ENABLED
    export SINGULARITYENV_TRACE_ENABLED=$TRACE_ENABLED
    export SINGULARITYENV_USER_KEY=$USER_KEY
    export SINGULARITYENV_DRIFT_ENABLED=$DRIFT_ENABLED
    export SINGULARITYENV_DRIFT_THRESHOLD=$DRIFT_THRESHOLD
    export SINGULARITYENV_INSTANCE_PATH=$INSTANCE_PATH
    
    singularity exec instance://$INSTANCE_NAME mkdir -p ${INSTANCE_PATH}

    SERVICE_EXEC_COMMAND="singularity exec instance://${INSTANCE_NAME} python ml_service.py --port ${MODEL_SERVICE_HOST_PORT} &> /dev/null & &> /dev/null"
    echo "[INFO] $SERVICE_EXEC_COMMAND"
    eval $SERVICE_EXEC_COMMAND
    sleep 3
    singularity exec instance://$INSTANCE_NAME ls -la
    
    if [ "$(singularity instance list | grep "^$INSTANCE_NAME$")" ]; then
        echo "$INSTANCE_NAME" > $INSTANCE_NAME"_status"
    fi
fi

echo "$MODEL_SERVICE_HOST_PORT" > $INSTANCE_NAME"_port"

# Endpoint added to the job variables using a groovy post-script
echo END "$variables_PA_TASK_NAME"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <post>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/model-as-a-service-scripts/resources/Post_Start_Model_Service/raw"/>
        </script>
      </post>
      <cleaning>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Clean_Start_Service/raw"/>
        </script>
      </cleaning>
      <metadata>
        <positionTop>
            435.0347213745117
        </positionTop>
        <positionLeft>
            815.642333984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Loop_Over_Instance_Status_S">
      <description>
        <![CDATA[ Loop over service instance status and fetch docker container logs.
It will run every minute. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="Start_MaaS_ML_S"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def instanceName = variables.get("INSTANCE_NAME")
def channel = "Service_Instance_" + instanceId

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()

// Connect to Cloud Automation API
def serviceInstanceRestApi = new ServiceInstanceRestApi(new ApiClient().setBasePath(pcaUrl))

// If service instance is FINISHED or PAUSED then stop this loop and job and delete the sync channel
def currentStatus = serviceInstanceRestApi.getServiceInstanceUsingGET(sessionId, instanceId).getInstanceStatus()
if (currentStatus.equals("FINISHED")){
    variables.put("IS_FINISHED",true)
    synchronizationapi.deleteChannel(channel)
    // Remove token in the current node
    token = instanceName
    nodeUrl = variables.get("PA_NODE_URL")
    println("Current nodeUrl: " + nodeUrl)
    println("Removing token:  " + token)
    rmapi.connect()
    rmapi.removeNodeToken(nodeUrl, token)
} else {
    // Check if container has been stopped abnormally
    def command = ["singularity", "instance", "list"].execute() | ["grep", "${instanceName}"].execute()
    command.waitFor()
    def isContainerRunning = command.text
    if ((!isContainerRunning) && (!synchronizationapi.get(channel, "FINISH_LAUNCHED")) && (!synchronizationapi.get(channel, "PAUSE_LAUNCHED"))){
        currentStatus = 'ERROR'
        println("[ERROR] An internal error occured in docker container: " + instanceName)
        // Update docker container is not running
        def serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(sessionId, instanceId)
        serviceInstanceData.setInstanceStatus(currentStatus)
        serviceInstanceRestApi.updateServiceInstanceUsingPUT(sessionId, instanceId, serviceInstanceData)
        // Tell the CRON loop to stop
        variables.put("IS_FINISHED",true)
        // Exit with error
        System.exit(1)
    }
    //} else {
        // Fetch all logs or only new logs since last fetch time mark
        //def lastTime=variables.get('LAST_TIME_MARKER')
        //def fetchLogsCmd = lastTime ? ["docker", "logs", "--since", lastTime, instanceName] : ["docker", "logs", instanceName]
        //fetchLogsCmd.execute().waitForProcessOutput(System.out, System.err)
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <loop target="Loop_Over_Instance_Status_S">
          <script>
            <code language="groovy">
              <![CDATA[
// Check if loop task has ordered to finish the loop
def isFinished = variables.get('IS_FINISHED') as boolean
loop = isFinished ? false : '*/1 * * * *'

// Set a time marker to fetch logs since this marker.
variables.put("LAST_TIME_MARKER",new Date().format("yyyy-MM-dd'T'HH:mm:ssXXX"))
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            563.038200378418
        </positionTop>
        <positionLeft>
            815.642333984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Condition">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
        <info name="Documentation" value="user/ProActiveUserGuide.html#_branch"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def engine = variables.get("ENGINE")

println("[INFO] Starting a Model_Service server in a " + engine + " container.")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <if else="Start_MaaS_ML_D" target="Start_MaaS_ML_S">
          <script>
            <code language="groovy">
              <![CDATA[
def engine = variables.get("ENGINE")
if(engine.toLowerCase().equals("singularity")){
    branch = "if";
} else {
    branch = "else";
}
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            307.0312728881836
        </positionTop>
        <positionLeft>
            879.6353759765625
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Start_MaaS_ML_D" onTaskError="cancelJob">
      <description>
        <![CDATA[ Pull Elasticsearch image and start a container ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
      </genericInformation>
      <inputFiles>
        <files accessMode="transferFromGlobalSpace" includes="certificate_mas.pem"/>
        <files accessMode="transferFromGlobalSpace" includes="key_mas.pem"/>
      </inputFiles>
      <selection>
        <script type="static">
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_node_name_not_empty/raw">
            <arguments>
              <argument value="$NODE_NAME"/>
            </arguments>
          </file>
        </script>
      </selection>
      <pre>
        <script>
          <file language="cpython" url="${PA_CATALOG_REST_URL}/buckets/model-as-a-service-scripts/resources/Pre_Start_Model_Service/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo BEGIN "$variables_PA_TASK_NAME"

################################################################################
### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
MODEL_SERVICE_INTERNAL_PORT=9090
DOCKER_IMAGE=$variables_DOCKER_IMAGE
HTTPS_ENABLED=$variables_HTTPS_ENABLED
DEBUG_ENABLED=$variables_DEBUG_ENABLED
TRACE_ENABLED=$variables_TRACE_ENABLED
DRIFT_ENABLED=$variables_DRIFT_ENABLED
DRIFT_THRESHOLD=$variables_DRIFT_THRESHOLD
USER_KEY=$variables_USER_KEY
INSTANCE_NAME=$variables_INSTANCE_NAME
MODEL_SERVICE_HOST_PORT=$variables_SERVICE_PORT
USER_DATA_FILE="${PWD}/${variables_USER_DATA_FILE}"
PYTHON_ENTRYPOINT_FILE="${PWD}/${variables_PYTHON_ENTRYPOINT}.py"
YAML_FILE="${PWD}/${variables_YAML_FILE}.yaml"
INSTANCE_PATH="/model_as_service"
chmod +x $PYTHON_ENTRYPOINT_FILE $YAML_FILE
################################################################################

imagedecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }
DOCKER_IMAGE=$(imagedecode "$DOCKER_IMAGE")

PATH=$PATH:/usr/sbin

GET_RANDOM_PORT(){
    PCA_SERVICES_PORT_RANGE_FILE=$variables_PA_SCHEDULER_HOME/config/pca_services_port_range
    if [[ -f "$PCA_SERVICES_PORT_RANGE_FILE" ]]; then
        read LOWERPORT UPPERPORT < $PCA_SERVICES_PORT_RANGE_FILE
    else
        read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
    fi
    while :
    do
        RND_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
        ss -lpn | grep -q ":$RND_PORT " || break
    done
    echo $RND_PORT
}

if [ "$MODEL_SERVICE_HOST_PORT" -eq "-1" ]; then
    echo "[INFO] Picking a random port number"
    MODEL_SERVICE_HOST_PORT=$(GET_RANDOM_PORT)
fi
echo "The service will be initialized on port $MODEL_SERVICE_HOST_PORT"

if [ -z "$INSTANCE_NAME" ]; then
    echo [ERROR] The INSTANCE_NAME is not provided by the user. Empty value is not allowed.
    exit 1
fi

echo "Pulling $DOCKER_IMAGE"
docker pull $DOCKER_IMAGE

if [ "$(docker ps -a --format '{{.Names}}' | grep "^$INSTANCE_NAME$")" ]; then
    echo [ERROR] "$INSTANCE_NAME" is already used by another service instance.
    exit 128
else
    echo "Running $INSTANCE_NAME container"
    echo "docker run -dit --name $INSTANCE_NAME -e HTTPS_ENABLED=$HTTPS_ENABLED -e DEBUG_ENABLED=$DEBUG_ENABLED -e TRACE_ENABLED=$TRACE_ENABLED -e USER_KEY=$USER_KEY -e DRIFT_ENABLED=$DRIFT_ENABLED -e DRIFT_THRESHOLD=$DRIFT_THRESHOLD -p $MODEL_SERVICE_HOST_PORT:$MODEL_SERVICE_INTERNAL_PORT $DOCKER_IMAGE"
    docker run -dit --name $INSTANCE_NAME -e INSTANCE_PATH=$INSTANCE_PATH -e HTTPS_ENABLED=$HTTPS_ENABLED -e DEBUG_ENABLED=$DEBUG_ENABLED -e TRACE_ENABLED=$TRACE_ENABLED -e USER_KEY=$USER_KEY -e DRIFT_ENABLED=$DRIFT_ENABLED -e DRIFT_THRESHOLD=$DRIFT_THRESHOLD -p $MODEL_SERVICE_HOST_PORT:$MODEL_SERVICE_INTERNAL_PORT $DOCKER_IMAGE
    echo "docker exec $INSTANCE_NAME mkdir -p $INSTANCE_PATH"
    docker exec $INSTANCE_NAME mkdir -p $INSTANCE_PATH
    #Copy the needed files to launch the service
    echo "Copying the needed files to launch the service"
    docker cp $USER_DATA_FILE $INSTANCE_NAME:$INSTANCE_PATH/user_data.enc
    docker cp $PYTHON_ENTRYPOINT_FILE $INSTANCE_NAME:$INSTANCE_PATH/ml_service.py
    docker cp $YAML_FILE $INSTANCE_NAME:$INSTANCE_PATH/ml_service-api.yaml
    docker cp key_mas.pem $INSTANCE_NAME:$INSTANCE_PATH/key_mas.pem
    docker cp certificate_mas.pem $INSTANCE_NAME:$INSTANCE_PATH/certificate_mas.pem
    echo "docker exec $INSTANCE_NAME ls -la $INSTANCE_PATH"
    docker exec $INSTANCE_NAME ls -la $INSTANCE_PATH
    echo "docker exec -dit $INSTANCE_NAME bash -c python $INSTANCE_PATH/ml_service.py >> /proc/1/fd/1"
    docker exec -dit $INSTANCE_NAME bash -c "python $INSTANCE_PATH/ml_service.py"
    
    if [ "$(docker ps -a --format '{{.Names}}' | grep "^$INSTANCE_NAME$")" ]; then
        RUNNING=$(docker inspect --format="{{ .State.Running }}" $INSTANCE_NAME 2> /dev/null)
        if [ "${RUNNING,,}" = "true" ]; then
            echo $INSTANCE_NAME > $INSTANCE_NAME"_status"
        fi
    else
        echo $INSTANCE_STATUS > $INSTANCE_NAME"_status"
    fi
fi

MODEL_SERVICE_PORT=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "'$MODEL_SERVICE_INTERNAL_PORT'/tcp") 0).HostPort}}' $INSTANCE_NAME)
echo "$MODEL_SERVICE_PORT" > $INSTANCE_NAME"_port"

containerID=$(docker ps -aqf "name=^$INSTANCE_NAME$")
echo "$containerID" > $INSTANCE_NAME"_containerID"

echo END "$variables_PA_TASK_NAME"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <post>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/model-as-a-service-scripts/resources/Post_Start_Model_Service/raw"/>
        </script>
      </post>
      <cleaning>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Clean_Start_Service/raw"/>
        </script>
      </cleaning>
      <metadata>
        <positionTop>
            435.0347213745117
        </positionTop>
        <positionLeft>
            943.6458740234375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Loop_Over_Instance_Status_D">
      <description>
        <![CDATA[ Loop over service instance status and fetch docker container logs.
It will run every minute. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="Start_MaaS_ML_D"/>
      </depends>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Check_Instance_Status/raw"/>
        </script>
      </scriptExecutable>
      <controlFlow>
        <loop target="Loop_Over_Instance_Status_D">
          <script>
            <code language="groovy">
              <![CDATA[
// Check if loop task has ordered to finish the loop
def isFinished = variables.get('IS_FINISHED') as boolean
loop = isFinished ? false : '*/1 * * * *'

// Set a time marker to fetch logs since this marker.
variables.put("LAST_TIME_MARKER",new Date().format("yyyy-MM-dd'T'HH:mm:ssXXX"))
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            563.038200378418
        </positionTop>
        <positionLeft>
            943.6458740234375
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:3150px;
            height:3760px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-302.0312728881836px;left:-810.642333984375px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_44" style="top: 435.035px; left: 815.642px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Pull Model_Service image and start a container"><img src="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png" width="20px">&nbsp;<span class="name">Start_MaaS_ML_S</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_47" style="top: 563.038px; left: 815.642px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Loop over service instance status and fetch docker container logs.
It will run every minute."><img src="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png" width="20px">&nbsp;<span class="name">Loop_Over_Instance_Status_S</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_50" style="top: 307.031px; left: 879.635px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Condition</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_53" style="top: 435.035px; left: 943.646px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Pull Elasticsearch image and start a container"><img src="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png" width="20px">&nbsp;<span class="name">Start_MaaS_ML_D</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_56" style="top: 563.038px; left: 943.646px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Loop over service instance status and fetch docker container logs.
It will run every minute."><img src="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png" width="20px">&nbsp;<span class="name">Loop_Over_Instance_Status_D</span></a></div><svg style="position:absolute;left:865.5px;top:475.5px" width="48" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 27 87 C 37 37 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M27.41933025,64.92074025000001 L26.478640011920092,43.75201090986291 L22.21236200502047,51.92506859764688 L13.48296835956696,48.958979154842446 L27.41933025,64.92074025000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M27.41933025,64.92074025000001 L26.478640011920092,43.75201090986291 L22.21236200502047,51.92506859764688 L13.48296835956696,48.958979154842446 L27.41933025,64.92074025000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:970.0266769263776px;top:512.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_67" style="position: absolute; transform: translate(-50%, -50%); left: 982px; top: 582.5px;">loop</div><svg style="position:absolute;left:805.5px;top:346.5px" width="85" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 89 C -10 39 74 50 64 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.395131999999998,64.440458 L23.250457002871663,54.77212210202445 L14.043225725617951,54.29579006745084 L13.105789070322489,45.12402837640649 L4.395131999999998,64.440458" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.395131999999998,64.440458 L23.250457002871663,54.77212210202445 L14.043225725617951,54.29579006745084 L13.105789070322489,45.12402837640649 L4.395131999999998,64.440458" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_73" style="position: absolute; transform: translate(-50%, -50%); left: 847.5px; top: 391px;">if</div><svg style="position:absolute;left:869.5px;top:346.5px" width="84" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 63 89 C 73 39 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M59.02743825,64.88952975000001 L50.61191831037623,45.44270419553496 L49.5349338236476,54.599128411097816 L40.32151697147405,54.93520862188737 L59.02743825,64.88952975000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M59.02743825,64.88952975000001 L50.61191831037623,45.44270419553496 L49.5349338236476,54.599128411097816 L40.32151697147405,54.93520862188737 L59.02743825,64.88952975000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_77" style="position: absolute; transform: translate(-50%, -50%); left: 911px; top: 391px;">else</div><svg style="position:absolute;left:992.5px;top:475.5px" width="48" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 27 87 C 37 37 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M27.41933025,64.92074025000001 L26.478640011920092,43.75201090986291 L22.21236200502047,51.92506859764688 L13.48296835956696,48.958979154842446 L27.41933025,64.92074025000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M27.41933025,64.92074025000001 L26.478640011920092,43.75201090986291 L22.21236200502047,51.92506859764688 L13.48296835956696,48.958979154842446 L27.41933025,64.92074025000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:1097.0266769263776px;top:512.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_86" style="position: absolute; transform: translate(-50%, -50%); left: 1109px; top: 582.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 866px; top: 466px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 806px; top: 426px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 893px; top: 593px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 893px; top: 553px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 980px; top: 553px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 980px; top: 593px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 920px; top: 337px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 870px; top: 337px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 993px; top: 466px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 933px; top: 426px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 1020px; top: 593px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1020px; top: 553px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 1107px; top: 553px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 1107px; top: 593px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
