<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="Update_MaaS_ML_Parameters" tags="Model,Service,Service Automation,ML" projectName="Service Automation - Lifecycle" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
  <variables>
    <variable name="USER_NAME" value="user"  description="Basic auth user (if required, inherited from job variable)"   />
    <variable name="DEBUG_ENABLED" value="True" model="PA:Boolean" description="True if the user needs to examine the stream of output results of each task."   />
    <variable name="TRACE_ENABLED" value="True" model="PA:Boolean" description="True if the user wants to keep a trace on the different changes occurring in the service."   />
  </variables>
  <description>
    <![CDATA[ Would you like to apply some changes on the parameters of the MaaS_ML instance or have you done some configuration mistakes while launching the MaaS_ML instance? Update_MaaS_ML enable you to update the values of the variables associated to the enacted MaaS_ML instance according to your new preferences. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="service-automation"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
    <info name="pca.states" value="(RUNNING,RUNNING)"/>
    <info name="Documentation" value="PSA/PSAUserGuide.html#_model_service"/>
    <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
    <info name="pca.service.id" value="MaaS_ML"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Update_MaaS_ML_Parameters" 
    
    
    
    
    fork="false">
      <description>
        <![CDATA[ Update MaaS instance parameters. ]]>
      </description>
      <variables>
        <variable name="USER_NAME" value="user" inherited="true"  description="Basic auth user (if required, inherited from job variable)"   />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
      </genericInformation>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
/*********************************************************************************
 * THIS PRESCRIPT INFORMS PLATFORM THAT PCA SERVICE ACTION IS TRIGGERED                   *
 *********************************************************************************/
println("BEGIN " + variables.get("PA_TASK_NAME"))

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

action = args[0]

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()

// Connect to Cloud Automation API
def apiClient = new ApiClient()
def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')
apiClient.setBasePath(pcaUrl)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

// Acquire service instance id and instance name from synchro channel
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def channel = "Service_Instance_" + instanceId
def instanceName = synchronizationapi.get(channel, "INSTANCE_NAME")
def serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(sessionId, instanceId)
    
// endpoint Extraction
def api_endpoint = serviceInstanceData.getDeployments().iterator().next().getEndpoint().getUrl()
//def ENDPOINT_PATH = "/api/ui"
//api_endpoint = api_endpoint - ENDPOINT_PATH
api_endpoint = api_endpoint.split("/api")[0]
variables.put("INSTANCE_NAME", instanceName)
variables.put("API_ENDPOINT", api_endpoint)

// Inform other platforms that service is running through Synchronization API
if(action.equals("RESUME_LAUNCHED")){
    synchronizationapi.put(channel, "RUNNING", true)
    synchronizationapi.put(channel, "RESUMED", true)
    synchronizationapi.put(channel, "UPDATE_LAUNCHED", false)
}
else{
    synchronizationapi.put(channel, action, true)
}
]]>
          </code>
          <arguments>
            <argument value="UPDATE_LAUNCHED"/>
          </arguments>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import os, sys, bz2, uuid, json, time
import subprocess


def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", "--user", package])


# Install required Python libraries if they are not already installed
try:
    if sys.version_info[0] < 3:
        from urllib import unquote
    else:
        from urllib.parse import unquote
except ImportError:
    install('request')
    if sys.version_info[0] < 3:
        from urllib import unquote
    else:
        from urllib.parse import unquote

try:
    import pickle
except ImportError:
    install('pickle')
    import pickle

try:
    import wget
except ImportError:
    install('wget')
    import wget

try:
    import requests
except ImportError:
    install('requests')
    import requests


# Define failure procedure that will be executed if something goes wrong
def failure(error_msg):
    current_status = "ERROR"
    variables.put("CURRENT_STATUS", current_status)
    print(error_msg)
    print("CURRENT_STATUS: ", current_status)
    sys.exit(0)


# Set default variables
current_status = "RUNNING"

# Edit these variables if they don't correspond to your service endpoints
api_token = "/api/get_token"
api_update = "/api/update"

# Save Status File
instance_name = variables.get("INSTANCE_NAME")
file_name = instance_name + "_status"
file = open(file_name, "w")
file.write(instance_name)
file.close()

# Get variables
user_name = variables.get("USER_NAME") if variables.get(
    "USER_NAME") else failure("USER_NAME must be defined!")
api_endpoint = variables.get("API_ENDPOINT")
api_token_endpoint = api_endpoint + api_token
api_update_endpoint = api_endpoint + api_update
print("USER_NAME: ", user_name)
print("API_TOKEN_ENDPOINT: ", api_token_endpoint)
print("API_UPDATE_ENDPOINT: ", api_update_endpoint)

# Get a token to be able to update the service parameters
try:
    PARAMS = {'user': user_name}
    req = requests.get(api_token_endpoint, params=PARAMS, verify=False)
    token = req.text
    if token.lower() == "Invalid user".lower():
        failure("USER_NAME is invalid")
    print("TOKEN: ", token)
except requests.exceptions.RequestException as e:
    failure(e)

# Update model parameters
data = {'api_token': token}

debug_enabled = variables.get("DEBUG_ENABLED")
if debug_enabled is not None and debug_enabled.lower() == "true":
    data['debug_enabled'] = True
else:
    data['debug_enabled'] = False

tracing = variables.get("TRACE_ENABLED")
if tracing is not None and tracing.lower() == "true":
    data['trace_enabled'] = True
else:
    data['trace_enabled'] = False

try:
    req = requests.post(api_update_endpoint, data=data, verify=False)
    service_update_status = req.text
    if service_update_status.lower() != "[INFO] Service parameters updated".lower():
        current_status = "ERROR"
    print("SERVICE UPDATE STATUS: ", service_update_status)
except Exception as e:
    failure(e)

# Propagate the status of the update to the Post_Scrpit
variables.put("CURRENT_STATUS", current_status)
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
/*********************************************************************************
* THIS POSTSCRIPT INFORMS PLATFORM THAT PCA SERVICE ACION IS TRIGGERED                   *
*********************************************************************************/

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

def action = variables.get("CURRENT_STATUS")
def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def instanceName = variables.get("INSTANCE_NAME")

def ALREADY_REMOVED_MESSAGE = "Error: No such container: " + instanceName    

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()

// Connect to Cloud Automation API
def serviceInstanceRestApi = new ServiceInstanceRestApi(new ApiClient().setBasePath(pcaUrl))

// Update service instance data : (status, endpoint)
def status = new File(instanceName+"_status").text.trim()
def currentStatus = (!status.equals(ALREADY_REMOVED_MESSAGE) && !status.equals(instanceName)) ? "ERROR" : action

def serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(sessionId, instanceId)
serviceInstanceData.setInstanceStatus(currentStatus)
serviceInstanceRestApi.updateServiceInstanceUsingPUT(sessionId, instanceId, serviceInstanceData)

if(action.equals("FINISHED")){
    // Inform other jobs that the service is finished and deleted.
	def channel = "Service_Instance_" + instanceId
	synchronizationapi.put(channel, "FINISH_DONE", true)
}

// Print warning or error messages and force job to exit with error if there are any.
if (status.equals(ALREADY_REMOVED_MESSAGE)){
    println("[WARNING] docker container: " + instanceName + " is already removed.")
} else if (!status.equals(instanceName)){
    println("[ERROR] Could not remove docker container: " + instanceName + ". Docker output: " + status)
    throw new IllegalStateException("Could not remove docker container: " + instanceName + ". Docker output: " + status)
}

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            140.4453125
        </positionTop>
        <positionLeft>
            145.265625
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2146px;
            height:2560px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-135.4453125px;left:-140.265625px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable active-task" id="jsPlumb_1_4" style="top: 140.453px; left: 145.266px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Update MaaS instance parameters."><img src="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png" width="20px">&nbsp;<span class="name">Update_MaaS_ML_Parameters</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 222.5px; top: 170px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>