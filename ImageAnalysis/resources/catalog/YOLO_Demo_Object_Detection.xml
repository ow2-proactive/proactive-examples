<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.8"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
    name="YOLO_Demo_Object_Detection" projectName="Image Analysis"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="INPUT_IMAGE" value="data/dog.jpg" />
    <variable name="OUTPUT_IMAGE" value="output/dog.jpg" />
    <variable name="CONTAINER_NAME" value="ml" />
    <variable name="DOCKER_IMAGE" value="activeeon/dlm3" />
  </variables>
  <description>
    <![CDATA[ Finding instances of real-world objects of a given image ]]>
  </description>
    <genericInformation>
    <info name="bucketName" value="machine-learning-workflows-tmp"/>
    <info name="pca.action.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/YOLO.png"/>
    <info name="Documentation" value="http://activeeon.com/resources/automated-machine-learning-activeeon.pdf"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Obj_Detection">
      <description>
        <![CDATA[ The simplest task, ran by a cmd engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/YOLO.png"/>
      </genericInformation>
      <depends>
        <task ref="Preview_Input"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
n=$(curl https://api.keyvalue.xyz/3e0701bd/myKey)
echo "key:[$n]"

docker exec $variables_CONTAINER_NAME /bin/bash -c "cd /root/darknet && ./darknet detect cfg/yolo.cfg yolo.weights $variables_INPUT_IMAGE"

mkdir -p /tmp/$n
mkdir -p /tmp/$n/output

docker cp $variables_CONTAINER_NAME:/root/darknet/predictions.png /tmp/$n/$variables_OUTPUT_IMAGE
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <cleaning>
        <script>
          <code language="bash">
            <![CDATA[
docker stop $variables_CONTAINER_NAME
]]>
          </code>
        </script>
      </cleaning>
    </task>
    <task name="Preview_Input">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/YOLO.png"/>
      </genericInformation>
      <depends>
        <task ref="Download_Data"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def connection = new URL("https://api.keyvalue.xyz/3e0701bd/myKey").openConnection() as HttpURLConnection
connection.setRequestProperty('User-Agent', 'groovy')
connection.setRequestProperty('Accept', 'application/json')
def answer = connection.inputStream.text
def key = answer[0..-2]
println "key:["+key+"]"

def home = "/tmp"
def input_image = variables.get("INPUT_IMAGE")

image_path  = home + "/" + key + "/" + input_image

println "home: " + home 
println "input_image: " + input_image
println "image_path  : " + image_path  

def image_file = new File(image_path)
println "exists? " + image_file.exists()

result = image_file.getBytes()
resultMetadata.put("file.name", input_image)
resultMetadata.put("content.type", "image/jpg")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Preview_Output">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/YOLO.png"/>
      </genericInformation>
      <depends>
        <task ref="Obj_Detection"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def connection = new URL("https://api.keyvalue.xyz/3e0701bd/myKey").openConnection() as HttpURLConnection
connection.setRequestProperty('User-Agent', 'groovy')
connection.setRequestProperty('Accept', 'application/json')
def answer = connection.inputStream.text
def key = answer[0..-2]
println "key:["+key+"]"

def home = "/tmp"
def output_image = variables.get("OUTPUT_IMAGE")

image_path  = home + "/" + key + "/" + output_image

println "home: " + home 
println "output_image: " + output_image
println "image_path  : " + image_path  

def image_file = new File(image_path)
println "exists? " + image_file.exists()

result = image_file.getBytes()
resultMetadata.put("file.name", output_image)
resultMetadata.put("content.type", "image/jpg")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Download_Data">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/YOLO.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
#
# unset RUN_DOCKER
# docker stop ml && docker rm ml
# export variables_CONTAINER_NAME=ml && export variables_INPUT_IMAGE=data/dog.jpg && export variables_OUTPUT_IMAGE=output/dog.jpg
#
echo "Updating local docker image"
docker pull $variables_DOCKER_IMAGE
export RUN_DOCKER="docker run -dit -h dlm -w /root --name=$variables_CONTAINER_NAME $variables_DOCKER_IMAGE"
echo "Checking if docker container is running"
if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
then 
  echo "OK. The $variables_CONTAINER_NAME container is running!"
else 
  echo "$variables_CONTAINER_NAME container is not running."
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "false" ]; 
  then 
    echo "Starting it..."
    docker start $variables_CONTAINER_NAME
  else 
    echo "Running it..."
    echo $RUN_DOCKER
    $($RUN_DOCKER)
    sleep 5
  fi
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
  then 
    echo "OK. The $variables_CONTAINER_NAME container is running now!"
  else 
    echo "$variables_CONTAINER_NAME container is not running."
    echo "An error occurred while running the container."
    exit
  fi
fi

n=$RANDOM
echo "Random generated number: $n"
curl -X POST https://api.keyvalue.xyz/3e0701bd/myKey/$n
echo "Stored key:"
curl https://api.keyvalue.xyz/3e0701bd/myKey

mkdir -p /tmp/$n
mkdir -p /tmp/$n/data

docker cp $variables_CONTAINER_NAME:/root/darknet/$variables_INPUT_IMAGE /tmp/$n/$variables_INPUT_IMAGE
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
  </taskFlow>
</job>