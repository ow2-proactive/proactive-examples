<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.9"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.9 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.9/schedulerjob.xsd"
	name="TensorFlow_Train_Image_Classifier" projectName="Image Analysis"
	priority="normal" onTaskError="continueJobExecution"
	maxNumberOfExecution="2">
	<variables>
		<variable name="TRAINING_SET_ADDRESS"
			value="http://download.tensorflow.org/example_images/flower_photos.tgz" />
		<variable name="TRAINING_SET_NAME" value="flower_photos.tgz" />
		<variable name="TRAINING_SET_PATH" value="flower_photos" />
		<variable name="CONTAINER_NAME" value="ml" />
		<variable name="DOCKER_IMAGE" value="activeeon/dlm3" />
	</variables>
	<description>
    <![CDATA[ Train a deep neural network to recognize flower species ]]>
	</description>
	<genericInformation>
		<info name="bucketName" value="machine-learning-workflows" />
		<info name="workflow.icon"
			value="/automation-dashboard/styles/patterns/img/wf-icons/tensorflow.png" />
		<info name="Documentation"
			value="http://activeeon.com/resources/automated-machine-learning-activeeon.pdf" />
		<info name="group" value="public-objects" />
	</genericInformation>
	<taskFlow>
		<task name="Download_Data">
			<description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
			</description>
			<genericInformation>
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/tensorflow.png" />
			</genericInformation>
			<scriptExecutable>
				<script>
					<code language="bash">
            <![CDATA[
#
# unset RUN_DOCKER
# docker stop ml && docker rm ml
# export variables_CONTAINER_NAME=ml 
# export variables_TRAINING_SET_ADDRESS=http://download.tensorflow.org/example_images/flower_photos.tgz
# export variables_TRAINING_SET_NAME=flower_photos.tgz
#
echo "Updating local docker image"
docker pull $variables_DOCKER_IMAGE
export RUN_DOCKER="docker run -dit -h dlm -w /root --name=$variables_CONTAINER_NAME $variables_DOCKER_IMAGE"
echo "Checking if docker container is running"
if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
then 
  echo "OK. The $variables_CONTAINER_NAME container is running!"
else 
  echo "$variables_CONTAINER_NAME container is not running."
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "false" ]; 
  then 
    echo "Starting it..."
    docker start $variables_CONTAINER_NAME
  else 
    echo "Running it..."
    echo $RUN_DOCKER
    $($RUN_DOCKER)
    sleep 5
  fi
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
  then 
    echo "OK. The $variables_CONTAINER_NAME container is running now!"
  else 
    echo "$variables_CONTAINER_NAME container is not running."
    echo "An error occurred while running the container."
    exit
  fi
fi

echo docker exec $variables_CONTAINER_NAME /bin/sh -c 'curl -O '$variables_TRAINING_SET_ADDRESS
docker exec $variables_CONTAINER_NAME /bin/sh -c 'curl -O '$variables_TRAINING_SET_ADDRESS

echo docker exec $variables_CONTAINER_NAME /bin/sh -c 'tar xzf '$variables_TRAINING_SET_NAME
docker exec $variables_CONTAINER_NAME /bin/sh -c 'tar xzf '$variables_TRAINING_SET_NAME
]]>
					</code>
				</script>
			</scriptExecutable>
			<controlFlow block="none"></controlFlow>
		</task>
		<task name="Train_Model">
			<description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
			</description>
			<genericInformation>
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/tensorflow.png" />
			</genericInformation>
			<depends>
				<task ref="Download_Data" />
			</depends>
			<scriptExecutable>
				<script>
					<code language="bash">
            <![CDATA[
echo docker exec $variables_CONTAINER_NAME /bin/sh -c 'curl -O https://raw.githubusercontent.com/sophiesongge/tensorflow_demo/master/image_retrain.py'
docker exec $variables_CONTAINER_NAME /bin/sh -c 'curl -O https://raw.githubusercontent.com/sophiesongge/tensorflow_demo/master/image_retrain.py'

echo docker exec $variables_CONTAINER_NAME /bin/sh -c 'python image_retrain.py --image_dir '$variables_TRAINING_SET_PATH
docker exec $variables_CONTAINER_NAME /bin/sh -c 'python image_retrain.py --image_dir '$variables_TRAINING_SET_PATH
]]>
					</code>
				</script>
			</scriptExecutable>
			<controlFlow block="none"></controlFlow>
			<cleaning>
				<script>
					<code language="bash">
            <![CDATA[
docker stop $variables_CONTAINER_NAME
]]>
					</code>
				</script>
			</cleaning>
		</task>
	</taskFlow>
</job>
