<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.10" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="PyTorch_Train_Image_Object_Segmentation" onTaskError="continueJobExecution" priority="normal" projectName="5. Image Analysis - Other libraries" xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd">
  <variables>
    <variable name="CONTAINER_NAME" value="ml"/>
    <variable name="DOCKER_IMAGE" value="activeeon/dlm3"/>
    <variable name="NUM_EPOCHS" value="3"/>
  </variables>
  <description>
    <![CDATA[ Train an image segmentation algorithm  using using PyTorch. In this demo, we train an algorithm to segment horses in the input image using a deep neural network (DNN). ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="deep-learning-workflows"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/pytoch.jpg"/>
<info name="Documentation" value="http://activeeon.com/resources/automated-machine-learning-activeeon.pdf"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task name="Training_Task">
      <description>
        <![CDATA[ The simplest task, ran by a cmd engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/pytoch.jpg"/>
      </genericInformation>
      <depends>
        <task ref="Download_Data"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
# Training task
docker exec $variables_CONTAINER_NAME /bin/bash -c "cd /root/deepseg_horse && python binseg_train_fast.py $variables_NUM_EPOCHS"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <cleaning>
        <script>
          <code language="bash">
            <![CDATA[
docker stop $variables_CONTAINER_NAME
]]>
          </code>
        </script>
      </cleaning>
    </task>
    <task name="Download_Data">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/pytoch.jpg"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
#
# unset RUN_DOCKER
# docker stop ml && docker rm ml
# export variables_CONTAINER_NAME=ml && export variables_NUM_EPOCHS=3
#
echo "Updating local docker image"
docker pull $variables_DOCKER_IMAGE
export RUN_DOCKER="docker run -dit -h dlm -w /root --name=$variables_CONTAINER_NAME $variables_DOCKER_IMAGE"
echo "Checking if docker container is running"
if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
then 
  echo "OK. The $variables_CONTAINER_NAME container is running!"
else 
  echo "$variables_CONTAINER_NAME container is not running."
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "false" ]; 
  then 
    echo "Starting it..."
    docker start $variables_CONTAINER_NAME
  else 
    echo "Running it..."
    echo $RUN_DOCKER
    $($RUN_DOCKER)
    sleep 5
  fi
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
  then 
    echo "OK. The $variables_CONTAINER_NAME container is running now!"
  else 
    echo "$variables_CONTAINER_NAME container is not running."
    echo "An error occurred while running the container."
    exit
  fi
fi

docker exec $variables_CONTAINER_NAME /bin/sh -c "rm -r -f deepseg_horse"
docker exec $variables_CONTAINER_NAME /bin/sh -c "wget https://s3.eu-central-1.amazonaws.com/activeeonpublic/deepseg/src/deepseg_horse.zip"
docker exec $variables_CONTAINER_NAME /bin/sh -c "unzip deepseg_horse.zip -d deepseg_horse"
docker exec $variables_CONTAINER_NAME /bin/sh -c "rm -r deepseg_horse.zip"
docker exec $variables_CONTAINER_NAME /bin/sh -c "cd /root/deepseg_horse/dataset && wget https://s3.eu-central-1.amazonaws.com/activeeonpublic/deepseg/dataset/weizmann_horse.zip && unzip weizmann_horse.zip && rm -r weizmann_horse.zip"
# docker exec $variables_CONTAINER_NAME /bin/sh -c "ls /root/deepseg_horse/dataset"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
    </task>
  </taskFlow>
</job>
