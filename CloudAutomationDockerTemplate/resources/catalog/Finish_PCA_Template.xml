<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="Finish_PCA_Template" projectName="Cloud Automation - Lifecycle" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <description>
    <![CDATA[ Finish PCA service instance and remove its docker container. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="cloud-automation"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/docker.png"/>
    <info name="pca.states" value="(RUNNING,FINISHED)(PAUSED,FINISHED)(ERROR,FINISHED)"/>
    <info name="Documentation" value="PCA/PCAUserGuide.html"/>
    <info name="pca.service.id" value="PCA_Template"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Finish_Service" >
      <description>
        <![CDATA[ Finish PCA service instance and remove its docker container ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/docker.png"/>
        <info name="Documentation" value="PCA/PCAUserGuide.html"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
/*********************************************************************************
* THIS PRESCRIPT INFORMS PLATFORM THAT PCA SERVICE IS BEING FINISHED             *
*********************************************************************************/

println("BEGIN " + variables.get("PA_TASK_NAME"))

// Acquire service instance id and instance name from synchro channel
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def channel = "Service_Instance_" + instanceId
def instanceName = synchronizationapi.get(channel, "INSTANCE_NAME")
variables.put("INSTANCE_NAME", instanceName)

// Inform other platforms that service is being finished through Synchronization API
synchronizationapi.put(channel, "FINISH_LAUNCHED", true)
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo Removing docker container: "$variables_INSTANCE_NAME"
INSTANCE_NAME=$(docker rm -f $variables_INSTANCE_NAME 2>&1)
echo $INSTANCE_NAME > $variables_INSTANCE_NAME"_status"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
/*********************************************************************************
* THIS POSTSCRIPT INFORMS PLATFORM THAT PCA SERVICE IS DELETED                   *
*********************************************************************************/

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

def paSchedulerRestUrl = variables.get('PA_SCHEDULER_REST_URL')
def pcaUrl = paSchedulerRestUrl.replaceAll("/rest\\z", "/cloud-automation-service")
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def instanceName = variables.get("INSTANCE_NAME")

def ALREADY_REMOVED_MESSAGE = "Error: No such container: " + instanceName

// Connect to Cloud Automation API
def serviceInstanceRestApi = new ServiceInstanceRestApi(new ApiClient().setBasePath(pcaUrl))

// Update service instance data : (status, endpoint)
def status = new File(instanceName+"_status").text.trim()
def currentStatus = (!status.equals(ALREADY_REMOVED_MESSAGE) && !status.equals(instanceName)) ? "ERROR" : "FINISHED"
def serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(instanceId)
serviceInstanceData.setInstanceStatus(currentStatus)
serviceInstanceRestApi.updateServiceInstanceUsingPUT(instanceId, serviceInstanceData)

// Inform other jobs that the service is finished and deleted.
def channel = "Service_Instance_" + instanceId
synchronizationapi.put(channel, "FINISH_DONE", true)

// Print warning or error messages and force job to exit with error if there are any.
if (status.equals(ALREADY_REMOVED_MESSAGE)){
    println("[WARNING] docker container: " + instanceName + " is already removed.")
} else if (!status.equals(instanceName)){
    println("[ERROR] Could not remove docker container: " + instanceName + ". Docker output: " + status)
    System.exit(1)
}

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </post>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1139px;
            height:566px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-333.9875030517578px;left:-496.75px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_409" style="top: 339px; left: 501.75px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/docker.png" width="20px">&nbsp;<span class="name">Finish_Service</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 542.5px; top: 369px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>