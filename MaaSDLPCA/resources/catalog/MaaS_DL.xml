<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.13" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd"  name="MaaS_DL" projectName="Service Automation - Deployment" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
  <variables>
    <variable name="NODE_NAME" value=""  description="Name of the node on which the service will be deployed." group="Resource Management" advanced="true" hidden="false"/>
    <variable name="INSTANCE_NAME" value="maas_dl-$PA_JOB_ID"  description="Service instance name." group="Proactive Service Parameters" advanced="false" hidden="false"/>
    <variable name="ENDPOINT_ID" value="maas_dl-gui-$PA_JOB_ID"  description="The endpoint_id that will be used if PROXYFIED is set to True." group="Proactive Service Parameters" advanced="true" hidden="false"/>
    <variable name="PROXYFIED" value="True" model="PA:Boolean" description="True if a proxy is needed to protect the access to this model-service endpoint" group="Proactive Service Parameters" advanced="true" hidden="false"/>
    <variable name="HTTPS_ENABLED" value="False" model="PA:Boolean" description="True if the protocol https is needed for the defined model-service." group="Proactive Service Parameters" advanced="true" hidden="false"/>
    <variable name="DEBUG_ENABLED" value="True" model="PA:Boolean" description="True if the user needs to examine the stream of output results of each task." group="MaaS_DL Service Configuration" advanced="false" hidden="false"/>
    <variable name="TRACE_ENABLED" value="True" model="PA:Boolean" description="True if the user wants to keep a trace on the different changes occurring in the service." group="MaaS_DL Service Configuration" advanced="false" hidden="false"/>
    <variable name="YAML_FILE" value="dl_service-api"  description="A YAML file that describes the OpenAPI Specification ver. 2 (known as Swagger Spec) of the service. This file should be stored in the catalog under the model_as_service bucket." group="MaaS_DL Service Configuration" advanced="true" hidden="false"/>
    <variable name="PYTHON_ENTRYPOINT" value="dl_service"  description="This entry script starts the service and defines the different functions to deploy the model, scores the prediction requests based on the deployed model, and returns the results. This script is specific to your model. This file should be stored in the Catalog under the model_as_service bucket" group="MaaS_DL Service Configuration" advanced="true" hidden="false"/>
    <variable name="SERVICE_PORT" value="-1"  description="The port that will be used to expose the service." group="Proactive Service Parameters" advanced="true" hidden="false"/>
    <variable name="ENGINE" value="docker" model="PA:List(docker,singularity)" description="The container engine type. It is possible to select Docker or Singularity." group="Proactive Service Parameters" advanced="false" hidden="false"/>
    <variable name="DOCKER_IMAGE" value="activeeon/maas_dl:latest" model="" description="Name of the Docker image that will be used to run the different workflow tasks." group="Proactive Service Parameters" advanced="true" hidden="false"/>
    <variable name="MODEL_BASE_PATH" value="/tmp"  description="The model base path." group="MaaS_DL Service Configuration" advanced="true" hidden="false"/>
    <variable name="MODELS_DEPLOYMENT_REFRESH" value="30" model="PA:Integer" description="Models deployment refreshing interval." group="MaaS_DL Service Configuration" advanced="true" hidden="false"/>
    <variable name="SINGULARITY_IMAGE_PATH" value="/tmp/maas_dl.sif"  description="Location of the singularity image on the node file system. If the image does not exist in the specified location, it is possible to automatically built it from the specified Docker image." group="Singularity management" advanced="true" hidden="false"/>
    <variable name="BUILD_IMAGE_IF_NOT_EXISTS" value="True" model="PA:Boolean" description="Pull and build the singularity image if the Singularity Image File (SIF) file is not available." group="Singularity management" advanced="true" hidden="false"/>
    <variable name="SINGULARITY_IMAGE_PATH_HANDLER" value="" model="PA:SPEL(variables[&#x27;ENGINE&#x27;].toLowerCase() == &#x27;singularity&#x27; ? showVar(&#x27;SINGULARITY_IMAGE_PATH&#x27;) : hideVar(&#x27;SINGULARITY_IMAGE_PATH&#x27;))"  group="Singularity management" advanced="false" hidden="true"/>
    <variable name="SINGULARITY_BUILD_IMAGE_HANDLER" value="" model="PA:SPEL(variables[&#x27;ENGINE&#x27;].toLowerCase() == &#x27;singularity&#x27; ? showVar(&#x27;BUILD_IMAGE_IF_NOT_EXISTS&#x27;) : hideVar(&#x27;BUILD_IMAGE_IF_NOT_EXISTS&#x27;))"  group="Singularity management" advanced="false" hidden="true"/>
  </variables>
  <description>
    <![CDATA[ This service allows to launch an instance of MaaS_DL under the name: INSTANCE_NAME, through ProActive Service Automation (PSA) Portal. Using the launched instance, an already built, tested and validated machine or deep learning model can be deployed to be employed for predictive purposes on new datasets. Unlike MaaS_ML , MaaS_DL provides the following additional features
1. The model versioning capability i.e. a deployed model can be updated to new versions and rolled back to old versions.
2. The integration with TensorFlow Serving TFX characterized by its flexibility and high-performance serving system.

For the descriptions of the workflow variables below, please check the documentation link. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="service-automation"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
    <info name="pca.states" value="(VOID,RUNNING)"/>
    <info name="Documentation" value="PAIO/PAIOUserGuide.html#_start_a_generic_service_instance_4"/>
    <info name="pca.service.id" value="MaaS_DL"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Start_MaaS_DL_S" 
    
    onTaskError="cancelJob" 
    
    
    fork="true">
      <description>
        <![CDATA[ Pull DL_Model_Service image and start a container ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
        <info name="DISABLE_PTK" value="true"/>
      </genericInformation>
      <inputFiles>
        <files  includes="certificate_mas.pem" accessMode="transferFromGlobalSpace"/>
        <files  includes="key_mas.pem" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <selection>
        <script type="static">
          <file url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_node_name_not_empty/raw" language="groovy">
            <arguments>
              <argument value="$NODE_NAME"/>
            </arguments>
          </file>
        </script>
      </selection>
      <pre>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/ai-model-as-a-service/resources/MaaS_Pre_Script/raw" language="cpython"></file>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo BEGIN "$variables_PA_TASK_NAME"

export XDG_RUNTIME_DIR=/run/user/$UID

################################################################################
### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
MODEL_BASE_PATH=$variables_MODEL_BASE_PATH
CONFIG_FILE_POLL_SECONDS=$variables_MODELS_DEPLOYMENT_REFRESH
PROMETHEUS_SERVICE_INTERNAL_PORT=9091
MODEL_SERVICE_INTERNAL_PORT=9090
SIF_IMAGE_PATH=$variables_SINGULARITY_IMAGE_PATH
BUILD_IMAGE=$variables_BUILD_IMAGE_IF_NOT_EXISTS
INSTANCE_NAME=$variables_INSTANCE_NAME
DOCKER_IMAGE=$variables_DOCKER_IMAGE
HTTPS_ENABLED=$variables_HTTPS_ENABLED
DEBUG_ENABLED=$variables_DEBUG_ENABLED
TRACE_ENABLED=$variables_TRACE_ENABLED
MODEL_SERVICE_HOST_PORT=$variables_SERVICE_PORT
USER_KEY=$variables_USER_KEY
USER_DATA_FILE_LOCAL="${PWD}/${variables_USER_DATA_FILE}"
INSTANCE_PATH="${SIF_IMAGE_PATH}/${INSTANCE_NAME}"
PYTHON_ENTRYPOINT_FILE_LOCAL="${PWD}/${variables_PYTHON_ENTRYPOINT}.py"
YAML_FILE_LOCAL="${PWD}/${variables_YAML_FILE}.yaml"
PYTHON_ENTRYPOINT_FILE_SING="${INSTANCE_PATH}/dl_service.py"
YAML_FILE_SING="${INSTANCE_PATH}/dl_service-api.yaml"
USER_DATA_FILE_SING="${INSTANCE_PATH}/${variables_USER_DATA_FILE}"
################################################################################

PATH=$PATH:/usr/sbin

GET_RANDOM_PORT(){
    PCA_SERVICES_PORT_RANGE_FILE=$variables_PA_SCHEDULER_HOME/config/pca_services_port_range
    if [[ -f "$PCA_SERVICES_PORT_RANGE_FILE" ]]; then
        read LOWERPORT UPPERPORT < $PCA_SERVICES_PORT_RANGE_FILE
    else
        read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
    fi
    while :
    do
        RND_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
        ss -lpn | grep -q ":$RND_PORT " || break
    done
    echo $RND_PORT
}

if [ "$MODEL_SERVICE_HOST_PORT" -eq "-1" ]; then
    echo "[INFO] Picking a random port number"
    MODEL_SERVICE_HOST_PORT=$(GET_RANDOM_PORT)
fi
echo "The service will be initialized on port $MODEL_SERVICE_HOST_PORT"

if [ -z "$INSTANCE_NAME" ]; then
    echo "[ERROR] The INSTANCE_NAME is not provided by the user. Empty value is not allowed."
    exit 1
fi

if [ -z "$SIF_IMAGE_PATH" ]; then
    echo "[ERROR] The singularity image path is not provided by the user. Empty value is not allowed."
    exit 1
else
    echo "Using $SIF_IMAGE_PATH to start the service"
fi

if [ "$(singularity instance list | grep "^$INSTANCE_NAME$")" ]; then
    echo "[ERROR] $INSTANCE_NAME is already used by another service instance."
    exit 128
else
    if [ "${BUILD_IMAGE,,}" = "true" ]; then
        if [ -e "$SIF_IMAGE_PATH" ]; then
            echo "[INFO] Using existing image on $SIF_IMAGE_PATH"
        else
            echo "[INFO] Building the image on $SIF_IMAGE_PATH"
            echo "[INFO] singularity build --sandbox $SIF_IMAGE_PATH docker://$DOCKER_IMAGE"
            singularity build --sandbox $SIF_IMAGE_PATH docker://$DOCKER_IMAGE
        fi
    fi
    
    echo "[INFO] Starting the singularity instance $INSTANCE_NAME"
    echo "[INFO] singularity instance start --writable --no-home $SIF_IMAGE_PATH $INSTANCE_NAME"
    singularity instance start --writable --no-home $SIF_IMAGE_PATH $INSTANCE_NAME
        
    export SINGULARITYENV_HTTPS_ENABLED=$HTTPS_ENABLED
    export SINGULARITYENV_DEBUG_ENABLED=$DEBUG_ENABLED
    export SINGULARITYENV_TRACE_ENABLED=$TRACE_ENABLED
    export SINGULARITYENV_USER_KEY=$USER_KEY
    export SINGULARITYENV_INSTANCE_PATH=$INSTANCE_PATH
    export SINGULARITYENV_MODEL_SERVICE_HOST_PORT=$MODEL_SERVICE_HOST_PORT
    export SINGULARITYENV_CONFIG_FILE_POLL_SECONDS=$CONFIG_FILE_POLL_SECONDS
    export SINGULARITYENV_MODEL_BASE_PATH=$MODEL_BASE_PATH    
    
    singularity exec instance://$INSTANCE_NAME mkdir -p ${INSTANCE_PATH}
    
    cp -a ${SIF_IMAGE_PATH}/model_as_service/. $INSTANCE_PATH
    cp $PYTHON_ENTRYPOINT_FILE_LOCAL $PYTHON_ENTRYPOINT_FILE_SING
    cp $YAML_FILE_LOCAL $YAML_FILE_SING
    cp $USER_DATA_FILE_LOCAL $USER_DATA_FILE_SING
    
    chmod +x $PYTHON_ENTRYPOINT_FILE_SING $YAML_FILE_SING

    #SERVICE_EXEC_COMMAND="singularity exec instance://${INSTANCE_NAME} python dl_service_proactive.py --port ${MODEL_SERVICE_HOST_PORT} &> /dev/null & &> /dev/null"
    SERVICE_EXEC_COMMAND="singularity exec instance://${INSTANCE_NAME} python $PYTHON_ENTRYPOINT_FILE_SING --port ${MODEL_SERVICE_HOST_PORT} &> /dev/null & &> /dev/null"
    echo "[INFO] $SERVICE_EXEC_COMMAND"
    eval $SERVICE_EXEC_COMMAND
    sleep 5
    singularity exec instance://$INSTANCE_NAME ls -la
    
    if [ "$(singularity instance list | grep "^$INSTANCE_NAME$")" ]; then
        echo "$INSTANCE_NAME" > $INSTANCE_NAME"_status"
    fi
fi

echo "$MODEL_SERVICE_HOST_PORT" > $INSTANCE_NAME"_port"

# Endpoint added to the job variables using a groovy post-script
echo END "$variables_PA_TASK_NAME"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
/*********************************************************************************
* THIS POSTSCRIPT PROPAGATES USEFUL INFORMATION SUCH AS:                         *
* 1) SERVICE ENDPOINT (PROTOCOL://HOSTNAME:PORT)                                 *
* 2) CREDENTIALS (IF THERE ARE ANY) BY ADDING THEM TO 3RD PARTY CREDENTIALS      *
*********************************************************************************/

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.Container
import org.ow2.proactive.pca.service.client.model.Endpoint
import org.ow2.proactive.pca.service.client.model.Deployment
import org.ow2.proactive.pca.service.client.model.Node
import java.net.URLEncoder;

// Acquire variables
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def instanceName = variables.get("INSTANCE_NAME")
def proxyfied = variables.get("PROXYFIED")
def hostname = variables.get("PA_NODE_HOST")
def endpointID = variables.get("ENDPOINT_ID")+"-"+instanceId
def httpsEnabled = variables.get("HTTPS_ENABLED")
def userKey = variables.get("USER_KEY")
def traceEnabled = variables.get("TRACE_ENABLED")
def engine = variables.get("ENGINE")

// Handle service parameters
def port = new File(instanceName+"_port").text.trim()
def containerUrl = hostname+":"+port
def containerID = ""
if (engine != null && "singularity".equalsIgnoreCase(engine)) {
    containerID = "0"
} else {
    containerID = new File(instanceName+"_containerID").text.trim()
}

// Determine Cloud Automation URL
def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()

// Connect to Cloud Automation API
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

// Implement service model

// Container
def Container container = new Container()
container.setId(containerID)
container.setName(instanceName)

// Endpoint
def Endpoint endpoint = new Endpoint();
endpoint.setId(endpointID);
// Set the endpoint parameters according to the Proxy settings
if (proxyfied.toLowerCase()=="true"){
    if (httpsEnabled.toLowerCase()=="true"){
        containerUrl = "https://"+containerUrl
    } else{
        containerUrl = "http://"+containerUrl
    }
    containerUrl = URLDecoder.decode(containerUrl, "UTF-8");
    proxyfiedURL = pcaUrl+"/services/"+instanceId+"/endpoints/"+endpointID+"/api/trace_preview?key="+userKey
    endpoint.setProxyfied(true);
    endpoint.setProxyfiedUrl(proxyfiedURL)
}else{
    endpoint.setProxyfied(false)
    ENDPOINT_PATH = "/api/ui"
    if (traceEnabled.toLowerCase()=="true"){
        ENDPOINT_PATH = "/api/trace_preview?key="+userKey
    }
    if (httpsEnabled.toLowerCase()=="true"){
        containerUrl = "https://"+containerUrl+ENDPOINT_PATH
    } else{
        containerUrl = "http://"+containerUrl+ENDPOINT_PATH
    }
    containerUrl = URLDecoder.decode(containerUrl, "UTF-8");
}
endpoint.setUrl(containerUrl);

// Node
def Node node = new Node();
node.setName(variables.get("PA_NODE_NAME"))
node.setHost(variables.get("PA_NODE_HOST"))
node.setNodeSourceName(variables.get("PA_NODE_SOURCE"))
node.setUrl(variables.get("PA_NODE_URL"))

// Deployment
def Deployment deployment = new Deployment()
deployment.setNode(node)
deployment.setContainer(container)
deployment.setEndpoint(endpoint)

// Update service instance model (add Deployment, Groups)
def serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(sessionId, instanceId)
serviceInstanceData.setInstanceStatus("RUNNING")
serviceInstanceData = serviceInstanceData.addDeploymentsItem(deployment)
if (proxyfied.toLowerCase()=="true"){
    serviceInstanceData = serviceInstanceData.addGroupsItem("scheduleradmins")
    serviceInstanceData = serviceInstanceData.addGroupsItem("rmcoreadmins")
}
serviceInstanceData = serviceInstanceRestApi.updateServiceInstanceUsingPUT(sessionId, instanceId, serviceInstanceData)
println(serviceInstanceData)

schedulerapi.registerService(variables.get("PA_JOB_ID"), instanceId as int, true)

// Inform other platforms that service is running through Synchronization API
channel = "Service_Instance_" + instanceId
synchronizationapi.createChannelIfAbsent(channel, false)
synchronizationapi.put(channel, "RUNNING", true)
synchronizationapi.put(channel, "INSTANCE_NAME", instanceName)

// Add token to the current node
token = instanceName
nodeUrl = variables.get("PA_NODE_URL")
println("Current nodeUrl: " + nodeUrl)
println("Adding token:    " + token)
rmapi.connect()
rmapi.addNodeToken(nodeUrl, token)

// Log output
println(variables.get("PA_JOB_NAME") + "_INSTANCE_ID: " + instanceId)
println(variables.get("PA_JOB_NAME") + "_ENDPOINT: " + endpoint)

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </post>
      <cleaning>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Clean_Start_Service/raw" language="groovy"></file>
        </script>
      </cleaning>
      <metadata>
        <positionTop>
            366.2673797607422
        </positionTop>
        <positionLeft>
            423.45489501953125
        </positionLeft>
      </metadata>
    </task>
    <task name="Loop_Over_Instance_Status_S" 
    
    
    
    
    fork="true">
      <description>
        <![CDATA[ Loop over service instance status and fetch docker container logs.
It will run every minute. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="Start_MaaS_DL_S"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def instanceName = variables.get("INSTANCE_NAME")
def channel = "Service_Instance_" + instanceId

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()

// Connect to Cloud Automation API
def serviceInstanceRestApi = new ServiceInstanceRestApi(new ApiClient().setBasePath(pcaUrl))

// If service instance is FINISHED or PAUSED then stop this loop and job and delete the sync channel
def currentStatus = serviceInstanceRestApi.getServiceInstanceUsingGET(sessionId, instanceId).getInstanceStatus()
if (currentStatus.equals("FINISHED")){
    variables.put("IS_FINISHED",true)
    synchronizationapi.deleteChannel(channel)
    // Remove token in the current node
    token = instanceName
    nodeUrl = variables.get("PA_NODE_URL")
    println("Current nodeUrl: " + nodeUrl)
    println("Removing token:  " + token)
    rmapi.connect()
    rmapi.removeNodeToken(nodeUrl, token)
} else {
    // Check if container has been stopped abnormally
    def command = ["singularity", "instance", "list"].execute() | ["grep", "${instanceName}"].execute()
    command.waitFor()
    def isContainerRunning = command.text
    if ((!isContainerRunning) && (!synchronizationapi.get(channel, "FINISH_LAUNCHED")) && (!synchronizationapi.get(channel, "PAUSE_LAUNCHED"))){
        currentStatus = 'ERROR'
        println("[ERROR] An internal error occurred in docker container: " + instanceName)
        // Update docker container is not running
        def serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(sessionId, instanceId)
        serviceInstanceData.setInstanceStatus(currentStatus)
        serviceInstanceRestApi.updateServiceInstanceUsingPUT(sessionId, instanceId, serviceInstanceData)
        // Tell the CRON loop to stop
        variables.put("IS_FINISHED",true)
        // Exit with error
        throw new IllegalStateException("An internal error occurred in docker container: " + instanceName)
    }
    //} else {
        // Fetch all logs or only new logs since last fetch time mark
        //def lastTime=variables.get('LAST_TIME_MARKER')
        //def fetchLogsCmd = lastTime ? ["docker", "logs", "--since", lastTime, instanceName] : ["docker", "logs", instanceName]
        //fetchLogsCmd.execute().waitForProcessOutput(System.out, System.err)
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="Loop_Over_Instance_Status_S">
          <script>
            <code language="groovy">
              <![CDATA[
// Check if loop task has ordered to finish the loop
def isFinished = variables.get('IS_FINISHED') as boolean
loop = isFinished ? false : '*/1 * * * *'

// Set a time marker to fetch logs since this marker.
variables.put("LAST_TIME_MARKER",new Date().format("yyyy-MM-dd'T'HH:mm:ssXXX"))
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            502.2743377685547
        </positionTop>
        <positionLeft>
            383.45489501953125
        </positionLeft>
      </metadata>
    </task>
    <task name="Condition" 
    
    
    
    
    fork="true">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
        <info name="Documentation" value="user/ProActiveUserGuide.html#_branch"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def engine = variables.get("ENGINE")

println("[INFO] Starting a Model_Service server in a " + engine + " container.")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <if target="Start_MaaS_DL_S"
        else="Start_MaaS_DL_D">
          <script>
            <code language="groovy">
              <![CDATA[
def engine = variables.get("ENGINE")
if(engine.toLowerCase().equals("singularity")){
    branch = "if";
} else {
    branch = "else";
}
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            229.27085876464844
        </positionTop>
        <positionLeft>
            513.4549560546875
        </positionLeft>
      </metadata>
    </task>
    <task name="Start_MaaS_DL_D" 
    
    onTaskError="cancelJob" 
    
    
    fork="true">
      <description>
        <![CDATA[ Pull DL_Model_Service image and start a container ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
      </genericInformation>
      <inputFiles>
        <files  includes="certificate_mas.pem" accessMode="transferFromGlobalSpace"/>
        <files  includes="key_mas.pem" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <selection>
        <script type="static">
          <file url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_node_name_not_empty/raw" language="groovy">
            <arguments>
              <argument value="$NODE_NAME"/>
            </arguments>
          </file>
        </script>
      </selection>
      <pre>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/ai-model-as-a-service/resources/MaaS_Pre_Script/raw" language="cpython"></file>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo BEGIN "$variables_PA_TASK_NAME"

################################################################################
### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
MODEL_BASE_PATH=$variables_MODEL_BASE_PATH
CONFIG_FILE_POLL_SECONDS=$variables_MODELS_DEPLOYMENT_REFRESH
PROMETHEUS_SERVICE_INTERNAL_PORT=9091
MODEL_SERVICE_INTERNAL_PORT=9090
DOCKER_IMAGE=$variables_DOCKER_IMAGE
ENGINE=$variables_ENGINE
HTTPS_ENABLED=$variables_HTTPS_ENABLED
DEBUG_ENABLED=$variables_DEBUG_ENABLED
USER_KEY=$variables_USER_KEY
INSTANCE_NAME=$variables_INSTANCE_NAME
MODEL_SERVICE_HOST_PORT=$variables_SERVICE_PORT
USER_DATA_FILE="${PWD}/${variables_USER_DATA_FILE}"
PYTHON_ENTRYPOINT_FILE="${PWD}/${variables_PYTHON_ENTRYPOINT}.py"
YAML_FILE="${PWD}/${variables_YAML_FILE}.yaml"
INSTANCE_PATH="/model_as_service"
chmod +x $PYTHON_ENTRYPOINT_FILE $YAML_FILE
################################################################################

imagedecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }
DOCKER_IMAGE=$(imagedecode "$DOCKER_IMAGE")

PATH=$PATH:/usr/sbin

GET_RANDOM_PORT(){
    PCA_SERVICES_PORT_RANGE_FILE=$variables_PA_SCHEDULER_HOME/config/pca_services_port_range
    if [[ -f "$PCA_SERVICES_PORT_RANGE_FILE" ]]; then
        read LOWERPORT UPPERPORT < $PCA_SERVICES_PORT_RANGE_FILE
    else
        read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
    fi
    while :
    do
        RND_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
        ss -lpn | grep -q ":$RND_PORT " || break
    done
    echo $RND_PORT
}

if [ "$MODEL_SERVICE_HOST_PORT" -eq "-1" ]; then
    echo "[INFO] Picking a random port number"
    MODEL_SERVICE_HOST_PORT=$(GET_RANDOM_PORT)
fi
echo "The service will be initialized on port $MODEL_SERVICE_HOST_PORT"

if [ -z "$INSTANCE_NAME" ]; then
    echo [ERROR] The INSTANCE_NAME is not provided by the user. Empty value is not allowed.
    exit 1
fi

echo "Pulling $DOCKER_IMAGE"
docker pull $DOCKER_IMAGE

if [ "$(docker ps -a --format '{{.Names}}' | grep "^$INSTANCE_NAME$")" ]; then
    echo [ERROR] "$INSTANCE_NAME" is already used by another service instance.
    exit 128
else
    echo "Running $INSTANCE_NAME container"
    echo "docker run -dit --name $INSTANCE_NAME -v /etc/localtime:/etc/localtime -e HTTPS_ENABLED=$HTTPS_ENABLED -e DEBUG_ENABLED=$DEBUG_ENABLED -e USER_KEY=$USER_KEY -p $MODEL_SERVICE_HOST_PORT:$MODEL_SERVICE_INTERNAL_PORT $DOCKER_IMAGE"
    docker run -dit --name $INSTANCE_NAME -v /etc/localtime:/etc/localtime -e ENGINE=$ENGINE -e INSTANCE_PATH=$INSTANCE_PATH -e HTTPS_ENABLED=$HTTPS_ENABLED -e DEBUG_ENABLED=$DEBUG_ENABLED -e USER_KEY=$USER_KEY -p $MODEL_SERVICE_HOST_PORT:$MODEL_SERVICE_INTERNAL_PORT -e CONFIG_FILE_POLL_SECONDS=$CONFIG_FILE_POLL_SECONDS -e MODEL_BASE_PATH=$MODEL_BASE_PATH $DOCKER_IMAGE
    echo "docker exec $INSTANCE_NAME mkdir -p $INSTANCE_PATH"
    docker exec $INSTANCE_NAME mkdir -p $INSTANCE_PATH
    #Copy the needed files to launch the service
    echo "Copying the needed files to launch the service"
    docker cp $USER_DATA_FILE $INSTANCE_NAME:$INSTANCE_PATH/user_data.enc
    docker cp $PYTHON_ENTRYPOINT_FILE $INSTANCE_NAME:$INSTANCE_PATH/dl_service.py
    docker cp $YAML_FILE $INSTANCE_NAME:$INSTANCE_PATH/dl_service-api.yaml
    docker cp key_mas.pem $INSTANCE_NAME:$INSTANCE_PATH/key_mas.pem
    docker cp certificate_mas.pem $INSTANCE_NAME:$INSTANCE_PATH/certificate_mas.pem
    echo "docker exec $INSTANCE_NAME ls -la $INSTANCE_PATH"
    docker exec $INSTANCE_NAME ls -la $INSTANCE_PATH
    echo "docker exec -d $INSTANCE_NAME bash -c python $INSTANCE_PATH/dl_service.py >> /proc/1/fd/1"
    docker exec -d $INSTANCE_NAME bash -c "python $INSTANCE_PATH/dl_service.py  >> /proc/1/fd/1"
    
    if [ "$(docker ps -a --format '{{.Names}}' | grep "^$INSTANCE_NAME$")" ]; then
        RUNNING=$(docker inspect --format="{{ .State.Running }}" $INSTANCE_NAME 2> /dev/null)
        if [ "${RUNNING,,}" = "true" ]; then
            echo $INSTANCE_NAME > $INSTANCE_NAME"_status"
        fi
    else
        echo $INSTANCE_STATUS > $INSTANCE_NAME"_status"
    fi
fi

MODEL_SERVICE_PORT=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "'$MODEL_SERVICE_INTERNAL_PORT'/tcp") 0).HostPort}}' $INSTANCE_NAME)
echo "$MODEL_SERVICE_PORT" > $INSTANCE_NAME"_port"

containerID=$(docker ps -aqf "name=^$INSTANCE_NAME$")
echo "$containerID" > $INSTANCE_NAME"_containerID"

echo END "$variables_PA_TASK_NAME"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <post>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/ai-model-as-a-service/resources/MaaS_Post_Script/raw" language="groovy"></file>
        </script>
      </post>
      <cleaning>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Clean_Start_Service/raw" language="groovy"></file>
        </script>
      </cleaning>
      <metadata>
        <positionTop>
            350.2604522705078
        </positionTop>
        <positionLeft>
            661.4410400390625
        </positionLeft>
      </metadata>
    </task>
    <task name="Loop_Over_Instance_Status_D" 
    
    
    
    
    fork="true">
      <description>
        <![CDATA[ Loop over service instance status and fetch docker container logs.
It will run every minute. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="Start_MaaS_DL_D"/>
      </depends>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Check_Instance_Status/raw" language="groovy"></file>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="Loop_Over_Instance_Status_D">
          <script>
            <code language="groovy">
              <![CDATA[
// Check if loop task has ordered to finish the loop
def isFinished = variables.get('IS_FINISHED') as boolean
loop = isFinished ? false : '*/1 * * * *'

// Set a time marker to fetch logs since this marker.
variables.put("LAST_TIME_MARKER",new Date().format("yyyy-MM-dd'T'HH:mm:ssXXX"))
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            484.27085876464844
        </positionTop>
        <positionLeft>
            683.4375
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:3152px;
            height:3871px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-224.27085876464844px;left:-378.45489501953125px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_87" style="top: 366.284px; left: 423.455px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Pull DL_Model_Service image and start a container"><img src="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png" width="20px">&nbsp;<span class="name">Start_MaaS_DL_S</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_90" style="top: 502.291px; left: 383.455px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Loop over service instance status and fetch docker container logs.
It will run every minute."><img src="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png" width="20px">&nbsp;<span class="name">Loop_Over_Instance_Status_S</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_93" style="top: 229.288px; left: 513.455px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Condition</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_96" style="top: 350.277px; left: 661.441px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Pull DL_Model_Service image and start a container"><img src="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png" width="20px">&nbsp;<span class="name">Start_MaaS_DL_D</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_99" style="top: 484.288px; left: 683.438px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Loop over service instance status and fetch docker container logs.
It will run every minute."><img src="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png" width="20px">&nbsp;<span class="name">Loop_Over_Instance_Status_D</span></a></div><svg style="position:absolute;left:459.5px;top:405.5px" width="33" height="97" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 96 C -10 46 22 50 12 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.7275560000000008,72.607428 L8.72227696669965,54.17373626535072 L0.7656543355908072,58.83122016828872 L-5.053930865011629,51.680525929759916 L-1.7275560000000008,72.607428" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.7275560000000008,72.607428 L8.72227696669965,54.17373626535072 L0.7656543355908072,58.83122016828872 L-5.053930865011629,51.680525929759916 L-1.7275560000000008,72.607428" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:537.0266769263776px;top:451.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_110" style="position: absolute; transform: translate(-50%, -50%); left: 549px; top: 521.5px;">loop</div><svg style="position:absolute;left:412.5px;top:268.5px" width="111" height="98" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 97 C -10 47 100 50 90 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M8.741249999999997,70.09196875 L28.67834751194523,62.9147727237522 L19.607668914860533,61.264684911425356 L19.85106367337058,52.04835380889167 L8.741249999999997,70.09196875" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M8.741249999999997,70.09196875 L28.67834751194523,62.9147727237522 L19.607668914860533,61.264684911425356 L19.85106367337058,52.04835380889167 L8.741249999999997,70.09196875" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_116" style="position: absolute; transform: translate(-50%, -50%); left: 467.5px; top: 317px;">if</div><svg style="position:absolute;left:502.5px;top:268.5px" width="169" height="82" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 148 81 C 158 31 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M128.5320305,54.64572975 L112.26237875562023,41.07007388677921 L115.42308447990652,49.730901752778166 L107.3475507583984,54.17901990687268 L128.5320305,54.64572975" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M128.5320305,54.64572975 L112.26237875562023,41.07007388677921 L115.42308447990652,49.730901752778166 L107.3475507583984,54.17901990687268 L128.5320305,54.64572975" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_120" style="position: absolute; transform: translate(-50%, -50%); left: 586.5px; top: 309px;">else</div><svg style="position:absolute;left:710px;top:389.5px" width="71" height="95" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 50 94 C 60 44 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M47.44242,69.34530600000001 L41.794560196218455,48.92223865846611 L39.462773352941745,57.84203518739666 L30.29128938361511,56.90188530552435 L47.44242,69.34530600000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M47.44242,69.34530600000001 L41.794560196218455,48.92223865846611 L39.462773352941745,57.84203518739666 L30.29128938361511,56.90188530552435 L47.44242,69.34530600000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:838.0266769263776px;top:433.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_129" style="position: absolute; transform: translate(-50%, -50%); left: 850px; top: 503.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 472px; top: 396px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 413px; top: 356px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 460px; top: 532px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 460px; top: 492px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 547px; top: 492px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 547px; top: 532px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 553px; top: 259px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 503px; top: 259px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 710.5px; top: 380px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 651px; top: 340px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 760.5px; top: 514px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 760.5px; top: 474px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 848px; top: 474px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 848px; top: 514px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
