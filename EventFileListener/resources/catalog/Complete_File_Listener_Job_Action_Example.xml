<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="Complete_File_Listener_Job_Action_Example" projectName="4. File Listener Examples" tags="Sub-Folders,Triggers" priority="normal" onTaskError="suspendTask"  maxNumberOfExecution="2"  >
  <variables>
    <variable name="SERVER_TO_MONITOR" value="" model="PA:MODEL_FROM_URL(${PA_SCHEDULER_REST_PUBLIC_URL}/rm/model/hosts)" description="Hostname or IP address of the server to be monitored" group="Source Settings" advanced="false" hidden="false"/>
    <variable name="SOURCE_FOLDER_PATH" value="/tmp/source-folder/" model="PA:REGEXP(^$|^.+/$)" description="Folder on the given server that will be monitored for new files presence" group="Source Settings" advanced="false" hidden="false"/>
    <variable name="FILENAME_PATTERN" value=".*" model="PA:NOT_EMPTY_STRING" description="Only filenames which match the supplied regular expression are be considered" group="Source Settings" advanced="false" hidden="false"/>
    <variable name="ACTION_WORKFLOW" value="event-file-listener/Folder_To_Folder_File_Transfer_Task" model="PA:LIST(event-file-listener/Folder_To_Folder_File_Transfer_Task,event-file-listener/Postgres_File_Export_Task,event-file-listener/SFTP_File_Transfer_Task,event-file-listener/FTP_File_Transfer_Task)" description="Workflow action to submit from the Catalog" group="Action" advanced="false" hidden="false"/>
    <variable name="DELETE_DETECTED_FILE" value="false" model="PA:BOOLEAN" description="A boolean indicating whether to delete the detected file after the workflow action. Default value is False." group="Source Settings" advanced="false" hidden="false"/>
    <variable name="DESTINATION_FOLDER_PATH" value="/tmp/destination-folder/" model="PA:REGEXP(^$|^.+/$)" description="Path of the folder on the given TARGET HOST where the file be transferred." group="Folder Destination Settings" advanced="false" hidden="true"/>
    <variable name="IF_FILE_EXISTS_AT_DESTINATION" value="Replace" model="PA:LIST(Replace,Cancel,Append,Alert And Wait)" description="Choose the action to perform in case the found file exists at destination. Default value is Replace." group="Folder Destination Settings" advanced="false" hidden="true"/>
    <variable name="SFTP_HOST" value="demo.activeeon.com" model="PA:NOT_EMPTY_STRING" description="Hostname or IP address of the SFTP server. Default value is localhost" group="SFTP Destination Settings" advanced="false" hidden="true"/>
    <variable name="FTP_HOST" value="ftp.dlptest.com" model="PA:NOT_EMPTY_STRING" description="Hostname or IP address of the FTP server. Default value is localhost" group="FTP Destination Settings" advanced="false" hidden="true"/>
    <variable name="POSTGRESQL_DATABASE" value="demo" model="PA:NOT_EMPTY_STRING" description="The database name" group="PostgreSQL Destination Settings" advanced="false" hidden="true"/>
    <variable name="FOLDER_DESTINATION_SETTINGS_HANDLER" value="" model="PA:SPEL(variables[&#x27;ACTION_WORKFLOW&#x27;] == &#x27;event-file-listener/Folder_To_Folder_File_Transfer_Task&#x27; ? showGroup(&#x27;Folder Destination Settings&#x27;) : hideGroup(&#x27;Folder Destination Settings&#x27;))" description="Handler which enables the variables of the Folder Destination Settings group based on the chosen ACTION_WORKFLOW" group="Destination Settings Handler" advanced="false" hidden="true"/>
    <variable name="SFTP_PORT" value="22" model="PA:INTEGER?" description="The listening port of the SFTP server. Default value is 22" group="SFTP Destination Settings" advanced="false" hidden="true"/>
    <variable name="SFTP_USERNAME" value="demo" model="PA:NOT_EMPTY_STRING" description="SFTP server user name" group="SFTP Destination Settings" advanced="false" hidden="true"/>
    <variable name="SFTP_CREDENTIAL_KEY" value="sftp://${SFTP_USERNAME}@${SFTP_HOST}" model="PA:CREDENTIAL" description="Third-party credential storing the password associated with the given user name" group="SFTP Destination Settings" advanced="false" hidden="true"/>
    <variable name="SFTP_DESTINATION_FOLDER_PATH" value="destination-folder/" model="PA:REGEXP(^$|^.+/$)" description="The remote relative path on the SFTP server where transferred file(s) will be stored." group="SFTP Destination Settings" advanced="false" hidden="true"/>
    <variable name="SFTP_DESTINATION_SETTINNGS_HANDLER" value="" model="PA:SPEL(variables[&#x27;ACTION_WORKFLOW&#x27;] == &#x27;event-file-listener/SFTP_File_Transfer_Task&#x27; ? showGroup(&#x27;SFTP Destination Settings&#x27;) : hideGroup(&#x27;SFTP Destination Settings&#x27;))" description="Handler which enables the variables of the SFTP Destination Settings group based on the chosen ACTION_WORKFLOW" group="Destination Settings Handler" advanced="false" hidden="true"/>
    <variable name="FTP_DESTINATION_SETTINGS_HANDLER" value="" model="PA:SPEL(variables[&#x27;ACTION_WORKFLOW&#x27;] == &#x27;event-file-listener/FTP_File_Transfer_Task&#x27; ? showGroup(&#x27;FTP Destination Settings&#x27;) : hideGroup(&#x27;FTP Destination Settings&#x27;))" description="Handler which enables the variables of the FTP Destination Settings group based on the chosen ACTION_WORKFLOW" group="Destination Settings Handler" advanced="false" hidden="true"/>
    <variable name="FTP_PORT" value="21" model="PA:INTEGER?" description="The listening port of the FTP server. Default value is 21" group="FTP Destination Settings" advanced="false" hidden="true"/>
    <variable name="FTP_USERNAME" value="dlpuser" model="PA:NOT_EMPTY_STRING" description="FTP server user name" group="FTP Destination Settings" advanced="false" hidden="true"/>
    <variable name="FTP_CREDENTIAL_KEY" value="ftp://${FTP_USERNAME}@${FTP_HOST}" model="PA:Credential" description="Third-party credential storing the password associated with the given user name" group="FTP Destination Settings" advanced="false" hidden="true"/>
    <variable name="FTP_DESTINATION_FOLDER_PATH" value="destination-folder/" model="PA:REGEXP(^$|^.+/$)" description="The remote relative path on the FTP server where transferred file(s) will be stored." group="FTP Destination Settings" advanced="false" hidden="true"/>
    <variable name="POSTGRESQL_HOST" value="demo.activeeon.com" model="PA:NOT_EMPTY_STRING" description="Hostname or IP address of the database host machine. Default value is localhost" group="PostgreSQL Destination Settings" advanced="false" hidden="true"/>
    <variable name="POSTGRESQL_PORT" value="5432" model="PA:INTEGER" description="The listening port of the database. Default value is 5432" group="PostgreSQL Destination Settings" advanced="false" hidden="true"/>
    <variable name="POSTGRESQL_USERNAME" value="demo" model="PA:NOT_EMPTY_STRING" description="Database user name" group="PostgreSQL Destination Settings" advanced="false" hidden="true"/>
    <variable name="POSTGRESQL_CREDENTIAL_KEY" value="postgresql://${POSTGRESQL_USERNAME}@${POSTGRESQL_HOST}:${POSTGRESQL_PORT}" model="PA:Credential" description="Third-party credential storing the password associated with the given user name" group="PostgreSQL Destination Settings" advanced="false" hidden="true"/>
    <variable name="POSTGRESQL_DESTINATION_SETTINGS_HANDLER" value="" model="PA:SPEL(variables[&#x27;ACTION_WORKFLOW&#x27;] == &#x27;event-file-listener/Postgres_File_Export_Task&#x27; ? showGroup(&#x27;PostgreSQL Destination Settings&#x27;) : hideGroup(&#x27;PostgreSQL Destination Settings&#x27;))" description="Handler which enables the variables of the PostgreSQL Destination Settings group based on the chosen ACTION_WORKFLOW" group="Destination Settings Handler" advanced="false" hidden="true"/>
    <variable name="FREQUENCY" value="Repeat indefinitely" model="PA:LIST(Until success,Repeat indefinitely)" description="If the until success option is selected, the file listener stops listening to the folder when the listener rules are met. Otherwise, the file listener notifies the registered application on events and continues to listen for subsequent events." group="Frequency" advanced="false" hidden="false"/>
    <variable name="POLLING_INTERVAL" value="0" model="PA:INTEGER" description="The time window (minutes) between two checking for the presence of new files arrival. A value of 0 means that the listener is reactive." group="Frequency" advanced="false" hidden="true"/>
    <variable name="FREQUENCY_HANDLER" value="" model="PA:SPEL(variables[&#x27;FREQUENCY&#x27;] == &#x27;Repeat indefinitely&#x27; ? showVar(&#x27;POLLING_INTERVAL&#x27;) : true)"  group="Frequency" advanced="false" hidden="true"/>
    <variable name="START_NOW" value="True" model="PA:BOOLEAN" description="If true, the file listener will be activated immediately." group="Listener Schedule" advanced="false" hidden="false"/>
    <variable name="START_DATE" value="2024-04-01T00:00:00+01:00" model="PA:DATETIME(yyyy-MM-dd&#x27;T&#x27;HH:mm:ssXXX)?" description="Select a specific date to activate the file listener" group="Listener Schedule" advanced="false" hidden="true"/>
    <variable name="DAYS_TO_RUN" value="1" model="PA:INTEGER" description="Number of days the file listener is running." group="Listener Schedule" advanced="false" hidden="false"/>
    <variable name="HOURS_TO_RUN" value="10" model="PA:INTEGER" description="Number of hours the file listener is running." group="Listener Schedule" advanced="false" hidden="false"/>
    <variable name="MINUTES_TO_RUN" value="5" model="PA:INTEGER" description="Number of minutes the file listener is running." group="Listener Schedule" advanced="false" hidden="false"/>
    <variable name="END_DATE" value="2024-12-31T00:00:00+01:00" model="PA:DATETIME(yyyy-MM-dd&#x27;T&#x27;HH:mm:ssXXX)?" description="Select a specific date until which the file listener runs" group="Listener Schedule" advanced="false" hidden="true"/>
    <variable name="START_DATE_HANDLER" value="" model="PA:SPEL(variables[&#x27;START_NOW&#x27;].toLowerCase() == &#x27;false&#x27; ? showVar(&#x27;START_DATE&#x27;) : hideVar(&#x27;START_DATE&#x27;))" description="Handler which shows START_DATE in case START_NOW value is false" group="Listener Schedule" advanced="false" hidden="true"/>
    <variable name="END_DATE_HANDLER" value="" model="PA:SPEL(variables[&#x27;DAYS_TO_RUN&#x27;] == &#x27;0&#x27;  &amp;&amp; variables[&#x27;HOURS_TO_RUN&#x27;] == &#x27;0&#x27;  &amp;&amp; variables[&#x27;MINUTES_TO_RUN&#x27;] == &#x27;0&#x27;  ? showVar(&#x27;END_DATE&#x27;) &amp;&amp; hideVar(&#x27;DAYS_TO_RUN&#x27;) &amp;&amp; hideVar(&#x27;HOURS_TO_RUN&#x27;) &amp;&amp; hideVar(&#x27;MINUTES_TO_RUN&#x27;) : hideVar(&#x27;END_DATE&#x27;))" description="Handler which shows START_DATE based on DAYS and HOURS values" group="Listener Schedule" advanced="false" hidden="true"/>
    <variable name="CHECK_SUB-FOLDERS" value="True" model="PA:BOOLEAN" description="A boolean indicating whether to seek files  in sub-folders under the folder to monitor you specified" group="Sub Folders" advanced="false" hidden="false"/>
  </variables>
  <description>
    <![CDATA[ This file listener workflow monitors a folder (SOURCE_FOLDER_PATH) on a given server (SERVER_TO_MONITOR). A file event is detected when a new file matching a specific pattern (FILENAME_PATTERN) arrives to this folder or an existing one is modified.
For each new file detected, the file listener will submit a workflow action (ACTION_WORKFLOW) saved in the Catalog to the scheduler to process the file.
The user is able to select a single workflow action among four options via a drop-down list.
The default workflow action is a folder to folder file transfer.

The file listener can be interactively terminated by sending the Terminate_Monitoring signal. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="event-file-listener"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/file_trigger.png"/>
    <info name="group" value="public-objects"/>
    <info name="submission.mode" value="workflow-api"/>
    <info name="Documentation" value="user/ProActiveUserGuide.html#_file"/>
    <info name="START_AT" value="${START_DATE}"/>
  </genericInformation>
  <taskFlow>
    <task name="File_Listener"




    fork="true">
      <description>
        <![CDATA[ This file listener workflow monitors a folder (SOURCE_FOLDER_PATH) on a given server (SERVER_TO_MONITOR). A file event is detected when a new file matching a specific pattern (FILENAME_PATTERN) arrives to this folder or an existing one is modified.
For each new file detected, the file listener will submit a workflow action (ACTION_WORKFLOW) saved in the Catalog to the scheduler to process the file.

The file listener can be interactively terminated by sending the Terminate_Monitoring signal. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/file_trigger.png"/>
      </genericInformation>
      <depends>
        <task ref="Init_File_Listener"/>
      </depends>
      <selection>
        <script type="static">
          <file url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_host_name/raw" language="groovy">
            <arguments>
              <argument value="${SERVER_TO_MONITOR}"/>
            </arguments>
          </file>
        </script>
        <script type="dynamic">
          <code language="groovy">
            <![CDATA[
import groovy.io.FileType
import java.nio.file.attribute.BasicFileAttributes
import java.nio.file.Files
import java.time.ZonedDateTime

if (signalapi.isReceived("Terminate_Monitoring")) {
    selected = true;
    return;
}

inputFilesFolder = new File(variables.get("SOURCE_FOLDER_PATH"));
filesToProcess = new ArrayList();
channelId = variables.get("CHANNEL_ID")
selected = false;
pattern = variables.get("FILENAME_PATTERN")
checkSubFolders = false
if (variables.get("CHECK_SUB-FOLDERS")) {
    checkSubFolders = variables.get("CHECK_SUB-FOLDERS").toBoolean()
}
endDate = variables.get("END_DATE")
parsedEndDate = null
if(endDate){
    parsedEndDate = ZonedDateTime.parse(endDate)
}

// list files in the monitored folder
if(checkSubFolders){
    inputFilesFolder.eachFileRecurse(FileType.FILES, { file->
        key = file.getAbsolutePath()
        attr = Files.readAttributes(file.toPath(), BasicFileAttributes.class)
        //value = attr.size()
        value = attr.lastModifiedTime().toMillis()
        if ((!synchronizationapi.containsKey(channelId, key) || (synchronizationapi.get(channelId, key) != null && synchronizationapi.get(channelId, key) != value) )&& file.getName() ==~ /${pattern}/ || (parsedEndDate && parsedEndDate.isBefore(ZonedDateTime.now()))) {
            // if key is not there then we spotted a new file
            selected = true;
        }
    })
} else {
    inputFilesFolder.eachFile(FileType.FILES, { file->
        key = file.getAbsolutePath()
        attr = Files.readAttributes(file.toPath(), BasicFileAttributes.class)
        //value = attr.size()
        value = attr.lastModifiedTime().toMillis()
        if ((!synchronizationapi.containsKey(channelId, key) || (synchronizationapi.get(channelId, key) != null && synchronizationapi.get(channelId, key) != value) )&& file.getName() ==~ /${pattern}/ || (parsedEndDate && parsedEndDate.isBefore(ZonedDateTime.now()))) {
            // if key is not there then we spotted a new file
            selected = true;
        }
    })
}
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.io.FileType
import org.apache.commons.io.FilenameUtils
import java.nio.file.attribute.BasicFileAttributes
import java.nio.file.Files
import java.sql.Timestamp

if (signalapi.isReceived("Terminate_Monitoring")) {
    result = true;
    return;
}

sourceFolderPath = new File(variables.get("SOURCE_FOLDER_PATH"))
schedulerapi.connect()
pattern = variables.get("FILENAME_PATTERN")
checkSubFolders = false
//if true, list files in the monitored folder and in its sub-folders
if (variables.get("CHECK_SUB-FOLDERS")?.trim()) {
    checkSubFolders = variables.get("CHECK_SUB-FOLDERS").toBoolean()
}
channelId = variables.get("CHANNEL_ID")

//Please add the catalog path of the post workflow action you want to submit using the variable 'ACTION_WORKFLOW'
actionWorkflow = variables.get("ACTION_WORKFLOW")
job_action_variables = [:]
if (actionWorkflow.contains("SFTP_File_Transfer_Task")) {
    job_action_variables = ["HOST" : variables.get("SFTP_HOST"), "PORT" : variables.get("SFTP_PORT"), "USERNAME" : variables.get("SFTP_USERNAME"), "SSH_PASSWORD": variables.get("SFTP_CREDENTIAL_KEY"), "DESTINATION_FOLDER_PATH": variables.get("SFTP_DESTINATION_FOLDER_PATH")]
} else if (actionWorkflow.contains("FTP_File_Transfer_Task")) {
    job_action_variables = ["HOST" : variables.get("FTP_HOST"), "PORT" : variables.get("FTP_PORT"), "USERNAME" : variables.get("FTP_USERNAME"), "CREDENTIAL_KEY": variables.get("FTP_CREDENTIAL_KEY"), "DESTINATION_FOLDER_PATH": variables.get("FTP_DESTINATION_FOLDER_PATH")]
} else if (actionWorkflow.contains("Folder_To_Folder_File_Transfer_Task")) {
     job_action_variables = ["IF_FILE_EXISTS_AT_DESTINATION" : variables.get("IF_FILE_EXISTS_AT_DESTINATION"), "DESTINATION_FOLDER_PATH" : variables.get("DESTINATION_FOLDER_PATH")]
} else {
    job_action_variables = ["HOST" : variables.get("POSTGRESQL_HOST"), "PORT" : variables.get("POSTGRESQL_PORT"), "USERNAME" : variables.get("POSTGRESQL_USERNAME"), "CREDENTIAL_KEY": variables.get("POSTGRESQL_CREDENTIAL_KEY")]
}

if(checkSubFolders){
    sourceFolderPath.eachFileRecurse(FileType.FILES, { file->
        fileTrigger(file)
    })
} else {
    sourceFolderPath.eachFile(FileType.FILES, { file->
        fileTrigger(file)
    })
}

/*
* check the presence of a new file arrival in the monitored folder matching the defined pattern
*
* @param file
*/
void fileTrigger(def file) {
    key = file.getAbsolutePath()
    attr = Files.readAttributes(file.toPath(), BasicFileAttributes.class)
    //value = attr.size()
    value = attr.lastModifiedTime().toMillis()
    previousValue = synchronizationapi.putIfAbsent(channelId, key, value)
    if ((previousValue == null || previousValue != value) && file.getName() ==~ /${pattern}/) {
        //the listner has detected a new file arrival matching the defined pattern
        if(previousValue != null ){
            synchronizationapi.put(channelId, key, value)
        }

        // variables submitted to the workflow action
        detectedFilePathVariableName = "DETECTED_FILE_NAME_AND_PATH"
        fileBaseName = FilenameUtils.getBaseName(key)
        // push file to userspace
        userspaceapi.connect()
        userspaceapi.pushFile(file, file.getName())
        found_file_variables = [(detectedFilePathVariableName) : key, "DELETE_DETECTED_FILE": variables.get("DELETE_DETECTED_FILE"), "SOURCE_FOLDER_PATH": sourceFolderPath, "FILE_BASE_NAME": fileBaseName, "SOURCE_FILE": file.getName()]
        job_action_variables.putAll(found_file_variables)
        def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]

        println "Submitting the workflow action " + actionWorkflow + " to process the detected file : " + key
        resultMap.put("File path: " + key, "Date: " + new Timestamp(value))
        // submitting the job
        jobid = schedulerapi.submitFromCatalog(variables.get("PA_CATALOG_REST_URL"), actionWorkflow, job_action_variables, generic_infos_map)

        println "Job submitted with job id " + jobid
    }
}


schedulerapi.disconnect()
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="File_Listener">
          <script>
            <code language="groovy">
              <![CDATA[
import java.time.ZonedDateTime

frequency = variables.get("FREQUENCY")
pollTime = variables.get("POLLING_INTERVAL")
endDate = variables.get("END_DATE")
parsedEndDate = null
if(endDate){
    parsedEndDate = ZonedDateTime.parse(endDate)
}
if (frequency == "Until success" || signalapi.isReceived("Terminate_Monitoring")) {
    loop = false;
} else {
    if(parsedEndDate == null || (parsedEndDate && parsedEndDate.isAfter(ZonedDateTime.now()))) {
        if (pollTime && pollTime != '0') {
            println("Polling the folder " + variables.get("SOURCE_FOLDER_PATH") + " for new file(s) arrival")
            loop = '*/' + pollTime + ' * * * *'
        } else {
            loop = true
        }
    } else {
        println "The end date is reached so the file listener schedule is terminated"
        loop = false
    }
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            420.9982604980469
        </positionTop>
        <positionLeft>
            532.9774475097656
        </positionLeft>
      </metadata>
    </task>
    <task name="End_File_Listner"




    fork="true">
      <description>
        <![CDATA[ Clean up the synchronization api channel used by this workflow. ]]>
      </description>
      <depends>
        <task ref="File_Listener"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
if (variables.get("POST_ACTION_WORKFLOW")) {
    synchronizationapi.deleteChannel(variables.get("CHANNEL_ID"))
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            549.8871765136719
        </positionTop>
        <positionLeft>
            532.9774475097656
        </positionLeft>
      </metadata>
    </task>
    <task name="Init_File_Listener" maxNumberOfExecution="1"
          onTaskError="cancelJob"
          fork="true">
      <description>
        <![CDATA[ Create the synchronization api channel used by this workflow. ]]>
      </description>
      <depends>
        <task ref="Init_Source_Settings"/>
        <task ref="Init_File_Pattern"/>
        <task ref="Init_Frequency"/>
        <task ref="Init_Schedule"/>
        <task ref="Init_Sub_Folders"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
if(!variables.get("SERVER_TO_MONITOR")){
    throw new Exception("ERROR: SERVER_TO_MONITOR variable is not provided by the user")
}
channelId = "FileTrigger_" + variables.get("PA_JOB_ID")
variables.put("CHANNEL_ID", channelId)
synchronizationapi.createChannel(channelId, true)
signalapi.readyForSignal("Terminate_Monitoring")
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            292.109375
        </positionTop>
        <positionLeft>
            532.9774475097656
        </positionLeft>
      </metadata>
    </task>
    <task name="Init_Source_Settings"




    fork="true">
      <description>
        <![CDATA[ Configure the following listener rules:
Server Environment: Host that contains the Agent on which file listener runs.
Source Folder Path: Path to the folder to which the file listener listens. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/file_listner_rule.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
sourceFolderPath = variables.get("SOURCE_FOLDER_PATH")
serverEnvironment = variables.get("SERVER_TO_MONITOR")
println("Monitoring the folder : " + sourceFolderPath + " located in the server host : " + serverEnvironment)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            163.22048950195312
        </positionTop>
        <positionLeft>
            224.20138549804688
        </positionLeft>
      </metadata>
    </task>
    <task name="Init_File_Pattern"




    fork="true">
      <description>
        <![CDATA[ Specify a file name pattern, using wildcard characters, to decide which files will trigger the file listener. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/file_listner_rule.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println ("The file name pattern that triggers the file listener is : " + variables.get("FILENAME_PATTERN"))
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            163.22048950195312
        </positionTop>
        <positionLeft>
            385.0868225097656
        </positionLeft>
      </metadata>
    </task>
    <task name="Init_Frequency"




    fork="true">
      <description>
        <![CDATA[ Configure the file listener to run either on a reoccurring basis with a configurable polling interval or to stop listening to the folder when the listener rules are met. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/file_listner_rule.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
if (variables.get("FREQUENCY") == "Until success") {
    println "The file listener is configured to stop listening to the folder when the listener rules are met"
} else {
    pollingTime = variables.get("POLLING_INTERVAL")
    println "The file listener is configured to run on a reoccurring basis with a configurable polling interval  : " + pollingTime
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            163.22048950195312
        </positionTop>
        <positionLeft>
            532.9774475097656
        </positionLeft>
      </metadata>
    </task>
    <task name="Init_Schedule"




    fork="true">
      <description>
        <![CDATA[ Set the schedule options to start and end a file listener on a specific date and time, and seconds. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/file_listner_rule.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

startNow = variables.get("START_NOW").toBoolean()
startDate = ZonedDateTime.now()
if(!startNow){
    startDate = ZonedDateTime.parse(variables.get("START_DATE"))
}
daysToRun = Integer.parseInt(variables.get("DAYS_TO_RUN"))
hoursToRun = Integer.parseInt(variables.get("HOURS_TO_RUN"))
minutesToRun = Integer.parseInt(variables.get("MINUTES_TO_RUN"))
endDate = startDate.plusDays(daysToRun).plusHours(hoursToRun).plusMinutes(minutesToRun)
if(daysToRun == 0 && hoursToRun == 0 && minutesToRun == 0){
    endDate = variables.get("END_DATE")
}
println("The file listener is scheduled to listen to files on a defined location from the start date " + startDate.format(DateTimeFormatter.ISO_ZONED_DATE_TIME) + " until the end date "  + endDate.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME))

variables.put("START_DATE", startDate.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME))
variables.put("END_DATE", endDate.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME))
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            163.22048950195312
        </positionTop>
        <positionLeft>
            674.8611755371094
        </positionLeft>
      </metadata>
    </task>
    <task name="Init_Sub_Folders"




    fork="true">
      <description>
        <![CDATA[ Indicate whether to recursively search for files in sub-folders of the folder to be monitored. Default value is true. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/file_listner_rule.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println ("The search for files in sub-folders of the folder to be monitored is : " + variables.get("CHECK_SUB-FOLDERS"))
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            163.22048950195312
        </positionTop>
        <positionLeft>
            821.2500915527344
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2388px;
            height:3249px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-158.22048950195312px;left:-219.20138549804688px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_397" style="top: 421.005px; left: 532.98px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This file listener workflow monitors a folder (SOURCE_FOLDER_PATH) on a given server (SERVER_TO_MONITOR). A file event is detected when a new file matching a specific pattern (FILENAME_PATTERN) arrives to this folder or an existing one is modified.
For each new file detected, the file listener will submit a workflow action (ACTION_WORKFLOW) saved in the Catalog to the scheduler to process the file.

The file listener can be interactively terminated by sending the Terminate_Monitoring signal."><img src="/automation-dashboard/styles/patterns/img/wf-icons/file_trigger.png" width="20px">&nbsp;<span class="name">File_Listener</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_400" style="top: 549.894px; left: 532.98px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Clean up the synchronization api channel used by this workflow."><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">End_File_Listner</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_403" style="top: 292.116px; left: 532.98px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Create the synchronization api channel used by this workflow."><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Init_File_Listener</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable" id="jsPlumb_1_406" style="top: 163.227px; left: 224.203px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Configure the following listener rules:
Server Environment: Host that contains the Agent on which file listener runs.
Source Folder Path: Path to the folder to which the file listener listens."><img src="/automation-dashboard/styles/patterns/img/wf-icons/file_listner_rule.png" width="20px">&nbsp;<span class="name">Init_Source_Settings</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable" id="jsPlumb_1_409" style="top: 163.227px; left: 385.092px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Specify a file name pattern, using wildcard characters, to decide which files will trigger the file listener."><img src="/automation-dashboard/styles/patterns/img/wf-icons/file_listner_rule.png" width="20px">&nbsp;<span class="name">Init_File_Pattern</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable" id="jsPlumb_1_412" style="top: 163.227px; left: 532.98px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Configure the file listener to run either on a reoccurring basis with a configurable polling interval or to stop listening to the folder when the listener rules are met."><img src="/automation-dashboard/styles/patterns/img/wf-icons/file_listner_rule.png" width="20px">&nbsp;<span class="name">Init_Frequency</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable" id="jsPlumb_1_415" style="top: 163.227px; left: 674.869px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Set the schedule options to start and end a file listener on a specific date and time, and seconds."><img src="/automation-dashboard/styles/patterns/img/wf-icons/file_listner_rule.png" width="20px">&nbsp;<span class="name">Init_Schedule</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable" id="jsPlumb_1_418" style="top: 163.227px; left: 821.251px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Indicate whether to recursively search for files in sub-folders of the folder to be monitored. Default value is true."><img src="/automation-dashboard/styles/patterns/img/wf-icons/file_listner_rule.png" width="20px">&nbsp;<span class="name">Init_Sub_Folders</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><svg style="position:absolute;left:572.5px;top:331.5px" width="26" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 89 C -10 39 15 50 5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.40624,67.21769599999999 L6.477185501388651,47.980109057733095 L-1.0653143428804757,53.28206116042133 L-7.45844933819001,46.63918340061357 L-2.40624,67.21769599999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.40624,67.21769599999999 L6.477185501388651,47.980109057733095 L-1.0653143428804757,53.28206116042133 L-7.45844933819001,46.63918340061357 L-2.40624,67.21769599999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:622.5px;top:410.5px" width="61" height="61" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C 50 -10 -10 50 0 0 " transform="translate(10.5,10.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.55903999999999,26.37184000000001 L31.950657715430147,15.848133532719785 L22.731266562420885,15.794966176056539 L21.37378389148668,6.67590697029889 L13.55903999999999,26.37184000000001" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,10.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.55903999999999,26.37184000000001 L31.950657715430147,15.848133532719785 L22.731266562420885,15.794966176056539 L21.37378389148668,6.67590697029889 L13.55903999999999,26.37184000000001" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,10.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_429" style="position: absolute; transform: translate(-50%, -50%); left: 647.5px; top: 440.5px;">loop</div><svg style="position:absolute;left:572.5px;top:460.5px" width="28.5" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 7.5 89 C 17.5 39 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M9.6924,67.21769599999999 L14.08212523390993,46.48775841276219 L7.905293500992152,53.33222696358628 L0.19665619749621932,48.27486491177004 L9.6924,67.21769599999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M9.6924,67.21769599999999 L14.08212523390993,46.48775841276219 L7.905293500992152,53.33222696358628 L0.19665619749621932,48.27486491177004 L9.6924,67.21769599999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:279.5px;top:202.5px" width="319" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 298 89 C 308 39 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M247.278448,59.439374 L229.0752229400478,48.593056771708746 L233.5594232669061,56.64861059677899 L226.28445953682677,62.31208150480265 L247.278448,59.439374" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M247.278448,59.439374 L229.0752229400478,48.593056771708746 L233.5594232669061,56.64861059677899 L226.28445953682677,62.31208150480265 L247.278448,59.439374" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:430.5px;top:202.5px" width="168" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 147 89 C 157 39 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M127.68269325,61.44042775 L112.0758574281729,47.107714272415436 L114.82184703415395,55.90882449123692 L106.54425416940981,59.96856048826149 L127.68269325,61.44042775" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M127.68269325,61.44042775 L112.0758574281729,47.107714272415436 L114.82184703415395,55.90882449123692 L106.54425416940981,59.96856048826149 L127.68269325,61.44042775" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:575.5px;top:202.5px" width="23" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 2 89 C 12 39 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.662848,67.21769599999999 L10.508355496525958,46.85031909210979 L3.8627125034610885,53.24057958826547 L-3.468760915208562,47.65045458864871 L4.662848,67.21769599999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.662848,67.21769599999999 L10.508355496525958,46.85031909210979 L3.8627125034610885,53.24057958826547 L-3.468760915208562,47.65045458864871 L4.662848,67.21769599999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:577.5px;top:202.5px" width="158" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 89 C -10 39 147 50 137 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M17.810679249999996,61.44042775 L38.905074500087466,59.43381641915208 L30.52734463886725,55.58496693230292 L33.04961368239039,46.717151030284825 L17.810679249999996,61.44042775" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M17.810679249999996,61.44042775 L38.905074500087466,59.43381641915208 L30.52734463886725,55.58496693230292 L33.04961368239039,46.717151030284825 L17.810679249999996,61.44042775" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 573px; top: 451px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 573px; top: 411px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 623px; top: 411px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 623px; top: 451px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 580.5px; top: 580px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 580.5px; top: 540px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 578px; top: 322px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected connected" style="position: absolute; height: 20px; width: 20px; left: 578px; top: 282px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 280px; top: 193px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 431px; top: 193px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 576px; top: 193px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 715px; top: 193px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable endpointDrag _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 868.5px; top: 193px; visibility: visible;" dragid="jsPlumb_1_440" elid="jsPlumb_1_418"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><svg style="position:absolute;left:577.5px;top:202.5px" width="311.5" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 89 C -10 39 300.5 50 290.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M49.376547,59.439374 L70.38448489619982,62.20822671356416 L63.08160307319652,56.58080127387613 L67.52591217007596,48.50317064036764 L49.376547,59.439374" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>