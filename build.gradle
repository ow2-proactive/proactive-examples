import com.github.jk1.license.render.*
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.github.jk1:gradle-license-report:1.7'
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.1"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
    }

}

repositories {
    jcenter()
    maven {
        url "http://repository.activeeon.com/content/groups/proactive/"
    }
}


group 'org.ow2.proactive'
version projectVersion

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.github.jk1.dependency-license-report'
apply plugin: "io.spring.dependency-management"
apply plugin: "com.github.johnrengelman.shadow"


licenseReport {
    configurations = ['runtime']
    renderers = [new InventoryHtmlReportRenderer()]
}

ext.findSourceFiles = { folder ->
    def tree = fileTree(folder)
    tree.include '*/resources/**'
    tree.include '*/METADATA.json'
    tree.include 'ordered_bucket_list'
    tree.exclude 'classes'
    tree.exclude 'build'
    tree.exclude 'libs'
    tree.exclude 'tmp'
    tree.exclude 'reports'
    tree.exclude 'test-results'
    tree.exclude 'gradle'
    tree.exclude '.gradle'
    tree.exclude '.git'
    tree.exclude '.idea'
    tree.exclude 'src'
    tree.exclude 'proactive-examples.zip'
    return tree
}

task copyAll (type: Copy) {
    destinationDir = file('build/')
    from findSourceFiles('.')
}

class AddCopyrightsTask extends DefaultTask {

    FileTree fileTree;

    def errorIfCopyrightPresent(fileName, lines) {
        lines.forEach({ line -> if (line.contains("Copyright Activeeon")) {
            throw new RuntimeException("Error in " + fileName +  ", line " + line + " contains copyright information, please remove it");
        }})
    }

    @TaskAction
    def exec() {
        fileTree.forEach({ file ->
            def lines = file.readLines()
            def fileName = file.getName()
            def fileHandled = false;
            if (fileName.endsWith(".xml")) {
                errorIfCopyrightPresent(fileName, lines)
                lines = lines.plus(1, "<!-- Copyright Activeeon 2007-2021. All rights reserved. -->")
                fileHandled = true
            } else if (fileName.endsWith(".groovy")) {
                errorIfCopyrightPresent(fileName, lines)
                lines = lines.plus(0, "// Copyright Activeeon 2007-2021. All rights reserved.")
                fileHandled = true
            } else if (fileName.endsWith(".py")) {
                errorIfCopyrightPresent(fileName, lines)
                lines = lines.plus(0, "# Copyright Activeeon 2007-2021. All rights reserved.")
                fileHandled = true
            } else if (fileName.endsWith(".sh") || fileName.endsWith(".bash")) {
                errorIfCopyrightPresent(fileName, lines)
                if (lines.get(0) != null && lines.get(0).startsWith("#!")) {
                    lines = lines.plus(1, "# Copyright Activeeon 2007-2021. All rights reserved.")
                } else {
                    lines = lines.plus(0, "# Copyright Activeeon 2007-2021. All rights reserved.")
                }
                fileHandled = true
            }
            if (fileHandled) {
                def modifiedFileText = lines.join(System.lineSeparator())
                Writer out = new BufferedWriter(new OutputStreamWriter(
                        new FileOutputStream(file), "UTF8"));
                out.append(modifiedFileText.toString())
                out.flush()
            }
        })
    }
}

ConfigurableFileTree objectsTree = findSourceFiles('build')

task addCopyrights (type: AddCopyrightsTask) {
    fileTree = objectsTree
}

task zip (type: Zip){
    archiveName="proactive-examples.zip"
    destinationDir = file('build/')
    from findSourceFiles('build')
}

configurations {
    awsJar
    azureJar
    restJar
}

dependencies {
    awsJar 'com.amazonaws:aws-java-sdk-s3:1.11.228'
    azureJar 'com.microsoft.azure:azure-storage-blob:10.0.3-Preview'
    restJar ('io.rest-assured:rest-assured:3.3.0') {
        exclude group: 'org.codehaus.groovy'
    }
    restJar ('io.rest-assured:json-path:3.3.0') {
        exclude group: 'org.codehaus.groovy'
    }
    restJar ('io.rest-assured:xml-path:3.3.0') {
        exclude group: 'org.codehaus.groovy'
        exclude group: 'com.sun.xml.bind'
        exclude group: 'javax.xml.bind'
    }
}

test {
    dependencies {
        compile "org.ow2.proactive:scheduler-api:$version"
        compile 'junit:junit:4.12'
        compile 'com.googlecode.json-simple:json-simple:1.1'
        testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
    }
}


dependencyManagement {
    imports {
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.228'
    }
}


task shadowJarAzure(type: ShadowJar) {
    archiveName = 'azure-storage-blob-fat-10.0.3-Preview.jar'
    configurations = [project.configurations.azureJar]
    exclude 'META-INF/**'
    destinationDir = file("./DataConnectors/resources/dataspace/")
}

task shadowJarAws(type: ShadowJar) {
    configurations = [project.configurations.awsJar]
    archiveName = 'aws-java-sdk-fat-1.11.228.jar'
    exclude 'META-INF/**'
    destinationDir = file("./DataConnectors/resources/dataspace/")
}

task shadowJarRest(type: ShadowJar) {
    configurations = [project.configurations.restJar]
    archiveName = 'rest-assured-fat-3.3.0.jar'
    exclude 'META-INF/**'
    destinationDir = file("./Rest/resources/dataspace/")
}

addCopyrights.dependsOn(copyAll)
test.dependsOn addCopyrights
test.dependsOn shadowJarAws
test.dependsOn shadowJarAzure
test.dependsOn shadowJarRest
zip.dependsOn test
build.dependsOn zip

defaultTasks 'clean', 'test', 'zip'
