<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.13" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Fetch_Images_From_Satellite_Platforms" onTaskError="continueJobExecution" priority="normal" projectName="Satellite Imagery" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd">
  <variables>
    <variable model="PA:LIST(Peps, Copernicus, All)" name="SEARCH_ENGINE" value="Copernicus"/>
    <variable model="PA:LIST(PA:URL,PA:URI,PA:USER_FILE,PA:GLOBAL_FILE)" name="IMPORT_FROM" value="PA:GLOBAL_FILE"/>
    <variable model="PA:GLOBAL_FILE" name="FILE_PATH" value="geojson_example.json"/>
    <variable name="TIME_TO_RETRIEVE_IN_SECONDS" value="900"/>
    <variable name="TIME_TO_CHECK_ONLINE_IN_SECONDS" value="1800"/>
    <variable name="WALLTIME" value="24:00:00"/>
    <variable name="OUTPUT_PATH" value="/tmp/"/>
    <variable name="REQUIRED_LICENSES" value="software_A"/>
  </variables>
  <description>
    <![CDATA[ The satellite-imagery bucket contains some tasks that enable you to search, download and retrieve the metadata of Sentinel satellite images from the PEPS website (https://peps.cnes.fr/rocket/#/home) and Copernicus Open Access Hub (https://scihub.copernicus.eu/). ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="satellite-imagery"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/sentinel_image.jpg"/>
<info name="PYTHON_COMMAND" value="python3"/>
<info name="Documentation" value="PML/PMLUserGuide.html#_satellite_imagery_bucket"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="false" name="Condition">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <depends>
        <task ref="Import_GeoData"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
print('Checking platform...')
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <if continuation="Continuation" else="Else" target="Fetch_Satellite_Images_From_PEPS">
          <script>
            <code language="cpython">
              <![CDATA[
SEARCH_ENGINE  = variables.get("SEARCH_ENGINE") 		 # Option host sites

if SEARCH_ENGINE.lower() == "peps" or SEARCH_ENGINE.lower() == "all":
    branch = "if"
else:
    branch = "else"
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            269.5
        </positionTop>
        <positionLeft>
            429.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Fetch_Satellite_Images_From_PEPS">
      <description>
        <![CDATA[ Load and return a PEPS dataset including a
'metadata folder' with metadata files and 'images folder' containing satellite images.

Please access https://peps.cnes.fr/rocket/#/register to create a new user account from Peps website.

Please add third party credentials (USER_NAME_PEPS and USER_PASS_PEPS) in the Scheduling & Orchestration interface → Manage Third-Party Credentials to connect to PEPS. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/peps-logo.png"/>
        <info name="task.documentation" value="PML/PMLUserGuide.html#_satellite_imagery_bucket"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")

print('Starting download....')
print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="start"/>
      <metadata>
        <positionTop>
            398.5
        </positionTop>
        <positionLeft>
            241.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Else">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            398.5
        </positionTop>
        <positionLeft>
            429.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Continuation">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            398.5
        </positionTop>
        <positionLeft>
            567.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Condition2">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <depends>
        <task ref="Import_GeoData"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
print('Searching satellite images...')
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <if continuation="Continuation2" else="Else2" target="Fetch_Satellite_Images_From_Copernicus">
          <script>
            <code language="cpython">
              <![CDATA[
SEARCH_ENGINE  = variables.get("SEARCH_ENGINE") 		 # Option host sites

if SEARCH_ENGINE.lower() == "copernicus" or SEARCH_ENGINE.lower() == "all":
    branch = "if"
else:
    branch = "else"
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            270.5
        </positionTop>
        <positionLeft>
            969.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Fetch_Satellite_Images_From_Copernicus">
      <description>
        <![CDATA[ Load and return a Copernicus dataset including a 'metadata folder' with metadata files and 'images folder' containing satellite images according to the resolution & image band selected by user.

Please access https://peps.cnes.fr/rocket/#/register to create a new user account from Copernicus website.

Please add third party credentials (USER_NAME_COP and USER_PASS_COP) in the Scheduling & Orchestration interface → Manage Third-Party Credentials to connect to Copernicus. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/copernicus.png"/>
        <info name="task.documentation" value="PML/PMLUserGuide.html#_satellite_imagery_bucket"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")

print('Starting download....')
print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="start"/>
      <metadata>
        <positionTop>
            398.5
        </positionTop>
        <positionLeft>
            768.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Else2">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            398.5
        </positionTop>
        <positionLeft>
            968.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Continuation2">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            398.5
        </positionTop>
        <positionLeft>
            1106.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Import_GeoData">
      <description>
        <![CDATA[ Import geo dataset. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/geodata.jpg"/>
        <info name="task.documentation" value="PML/PMLUserGuide.html#_satellite_imagery_bucket"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")

import json
import uuid
from os.path import join, os

from sentinelsat.sentinel import read_geojson

if 'variables' in locals():
    IMPORT_FROM = variables.get("IMPORT_FROM")
    FILE_PATH = variables.get("FILE_PATH")  # Geojson file search_footprints.geojson with footprints of the query result
    OUTPUT_PATH = variables.get("OUTPUT_PATH")  # Folder output path

# Get an unique ID
ID = str(uuid.uuid4())

# Get current job ID
PA_JOB_ID = variables.get("PA_JOB_ID")

# Get an unique ID
#ID = str(uuid.uuid4())
ID_JOB = 'Job_' + str(PA_JOB_ID)

# Define the current 'dataset_path'
os.chdir(OUTPUT_PATH)
dataset_path = join(OUTPUT_PATH, ID, ID_JOB)

# Create the folders tmp
os.makedirs(dataset_path, exist_ok = True)
os.chmod(dataset_path, mode=0o770)

# Define path to download the dataset
os.chdir(dataset_path)

print('The path input dataset:', dataset_path)

# -------------------------------------------------------------
# Load file
#
if IMPORT_FROM.upper() == "PA:USER_FILE":
    print("Importing file from the user space")
    userspaceapi.connect()
    out_file = gateway.jvm.java.io.File(os.path.join(dataset_path, FILE_PATH))
    userspaceapi.pullFile(FILE_PATH, out_file)

if IMPORT_FROM.upper() == "PA:GLOBAL_FILE":
    print("Importing file from the global space")
    globalspaceapi.connect()
    out_file = gateway.jvm.java.io.File(os.path.join(dataset_path, FILE_PATH))
    globalspaceapi.pullFile(FILE_PATH, out_file)

gjson = read_geojson(os.path.join(dataset_path, FILE_PATH))
n_acq = len(gjson.features)
print('{s:{c}^{n}}'.format(s=' GEOJSON DATA ', n=75, c='#'))
print('{s:{c}^{n}}'.format(s='#', n=75, c='#'))
print(gjson)

gjson_data = json.dumps(gjson).encode('utf-8')

if 'variables' in locals():
    variables.put("DATASET_PATH", dataset_path)
    variables.put("GJSON_DATA", gjson_data)
    variables.put("N_acq", n_acq)

print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            142.5
        </positionTop>
        <positionLeft>
            699.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Split">
      <description>
        <![CDATA[ This task defines some input, here strings to be processed. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
        <info name="Documentation" value="user/ProActiveUserGuide.html#_replicate"/>
      </genericInformation>
      <depends>
        <task ref="Fetch_Satellite_Images_From_PEPS"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")

import os
import sys
import json
import time
import shutil
import subprocess
import random as r
from zipfile import ZipFile
from os.path import join, os
from collections import OrderedDict
from ast import literal_eval as make_tuple

from distutils.dir_util import copy_tree
from geojson import FeatureCollection

try:
    from sentinelsat.sentinel import SentinelAPI, read_geojson, geojson_to_wkt
except ImportError:
    subprocess.call([sys.executable, "-m", "pip", "install", 'sentinelsat'])
finally:
    from sentinelsat.sentinel import SentinelAPI, read_geojson, geojson_to_wkt


if 'variables' in locals():
    DATASET_PATH = variables.get("DATASET_PATH")  # folder dataset path
    GJSON_DATA = variables.get("GJSON_DATA")  # gson data
    N_acq = variables.get("N_acq")  # number of features

gjson_dec = json.loads(GJSON_DATA.decode('utf-8'))
gjson = FeatureCollection(gjson_dec)
gjson['features'] = list(gjson['features'])


# Loop for each trial
result = {}
for i in range(N_acq):
    result[i] =  json.dumps(gjson[i])
    print(result[i])

print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
runs=result.size()
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
      <metadata>
        <positionTop>
            526.5
        </positionTop>
        <positionLeft>
            241.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" maxNumberOfExecution="10" name="Process" taskRetryDelay="1:00">
      <description>
        <![CDATA[ This task will be replicated according to the 'runs' value specified in the replication script. The replication index is used in each task's instance to select the input. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="Split"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")

import sys
import time
import json
import shutil
import psutil
import random
from datetime import date
from zipfile import ZipFile
from os.path import join, os
from geojson import FeatureCollection

try:
    from sentinelsat.sentinel import SentinelAPI, read_geojson, geojson_to_wkt
except ImportError:
    subprocess.call([sys.executable, "-m", "pip", "install", 'sentinelsat'])
finally:
    from sentinelsat.sentinel import SentinelAPI, read_geojson, geojson_to_wkt

USER_NAME = credentials.get("USER_NAME_PEPS")  # user email
USER_PASS = credentials.get("USER_PASS_PEPS")  # user password
DATASET_PATH = variables.get("DATASET_PATH")   # folder dataset path
GJSON_DATA = variables.get("GJSON_DATA")       # gson data

NO_DOWNLOAD = False  # Do not download products, just print curl command
LOCATION = None      # Location in string
TILE = None          # Tile number in string
LATMIN = None        # Min latitude in decimal degrees
LATMAX = None        # Max latitude in decimal degreess
LONMIN = None        # Min longitude in decimal degrees
LONMAX = None        # Max longitude in decimal degrees
ORBIT = None         # Orbit Path number # type int
SEARCH_JSON_FILE = None
WINDOWS = False

gjson_dec = json.loads(GJSON_DATA.decode('utf-8'))
gjson = FeatureCollection(gjson_dec)
gjson['features'] = list(gjson['features'])

# Get current job ID
PA_JOB_ID = variables.get("PA_JOB_ID")

# Print task replication number
i = int(variables.get('PA_TASK_REPLICATION'))

# Get data from the split task
features_dec = json.loads(str(results[0].value()[i]))
print("Task id: ", i, " ", features_dec)
features = FeatureCollection(features_dec)

# Define the current 'dataset_path'
os.chdir(DATASET_PATH)

TASK_NUMBER = 'Process_' + str(i)
output_path = join(DATASET_PATH, TASK_NUMBER, 'peps')


# Create the folders
os.makedirs(output_path, exist_ok=True)

# check disc space
print('{s:{c}^{n}}'.format(s=' CHECK DISC SPACE ', n=75, c='#'))
total, used, free, percent = psutil.disk_usage(DATASET_PATH)

## convert from Kilobytes to Gigabytes (GB)
#total_ = total/(1024*1024)
#used_ = used/(1024*1024)
#free_ = free/(1024*1024)

print('Total: {}KB'.format(round(total)))
print('Used: {}KB'.format((round(used))))
print('Free: {}KB'.format((round(free))))
print('Total used (%): {}%'.format(round(percent)))

print('The path output Peps dataset:', output_path)

# -------------------------------------------------------------


# store filename into dict
def get_filename(list_prod_filename):
    dicfile = {}
    cont = 1
    for i in list_prod_filename:
        ditc = {"Folder_" + str(cont): output_path + '/'  + i}
        dicfile.update(ditc)
        cont += 1
    return dicfile

# save info into json file
filename = join(output_path, 'output.json')

# add info json
def add_info_json(features, filename):
    json_object = json.dumps(features, sort_keys=True, indent=4)
    # writing to filename.json
    with open(filename, "w") as outfile:
        outfile.write(json_object)

# get info json
def get_info_json(features, product_name, filename):
    dicfile = get_filename(product_name)
    features.update({'output_path': dicfile})
    add_info_json(features, filename)


###########################################################################
def check_rename(tmpfile, prodsize):
    print(os.path.getsize(tmpfile), prodsize)
    if os.path.getsize(tmpfile) != prodsize:
        with open(tmpfile) as f_tmp:
            try:
                tmp_data = json.load(f_tmp)
                print("Result is a json file (might come from a wrong password file)")
                print(tmp_data)
                # sys.exit(-1)
            except ValueError:
                print("\ndownload was not complete, tmp file removed")
                os.remove(tmpfile)
                pass
    else:
        os.rename("%s" % tmpfile, "%s/%s.zip" % (output_path, prod))
        print("product saved as : %s/%s.zip" % (output_path, prod))


###########################################################################
total_prod_size = 0

def parse_catalog(SEARCH_JSON_FILE):
    # Filter catalog result
    with open(SEARCH_JSON_FILE) as data_file:
        data = json.load(data_file)

    if 'ErrorCode' in data:
        print(data['ErrorMessage'])
        # sys.exit(-2)

    # Sort data
    download_dict = {}
    storage_dict = {}
    size_dict = {}
    if len(data["features"]) > 0:
        for i in range(len(data["features"])):
            prod = data["features"][i]["properties"]["productIdentifier"]
            print(prod, data["features"][i]["properties"]["storage"]["mode"])
            feature_id = data["features"][i]["id"]
            try:
                storage = data["features"][i]["properties"]["storage"]["mode"]
                platform = data["features"][i]["properties"]["platform"]
                resourceSize = int(data["features"][i]["properties"]["resourceSize"])
                # recup du numero d'orbite
                orbitN = data["features"][i]["properties"]["orbitNumber"]
                if platform == 'S1A':
                    # calcul de l'orbite relative pour Sentinel 1A
                    relativeOrbit = ((orbitN - 73) % 175) + 1
                elif platform == 'S1B':
                    # calcul de l'orbite relative pour Sentinel 1B
                    relativeOrbit = ((orbitN - 27) % 175) + 1

                if ORBIT is not None:
                    if platform.startswith('S2'):
                        if prod.find("_R%03d" % ORBIT) > 0:
                            download_dict[prod] = feature_id
                            storage_dict[prod] = storage
                            size_dict[prod] = resourceSize
                    elif platform.startswith('S1'):
                        if relativeOrbit == ORBIT:
                            download_dict[prod] = feature_id
                            storage_dict[prod] = storage
                            size_dict[prod] = resourceSize
                else:
                    download_dict[prod] = feature_id
                    storage_dict[prod] = storage
                    size_dict[prod] = resourceSize
            except:
                pass
    else:
        print(">>> no product corresponds to selection criteria")
        # sys.exit(-1)

    return (prod, download_dict, storage_dict, size_dict)


prod_filename = []
try:
    product_type = features['properties']["producttype"]
    platform_name = features['properties']['platformname']
    if platform_name == 'Sentinel-1':
        platform_name = 'S1'
    if platform_name == 'Sentinel-2':
        platform_name = 'S2'
    if platform_name == 'Sentinel-3':
        platform_name = 'S3'
    if platform_name == 'Sentinel-2 Single Tile':
        platform_name = 'S2ST'
    start_date = features['properties']["beginposition"]
    end_date = features['properties']["endposition"]

    try:
        sensor_operational_mode = features['properties']['sensoroperationalmode']
    except:
        sensor_operational_mode = ''

    footprint = geojson_to_wkt(features['geometry'], decimals=6)

    if footprint.find('POLYGON') != -1:
        coord = features['geometry']['coordinates'][0][0]
        longitude = coord[0]
        latitude = coord[1]
    elif footprint.find('POINT') != -1:
        coord = features['geometry']['coordinates']
        longitude = coord[0]
        latitude = coord[1]
    else:
        print('Please check the .json file!')

    print('{s:{c}^{n}}'.format(s=' GEOJSON SETTINGS ', n=75, c='#'))
    print('{s:{c}^{n}}'.format(s='#', n=75, c='#'))
    print("Footprint:", footprint)
    print('longitude', longitude)
    print('latitude', latitude)
    print("Platform Name:", platform_name)
    print("Product Type:", product_type)
    print("Start date:", start_date)
    print("End date:", end_date)

    if SEARCH_JSON_FILE is None or SEARCH_JSON_FILE == "":
        SEARCH_JSON_FILE = 'search.json'

    if TILE is None:
        if LOCATION is None:
            if latitude is None or longitude is None:
                if (LATMIN is None) or (LONMIN is None) or (LATMAX is None) or (LONMAX is None):
                    print("provide at least a point or rectangle or tile number")
                    # sys.exit(-1)
                else:
                    geom = 'rectangle'
            else:
                if (LATMIN is None) and (LONMIN is None) and (LATMAX is None) and (LONMAX is None):
                    geom = 'point'
                else:
                    print("please choose between point and rectangle, but not both")
                    # sys.exit(-1)
        else:
            if (LATMIN is None) and (LONMIN is None) and (LATMAX is None) and (LONMAX is None) and (
                    latitude is None) or (longitude is None):
                geom = 'LOCATION'
            else:
                print("please choose location and coordinates, but not both")
                # sys.exit(-1)

    # geometric parameters of catalog request
    if TILE is not None:
        if TILE.startswith('T') and len(TILE) == 6:
            tileid = TILE[1:6]
        elif len(TILE) == 5:
            tileid = TILE[0:5]
        else:
            print("tile name is ill-formated : 31TCJ or T31TCJ are allowed")
            # sys.exit(-4)
        query_geom = "tileid=%s" % (tileid)
    elif geom == 'point':
        query_geom = 'latitude=%f\&longitude=%f' % (latitude, longitude)
    elif geom == 'rectangle':
        query_geom = 'box={LONMIN},{LATMIN},{LONMAX},{LATMAX}'.format(
            LATMIN=LATMIN, LATMAX=LATMAX, LONMIN=LONMIN, LONMAX=LONMAX)
    elif geom == 'LOCATION':
        query_geom = "q=%s" % LOCATION

    # date parameters of catalog request
    if start_date is not None:
        start_date = start_date
        if end_date is not None:
            end_date = end_date
        else:
            end_date = date.today().isoformat()

    # special case for Sentinel-2

    if platform_name == 'S2':
        if start_date >= '2016-12-05':
            print("**** products after '2016-12-05' are stored in Tiled products collection")
            print("**** please use option -c S2ST")
        elif end_date >= '2016-12-05':
            print("**** products after '2016-12-05' are stored in Tiled products collection")
            print("**** please use option -c S2ST to get the products after that date")
            print("**** products before that date will be downloaded")

    if platform_name == 'S2ST':
        if end_date < '2016-12-05':
            print("**** products before '2016-12-05' are stored in non-tiled products collection")
            print("**** please use option -c S2")
        elif start_date < '2016-12-05':
            print("**** products before '2016-12-05' are stored in non-tiled products collection")
            print("**** please use option -c S2 to get the products before that date")
            print("**** products after that date will be downloaded")

    # ====================
    # search in catalog
    # ====================
    if (product_type == "") and (sensor_operational_mode == ""):
        search_catalog = 'curl -k -o %s https://peps.cnes.fr/resto/api/collections/%s/search.json?%s\&startDate=%s\&completionDate=%s\&maxRecords=500' % (
            SEARCH_JSON_FILE, platform_name, query_geom, start_date, end_date)
    else:
        search_catalog = 'curl -k -o %s https://peps.cnes.fr/resto/api/collections/%s/search.json?%s\&startDate=%s\&completionDate=%s\&maxRecords=500\&productType=%s\&sensorMode=%s' % (
            SEARCH_JSON_FILE, platform_name, query_geom, start_date, end_date, product_type,
            sensor_operational_mode)

    if WINDOWS:
        search_catalog = search_catalog.replace('\&', '^&')

    print(search_catalog)
    os.system(search_catalog)
    time.sleep(5)

    prod, download_dict, storage_dict, size_dict = parse_catalog(SEARCH_JSON_FILE)


    # ====================
    # Download
    # ====================

    if len(download_dict) == 0:
        print("No product matches the criteria")
    else:
        # first try for the products on tape
        if output_path == None:
            output_path = os.getcwd()

        for prod in list(download_dict.keys()):
            file_exists = os.path.exists(("%s/%s.SAFE") % (output_path, prod)
                                         ) or os.path.exists(("%s/%s.zip") % (output_path, prod))
            if (not (NO_DOWNLOAD) and not (file_exists)):
                if storage_dict[prod] == "tape":
                    tmticks = time.time()
                    tmpfile = ("%s/tmp_%s.tmp") % (output_path, tmticks)
                    print("\nStage tape product: %s" % prod)
                    get_product = 'curl -o %s -k -u "%s:%s" https://peps.cnes.fr/resto/collections/%s/%s/download/?issuerId=peps &>/dev/null' % (
                        tmpfile, USER_NAME, USER_PASS, platform_name, download_dict[prod])
                    os.system(get_product)
                    if os.path.exists(tmpfile):
                        os.remove(tmpfile)

        NbProdsToDownload = len(list(download_dict.keys()))
        print("##########################")
        print("%d  products to download" % NbProdsToDownload)
        print("##########################")
        while (NbProdsToDownload > 0):
            # redo catalog search to update disk/tape status
            if (product_type == "") and (sensor_operational_mode == ""):
                search_catalog = 'curl -k -o %s https://peps.cnes.fr/resto/api/collections/%s/search.json?%s\&startDate=%s\&completionDate=%s\&maxRecords=500' % (
                    SEARCH_JSON_FILE, platform_name, query_geom, start_date, end_date)
            else:
                search_catalog = 'curl -k -o %s https://peps.cnes.fr/resto/api/collections/%s/search.json?%s\&startDate=%s\&completionDate=%s\&maxRecords=500\&productType=%s\&sensorMode=%s' % (
                    SEARCH_JSON_FILE, platform_name, query_geom, start_date, end_date, product_type,
                    sensor_operational_mode)

            if WINDOWS:
                search_catalog = search_catalog.replace('\&', '^&')

            os.system(search_catalog)
            time.sleep(2)

            prod, download_dict, storage_dict, size_dict = parse_catalog(SEARCH_JSON_FILE)

            NbProdsToDownload = 0

            # calculate all file size
            totalsize = 0
            for filesize in list(download_dict.keys()):
                size = size_dict[filesize]
                totalsize+=size
            print('Total products size:', totalsize)

            # convert bytes to kilobytes
            kilobytes = totalsize/1024

            # check if there is enough disk space
            if free < kilobytes:
                print('Disk space available: {}KB'.format(free))
                print('Total products size: {}KB'.format(kilobytes))
                raise SystemExit('No space left on device: %s' % DATASET_PATH)

            # download all products on disk
            for prod in list(download_dict.keys()):
                file_exists = os.path.exists(("%s/%s.SAFE") % (output_path, prod)) or os.path.exists(
                    ("%s/%s.zip") % (output_path, prod))
                if (not (NO_DOWNLOAD) and not (file_exists)):
                    if storage_dict[prod] == "disk":
                        tmticks = time.time()
                        tmpfile = ("%s/tmp_%s.tmp") % (output_path, tmticks)
                        print("\nDownload of product : %s" % prod)
                        # save filemane products in a list
                        prod_filename.append(prod)
                        get_product = 'curl -o %s -k -u "%s:%s" https://peps.cnes.fr/resto/collections/%s/%s/download/?issuerId=peps' % (
                            tmpfile, USER_NAME, USER_PASS, platform_name, download_dict[prod])
                        print(get_product)
                        os.system(get_product)
                        # check binary product, rename tmp file
                        if not os.path.exists(("%s/tmp_%s.tmp") % (output_path, tmticks)):
                            NbProdsToDownload += 1
                        else:
                            check_rename(tmpfile, size_dict[prod])
                            total_prod_size += size_dict[prod]

                elif file_exists:
                    print("%s already exists" % prod)

            # download all products on tape
            for prod in list(download_dict.keys()):
                file_exists = os.path.exists(("%s/%s.SAFE") % (output_path, prod)
                                             ) or os.path.exists(("%s/%s.zip") % (output_path, prod))
                if (not (NO_DOWNLOAD) and not (file_exists)):
                    if storage_dict[prod] == "tape" or storage_dict[prod] == "staging":
                        NbProdsToDownload += 1

            if NbProdsToDownload > 0:
                print("##############################################################################")
                print(
                        "%d remaining products are on tape, lets's wait 1 minute before trying again" % NbProdsToDownload)
                print("##############################################################################")
                time.sleep(60)

    # save output json file
    get_info_json(features, prod_filename, filename)
except Exception as ex:
    print(ex)
    print('Please check the json file!')


# List all .zip folders
folder_zip = [i for i in [os.path.relpath(os.path.join(output_path, p)) for p in os.listdir(output_path)] if
              i.endswith('.zip')]

# Unzip folders
print('**********************************************************************************************************')
print('Extracting all the files...')
print('**********************************************************************************************************')
for file_name in folder_zip:
    try:
        shutil.unpack_archive(file_name, output_path)
        print('Unzip file name: {} '.format(file_name))
        # remove each zip file
        os.remove(file_name)
    except:
        print('Error while unzip file name: {}. Try to unzip it manually...'.format(file_name))

# List all .safe folders
folder_safe = [i for i in [os.path.relpath(os.path.join(output_path, p)) for p in os.listdir(output_path)] if
               i.endswith('.SAFE')]

# Number of product(s)
print('Total number of products available: {} '.format(len(prod_filename)))

print('All zip file names: {} '.format(folder_zip))
print('All safe file names: {} '.format(folder_safe))

variables.put("OUTPUT_PATH", output_path)

print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            654.5
        </positionTop>
        <positionLeft>
            241.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Merge">
      <description>
        <![CDATA[ As a merge operation, we simply print the results from previous tasks. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="Process"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")

print('Download finished!')
print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="end"/>
      <metadata>
        <positionTop>
            780.5
        </positionTop>
        <positionLeft>
            241.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Split2">
      <description>
        <![CDATA[ This task defines some input, here strings to be processed. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
        <info name="Documentation" value="user/ProActiveUserGuide.html#_replicate"/>
      </genericInformation>
      <depends>
        <task ref="Fetch_Satellite_Images_From_Copernicus"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")

import os
import sys
import json
import time
import shutil
import subprocess
import random as r
from zipfile import ZipFile
from os.path import join, os
from collections import OrderedDict
from ast import literal_eval as make_tuple

from distutils.dir_util import copy_tree
from geojson import FeatureCollection

try:
    from sentinelsat.sentinel import SentinelAPI, read_geojson, geojson_to_wkt
except ImportError:
    subprocess.call([sys.executable, "-m", "pip", "install", 'sentinelsat'])
finally:
    from sentinelsat.sentinel import SentinelAPI, read_geojson, geojson_to_wkt


if 'variables' in locals():
    DATASET_PATH = variables.get("DATASET_PATH")  # folder dataset path
    GJSON_DATA = variables.get("GJSON_DATA")  # gson data
    N_acq = variables.get("N_acq")  # number of features

gjson_dec = json.loads(GJSON_DATA.decode('utf-8'))
gjson = FeatureCollection(gjson_dec)
gjson['features'] = list(gjson['features'])


# Loop for each trial
result = {}
for i in range(N_acq):
    result[i] =  json.dumps(gjson[i])
    print(result[i])

print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
runs=result.size()
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
      <metadata>
        <positionTop>
            526.5
        </positionTop>
        <positionLeft>
            768.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" maxNumberOfExecution="2" name="Process2" taskRetryDelay="1:00">
      <description>
        <![CDATA[ This task will be replicated according to the 'runs' value specified in the replication script. The replication index is used in each task's instance to select the input. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
        <info name="REQUIRED_LICENSES" value="$REQUIRED_LICENSES"/>
        <info name="WALLTIME" value="$WALLTIME"/>
      </genericInformation>
      <depends>
        <task ref="Split2"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")

import os
import sys
import json
import time
import copy
import shutil
import psutil
import pickle
import subprocess
import random as r
from pathlib import Path
from zipfile import ZipFile
from os.path import join, os
from collections import OrderedDict
from geojson import FeatureCollection

from distutils.dir_util import copy_tree
from ast import literal_eval as make_tuple

try:
    from sentinelsat.sentinel import SentinelAPI, read_geojson, geojson_to_wkt
except ImportError:
    subprocess.call([sys.executable, "-m", "pip", "install", 'sentinelsat'])
finally:
    from sentinelsat.sentinel import SentinelAPI, read_geojson, geojson_to_wkt

USER_NAME = credentials.get("USER_NAME_COP")  # user email
USER_PASS = credentials.get("USER_PASS_COP")  # user password
DATASET_PATH = variables.get("DATASET_PATH")  # folder dataset path
TIME_TO_RETRIEVE_IN_SECONDS = int(variables.get("TIME_TO_RETRIEVE_IN_SECONDS"))   # try product download in seconds
TIME_TO_CHECK_IN_SECONDS = int(variables.get("TIME_TO_CHECK_ONLINE_IN_SECONDS"))  # check online product download in seconds

# Get current job ID
PA_JOB_ID = variables.get("PA_JOB_ID")

# Print task replication number
i = int(variables.get('PA_TASK_REPLICATION'))

# Get data from the split task
features_dec = json.loads(str(results[0].value()[i]))
print("Task id: ", i, " ", features_dec)
features = FeatureCollection(features_dec)

# Define the current 'dataset_path'
os.chdir(DATASET_PATH)

TASK_NUMBER = 'Process_' + str(i)
output_path = join(DATASET_PATH, TASK_NUMBER, 'copernicus')

# Create the folders
os.makedirs(output_path, exist_ok=True)
# Change the permission
os.chmod(output_path, mode=0o770)

print('The path output Copernicus dataset:', output_path)

# -------------------------------------------------------------

#  SentinelAPI
api = SentinelAPI(USER_NAME, USER_PASS, 'https://scihub.copernicus.eu/dhus')
# get dic with product filenames
def get_filename(product):
    dicfile = {}
    cont = 1
    query_id = list(product.keys())
    for i in query_id:
        ditc = {"Folder_" + str(cont): output_path + '/' + product[i]['filename']}
        dicfile.update(ditc)
        cont += 1
    return dicfile

filename = os.path.join(output_path, 'output.json')

def add_info_json(features, filename):
    json_object = json.dumps(features, sort_keys=True, indent=4)
    # writing to filename.json
    with open(filename, "w") as outfile:
        outfile.write(json_object)

    with open(filename, 'a+') as f:
        print('Creating output.json file!')

# Create .json for each query
add_info_json(features, filename)

def get_info_json(features, product_tmp):
    dicfile = get_filename(product_tmp)
    features['features'].update({'output_path': dicfile})

# list of the online and offline products
def request_analysis(product):
    requests_online = OrderedDict()
    requests_offline = OrderedDict()
    for k in product.keys():  # print all keys
        product_info = api.get_product_odata(k)
        if product_info['Online']:
            #print('Product {} is online.'.format(k))
            requests_online[k] = product[k]
        else:
            #print('Product {} is not online.'.format(k))
            requests_offline[k] = product[k]
    return requests_online, requests_offline

# download the online
def download_daemon(requests_online):
    if len(requests_online) > 0:
        for i in requests_online:
            print('Product {} is online. Starting download.'.format(i))
            api.download(i, directory_path=output_path, checksum=True)
    else:
        print('There are no products online.')

# retrieve the products from LTA
def retrieve_from_lta(requests_offline):
    requests_pending = OrderedDict()
    for k in requests_offline:
        req_pend = api.download(k, directory_path=output_path, checksum=True)  # download or retrieve product from LTA
        requests_pending[k] = req_pend
    if len(requests_pending) > 0:
        print("%d Retreiving offline product, lets's wait {} seconds before trying again".format(TIME_TO_RETRIEVE_IN_SECONDS))
        time.sleep(TIME_TO_RETRIEVE_IN_SECONDS)  # Delay in seconds
    return requests_pending

# check the online products regularly every time
def check_online(requests_pending):
    requests_online_pending, requests_offline_pending = request_analysis(requests_pending)
    if len(requests_online_pending) > 0:
        download_daemon(requests_online_pending)

    if len(requests_offline_pending) > 0:
        print("%d Check status product, lets's wait {} seconds.".format(TIME_TO_CHECK_IN_SECONDS))
        time.sleep(TIME_TO_CHECK_IN_SECONDS)
        check_online(requests_offline_pending)
    else:
        print('All products were downloaded')


queries = []
Nprods = []
queries_json = []
total_prod_size = 0
product = OrderedDict()
product_tmp = OrderedDict()

try:
    footprint = geojson_to_wkt(features['geometry'], decimals=6)
    platform_name = features['properties']["platformname"]
    product_type = features['properties']["producttype"]
    start_date = features['properties']["beginposition"]
    end_date = features['properties']["endposition"]
except:
    footprint = geojson_to_wkt(features['geometry'], decimals=6)
    platform_name = 'Sentinel-2'
    product_type = 'S2MSI1C'
    start_date = None
    end_date = None
    print('The latformname is defined by Sentinel-2!')
    print('The producttype is defined by S2MSI1C!')
    print('The beginposition and endposition are defined by None!')

try:
    cloud_cover_percentage = features['properties']["cloudcoverpercentage"]
    cloud_cover_percentage =  make_tuple(cloud_cover_percentage)
except:
    cloud_cover_percentage =  (None, None)

print('{s:{c}^{n}}'.format(s=' GEOJSON SETTINGS ', n=75, c='#'))
print('{s:{c}^{n}}'.format(s='#', n=75, c='#'))
print("Footprint:", footprint)
print("Platform Name:", platform_name)
print("Product Type:", product_type)
print("Start Date:", start_date)
print("End Date:", end_date)
print("Cloud Cover Percentage:", cloud_cover_percentage)

# query the OpenSearch API with the coordinates of an area, a date interval and any other search keywords accepted by the API.
query_ac = api.query(area=footprint, producttype=product_type, date=(start_date, end_date),
                         platformname=platform_name, cloudcoverpercentage=cloud_cover_percentage)
queries.append(query_ac)
# save the query results in an orderedDict
product.update(query_ac)

# api.count get the number of products matching a query
Nprods.append(api.count(area=footprint, producttype=product_type, date=(start_date, end_date), platformname=platform_name))
# geoJSON FeatureCollection containing footprints and metadata of the scenes
queries_json.append(api.to_geojson(query_ac))

# return the total file size in GB of all products in the OpenSearch response.
total_prod_size += api.get_products_size(query_ac)

print('{s:{c}^{n}}'.format(s=' CHECK DISC SPACE ', n=75, c='#'))
total, used, free, percent = psutil.disk_usage(DATASET_PATH)
print('Total: {}KB'.format(round(total)))
print('Used: {}KB'.format((round(used))))
print('Free: {}KB'.format((round(free))))
print('Total used (%): {}%'.format(round(percent)))
print('{s:{c}^{n}}'.format(s='', n=75, c='#'))

# convert from Gigabytes (GB) to Kilobytes
kilobytes = total_prod_size*1048576

# check if there is enough disk space
if free < kilobytes:
    print('Disk space available: {}KB'.format(free))
    print('Total products size: {}KB'.format(kilobytes))
    raise SystemExit('No space left on device: %s' % DATASET_PATH)

# Number of product(s)
print('Total number of products available: {} '.format(len(product)))

# list of the online and offline products
requests_online, requests_offline = request_analysis(product)

# Number of on versus off product(s)
print('Online numnber of product(s): {} '.format(len(requests_online)))
print('Offline numnber of product(s): {} '.format(len(requests_offline)))

if requests_online:
    try:
        download_daemon(requests_online)
        print('Download finished!')
    except Exception as err:
        print("Unexpected error:", err, sys.exc_info()[0])
        raise
else:
    print("There no online product!")

if requests_offline:
    try:
        # retrieve the products from LTA
        requests_pending = retrieve_from_lta(requests_offline)
        # check the online products regularly every time
        check_online(requests_pending)
        print('Download finished!')
    except Exception as err:
        print("Unexpected error:", err, sys.exc_info()[0])
        raise
else:
    print("There no offline product!")

# List all .zip folders
folder_zip = [i for i in [os.path.relpath(os.path.join(output_path, p)) for p in os.listdir(output_path)] if
              i.endswith('.zip')]

# Unzip folders
print('**********************************************************************************************************')
print('Extracting all the files...')
print('**********************************************************************************************************')

def unzip_files(folder_zip, output_path):
    corrupted_file = []
    for file_name in folder_zip:
        try:
            shutil.unpack_archive(file_name, output_path)
            print('Unzip file name: {} '.format(file_name))
            # remove each successful zip file
            os.remove(file_name)
        except:
            corrupted_file.append(file_name)
            print('Error while unzip file name: {}. Try to unzip it manually...'.format(file_name))
            # remove each corrupted zip file
            os.remove(file_name)
    return corrupted_file


# call unzip_files function
corrupted_file = unzip_files(folder_zip, output_path)


if len(corrupted_file) > 0:
    feature_data =  json.dumps(features).encode('utf-8')

    print('Deleting the folder: {}.'.format(join(DATASET_PATH, TASK_NUMBER)))
    # Remove the "dataset_path" directory
    shutil.rmtree(join(DATASET_PATH, TASK_NUMBER))
    raise SystemExit('Error caused by corrupted or incomplete products: {}'.format(corrupted_file))

else:
	# add info filename and save output json file
    product_tmp.update(query_ac)
    get_info_json(features, product_tmp)
    product_tmp = OrderedDict()

    feature_data =  json.dumps(features).encode('utf-8')
    variables.put("FEATURE_DATA"+str(i), feature_data)

    print('All files were successfully unzipped')
    # List all .safe folders
    folder_safe = [i for i in [os.path.relpath(os.path.join(output_path, p)) for p in os.listdir(output_path)] if
               i.endswith('.SAFE')]

    print('All zip file names: {} '.format( folder_zip))
    print('All safe file names: {} '.format(folder_safe))

    # call again to save the outuput path in the json file

print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="start"/>
      <metadata>
        <positionTop>
            654.5
        </positionTop>
        <positionLeft>
            768.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Merge2">
      <description>
        <![CDATA[ As a merge operation, we simply print the results from previous tasks. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="PostProcess2"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")

import json
import shutil
import pickle
from os.path import join, os
from geojson import FeatureCollection

dataset_path = variables.get("DATASET_PATH")  # folder dataset path
output_path_corrupted_files = join(dataset_path , 'corrupted_files')
output_path_suc_files = join(dataset_path , 'suc_files')

# add info json
def create_json(features, filename):
    json_object = json.dumps(features, sort_keys=True, indent=4)
    # writing to filename.json
    with open(filename, "w") as outfile:
        outfile.write(json_object)

def read_files(output_path_files):
    features = []
    corrupted_files = os.listdir(output_path_files)
    for f in corrupted_files:
        fp = os.path.join(output_path_files, f)
        content = pickle.load(open(fp,'rb'))
        features.append(content)
    return features


if  os.path.isdir(output_path_corrupted_files):
    features = read_files(output_path_corrupted_files)
    feature_collection = FeatureCollection(features)
    filename = os.path.join(dataset_path, 'output_error.json')
    create_json(feature_collection, filename)
    shutil.rmtree(output_path_corrupted_files)


if os.path.isdir(output_path_suc_files):
    features2 = read_files(output_path_suc_files)
    feature_collection2 = FeatureCollection(features2)
    filename = os.path.join(dataset_path, 'output.json')
    create_json(feature_collection2, filename)
    shutil.rmtree(output_path_suc_files)

print('Finished!')

print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="end"/>
      <metadata>
        <positionTop>
            904.5
        </positionTop>
        <positionLeft>
            768.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="PostProcess2">
      <description>
        <![CDATA[ The simplest task, ran by a Python engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/postprocess.png"/>
      </genericInformation>
      <depends>
        <task ref="Process2"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")

import os
import sys
import json
import time
import copy
import shutil
import psutil
import pickle
import subprocess
import random as r
from pathlib import Path
from zipfile import ZipFile
from os.path import join, os
from collections import OrderedDict
from geojson import FeatureCollection


i = int(variables.get('PA_TASK_REPLICATION'))            # task replication number
DATASET_PATH = variables.get("DATASET_PATH")             # folder dataset path
TASK_NUMBER = 'Process_' + str(i)
output_prod_path = join(DATASET_PATH, TASK_NUMBER)

task_exception = results[0].hadException()
print("task_exception: ", task_exception)


if task_exception == True:
    GJSON_DATA = variables.get("GJSON_DATA")      # gson data
    gjson_dec = json.loads(GJSON_DATA.decode('utf-8'))
    gjson = FeatureCollection(gjson_dec)
    gjson['features'] = list(gjson['features'])
    feature = gjson[int(i)]
    corrup_features = copy.deepcopy(feature)

    output_path_corrupted_files = join(DATASET_PATH, 'corrupted_files')
    os.makedirs(output_path_corrupted_files, exist_ok=True)
    os.chmod(output_path_corrupted_files, mode=0o770)

    # generate error file
    name_error =  TASK_NUMBER + '_output_error.ob'
    filename_error = os.path.join(output_path_corrupted_files, name_error)

    with open(filename_error, 'wb') as fp:
        pickle.dump(corrup_features, fp)

    # Check whether the specified path is an existing directory or not
    isdir = os.path.exists(output_prod_path)
    if isdir:
        shutil.rmtree(output_prod_path)

else:
    FEATURE_DATA = variables.get("FEATURE_DATA"+str(i))      # gson data
    feature = json.loads(FEATURE_DATA.decode('utf-8'))
    succ_features = copy.deepcopy(feature)

    output_path_suc_files = join(DATASET_PATH, 'suc_files')
    os.makedirs(output_path_suc_files, exist_ok=True)
    os.chmod(output_path_suc_files, mode=0o770)

    name_suc =  TASK_NUMBER + '_output.ob'
    filename_suc = os.path.join(output_path_suc_files, name_suc)

    with open(filename_suc, 'wb') as fp:
        pickle.dump(succ_features['features'], fp)

print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="end"/>
      <metadata>
        <positionTop>
            780.5
        </positionTop>
        <positionLeft>
            768.484375
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2834px;
            height:3920px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-137.5px;left:-236.484375px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1" style="top: 269.5px; left: 429.984px; z-index: 24;"><a class="task-name" data-toggle="tooltip" data-placement="right" title=""><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Condition</span></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_4" style="top: 398.5px; left: 241.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Load and return a PEPS dataset including a
'metadata folder' with metadata files and 'images folder' containing satellite images.

Please access https://peps.cnes.fr/rocket/#/register to create a new user account from Peps website.

Please add third party credentials (USER_NAME_PEPS and USER_PASS_PEPS) in the Scheduling &amp; Orchestration interface → Manage Third-Party Credentials to connect to PEPS."><img src="/automation-dashboard/styles/patterns/img/wf-icons/peps-logo.png" width="20px">&nbsp;<span class="name">Fetch_Satellite_Images_From_PEPS</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_7" style="top: 398.5px; left: 430px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Else</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_10" style="top: 398.5px; left: 568px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Continuation</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_13" style="top: 270.5px; left: 969.984px; z-index: 24;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Condition2</span></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_16" style="top: 398.5px; left: 768.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Load and return a Copernicus dataset including a 'metadata folder' with metadata files and 'images folder' containing satellite images according to the resolution &amp; image band selected by user.

Please access https://peps.cnes.fr/rocket/#/register to create a new user account from Copernicus website.

Please add third party credentials (USER_NAME_COP and USER_PASS_COP) in the Scheduling &amp; Orchestration interface → Manage Third-Party Credentials to connect to Copernicus."><img src="/automation-dashboard/styles/patterns/img/wf-icons/copernicus.png" width="20px">&nbsp;<span class="name">Fetch_Satellite_Images_From_Copernicus</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_19" style="top: 398.5px; left: 969px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Else2</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_22" style="top: 398.5px; left: 1107px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Continuation2</span></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_25" style="top: 142.5px; left: 699.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Import geo dataset."><img src="/automation-dashboard/styles/patterns/img/wf-icons/geodata.jpg" width="20px">&nbsp;<span class="name">Import_GeoData</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_28" style="top: 526.5px; left: 241.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task defines some input, here strings to be processed."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">Split</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_31" style="top: 654.5px; left: 241.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task will be replicated according to the 'runs' value specified in the replication script. The replication index is used in each task's instance to select the input."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">Process</span></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_34" style="top: 780.5px; left: 241.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="As a merge operation, we simply print the results from previous tasks."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">Merge</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_37" style="top: 526.5px; left: 768.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task defines some input, here strings to be processed."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">Split2</span></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_40" style="top: 654.5px; left: 768.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task will be replicated according to the 'runs' value specified in the replication script. The replication index is used in each task's instance to select the input."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">Process2</span></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_43" style="top: 904.5px; left: 768.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="As a merge operation, we simply print the results from previous tasks."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">Merge2</span></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_46" style="top: 780.5px; left: 768.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="The simplest task, ran by a Python engine."><img src="/automation-dashboard/styles/patterns/img/wf-icons/postprocess.png" width="20px">&nbsp;<span class="name">PostProcess2</span></a></div><svg style="position:absolute;left:469.484375px;top:182.5px" width="294.515625" height="87.5" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 86.5 C -10 36.5 283.515625 50 273.515625 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#a8a095;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M46.330671093750006,57.387709 L67.34838335390174,60.081362903059535 L60.025409435269644,54.4801083126098 L64.44078266651152,46.3866245615399 L46.330671093750006,57.387709" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M46.330671093750006,57.387709 L67.34838335390174,60.081362903059535 L60.025409435269644,54.4801083126098 L64.44078266651152,46.3866245615399 L46.330671093750006,57.387709" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path></svg><svg style="position:absolute;left:230.5px;top:309px" width="209.984375" height="90.5" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 89.5 C -10 39.5 198.984375 50 188.984375 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#337dff;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M27.80625287109375,61.04569112499999 L48.99292616762965,61.39906716529227 L41.095561055901534,56.64179648852186 L44.58903153115152,48.10975898048449 L27.80625287109375,61.04569112499999" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:#337dff;"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M27.80625287109375,61.04569112499999 L48.99292616762965,61.39906716529227 L41.095561055901534,56.64179648852186 L44.58903153115152,48.10975898048449 L27.80625287109375,61.04569112499999" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:#337dff;"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_57" style="position: absolute; transform: translate(-50%, -50%); left: 334.992px; top: 353.75px;">if</div><svg style="position:absolute;left:419.484375px;top:309px" width="21.015625" height="90.5" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0.015625 89.5 C 10.015625 39.5 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#337dff;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M2.8482084999999997,67.674928 L9.219864270497865,47.46596952257516 L2.4107601368636256,53.681763992900336 L-4.773299736601791,47.90341788571153 L2.8482084999999997,67.674928" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:#337dff;"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M2.8482084999999997,67.674928 L9.219864270497865,47.46596952257516 L2.4107601368636256,53.681763992900336 L-4.773299736601791,47.90341788571153 L2.8482084999999997,67.674928" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:#337dff;"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_61" style="position: absolute; transform: translate(-50%, -50%); left: 429.492px; top: 353.75px;">else</div><svg style="position:absolute;left:419.484375px;top:309px" width="159.015625" height="90.5" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 138.015625 89.5 C 148.015625 39.5 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#337dff;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M120.05192889453124,61.865096375 L104.81574715036275,47.13897109172651 L107.33635836863374,56.00725836077268 L98.95790913613543,59.854541617624015 L120.05192889453124,61.865096375" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:#337dff;"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M120.05192889453124,61.865096375 L104.81574715036275,47.13897109172651 L107.33635836863374,56.00725836077268 L98.95790913613543,59.854541617624015 L120.05192889453124,61.865096375" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:#337dff;"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_65" style="position: absolute; transform: translate(-50%, -50%); left: 498.492px; top: 353.75px;">continuation</div><svg style="position:absolute;left:743px;top:182.5px" width="287.484375" height="88.5" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 266.484375 87.5 C 276.484375 37.5 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#a8a095;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M221.41464609375,58.208375000000004 L203.40154185983002,47.04916015943289 L207.74588832120395,55.18098983199414 L200.37415669182414,60.71791793197893 L221.41464609375,58.208375000000004" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M221.41464609375,58.208375000000004 L203.40154185983002,47.04916015943289 L207.74588832120395,55.18098983199414 L200.37415669182414,60.71791793197893 L221.41464609375,58.208375000000004" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path></svg><svg style="position:absolute;left:757.5px;top:310px" width="222.984375" height="89.5" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 88.5 C -10 38.5 211.984375 50 201.984375 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#337dff;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M31.091716499999997,59.810352 L52.26150290732098,60.72694540408245 L44.493423287639104,55.76137000718403 L48.21252091450501,47.32523861644335 L31.091716499999997,59.810352" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:#337dff;"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M31.091716499999997,59.810352 L52.26150290732098,60.72694540408245 L44.493423287639104,55.76137000718403 L48.21252091450501,47.32523861644335 L31.091716499999997,59.810352" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:#337dff;"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_74" style="position: absolute; transform: translate(-50%, -50%); left: 868.492px; top: 354.25px;">if</div><svg style="position:absolute;left:958.5px;top:310px" width="21.984375" height="89.5" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 88.5 C -10 38.5 10.984375 50 0.984375 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#337dff;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.7354243164062497,67.24110937500001 L5.076709685281504,47.544141020969626 L-2.162830503983991,53.25282369283096 L-8.91157599688755,46.97154720854737 L-2.7354243164062497,67.24110937500001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:#337dff;"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.7354243164062497,67.24110937500001 L5.076709685281504,47.544141020969626 L-2.162830503983991,53.25282369283096 L-8.91157599688755,46.97154720854737 L-2.7354243164062497,67.24110937500001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:#337dff;"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_78" style="position: absolute; transform: translate(-50%, -50%); left: 968.992px; top: 354.25px;">else</div><svg style="position:absolute;left:959.484375px;top:310px" width="158.015625" height="89.5" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 137.015625 88.5 C 147.015625 38.5 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#337dff;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M119.20259164453125,61.015759125 L103.9202028346666,46.33759192796468 L106.46867348846986,55.19791344169676 L98.10235715136336,59.07151008402607 L119.20259164453125,61.015759125" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:#337dff;"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M119.20259164453125,61.015759125 L103.9202028346666,46.33759192796468 L106.46867348846986,55.19791344169676 L98.10235715136336,59.07151008402607 L119.20259164453125,61.015759125" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:#337dff;"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_82" style="position: absolute; transform: translate(-50%, -50%); left: 1037.99px; top: 354.25px;">continuation</div><svg style="position:absolute;left:280.5px;top:438.5px" width="71.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 60.5 50 50.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#a8a095;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M2.371999999999998,64.44800000000001 L19.94755118785287,52.611615398139364 L10.748812119413051,53.230646536902995 L8.730197724755854,44.23480327872632 L2.371999999999998,64.44800000000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M2.371999999999998,64.44800000000001 L19.94755118785287,52.611615398139364 L10.748812119413051,53.230646536902995 L8.730197724755854,44.23480327872632 L2.371999999999998,64.44800000000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path></svg><svg style="position:absolute;left:306.46578674770865px;top:556.5px" width="15.034213252291345" height="99" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 88 C -10 88 -10 -10 0 0 " transform="translate(14.534213252291345,10.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#e5db3d" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#e7dd4a;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.889249999999999,77.41936575 L-0.6632823303137547,56.65542592021898 L-6.785898453911784,63.54843482802241 L-14.534213252291345,58.55207437413076 L-4.889249999999999,77.41936575" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(14.534213252291345,10.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:rgba(231, 221, 74, 0.5); --darkreader-inline-stroke:rgba(231, 221, 74, 0.5);"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.889249999999999,77.41936575 L-0.6632823303137547,56.65542592021898 L-6.785898453911784,63.54843482802241 L-14.534213252291345,58.55207437413076 L-4.889249999999999,77.41936575" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(14.534213252291345,10.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:rgba(231, 221, 74, 0.5); --darkreader-inline-stroke:rgba(231, 221, 74, 0.5);"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_91" style="position: absolute; transform: translate(-50%, -50%); left: 313px; top: 606.75px;">replicate</div><svg style="position:absolute;left:275.98171321138256px;top:566.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#a8a095;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path></svg><svg style="position:absolute;left:275.9783554952701px;top:694.5px" width="15.521644504729927" height="87" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 86 C -10 36 -10 50 0 0 " transform="translate(15.021644504729927,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#a8a095;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.331249999999999,64.94400000000002 L-1.2792764656232984,43.975321988607305 L-7.004697339623629,51.20163196089339 L-15.021644504729927,46.64876932823094 L-4.331249999999999,64.94400000000002" class="" stroke="#666" fill="#666" transform="translate(15.021644504729927,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.331249999999999,64.94400000000002 L-1.2792764656232984,43.975321988607305 L-7.004697339623629,51.20163196089339 L-15.021644504729927,46.64876932823094 L-4.331249999999999,64.94400000000002" class="" stroke="#666" fill="#666" transform="translate(15.021644504729927,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path></svg><svg style="position:absolute;left:807.5px;top:438.5px" width="83.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 72.5 50 62.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#a8a095;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M3.9181393749999978,63.998374500000004 L22.655876611475385,54.10407294522597 L13.443584528330181,53.738457607992615 L12.395959719467998,44.57862779189579 L3.9181393749999978,63.998374500000004" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M3.9181393749999978,63.998374500000004 L22.655876611475385,54.10407294522597 L13.443584528330181,53.738457607992615 L12.395959719467998,44.57862779189579 L3.9181393749999978,63.998374500000004" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path></svg><svg style="position:absolute;left:833.4657867477086px;top:556.5px" width="15.034213252291345" height="99" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 88 C -10 88 -10 -10 0 0 " transform="translate(14.534213252291345,10.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#e5db3d" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#e7dd4a;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.889249999999999,77.41936575 L-0.6632823303137547,56.65542592021898 L-6.785898453911784,63.54843482802241 L-14.534213252291345,58.55207437413076 L-4.889249999999999,77.41936575" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(14.534213252291345,10.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:rgba(231, 221, 74, 0.5); --darkreader-inline-stroke:rgba(231, 221, 74, 0.5);"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.889249999999999,77.41936575 L-0.6632823303137547,56.65542592021898 L-6.785898453911784,63.54843482802241 L-14.534213252291345,58.55207437413076 L-4.889249999999999,77.41936575" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(14.534213252291345,10.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:rgba(231, 221, 74, 0.5); --darkreader-inline-stroke:rgba(231, 221, 74, 0.5);"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_106" style="position: absolute; transform: translate(-50%, -50%); left: 840px; top: 606.75px;">replicate</div><svg style="position:absolute;left:802.9817132113825px;top:566.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#a8a095;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path></svg><svg style="position:absolute;left:802.8846994657227px;top:820.5px" width="15.615300534277214" height="85" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 84 C -10 34 -10 50 0 0 " transform="translate(15.115300534277214,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#a8a095;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.331249999999999,63.10631250000001 L-1.3868194094634143,42.122263117254256 L-7.075116980309219,49.37783137518621 L-15.115300534277214,44.86613009756348 L-4.331249999999999,63.10631250000001" class="" stroke="#666" fill="#666" transform="translate(15.115300534277214,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.331249999999999,63.10631250000001 L-1.3868194094634143,42.122263117254256 L-7.075116980309219,49.37783137518621 L-15.115300534277214,44.86613009756348 L-4.331249999999999,63.10631250000001" class="" stroke="#666" fill="#666" transform="translate(15.115300534277214,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path></svg><svg style="position:absolute;left:802.9783554952701px;top:694.5px" width="15.521644504729927" height="87" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 86 C -10 36 -10 50 0 0 " transform="translate(15.021644504729927,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-fill:none; --darkreader-inline-stroke:#a8a095;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.331249999999999,64.94400000000002 L-1.2792764656232984,43.975321988607305 L-7.004697339623629,51.20163196089339 L-15.021644504729927,46.64876932823094 L-4.331249999999999,64.94400000000002" class="" stroke="#666" fill="#666" transform="translate(15.021644504729927,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.331249999999999,64.94400000000002 L-1.2792764656232984,43.975321988607305 L-7.004697339623629,51.20163196089339 L-15.021644504729927,46.64876932823094 L-4.331249999999999,64.94400000000002" class="" stroke="#666" fill="#666" transform="translate(15.021644504729927,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:#a8a095;"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 469.984px; top: 299.5px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 469.984px; top: 259.5px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 419.984px; top: 299.5px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 331.5px; top: 429px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 231px; top: 389px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 470px; top: 429px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 420px; top: 389px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 608px; top: 429px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 558px; top: 389px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 1009.98px; top: 300.5px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1009.98px; top: 260.5px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 959.984px; top: 300.5px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 870.5px; top: 429px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 758px; top: 389px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 1009px; top: 429px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 959px; top: 389px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 1147px; top: 429px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 1097px; top: 389px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style="--darkreader-inline-fill:#337dff; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 743.5px; top: 173px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 281px; top: 557px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 281px; top: 517px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint replicate-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 311px; top: 557px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style="--darkreader-inline-fill:#e7dd4a; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 281px; top: 685px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint replicate-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 311px; top: 645px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style="--darkreader-inline-fill:#e7dd4a; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 281px; top: 645px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 281px; top: 811px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 281px; top: 771px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 808px; top: 557px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 808px; top: 517px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint replicate-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 838px; top: 557px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style="--darkreader-inline-fill:#e7dd4a; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 808px; top: 685px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint replicate-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 838px; top: 645px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style="--darkreader-inline-fill:#e7dd4a; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 808px; top: 645px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 808px; top: 935px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 808px; top: 895px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 808px; top: 811px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 808px; top: 771px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill:#a8a095; --darkreader-inline-stroke:none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
