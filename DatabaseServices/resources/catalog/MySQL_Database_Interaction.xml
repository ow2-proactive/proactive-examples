<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="MySQL_Database_Interaction" projectName="MySQL Workflows" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="USER" value="demo" model=""/>
    <variable name="PASSWORD" value="demo" model=""/>
    <variable name="DATABASE" value="demo" model=""/>
  </variables>
  <description>
    <![CDATA[ This workflow shows how to use PCA to ease deployment of service dependencies and interact with a MySQL database. It is a complete example putting together the use of
    1) a PCA service to create a MySQL database and,
    2) a mysql connector from data-connectors bucket to interact with this database along with its tow modes: Import and Export. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="database-services"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mysql.png"/>
    <info name="Documentation" value="user/ProActiveUserGuide.html#_sql"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Import_from_MySQL" >
      <description>
        <![CDATA[ This task allows to import data from MySQL database.
It requires the following third-party credential:  {key: mysql://<username>@<host>:<port>, value: MYSQL_PASSWORD}. Please refer to the User documentation to learn how to add third-party credentials.
It uses the following variables:
$LABEL (optional) used when the imported data is labeled. Then, the user can specify the label column name.
$MYSQL_QUERY (required) is the user's sql query.
$OUTPUT_FILE (optional) is a relative path in the data space used to save the results in a CSV file.
$OUTPUT_TYPE (optional) if set to HTML, it allows to preview the results in Scheduler Portal in an HTML format. Default is CSV
This task uses also the task variable RMDB_DRIVER as a driver to connect to the database. The specified default driver "mysqlconnector" as well as "pymysql" are already provided for this task. To use another driver, make sure you have it properly installed before.
The imported data is exported in a JSON format using the variable $DATAFRAME_JSON. ]]>
      </description>
      <variables>
        <variable name="LABEL" value="" inherited="false" />
        <variable name="MYSQL_QUERY" value="SELECT * FROM diabetes" inherited="false" />
        <variable name="RDBMS_DRIVER" value="mysqlconnector" inherited="false" />
        <variable name="OUTPUT_FILE" value="output-mysql.csv" inherited="false" />
        <variable name="OUTPUT_TYPE" value="HTML" inherited="false" model="PA:List(CSV,HTML)"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mysql.png"/>
        <info name="task.documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_sql"/>
      </genericInformation>
      <depends>
        <task ref="Export_to_MySQL"/>
      </depends>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
# In the Java Home location field, use the value: "/usr" to force using the JRE provided in the docker image below (Recommended).
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters
containerName = 'activeeon/dlm3'
dockerRunCommand = 'docker run '
dockerParameters = '--rm '
# Prepare ProActive home volume
paHomeHost = variables.get("PA_SCHEDULER_HOME")
paHomeContainer = variables.get("PA_SCHEDULER_HOME")
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' '
# Prepare working directory (For Dataspaces and serialized task file)
workspaceHost = localspace
workspaceContainer = localspace
workspaceVolume = '-v '+localspace +':'+localspace+' '
# Prepare container working directory
containerWorkingDirectory = '-w '+workspaceContainer+' '
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
import numpy as np
from sqlalchemy import create_engine
import sys

RDBMS_NAME = 'mysql'
RDBMS_DRIVER = variables.get("RDBMS_DRIVER")
MYSQL_URL_KEY = "mysql://<username>@<host>:<port>"

HOST = variables.get("MYSQL_HOST")
PORT = int(variables.get("MYSQL_PORT"))
DATABASE = variables.get("MYSQL_DATABASE")
USER = variables.get("MYSQL_USER")

# This key is used for getting the password from 3rd party credentials.
MYSQL_PASSWORD_KEY = "mysql://" + USER + "@" + HOST + ":" + str(PORT)
MYSQL_PASSWORD=credentials.get(MYSQL_PASSWORD_KEY)

SQL_QUERY = variables.get("MYSQL_QUERY")
OUTPUT_FILE = variables.get("OUTPUT_FILE")
OUTPUT_TYPE = variables.get("OUTPUT_TYPE")

if not HOST:
    print("ERROR: MYSQL_HOST variable is not provided by the user.")
    sys.exit(1)
if not PORT:
    PORT = 3360
    print("WARNING: MYSQL_PORT variable is not provided by the user. Using the default value:", PORT)
if not DATABASE:
    print("ERROR: MYSQL_DATABASE variable is not provided by the user.")
    sys.exit(1)
if not USER:
    print("ERROR: MYSQL_USER variable is not provided by the user.")
    sys.exit(1)
if not MYSQL_PASSWORD:
    print("ERROR: Please add your mysql password to 3rd-party credentials in the scheduler-portal under the key :\"" + MYSQL_URL_KEY + "\"")
    sys.exit(1)
if not SQL_QUERY:
    print("ERROR: MYSQL_QUERY variable is not provided by the user.")
    sys.exit(1)

IS_LABELED_DATA = 'False'
LABEL = variables.get("LABEL")
if LABEL:
    IS_LABELED_DATA='True'

# Please refer to SQLAlchemy doc for more info about database urls.
# http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls
# Never print this to avoid displaying your credentials in the logs
print("BEGIN Import_Data from " + RDBMS_NAME + " database using " + variables.get("RDBMS_DRIVER") + " connector")
print("EXECUTING QUERY...")
print('MYSQL_HOST=' , HOST)
print('MYSQL_PORT=' , PORT)
print('MYSQL_USER=' , USER)
print('MYSQL_DATABASE=' , DATABASE)
print('MYSQL_QUERY=' , SQL_QUERY)
if OUTPUT_FILE:
    print('OUTPUT_FILE=' , OUTPUT_FILE)

database_url = '{0}+{1}://{2}:{3}@{4}:{5}/{6}'.format(RDBMS_NAME,RDBMS_DRIVER,USER,MYSQL_PASSWORD,HOST,PORT,DATABASE)
engine = create_engine(database_url)

with engine.connect() as conn, conn.begin():
    #pd.read_sql() can take either a SQL query as a parameter or a table name
    dataframe = pd.read_sql(SQL_QUERY, conn)

columns_name = dataframe.columns
columns_number = len(columns_name)

if IS_LABELED_DATA == 'True':
    label_index= dataframe.columns.get_loc(LABEL)
    data_indices=[x for i,x in enumerate(range(columns_number)) if i!=label_index]
    data  = dataframe.values[:,data_indices]
    label = dataframe.values[:,label_index]
    data_df = pd.DataFrame(data=data,columns=columns_name[data_indices])
    label_df = pd.DataFrame(data=label,columns=[columns_name[label_index]])
    LABEL_TRAIN_DF_JSON = label_df.to_json(orient='split')
    LABEL_TEST_DF_JSON = label_df.to_json(orient='split')
elif IS_LABELED_DATA == 'False':
    data = dataframe.values
    data_df = pd.DataFrame(data=data,columns=columns_name)

DATAFRAME_JSON = dataframe.to_json(orient='split')
COLUMNS_NAME_JSON = pd.Series(columns_name).to_json()
DATA_TRAIN_DF_JSON = data_df.to_json(orient='split')
DATA_TEST_DF_JSON = data_df.to_json(orient='split')

if IS_LABELED_DATA == 'True':
    variables.put("LABEL_TRAIN_DF_JSON", LABEL_TRAIN_DF_JSON)
    variables.put("LABEL_TEST_DF_JSON", LABEL_TEST_DF_JSON)
    dataframe=data_df.join(label_df)

variables.put("DATAFRAME_JSON", DATAFRAME_JSON)
variables.put("COLUMNS_NAME_JSON", COLUMNS_NAME_JSON)
variables.put("DATA_TRAIN_DF_JSON", DATA_TRAIN_DF_JSON)
variables.put("DATA_TEST_DF_JSON", DATA_TEST_DF_JSON)
variables.put("IS_LABELED_DATA", IS_LABELED_DATA)

#***************# HTML PREVIEW STYLING #***************#
styles = [
    dict(selector="th", props=[("font-weight", "bold"),
                               ("text-align", "center"),
                               ("background", "#0B6FA4"),
                               ("color", "white")]),
    dict(selector="td", props=[("text-align", "right"),
                               ("padding", "3px 5px"),
                               ("border-bottom", "1px solid #999999")]),
    dict(selector="table", props=[("border", "1px solid #999999"),
                               ("text-align", "center"),
                               ("width", "100%"),
                               ("border", "1px solid #999999")])
]
#******************************************************#

if OUTPUT_TYPE == "HTML":
    result = dataframe.style.set_table_styles(styles).render().encode('utf-8')
    resultMetadata.put("file.extension", ".html")
    resultMetadata.put("file.name", "output.html")
    resultMetadata.put("content.type", "text/html")
else:
    # Write results to the task result in CSV format
    result = dataframe.to_csv(index=False).encode('utf-8')
    resultMetadata.put("file.extension", ".csv")
    resultMetadata.put("file.name", "result.csv")
    resultMetadata.put("content.type", "text/csv")

# If an OUTPUT_FILE path in the dataspace is designated, then write to this file.
if OUTPUT_FILE:
    dataframe.to_csv(path_or_buf=OUTPUT_FILE, index=False)

print("END Import_Data")
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="$OUTPUT_FILE" accessMode="transferToGlobalSpace"/>
      </outputFiles>
    </task>
    <task name="Export_to_MySQL" >
      <description>
        <![CDATA[ This task allows to export data to MySQL database.
It requires the following third-party credential: {key: mysql://<username>@<host>:<port>, value: MYSQL_PASSWORD}. Please refer to the User documentation to learn how to add third-party credentials.
It uses the following variables:
$MYSQL_TABLE (required) is the table name.
$INSERT_MODE (required) indicates the behavior to follow when the table exists in the database amongst:
. fail: If table exists, do nothing.
. replace: If table exists, drop it, recreate it, and insert data.
. append: (default) If table exists, insert data. Create if does not exist.
$INPUT_FILE (required) is the relative path in the data space of the CSV file that contains data to be imported. The string could also be a URL. Valid URL schemes include http, ftp, s3, and file.
This task uses also the task variable RMDB_DRIVER as a driver to connect to the database. The specified default driver "mysqlconnector" as well as "pymysql" are already provided for this task. To use another driver, make sure you have it properly installed before. ]]>
      </description>
      <variables>
        <variable name="MYSQL_TABLE" value="diabetes" inherited="false" />
        <variable name="RDBMS_DRIVER" value="mysqlconnector" inherited="false" />
        <variable name="INSERT_MODE" value="append" inherited="false" model="PA:LIST(fail, replace, append)"/>
        <variable name="INPUT_FILE" value="pima-indians-diabetes.csv" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mysql.png"/>
        <info name="task.documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_sql"/>
      </genericInformation>
      <depends>
        <task ref="Parse_Endpoint"/>
      </depends>
      <inputFiles>
        <files  includes="$INPUT_FILE" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
# In the Java Home location field, use the value: "/usr" to force using the JRE provided in the docker image below (Recommended).
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters
containerName = 'activeeon/dlm3'
dockerRunCommand = 'docker run '
dockerParameters = '--rm '
# Prepare ProActive home volume
paHomeHost = variables.get("PA_SCHEDULER_HOME")
paHomeContainer = variables.get("PA_SCHEDULER_HOME")
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' '
# Prepare working directory (For Dataspaces and serialized task file)
workspaceHost = localspace
workspaceContainer = localspace
workspaceVolume = '-v '+localspace +':'+localspace+' '
# Prepare container working directory
containerWorkingDirectory = '-w '+workspaceContainer+' '
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
import numpy as np
from sqlalchemy import create_engine
import sys

RDBMS_NAME = 'mysql'
RDBMS_DRIVER = variables.get("RDBMS_DRIVER")
MYSQL_URL_KEY = "mysql://<username>@<host>:<port>"

HOST = variables.get("MYSQL_HOST")
PORT = int(variables.get("MYSQL_PORT"))
DATABASE = variables.get("MYSQL_DATABASE")
USER = variables.get("MYSQL_USER")

# This key is used for getting the password from 3rd party credentials.
MYSQL_PASSWORD_KEY = "mysql://" + USER + "@" + HOST + ":" + str(PORT)
MYSQL_PASSWORD=credentials.get(MYSQL_PASSWORD_KEY)

SQL_TABLE = variables.get("MYSQL_TABLE")
INPUT_FILE = variables.get("INPUT_FILE")
INSERT_MODE = variables.get("INSERT_MODE")

if not HOST:
    print("ERROR: MYSQL_HOST variable is not provided by the user.")
    sys.exit(1)
if not PORT:
    PORT = 3360
    print("WARNING: MYSQL_PORT variable is not provided by the user. Using the default value: ", PORT)
if not DATABASE:
    print("ERROR: MYSQL_DATABASE variable is not provided by the user.")
    sys.exit(1)
if not USER:
    print("ERROR: MYSQL_USER variable is not provided by the user.")
    sys.exit(1)
if not MYSQL_PASSWORD:
    print("ERROR: Please add your MySQL password to 3rd-party credentials in the scheduler-portal under the key :\"" + MYSQL_URL_KEY + "\"")
    sys.exit(1)
if not INPUT_FILE:
    print("ERROR: INPUT_FILE variable is not provided by the user.")
    sys.exit(1)
if not SQL_TABLE:
    print("ERROR: MYSQL_TABLE variable is not provided by the user.")
    sys.exit(1)
if not INSERT_MODE:
    INSERT_MODE = 'append'

# Please refer to SQLAlchemy doc for more info about database urls.
# http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls
# Never print this to avoid displaying your credentials in the logs

print("BEGIN Export_Data to " + RDBMS_NAME + " database using " + variables.get("RDBMS_DRIVER") + " connector")
print("INSERTING DATA IN MYSQL...")
print('MYSQL_HOST=' , HOST)
print('MYSQL_PORT=' , PORT)
print('MYSQL_USER=' , USER)
print('MYSQL_DATABASE=' , DATABASE)
print('MYSQL_TABLE=' , SQL_TABLE)
database_url = '{0}+{1}://{2}:{3}@{4}:{5}/{6}'.format(RDBMS_NAME,RDBMS_DRIVER,USER,MYSQL_PASSWORD,HOST,PORT,DATABASE)
engine = create_engine(database_url)
dataframe = pd.read_csv(INPUT_FILE, sep='\s+|;|,',index_col=None, engine='python')
with engine.connect() as conn, conn.begin():
     dataframe.to_sql(SQL_TABLE, conn, schema=None, if_exists=INSERT_MODE, index=True, index_label=None, chunksize=None, dtype=None)

print("END Export_Data")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Parse_Endpoint" >
      <description>
        <![CDATA[ This task aims to parse PCA endpoint in order to retrieve a HOST and a PORT number to use them as an input in the data connector tasks. ]]>
      </description>
      <depends>
        <task ref="Start_MySQL"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def endpoint = new URL(results[0].toString())
variables.put("MYSQL_HOST",endpoint.getHost())
variables.put("MYSQL_PORT",endpoint.getPort())
variables.put("MYSQL_USER",variables.get("USER"))
variables.put("MYSQL_DATABASE",variables.get("DATABASE"))
// Wait for database sever to be up and fully running.
sleep(3000)
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Start_MySQL" onTaskError="cancelJob" >
      <description>
        <![CDATA[ Start the MySQL server as a service. ]]>
      </description>
      <variables>
        <variable name="SERVICE_ID" value="MySQL" inherited="false" />
        <variable name="INSTANCE_NAME" value="mysql-server" inherited="false" />
        <variable name="DATABASE" value="" inherited="true" />
        <variable name="USER" value="" inherited="true" />
        <variable name="PASSWORD" value="" inherited="true" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mysql.png"/>
        <info name="task.documentation" value="PCA/PCAUserGuide.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Service_Start/raw" language="groovy">
            <arguments>
              <argument value="DATABASE"/>
              <argument value="USER"/>
              <argument value="PASSWORD"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="MySQL_Service_Action" 
    
    onTaskError="cancelJob" >
      <variables>
        <variable name="INSTANCE_ID" value="" inherited="false" />
        <variable name="INSTANCE_NAME" value="mysql-server" inherited="false" />
        <variable name="ACTION" value="Finish_MySQL" inherited="false" model="PA:LIST(Pause_MySQL, Resume_MySQL, Finish_MySQL)"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mysql.png"/>
        <info name="task.documentation" value="PCA/PCAUserGuide.html"/>
      </genericInformation>
      <depends>
        <task ref="Import_from_MySQL"/>
      </depends>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Service_Action/raw" language="groovy"></file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2854px;
            height:3248px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-153px;left:-911.5px"><div class="task ui-draggable" id="jsPlumb_1_405" style="top: 590px; left: 928.5px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/mysql.png" width="20px">&nbsp;<span class="name">Import_from_MySQL</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_408" style="top: 462px; left: 928.5px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/mysql.png" width="20px">&nbsp;<span class="name">Export_to_MySQL</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_411" style="top: 334px; left: 928.5px;"><a class="task-name"><img src="images/Groovy.png" width="20px">&nbsp;<span class="name">Parse_Endpoint</span></a></div><div class="task ui-draggable active-task" id="jsPlumb_1_414" style="top: 158px; left: 935px; z-index: 24;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/mysql.png" width="20px">&nbsp;<span class="name">Start_MySQL</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_417" style="top: 689px; left: 916.5px; z-index: 24;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/mysql.png" width="20px">&nbsp;<span class="name">MySQL_Service_Action</span></a></div><svg style="position:absolute;left:976.5px;top:501.5px" width="26.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 5.5 88 C 15.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.868953124999999,66.78168750000002 L12.848095417762192,46.18537370290451 L6.478576933147113,52.85089950918167 L-1.0826925730561543,47.575749894757394 L7.868953124999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.868953124999999,66.78168750000002 L12.848095417762192,46.18537370290451 L6.478576933147113,52.85089950918167 L-1.0826925730561543,47.575749894757394 L7.868953124999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:971px;top:373.5px" width="26.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 5.5 88 C 15.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.868953124999999,66.78168750000002 L12.848095417762192,46.18537370290451 L6.478576933147113,52.85089950918167 L-1.0826925730561543,47.575749894757394 L7.868953124999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.868953124999999,66.78168750000002 L12.848095417762192,46.18537370290451 L6.478576933147113,52.85089950918167 L-1.0826925730561543,47.575749894757394 L7.868953124999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:971px;top:197.5px" width="24.5" height="137" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 136 C -10 86 13.5 50 3.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.4253593749999998,104.0573125 L5.874954952485701,84.56103639237023 L-1.5045287443802262,90.08762850394223 L-8.094729043572062,83.64020576175045 L-2.4253593749999998,104.0573125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.4253593749999998,104.0573125 L5.874954952485701,84.56103639237023 L-1.5045287443802262,90.08762850394223 L-8.094729043572062,83.64020576175045 L-2.4253593749999998,104.0573125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable endpointDrag _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 982.5px; top: 620px; visibility: visible;" dragid="jsPlumb_1_430" elid="jsPlumb_1_405"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 982.5px; top: 580px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 977px; top: 492px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 977px; top: 452px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 971.5px; top: 364px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 971.5px; top: 324px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 975px; top: 188px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 977.5px; top: 719px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><svg style="position:absolute;left:977px;top:629.5px" width="26" height="60" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 59 C -10 9 15 50 5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.279289999999999,43.71384600000001 L6.359610548456179,24.365218211087342 L-1.1150881508813173,29.762335900569603 L-7.591899550974229,23.20101636196866 L-2.279289999999999,43.71384600000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected connected" style="position: absolute; height: 20px; width: 20px; left: 977.5px; top: 679px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>