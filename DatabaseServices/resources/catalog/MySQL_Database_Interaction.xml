<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.10"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
    name="MySQL_Database_Interaction" projectName="MySQL Workflows"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="MYSQL_DATABASE" value="activeeon" />
    <variable name="MYSQL_INSTANCE_NAME" value="mysql-server-1" />
    <variable name="MYSQL_PASSWORD" value="proactive" />
    <variable name="MYSQL_USER" value="mlos" />
  </variables>
  <description>
    <![CDATA[ This workflow shows how to use PCA to ease deployment of service dependencies and interact with a MySQL database. It is a complete example putting together the use of
    1) a PCA service to create a MySQL database and,
    2) a mysql connector from data-connectors bucket to interact with this database along with its tow modes: Import and Export.
 ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="database-services"/>
    <info name="Documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_sql"/>
    <info name="group" value="public-objects"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mysql.png"/>
  </genericInformation>
  <taskFlow>
    <task name="Start_MySQL_Service"
    
    
    onTaskError="cancelJob" >
      <description>
        <![CDATA[ Start the MySQL server as a service. ]]>
      </description>
      <variables>
        <variable name="MYSQL_SERVICE_ID" value="MySQL" inherited="false" />
        <variable name="MYSQL_INSTANCE_NAME" value="mysql-server-1" inherited="true" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mysql.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_sql"/>
      </genericInformation>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN Start_MySQL_Service ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription
http://localhost:8080/studio/#
// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def session_id = schedulerapi.getSession()

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

def service_id = variables.get("MYSQL_SERVICE_ID")
def instance_name = variables.get("MYSQL_INSTANCE_NAME")
def user = variables.get("MYSQL_USER")
def password = variables.get("MYSQL_PASSWORD")
def database = variables.get("MYSQL_DATABASE")
println("*_service_id:    " + service_id)
println("*_instance_name: " + instance_name)
println("*_user: " + user)
println("*_password: " + password)
println("*_database: " + database)

// Check existing service instances
boolean instance_exists = false
List<ServiceInstanceData> service_instances = service_instance_rest_api.getServiceInstancesUsingGET()

for (ServiceInstanceData service_instance_data : service_instances) {
	if ( (service_instance_data.getServiceId() == service_id) && (service_instance_data.getInstanceStatus()  == "RUNNING")){
      if (service_instance_data.getVariables().get("MYSQL_INSTANCE_NAME") == instance_name) {
        instance_exists = true
        instance_id = service_instance_data.getInstanceId()
  		endpoint = service_instance_data.getInstanceEndpoints().entrySet().iterator().next().getValue()
        println("*_instance_id: " + instance_id)
        println("*_endpoint:    " + endpoint)
        variables.put("MYSQL_INSTANCE_ID", instance_id)
        variables.put("mysql_endpoint", endpoint)
        break
      }
  	}
}

println("instance_exists: " + instance_exists)

if (!instance_exists){
  // Prepare service description
  ServiceDescription serviceDescription = new ServiceDescription()
  serviceDescription.setBucketName("cloud-automation")
  serviceDescription.setWorkflowName(service_id) 
  serviceDescription.putVariablesItem("MYSQL_INSTANCE_NAME_CL", instance_name)
  serviceDescription.putVariablesItem("MYSQL_USER_CL", user)
  serviceDescription.putVariablesItem("MYSQL_PASSWORD_CL", password)
  serviceDescription.putVariablesItem("MYSQL_DATABASE_CL", database)
  
  // Run service
  def service_instance_data = service_instance_rest_api.createRunningServiceInstanceUsingPOST(session_id, serviceDescription)
  
  // Acquire service Instance ID
  def service_instance_id = service_instance_data.getInstanceId()
  
  // Create synchro channel
  channel = "Service_Instance_" + service_instance_id
  println("channel: " + channel)
  synchronizationapi.createChannelIfAbsent(channel, false)
  synchronizationapi.waitUntil(channel, "RUNNING", "{k,x -> x == true}")
  
  // Acquire service endpoint
  service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
  def instance_id = service_instance_data.getInstanceId()
  endpoint = service_instance_data.getInstanceEndpoints().entrySet().iterator().next().getValue()
  
  println("*_instance_id: " + instance_id)
  println("*_endpoint: " + endpoint)
  
  variables.put("MYSQL_INSTANCE_ID", instance_id)
  variables.put("mysql_endpoint", endpoint)
}

println("--- END Start_MySQL_Service ---")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Import_from_MySQL">
      <description>
        <![CDATA[ This task allows to import data from MySQL database.
It requires the following third-party credentials: MYSQL_USERNAME and MYSQL_PASSWORD. Please refer to the User documentation to learn how to add third-party credentials.
It uses the following variables: 
$LABEL (optional) used when the imported data is labeled. Then, the user can specify the label column name.
$MYSQL_QUERY (required) is the user's sql query.
$OUTPUT_FILE (optional) is a relative path in the data space used to save the results in a CSV file. 
This task uses also the task variable RMDB_DRIVER as a driver to connect to the database. The specified default driver "mysqlconnector" as well as "pymysql" are already provided for this task. To use another driver, make sure you have it properly installed before.
The imported data is exported in a JSON format using the variable $DATAFRAME_JSON. ]]>
      </description>
      <variables>
        <variable name="LABEL" value="" inherited="false" />
        <variable name="MYSQL_QUERY" value="SELECT * FROM diabetes" inherited="false" />
        <variable name="RDBMS_DRIVER" value="mysqlconnector" inherited="false" />
        <variable name="OUTPUT_FILE" value="output-mysql.csv" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mysql.png"/>
        <info name="task.documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_sql"/>
      </genericInformation>
      <depends>
        <task ref="Export_to_MySQL"/>
      </depends>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters 
containerName = 'activeeon/dlm3'
dockerRunCommand =  'docker run ' 
dockerParameters = '--rm ' 
# Prepare ProActive home volume 
paHomeHost = variables.get("PA_SCHEDULER_HOME") 
paHomeContainer = variables.get("PA_SCHEDULER_HOME") 
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' 
# Prepare working directory (For Dataspaces and serialized task file) 
workspaceHost = localspace 
workspaceContainer = localspace 
workspaceVolume = '-v '+localspace +':'+localspace+' ' 
# Prepare container working directory 
containerWorkingDirectory = '-w '+workspaceContainer+' ' 
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node 
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
import numpy as np
from sqlalchemy import create_engine
import sys

RDBMS_NAME = 'mysql'
HOSTNAME = variables.get("MYSQL_HOSTNAME")
PORT = int(variables.get("MYSQL_PORT"))
DATABASE = variables.get("MYSQL_DATABASE")
MYSQL_USER = variables.get("MYSQL_USER")
RDBMS_DRIVER = variables.get("RDBMS_DRIVER")
MYSQL_URL_KEY = "mysql://<username>@<hostname>:<port>"
# This key is used for getting the password from 3rd party credentials.
MYSQL_PASSWORD_KEY = "mysql://" + MYSQL_USER + "@" + HOSTNAME + ":" + str(PORT)
MYSQL_PASSWORD=credentials.get(MYSQL_PASSWORD_KEY)
OUTPUT_FILE = variables.get("OUTPUT_FILE")
SQL_QUERY = variables.get("MYSQL_QUERY")

if not HOSTNAME:
    print("ERROR: The MYSQL_HOSTNAME variable is not provided by the user.")
    sys.exit(1)
if not PORT:
    print("ERROR: The MYSQL_PORT variable is not provided by the user. Using the default value:", PORT)
    PORT = 3360
if not DATABASE:
    print("ERROR: The MYSQL_DATABASE variable is not provided by the user.")
    sys.exit(1)
if not MYSQL_USER:
    print("ERROR: The MYSQL_USER is not provided by the user.")
    sys.exit(1)
if not MYSQL_PASSWORD:
    print("ERROR: Please add your mysql password to 3rd-party credentials in the scheduler-portal under the key :\"" + MYSQL_URL_KEY + "\"")
    sys.exit(1)
if not SQL_QUERY:
    print("ERROR: The MYSQL_QUERY is not provided by the user.")
    sys.exit(1)
    
IS_LABELED_DATA = 'False'

try:
    LABEL = variables.get("LABEL")
    if LABEL:
        IS_LABELED_DATA='True'
except NameError:
    pass

# Please refer to SQLAlchemy doc for more info about database urls.
# http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls
# Never print this to avoid displaying your credentials in the logs
print("BEGIN Import_Data from " + RDBMS_NAME + " database using " + variables.get("RDBMS_DRIVER") + " connector")
print("EXECUTING QUERY...")
print('MYSQL_HOSTNAME=' + HOSTNAME)
print('MYSQL_USER=' + MYSQL_USER)
print('MYSQL_PORT=', PORT)
print('MYSQL_DATABASE=' + DATABASE)
print('MYSQL_QUERY=' + SQL_QUERY)
if OUTPUT_FILE:
    print('OUTPUT_FILE=' + OUTPUT_FILE)

database_url = '{0}+{1}://{2}:{3}@{4}:{5}/{6}'.format(RDBMS_NAME,RDBMS_DRIVER,MYSQL_USER,MYSQL_PASSWORD,HOSTNAME,PORT,DATABASE)
engine = create_engine(database_url)

with engine.connect() as conn, conn.begin():
    #pd.read_sql() can take either a SQL query as a parameter or a table name
    dataframe = pd.read_sql(SQL_QUERY, conn)

columns_name = dataframe.columns
columns_number = len(columns_name)

if IS_LABELED_DATA == 'True':
  label_index= dataframe.columns.get_loc(LABEL)
  data_indices=[x for i,x in enumerate(range(columns_number)) if i!=label_index]
  data  = dataframe.values[:,data_indices]
  label = dataframe.values[:,label_index]
  data_df = pd.DataFrame(data=data,columns=columns_name[data_indices])
  label_df = pd.DataFrame(data=label,columns=[columns_name[label_index]])
  LABEL_TRAIN_DF_JSON = label_df.to_json(orient='split')
  LABEL_TEST_DF_JSON = label_df.to_json(orient='split')
  
elif IS_LABELED_DATA == 'False':
  data = dataframe.values
  data_df = pd.DataFrame(data=data,columns=columns_name)
  
DATAFRAME_JSON = dataframe.to_json(orient='split')
COLUMNS_NAME_JSON = pd.Series(columns_name).to_json()
DATA_TRAIN_DF_JSON = data_df.to_json(orient='split')
DATA_TEST_DF_JSON = data_df.to_json(orient='split')

if IS_LABELED_DATA == 'True':
    variables.put("LABEL_TRAIN_DF_JSON", LABEL_TRAIN_DF_JSON)
    variables.put("LABEL_TEST_DF_JSON", LABEL_TEST_DF_JSON)
    dataframe=data_df.join(label_df)
    
variables.put("DATAFRAME_JSON", DATAFRAME_JSON)
variables.put("COLUMNS_NAME_JSON", COLUMNS_NAME_JSON)
variables.put("DATA_TRAIN_DF_JSON", DATA_TRAIN_DF_JSON)
variables.put("DATA_TEST_DF_JSON", DATA_TEST_DF_JSON)
variables.put("IS_LABELED_DATA", IS_LABELED_DATA)

# Write results to the task result in CSV format
result = dataframe.to_csv(index=False).encode('utf-8')
resultMetadata.put("file.extension", ".csv")
resultMetadata.put("file.name", "result.csv")
resultMetadata.put("content.type", "text/csv")

# If an OUTPUT_FILE path in the dataspace is designated, then write to this file.
if OUTPUT_FILE:
    dataframe.to_csv(path_or_buf=OUTPUT_FILE, index=False)

print("END Import_Data")
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="$OUTPUT_FILE" accessMode="transferToGlobalSpace"/>
      </outputFiles>
    </task>
    <task name="Export_to_MySQL">
      <description>
        <![CDATA[ This task allows to export data to MySQL database.
It requires the following third-party credentials: MYSQL_USERNAME and MYSQL_PASSWORD. Please refer to the User documentation to learn how to add third-party credentials.
It uses the following variables: 
$MYSQL_TABLE (required) is the table name.
$INSERT_MODE (required) indicates the behavior to follow when the table exists in the database amongst: 
. fail: If table exists, do nothing.
. replace: If table exists, drop it, recreate it, and insert data.
. append: (default) If table exists, insert data. Create if does not exist.
$INPUT_FILE (required) is the relative path in the data space of the CSV file that contains data to be imported. The string could also be a URL. Valid URL schemes include http, ftp, s3, and file. 
This task uses also the task variable RMDB_DRIVER as a driver to connect to the database. The specified default driver "mysqlconnector" as well as "pymysql" are already provided for this task. To use another driver, make sure you have it properly installed before. ]]>
      </description>
      <variables>
        <variable name="MYSQL_TABLE" value="diabetes" inherited="false" />
        <variable name="RDBMS_DRIVER" value="mysqlconnector" inherited="false" />
        <variable name="INSERT_MODE" value="append" inherited="false" model="PA:LIST(fail, replace, append)"/>
        <variable name="INPUT_FILE" value="pima-indians-diabetes.csv" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mysql.png"/>
        <info name="task.documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_sql"/>
      </genericInformation>
      <depends>
        <task ref="Parse_Endpoint"/>
      </depends>
      <inputFiles>
        <files  includes="$INPUT_FILE" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters 
containerName = 'activeeon/dlm3'
dockerRunCommand =  'docker run ' 
dockerParameters = '--rm ' 
# Prepare ProActive home volume 
paHomeHost = variables.get("PA_SCHEDULER_HOME") 
paHomeContainer = variables.get("PA_SCHEDULER_HOME") 
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' 
# Prepare working directory (For Dataspaces and serialized task file) 
workspaceHost = localspace 
workspaceContainer = localspace 
workspaceVolume = '-v '+localspace +':'+localspace+' ' 
# Prepare container working directory 
containerWorkingDirectory = '-w '+workspaceContainer+' ' 
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node 
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
import numpy as np
from sqlalchemy import create_engine
import sys

RDBMS_NAME = 'mysql'
HOSTNAME = variables.get("MYSQL_HOSTNAME")
PORT = int(variables.get("MYSQL_PORT"))
DATABASE = variables.get("MYSQL_DATABASE")
MYSQL_USER = variables.get("MYSQL_USER")
RDBMS_DRIVER = variables.get("RDBMS_DRIVER")
MYSQL_URL_KEY = "mysql://<username>@<hostname>:<port>"
# This key is used for getting the password from 3rd party credentials.
MYSQL_PASSWORD_KEY = "mysql://" + MYSQL_USER + "@" + HOSTNAME + ":" + str(PORT)
MYSQL_PASSWORD=credentials.get(MYSQL_PASSWORD_KEY)
INPUT_FILE = variables.get("INPUT_FILE")
SQL_TABLE = variables.get("MYSQL_TABLE")
INSERT_MODE = variables.get("INSERT_MODE")

if not HOSTNAME:
    print("ERROR: The MYSQL_HOSTNAME variable is not provided by the user.")
    sys.exit(1)
if not PORT:
    print("ERROR: The MYSQL_PORT variable is not provided by the user. Using the default value:", PORT)
    PORT = 3360
if not DATABASE:
    print("ERROR: The MYSQL_DATABASE variable is not provided by the user.")
    sys.exit(1)
if not MYSQL_USER:
    print("ERROR: The MYSQL_USER is not provided by the user.")
    sys.exit(1)
if not MYSQL_PASSWORD:
    print("ERROR: Please add your mysql password to 3rd-party credentials in the scheduler-portal under the key :\"" + MYSQL_URL_KEY + "\"")
    sys.exit(1)
if not INPUT_FILE:
    print("ERROR: The INPUT_FILE is not provided by the user.")
    sys.exit(1)
if not SQL_TABLE:
    print("ERROR: The MYSQL_TABLE is not provided by the user.")
    sys.exit(1)
if not INSERT_MODE:
    INSERT_MODE = 'append'


# Please refer to SQLAlchemy doc for more info about database urls.
# http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls
# Never print this to avoid displaying your credentials in the logs

print("BEGIN Export_Data to " + RDBMS_NAME + " database using " + variables.get("RDBMS_DRIVER") + " connector")
print("INSERTING DATA IN MYSQL...")
print('MYSQL_HOSTNAME='+HOSTNAME)
print('MYSQL_PORT=', PORT)
print('MYSQL_USER=', MYSQL_USER)
print('MYSQL_DATABASE='+DATABASE)
print('MYSQL_TABLE='+SQL_TABLE)
database_url = '{0}+{1}://{2}:{3}@{4}:{5}/{6}'.format(RDBMS_NAME,RDBMS_DRIVER,MYSQL_USER,MYSQL_PASSWORD,HOSTNAME,PORT,DATABASE)
engine = create_engine(database_url)
dataframe = pd.read_csv(INPUT_FILE, sep='\s+|;|,',index_col=None, engine='python')
with engine.connect() as conn, conn.begin():
     dataframe.to_sql(SQL_TABLE, conn, flavor=None, schema=None, if_exists=INSERT_MODE, index=True, index_label=None, chunksize=None, dtype=None)
            
print("END Export_Data")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Parse_Endpoint">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="Start_MySQL_Service"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def mysql_endpoint = variables.get("mysql_endpoint")
def MYSQL_HOST
def MYSQL_USER = variables.get("MYSQL_USER")
def MYSQL_PASSWORD = variables.get("MYSQL_PASSWORD")
def MYSQL_PORT
def MYSQL_PASSWORD_KEY

if (mysql_endpoint != null){
  mysql_endpoint = mysql_endpoint.replace("http://", "")
  MYSQL_HOST = mysql_endpoint.split(":")[0]
  variables.put("MYSQL_HOSTNAME", MYSQL_HOST)
  MYSQL_PORT = mysql_endpoint.split(":")[1]
  variables.put("MYSQL_PORT", MYSQL_PORT)
  
  // This key is used for getting the password from 3rd party credentials.
  MYSQL_PASSWORD_KEY = "mysql://" + MYSQL_USER + "@" + MYSQL_HOST + ":" + MYSQL_PORT
  schedulerapi.connect()
  schedulerapi.putThirdPartyCredential(MYSQL_PASSWORD_KEY, MYSQL_PASSWORD)
}
else{
  throw new IOException("MySQL endpoint not found")
}
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Finish_MySQL_Service"
    
    
    onTaskError="cancelJob" >
      <description>
        <![CDATA[ Finish the MySQL service. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mysql.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_sql"/>
      </genericInformation>
      <depends>
        <task ref="Import_from_MySQL"/>
      </depends>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN Finish_MySQL_Service ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription

// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def session_id = schedulerapi.getSession()

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

def instance_id = (int) variables.get("MYSQL_INSTANCE_ID")
println("*_instance_id: " + instance_id)
assert instance_id != null

// Finish service
ServiceDescription service = new ServiceDescription()
service.setBucketName("cloud-automation") 
service.setWorkflowName("Finish_MySQL")
service_instance_rest_api.launchServiceInstanceActionUsingPUT(session_id, instance_id, service)

println("--- END Finish_MySQL_Service ---")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
  </taskFlow>
</job>