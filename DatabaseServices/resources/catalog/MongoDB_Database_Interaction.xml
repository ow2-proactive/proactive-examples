<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="MongoDB_Database_Interaction" projectName="MongoDB Workflows" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="ACTION" value="Finish_MongoDB" model="PA:LIST(Pause_MongoDB, Resume_MongoDB, Finish_MongoDB)"/>
    <variable name="MONGODB_INSTANCE_NAME" value="mongodb-server" model="PA:SPEL( (variables[MONGODB_INSTANCE_NAME] = &quot;mongodb-server-&quot;+(T(java.lang.Math).random()*1000).intValue()) instanceof T(String) )"/>
    <variable name="MONGODB_PASSWORD" value="proactive" />
    <variable name="MONGODB_USER" value="mlos" />
  </variables>
  <description>
    <![CDATA[ This workflow shows how to use PCA to ease deployment of service dependencies and interact with a MongoDB database. It is a complete example putting together the use of
1) a PCA service to create a MongoDB database and,
2)  a mongodb connector from data-connectors bucket to interact with this database along with its tow modes: Import and Export. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="database-services"/>
    <info name="Documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
    <info name="group" value="public-objects"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
  </genericInformation>
  <taskFlow>
    <task name="Parse_Endpoint" >
      <description>
        <![CDATA[ This task aims to parse PCA endpoint in order to retrieve a HOST and a PORT number to use them as an input in the data connector tasks. ]]>
      </description>
      <depends>
        <task ref="Start_MongoDB"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def endpoint = new URL(variables.get("ENDPOINT" ))
variables.put("MONGODB_HOST",endpoint.getHost())
variables.put("MONGODB_PORT",endpoint.getPort())
// Wait for database sever to be up and fully running.
sleep(3000)
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Export_to_MongoDB" >
      <description>
        <![CDATA[ This task allows exporting data to MongoDB.
The task requires the following third-party credentials: {key: mongodb://<username>@<hostname>:<port>, value: MONGODB_PASSWORD}. Please refer to the User documentation to learn how to add third-party credentials.
It uses the following variables:
$MONGODB_DATABASE (required) the database to use. It is created if it does not exist
$MONGODB_COLLECTION (required) the collection to use. It is created if it does not exist
$MONGODB_INPUT (required) A JSON Object/Array to be inserted in MongoDB. This variable can:
 - A String describing the JSON Object/Array
 - A relative path in the data space of a JSON file. ]]>
      </description>
      <variables>
        <variable name="MONGODB_COLLECTION" value="star_wars" inherited="false" />
        <variable name="MONGODB_INPUT" value="star_wars_people.json" inherited="false" />
        <variable name="MONGODB_DATABASE" value="activeeon" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
      </genericInformation>
      <depends>
        <task ref="Parse_Endpoint"/>
      </depends>
      <inputFiles>
        <files  includes="$MONGODB_INPUT" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
# In the Java Home location field, use the value: "/usr" to force using the JRE provided in the docker image below (Recommended).
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters
containerName = 'activeeon/dlm3'
dockerRunCommand =  'docker run '
dockerParameters = '--rm '
# Prepare ProActive home volume
paHomeHost = variables.get("PA_SCHEDULER_HOME")
paHomeContainer = variables.get("PA_SCHEDULER_HOME")
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' '
# Prepare working directory (For Dataspaces and serialized task file)
workspaceHost = localspace
workspaceContainer = localspace
workspaceVolume = '-v '+localspace +':'+localspace+' '
# Prepare container working directory
containerWorkingDirectory = '-w '+workspaceContainer+' '
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
from pymongo import MongoClient
from bson.json_util import dumps, loads
import json

def get_input_type(input):
    """
    A util for detecting whether the input string is a valid json or a file path/url
    """
    if input.startswith(("{", "[")):
        print("Exporting a JSON String")
        return loads(input)
    else:
        print("Exporting JSON File:{0}".format(input))
        json_data = open(input, "r").read()
        return loads(json_data)


def connect_mongo(host, port, username, password, db):
    """
    A util for making a connection to mongo
    """

    if username and password:
        mongo_uri = 'mongodb://%s:%s@%s:%s' % (username, password, host, port)
        conn = MongoClient(mongo_uri)
    else:
        print("Connecting without authentification")
        conn = MongoClient(host, port)
    return conn[db]

def write_mongo(db, collection, inputs, host, port, username, password, no_id=True):
    """
    Write to MongoDB from a DataFrame
    """

    # Connect to MongoDB
    db = connect_mongo(host=host, port=port, username=username, password=password, db=db)
    # Point to a Collection to write to
    cursor = db[collection]
    # if returns true, then JSON Array
    if isinstance(inputs, list):
        inserts = cursor.insert_many(inputs)
        if len(inserts.inserted_ids) == len(inputs):
            print("Successfully inserted [{0}/{1}] documents.".format(len(inserts.inserted_ids), len(inputs)))
            return 'True'
        else:
            print("Failed to insert all documents. Only [{0}/{1}] were inserted".format(len(inserts.inserted_ids), len(inputs)))
            return 'False'
    elif isinstance(inputs,dict):
        inserts = cursor.insert_one(inputs)
        if inserts.inserted_id:
            print("Successfully inserted 1 documents")
        else:
            print("Failed to insert document.")

HOST = variables.get("MONGODB_HOST")
PORT = int(variables.get("MONGODB_PORT"))
DATABASE = variables.get("MONGODB_DATABASE")
COLLECTION = variables.get("MONGODB_COLLECTION")
INPUT = variables.get("MONGODB_INPUT")
USER = variables.get("MONGODB_USER")
# This key is used for getting the password from 3rd party credentials.
MONGODB_PASSWORD_KEY = "mongodb://" + USER + "@" + HOST + ":" + str(PORT)
PASSWORD = credentials.get(MONGODB_PASSWORD_KEY)
MONGODB_URL_KEY = "mongodb://<username>@<hostname>:<port>"

if not HOST:
    print("ERROR: The MONGODB_HOST variable is not provided by the user.")
    sys.exit(1)
if not PORT:
    print("ERROR: The MONGODB_PORT is not provided by the user. Using the default value: " + PORT)
    PORT = 27017
if not DATABASE:
    print("ERROR: The MONGODB_DATABASE variable is not provided by the user.")
    sys.exit(1)
if not COLLECTION:
    print("ERROR: The MONGODB_COLLECTION variable is not provided by the user.")
    sys.exit(1)
if USER:
    if not PASSWORD:
        print("ERROR: The MONGODB_USER and MONGODB_PASSWORD are used in junction. Please add your mongodb password to 3rd-party credentials in the scheduler-portal under the key :\"" + MONGODB_URL_KEY + "\"")
        sys.exit(1)
if INPUT:
    INPUT = get_input_type(INPUT)
else:
    print("ERROR: The MONGODB_INPUT variable is not provided by the user.")
    sys.exit(1)

print("BEGIN Export Data to mongoDB")
print("INSERTING DATA IN MONGODB...")
print('MONGODB_HOST=' + HOST)
print('MONGODB_USER=' + USER)
print('MONGODB_PORT=', PORT)
print('MONGODB_DATABASE=' + DATABASE)
print('MONGODB_COLLECTION=' + COLLECTION)

# Insert INPUT in mongoDB
write_mongo(DATABASE, COLLECTION, INPUT, HOST,  PORT,  USER,  PASSWORD)
print("END Export Data")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Import_from_MongoDB" >
      <description>
        <![CDATA[ This task allows importing data from MongoDB.
The task requires the following third-party credentials: MONGODB_USERNAME and MONGODB_PASSWORD. Please refer to the User documentation to learn how to add third-party credentials.
It uses the following variables:
$MONGODB_DATABASE (required) the database to use. It is created if it does not exist
$MONGODB_COLLECTION (required) the collection to use. It is created if it does not exist
$MONGODB_QUERY (optional) A query used to find documents in MongoDB.
$MONGODB_OUTPUT (optional) is a relative path in the data space used to save the results in a CSV file.
The output of this task is saved to the local space in a JSON file (result.json) containing a JSON array of the results. It can be aquired in the depending tasks using the result[0] scheme. ]]>
      </description>
      <variables>
        <variable name="MONGODB_COLLECTION" value="star_wars" inherited="false" />
        <variable name="MONGODB_QUERY" value="{&quot;mass&quot;: &quot;32&quot;}" inherited="false" />
        <variable name="MONGODB_OUTPUT" value="" inherited="false" />
        <variable name="MONGODB_DATABASE" value="activeeon" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
      </genericInformation>
      <depends>
        <task ref="Export_to_MongoDB"/>
      </depends>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
# In the Java Home location field, use the value: "/usr" to force using the JRE provided in the docker image below (Recommended).
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters
containerName = 'activeeon/dlm3'
dockerRunCommand =  'docker run '
dockerParameters = '--rm '
# Prepare ProActive home volume
paHomeHost = variables.get("PA_SCHEDULER_HOME")
paHomeContainer = variables.get("PA_SCHEDULER_HOME")
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' '
# Prepare working directory (For Dataspaces and serialized task file)
workspaceHost = localspace
workspaceContainer = localspace
workspaceVolume = '-v '+localspace +':'+localspace+' '
# Prepare container working directory
containerWorkingDirectory = '-w '+workspaceContainer+' '
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
import json
from pymongo import MongoClient
from bson.json_util import dumps, loads

PORT = 27017
MODE= 'QUERY'
MONGODB_OUTPUT = variables.get("MONGODB_OUTPUT")
HOST = variables.get("MONGODB_HOST")
PORT = int(variables.get("MONGODB_PORT"))
DATABASE = variables.get("MONGODB_DATABASE")
COLLECTION = variables.get("MONGODB_COLLECTION")
QUERY = variables.get('MONGODB_QUERY')
USER = variables.get("MONGODB_USER")
# This key is used for getting the password from 3rd party credentials.
MONGODB_PASSWORD_KEY = "mongodb://" + USER + "@" + HOST + ":" + str(PORT)
PASSWORD = credentials.get(MONGODB_PASSWORD_KEY)
MONGODB_URL_KEY = "mongodb://<username>@<hostname>:<port>"

if not HOST:
    print("ERROR: The MONGODB_HOST variable is not provided by the user.")
    sys.exit(1)
if not PORT:
    print("ERROR: The MONGODB_PORT is not provided by the user. Using the default value: " + PORT)
if not DATABASE:
    print("ERROR: The MONGODB_DATABASE variable is not provided by the user.")
    sys.exit(1)
if not COLLECTION:
    print("ERROR: The MONGODB_COLLECTION variable is not provided by the user.")
    sys.exit(1)
if USER:
    if not PASSWORD:
        print("ERROR: The MONGODB_USER and MONGODB_PASSWORD are used in junction. Please add your mongodb password to 3rd-party credentials in the scheduler-portal under the key :\"" + MONGODB_URL_KEY + "\"")
        sys.exit(1)
if QUERY:
    # This is a workaround to force the variable string value into json
    QUERY=loads(variables.get('MONGODB_QUERY'))
else:
    print("The MONGODB_QUERY variable is not provided by the user. Fetching all collections")
    QUERY = {}

IS_LABELED_DATA = 'False'
try:
    LABEL = variables.get("LABEL")
    if LABEL:
        IS_LABELED_DATA='True'
except NameError:
    pass

def connect_mongo(host, port, username, password, db):
    """
    A util for making a connection to mongo
    """

    if username and password:
        mongo_uri = 'mongodb://%s:%s@%s:%s' % (username, password, host, port)
        conn = MongoClient(mongo_uri)
    else:
        print("Connecting without authentification")
        conn = MongoClient(host, port)
    return conn[db]


def read_mongo(db, collection, query, host, port, username, password, no_id=True):
    """
    Read from MongoDB and Store into DataFrame
    """

    # Connect to MongoDB
    db = connect_mongo(host=host, port=port, username=username, password=password, db=db)
    # Make a query to the specific DB and Collection
    cursor = db[collection].find(query)

    # Expand the cursor and deserialize into JSON
    json_result = dumps(list(cursor))

    return json_result

print("BEGIN Import Data from mongoDB")
print("EXECUTING QUERY...")
print('MONGODB_HOST='+HOST)
print('MONGODB_PORT=', PORT)
print('MONGODB_DATABASE='+DATABASE)
print('MONGODB_COLLECTION='+COLLECTION)
print('MONGODB_QUERY='+dumps(QUERY))
if MONGODB_OUTPUT:
    print('MONGODB_OUTPUT='+ MONGODB_OUTPUT)
# Execute search query and return results as JSON String
json_result = read_mongo(DATABASE, COLLECTION, QUERY, HOST,  PORT,  USER,  PASSWORD)

if MONGODB_OUTPUT:
         with open(MONGODB_OUTPUT, 'w') as outfile:
             json.dump(json_result, outfile)

# Write the results as a bytearray.
result = json_result.encode('utf-8')
resultMetadata.put("file.extension", ".json")
resultMetadata.put("file.name", "result.json")
resultMetadata.put("content.type", "application/json")
print("END Import Data")
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="$MONGODB_OUTPUT" accessMode="transferToGlobalSpace"/>
      </outputFiles>
    </task>
    <task name="Start_MongoDB" onTaskError="cancelJob" >
      <description>
        <![CDATA[ Start the MongoDB server as a service. ]]>
      </description>
      <variables>
        <variable name="SERVICE_ID" value="MongoDB" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
      </genericInformation>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN PRE-SCRIPT " + variables.get("PA_TASK_NAME") + " ---")

/*********************************************************************************
* THIS PRESCRIPT MAPS THE SERVICE SPECIFIC VARIABLES WITH GENERIC VARIABLE NAMES *
* THIS AVOIDS YOU FROM CHANGING THE WHOLE PCA WORKFLOWS IMPLEMENTATIONS          *
*********************************************************************************/

variables.put("INSTANCE_NAME", variables.get("MONGODB_INSTANCE_NAME"))
variables.put("USER", variables.get("MONGODB_USER"))
variables.put("PASSWORD", variables.get("MONGODB_PASSWORD"))

println("--- END PRE-SCRIPT " + variables.get("PA_TASK_NAME") + " ---")
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription

println("BEGIN " + variables.get("PA_TASK_NAME"))

/*********************************************************************************
* THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE       *
/********************************************************************************/
def user = variables.get("USER")
def password = variables.get("PASSWORD")
/********************************************************************************/

// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def sessionId = schedulerapi.getSession()

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pcaUrl = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
//apiClient.setDebugging(true)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

def serviceId = variables.get("SERVICE_ID")
def instanceName = variables.get("INSTANCE_NAME")
println("SERVICE_ID:    " + serviceId)
println("INSTANCE_NAME: " + instanceName)

// Check existing service instances
boolean instance_exists = false
List<ServiceInstanceData> service_instances = serviceInstanceRestApi.getServiceInstancesUsingGET()

for (ServiceInstanceData serviceInstanceData : service_instances) {
    if ( (serviceInstanceData.getServiceId() == serviceId) && (serviceInstanceData.getInstanceStatus()  == "RUNNING")){
        if (serviceInstanceData.getVariables().get("INSTANCE_NAME") == instanceName) {
            instance_exists = true
            def instanceId = serviceInstanceData.getInstanceId()
            endpoint = serviceInstanceData.getInstanceEndpoints().entrySet().iterator().next().getValue()
            println("INSTANCE_ID: " + instanceId)
            println("ENDPOINT:    " + endpoint)
            variables.put("INSTANCE_ID", instanceId)
            variables.put("ENDPOINT", endpoint)
            break
        }
  	}
}

println("INSTANCE_EXISTS ? " + instance_exists)

if (!instance_exists){
    // Prepare service description
    ServiceDescription serviceDescription = new ServiceDescription()
    serviceDescription.setBucketName("cloud-automation")
    serviceDescription.setWorkflowName(serviceId)
    serviceDescription.putVariablesItem("INSTANCE_NAME", instanceName)

/*********************************************************************************
* THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE       *
/********************************************************************************/
    serviceDescription.putVariablesItem("USER", user)
    serviceDescription.putVariablesItem("PASSWORD", password)
/********************************************************************************/
    // Run service
    def serviceInstanceData = serviceInstanceRestApi.createRunningServiceInstanceUsingPOST(sessionId, serviceDescription)

    // Acquire service Instance ID
    def serviceInstanceId = serviceInstanceData.getInstanceId()

    // Create synchro channel
    def channel = "Service_Instance_" + serviceInstanceId
    println("CHANNEL: " + channel)
    synchronizationapi.createChannelIfAbsent(channel, false)
    synchronizationapi.waitUntil(channel, "RUNNING", "{k,x -> x == true}")

    // Acquire service endpoint
    serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(serviceInstanceId)
    def instanceId = serviceInstanceData.getInstanceId()
    endpoint = serviceInstanceData.getInstanceEndpoints().entrySet().iterator().next().getValue()

    println("INSTANCE_ID: " + instanceId)
    println("ENDPOINT: " + endpoint)

    variables.put("INSTANCE_ID", instanceId)
    variables.put("ENDPOINT", endpoint)
}

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="MongoDB_Service_Action" onTaskError="cancelJob" >
      <variables>
        <variable name="INSTANCE_ID" value="" inherited="true" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/PCA/PCAUserGuide.html"/>
      </genericInformation>
      <depends>
        <task ref="Import_from_MongoDB"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN " + variables.get("PA_TASK_NAME") + " ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription

// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def sessionId = schedulerapi.getSession()

// Define PCA URL
def schedulerRestUrl = variables.get("PA_SCHEDULER_REST_URL")
def pcaUrl = schedulerRestUrl.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
//apiClient.setDebugging(true)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

def instanceId = variables.get("INSTANCE_ID") as int
println("INSTANCE_ID: " + instanceId)
assert instanceId != null

// Execute action on service
ServiceDescription service = new ServiceDescription()
service.setBucketName("cloud-automation")
service.setWorkflowName(variables.get("ACTION"))
serviceInstanceRestApi.launchServiceInstanceActionUsingPUT(sessionId, instanceId, service)

println("--- END " + variables.get("PA_TASK_NAME") + " ---")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1122px;
            height:646px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-78px;left:-459.25px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_941" style="top: 211px; left: 464.25px;"><a class="task-name"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Parse_Endpoint</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_944" style="top: 339px; left: 464.25px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png" width="20px">&nbsp;<span class="name">Export_to_MongoDB</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_947" style="top: 467px; left: 464.25px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png" width="20px">&nbsp;<span class="name">Import_from_MongoDB</span></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_950" style="top: 83px; left: 464.25px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png" width="20px">&nbsp;<span class="name">Start_MongoDB</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_953" style="top: 595px; left: 464.25px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png" width="20px">&nbsp;<span class="name">MongoDB_Service_Action</span></a></div><svg style="position:absolute;left:501.98171321138256px;top:122.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path></svg><svg style="position:absolute;left:506.5px;top:250.5px" width="31.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 10.5 88 C 20.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M12.435792,66.303232 L15.987162185206767,45.41333564296595 L10.090967520865386,52.50099311777328 L2.1849233029800486,47.75816012210056 L12.435792,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M12.435792,66.303232 L15.987162185206767,45.41333564296595 L10.090967520865386,52.50099311777328 L2.1849233029800486,47.75816012210056 L12.435792,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:517px;top:378.5px" width="26.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 5.5 88 C 15.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.868953124999999,66.78168750000002 L12.848095417762192,46.18537370290451 L6.478576933147113,52.85089950918167 L-1.0826925730561543,47.575749894757394 L7.868953124999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.868953124999999,66.78168750000002 L12.848095417762192,46.18537370290451 L6.478576933147113,52.85089950918167 L-1.0826925730561543,47.575749894757394 L7.868953124999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:522.5px;top:506.5px" width="27.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 6.5 88 C 16.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M8.787796875,66.78168750000002 L13.502214816791486,46.123171980483264 L7.218760132881903,52.86988949607962 L-0.4095831871289066,47.692208722601364 L8.787796875,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M8.787796875,66.78168750000002 L13.502214816791486,46.123171980483264 L7.218760132881903,52.86988949607962 L-0.4095831871289066,47.692208722601364 L8.787796875,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 507px; top: 241px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 507px; top: 201px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 517.5px; top: 369px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 517.5px; top: 329px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 523px; top: 497px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 523px; top: 457px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 507px; top: 113px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 529.5px; top: 625px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 529.5px; top: 585px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>