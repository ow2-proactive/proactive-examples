<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.10"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
    name="MongoDB_Database_Interaction" projectName="MongoDB Workflows"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="MONGODB_DATABASE" value="activeeon" />
    <variable name="MONGODB_INSTANCE_NAME" value="mongodb-server-1" />
    <variable name="MONGODB_PASSWORD" value="proactive" />
    <variable name="MONGODB_USER" value="mlos" />
  </variables>
  <description>
    <![CDATA[ This workflow shows how to use PCA to ease deployment of service dependencies and interact with a MongoDB database. It is a complete example putting together the use of 
1) a PCA service to create a MongoDB database and,
2)  a mongodb connector from data-connectors bucket to interact with this database along with its tow modes: Import and Export. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="database-services"/>
    <info name="Documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
    <info name="group" value="public-objects"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
  </genericInformation>
  <taskFlow>
    <task name="Parse_Endpoint">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="Start_MongoDB_Service"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def mongodb_endpoint = variables.get("mongodb_endpoint")
def MONGODB_HOST
def MONGODB_USER = variables.get("MONGODB_USER")
def MONGODB_PASSWORD = variables.get("MONGODB_PASSWORD")
def MONGODB_PORT
def MONGODB_PASSWORD_KEY

if (mongodb_endpoint != null){
  mongodb_endpoint = mongodb_endpoint.replace("http://", "")
  MONGODB_HOST = mongodb_endpoint.split(":")[0]
  variables.put("MONGODB_HOSTNAME", MONGODB_HOST)
  MONGODB_PORT = mongodb_endpoint.split(":")[1]
  variables.put("MONGODB_PORT", MONGODB_PORT)
  
  // This key is used for getting the password from 3rd party credentials.
  MONGODB_PASSWORD_KEY = "mongodb://" + MONGODB_USER + "@" + MONGODB_HOST + ":" + MONGODB_PORT
  schedulerapi.connect()
  schedulerapi.putThirdPartyCredential(MONGODB_PASSWORD_KEY, MONGODB_PASSWORD)
}
else{
  throw new IOException("MongoDB endpoint not found")
}
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Start_MongoDB_Service"
    
    
    onTaskError="cancelJob" >
      <description>
        <![CDATA[ Start the MongoDB server as a service. ]]>
      </description>
      <variables>
        <variable name="MONGODB_SERVICE_ID" value="MongoDB" inherited="false" />
        <variable name="MONGODB_INSTANCE_NAME" value="mongodb-server-1" inherited="true" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
      </genericInformation>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN Start_MongoDB_Service ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription
http://localhost:8080/studio/#
// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def session_id = schedulerapi.getSession()

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

def service_id = variables.get("MONGODB_SERVICE_ID")
def instance_name = variables.get("MONGODB_INSTANCE_NAME")
def user = variables.get("MONGODB_USER")
def password = variables.get("MONGODB_PASSWORD")
def database = variables.get("MONGODB_DATABASE")
println("*_service_id:    " + service_id)
println("*_instance_name: " + instance_name)
println("*_user: " + user)
println("*_password: " + password)

// Check existing service instances
boolean instance_exists = false
List<ServiceInstanceData> service_instances = service_instance_rest_api.getServiceInstancesUsingGET()

for (ServiceInstanceData service_instance_data : service_instances) {
	if ( (service_instance_data.getServiceId() == service_id) && (service_instance_data.getInstanceStatus()  == "RUNNING")){
      if (service_instance_data.getVariables().get("MONGODB_INSTANCE_NAME") == instance_name) {
        instance_exists = true
        instance_id = service_instance_data.getInstanceId()
  		endpoint = service_instance_data.getInstanceEndpoints().entrySet().iterator().next().getValue()
        println("*_instance_id: " + instance_id)
        println("*_endpoint:    " + endpoint)
        variables.put("MONGODB_INSTANCE_ID", instance_id)
        variables.put("mongodb_endpoint", endpoint)
        break
      }
  	}
}

println("instance_exists: " + instance_exists)

if (!instance_exists){
  // Prepare service description
  ServiceDescription serviceDescription = new ServiceDescription()
  serviceDescription.setBucketName("cloud-automation")
  serviceDescription.setWorkflowName(service_id) 
  serviceDescription.putVariablesItem("MONGODB_INSTANCE_NAME_CL", instance_name)
  serviceDescription.putVariablesItem("MONGODB_USER_CL", user)
  serviceDescription.putVariablesItem("MONGODB_PASSWORD_CL", password)  
  // Run service
  def service_instance_data = service_instance_rest_api.createRunningServiceInstanceUsingPOST(session_id, serviceDescription)
  
  // Acquire service Instance ID
  def service_instance_id = service_instance_data.getInstanceId()
  
  // Create synchro channel
  channel = "Service_Instance_" + service_instance_id
  println("channel: " + channel)
  synchronizationapi.createChannelIfAbsent(channel, false)
  synchronizationapi.waitUntil(channel, "RUNNING", "{k,x -> x == true}")
  
  // Acquire service endpoint
  service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
  def instance_id = service_instance_data.getInstanceId()
  endpoint = service_instance_data.getInstanceEndpoints().entrySet().iterator().next().getValue()
  
  println("*_instance_id: " + instance_id)
  println("*_endpoint: " + endpoint)
  
  variables.put("MONGODB_INSTANCE_ID", instance_id)
  variables.put("mongodb_endpoint", endpoint)
}

println("--- END Start_MongoDB_Service ---")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Export_to_MongoDB">
      <description>
        <![CDATA[ This task allows exporting data to MongoDB.
The task requires the following third-party credentials: {key: mongodb://<username>@<hostname>:<port>, value: MONGODB_PASSWORD}. Please refer to the User documentation to learn how to add third-party credentials.
It uses the following variables:
$MONGODB_DATABASE (required) the database to use. It is created if it does not exist
$MONGODB_COLLECTION (required) the collection to use. It is created if it does not exist
$MONGODB_INPUT (required) A JSON Object/Array to be inserted in MongoDB. This variable can:
 - A String describing the JSON Object/Array
 - A relative path in the data space of a JSON file. ]]>
      </description>
      <variables>
        <variable name="MONGODB_COLLECTION" value="star_wars" inherited="false" />
        <variable name="MONGODB_INPUT" value="star_wars_people.json" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
      </genericInformation>
      <depends>
        <task ref="Parse_Endpoint"/>
      </depends>
      <inputFiles>
        <files  includes="$MONGODB_INPUT" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
# In the Java Home location field, use the value: "/usr" to force using the JRE provided in the docker image below (Recommended).
# Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters 
containerName = 'activeeon/dlm3' 
dockerRunCommand =  'docker run ' 
dockerParameters = '--rm ' 
# Prepare ProActive home volume 
paHomeHost = variables.get("PA_SCHEDULER_HOME") 
paHomeContainer = variables.get("PA_SCHEDULER_HOME") 
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' 
# Prepare working directory (For Dataspaces and serialized task file) 
workspaceHost = localspace 
workspaceContainer = localspace 
workspaceVolume = '-v '+localspace +':'+localspace+' ' 
# Prepare container working directory 
containerWorkingDirectory = '-w '+workspaceContainer+' ' 
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node 
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
from pymongo import MongoClient
from bson.json_util import dumps, loads
import json

def get_input_type(input):
    """
    A util for detecting whether the input string is a valid json or a file path/url
    """
    if input.startswith(("{", "[")):
        print("Exporting a JSON String")
        return loads(input)
    else:
        print("Exporting JSON File:{0}".format(input))
        json_data = open(input, "r").read()
        return loads(json_data)
        

def connect_mongo(host, port, username, password, db):
    """
    A util for making a connection to mongo
    """

    if username and password:
        mongo_uri = 'mongodb://%s:%s@%s:%s' % (username, password, host, port)
        conn = MongoClient(mongo_uri)
    else:
        print("Connecting without authentification")
        conn = MongoClient(host, port)
    return conn[db]

def write_mongo(db, collection, inputs, host, port, username, password, no_id=True):
    """
    Write to MongoDB from a DataFrame
    """

    # Connect to MongoDB
    db = connect_mongo(host=host, port=port, username=username, password=password, db=db)
    # Point to a Collection to write to
    cursor = db[collection]
    # if returns true, then JSON Array
    if isinstance(inputs, list):
        inserts = cursor.insert_many(inputs)
        if len(inserts.inserted_ids) == len(inputs):
            print("Successfully inserted [{0}/{1}] documents.".format(len(inserts.inserted_ids), len(inputs)))
            return 'True'
        else:
            print("Failed to insert all documents. Only [{0}/{1}] were inserted".format(len(inserts.inserted_ids), len(inputs)))
            return 'False'
    elif isinstance(inputs,dict):
        inserts = cursor.insert_one(inputs)
        if inserts.inserted_id:
            print("Successfully inserted 1 documents")
        else:
            print("Failed to insert document.")

HOSTNAME = variables.get("MONGODB_HOSTNAME")
PORT = int(variables.get("MONGODB_PORT"))
DATABASE = variables.get("MONGODB_DATABASE")
COLLECTION = variables.get("MONGODB_COLLECTION")
INPUT = variables.get("MONGODB_INPUT")
USER = variables.get("MONGODB_USER")
# This key is used for getting the password from 3rd party credentials.
MONGODB_PASSWORD_KEY = "mongodb://" + USER + "@" + HOSTNAME + ":" + str(PORT)
PASSWORD = credentials.get(MONGODB_PASSWORD_KEY)
MONGODB_URL_KEY = "mongodb://<username>@<hostname>:<port>"

if not HOSTNAME:
    print("ERROR: The MONGODB_HOSTNAME variable is not provided by the user.")
    sys.exit(1)
if not PORT:
    print("ERROR: The MONGODB_PORT is not provided by the user. Using the default value: " + PORT)
    PORT = 27017
if not DATABASE:
    print("ERROR: The MONGODB_DATABASE variable is not provided by the user.")
    sys.exit(1)
if not COLLECTION:
    print("ERROR: The MONGODB_COLLECTION variable is not provided by the user.")
    sys.exit(1)
if USER:
    if not PASSWORD:
        print("ERROR: The MONGODB_USER and MONGODB_PASSWORD are used in junction. Please add your mongodb password to 3rd-party credentials in the scheduler-portal under the key :\"" + MONGODB_URL_KEY + "\"")
        sys.exit(1)
if INPUT:
    INPUT = get_input_type(INPUT)
else:
    print("ERROR: The MONGODB_INPUT variable is not provided by the user.")
    sys.exit(1)

print("BEGIN Export Data to mongoDB")
print("INSERTING DATA IN MONGODB...")
print('MONGODB_HOSTNAME=' + HOSTNAME)
print('MONGODB_USER=' + USER)
print('MONGODB_PORT=', PORT)
print('MONGODB_DATABASE=' + DATABASE)
print('MONGODB_COLLECTION=' + COLLECTION)
    
# Insert INPUT in mongoDB
write_mongo(DATABASE, COLLECTION, INPUT, HOSTNAME,  PORT,  USER,  PASSWORD)
print("END Export Data")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Import_from_MongoDB">
      <description>
        <![CDATA[ This task allows importing data from MongoDB.
The task requires the following third-party credentials: MONGODB_USERNAME and MONGODB_PASSWORD. Please refer to the User documentation to learn how to add third-party credentials.
It uses the following variables:
$MONGODB_DATABASE (required) the database to use. It is created if it does not exist
$MONGODB_COLLECTION (required) the collection to use. It is created if it does not exist
$MONGODB_QUERY (optional) A query used to find documents in MongoDB.
$MONGODB_OUTPUT (optional) is a relative path in the data space used to save the results in a CSV file.
The output of this task is saved to the local space in a JSON file (result.json) containing a JSON array of the results. It can be aquired in the depending tasks using the result[0] scheme. ]]>
      </description>
      <variables>
        <variable name="MONGODB_COLLECTION" value="star_wars" inherited="false" />
        <variable name="MONGODB_QUERY" value="" inherited="false" />
        <variable name="MONGODB_OUTPUT" value="mongodb-out.json" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
      </genericInformation>
      <depends>
        <task ref="Export_to_MongoDB"/>
      </depends>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
# In the Java Home location field, use the value: "/usr" to force using the JRE provided in the docker image below (Recommended).
# Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters 
containerName = 'activeeon/dlm3' 
dockerRunCommand =  'docker run ' 
dockerParameters = '--rm ' 
# Prepare ProActive home volume 
paHomeHost = variables.get("PA_SCHEDULER_HOME") 
paHomeContainer = variables.get("PA_SCHEDULER_HOME") 
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' 
# Prepare working directory (For Dataspaces and serialized task file) 
workspaceHost = localspace 
workspaceContainer = localspace 
workspaceVolume = '-v '+localspace +':'+localspace+' ' 
# Prepare container working directory 
containerWorkingDirectory = '-w '+workspaceContainer+' ' 
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node 
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
import json
from pymongo import MongoClient
from bson.json_util import dumps, loads

PORT = 27017
MODE= 'QUERY'
MONGODB_OUTPUT = variables.get("MONGODB_OUTPUT")
HOSTNAME = variables.get("MONGODB_HOSTNAME")
PORT = int(variables.get("MONGODB_PORT"))
DATABASE = variables.get("MONGODB_DATABASE")
COLLECTION = variables.get("MONGODB_COLLECTION")
QUERY = variables.get('MONGODB_QUERY')
USER = variables.get("MONGODB_USER")
# This key is used for getting the password from 3rd party credentials.
MONGODB_PASSWORD_KEY = "mongodb://" + USER + "@" + HOSTNAME + ":" + str(PORT)
PASSWORD = credentials.get(MONGODB_PASSWORD_KEY)
MONGODB_URL_KEY = "mongodb://<username>@<hostname>:<port>"

if not HOSTNAME:
    print("ERROR: The MONGODB_HOSTNAME variable is not provided by the user.")
    sys.exit(1)
if not PORT:
    print("ERROR: The MONGODB_PORT is not provided by the user. Using the default value: " + PORT)
if not DATABASE:
    print("ERROR: The MONGODB_DATABASE variable is not provided by the user.")
    sys.exit(1)
if not COLLECTION:
    print("ERROR: The MONGODB_COLLECTION variable is not provided by the user.")
    sys.exit(1)
if USER:
    if not PASSWORD:
        print("ERROR: The MONGODB_USER and MONGODB_PASSWORD are used in junction. Please add your mongodb password to 3rd-party credentials in the scheduler-portal under the key :\"" + MONGODB_URL_KEY + "\"")
        sys.exit(1)
if QUERY:
    # This is a workaround to force the variable string value into json
    QUERY=loads(variables.get('MONGODB_QUERY'))
else:
    print("The MONGODB_QUERY variable is not provided by the user. Fetching all collections")
    QUERY = {}

IS_LABELED_DATA = 'False'
try:
    LABEL = variables.get("LABEL")
    if LABEL:
        IS_LABELED_DATA='True'
except NameError:
    pass

def connect_mongo(host, port, username, password, db):
    """
    A util for making a connection to mongo
    """

    if username and password:
        mongo_uri = 'mongodb://%s:%s@%s:%s' % (username, password, host, port)
        conn = MongoClient(mongo_uri)
    else:
        print("Connecting without authentification")
        conn = MongoClient(host, port)
    return conn[db]


def read_mongo(db, collection, query, host, port, username, password, no_id=True):
    """
    Read from MongoDB and Store into DataFrame
    """

    # Connect to MongoDB
    db = connect_mongo(host=host, port=port, username=username, password=password, db=db)
    # Make a query to the specific DB and Collection
    cursor = db[collection].find(query)

    # Expand the cursor and deserialize into JSON
    json_result = dumps(list(cursor))

    return json_result

print("BEGIN Import Data from mongoDB")
print("EXECUTING QUERY...")
print('MONGODB_HOSTNAME='+HOSTNAME)
print('MONGODB_PORT=', PORT)
print('MONGODB_DATABASE='+DATABASE)
print('MONGODB_COLLECTION='+COLLECTION)
print('MONGODB_QUERY='+dumps(QUERY))
if MONGODB_OUTPUT:
    print('MONGODB_OUTPUT='+ MONGODB_OUTPUT)
# Execute search query and return results as JSON String
json_result = read_mongo(DATABASE, COLLECTION, QUERY, HOSTNAME,  PORT,  USER,  PASSWORD)

if MONGODB_OUTPUT:
         with open(MONGODB_OUTPUT, 'w') as outfile:
             json.dump(json_result, outfile)

# Write the results as a bytearray.
result = json_result.encode('utf-8')
resultMetadata.put("file.extension", ".json")
resultMetadata.put("file.name", "result.json")
resultMetadata.put("content.type", "application/json")
print("END Import Data")
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="$MONGODB_OUTPUT" accessMode="transferToGlobalSpace"/>
      </outputFiles>
    </task>
    <task name="Finish_MongoDB_Service"


    onTaskError="cancelJob" >
      <description>
        <![CDATA[ Finish the MongoDB service. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
      </genericInformation>
      <depends>
        <task ref="Import_from_MongoDB"/>
      </depends>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN Finish_MongoDB_Service ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription

// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def session_id = schedulerapi.getSession()

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

def instance_id = (int) variables.get("MONGODB_INSTANCE_ID")
println("*_instance_id: " + instance_id)
assert instance_id != null

// Finish service
ServiceDescription service = new ServiceDescription()
service.setBucketName("cloud-automation")
service.setWorkflowName("Finish_MongoDB")
service_instance_rest_api.launchServiceInstanceActionUsingPUT(session_id, instance_id, service)

println("--- END Finish_MongoDB_Service ---")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
  </taskFlow>
</job>