<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="Elasticsearch_Database_Interaction" projectName="Elasticsearch Workflows" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <description>
    <![CDATA[ This workflow shows how to use PCA to ease deployment of service dependencies and interact with an elasticsearch database. It is a complete example putting together the use of
1) a PCA service to create an elasticsearch database and,
2)  an elasticsearch connector from data-connectors bucket to interact with this database along with its tow modes: Import and Export. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="database-services"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.png"/>
    <info name="Documentation" value="PCA/PCAUserGuide.html"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Parse_Endpoint" >
      <description>
        <![CDATA[ This task aims to parse PCA endpoint in order to retrieve a HOST and a PORT number to use them as an input in the data connector tasks. ]]>
      </description>
      <depends>
        <task ref="Start_Elasticsearch"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("endpoint: " + results[0].toString())
def endpoint = new URL(results[0].toString())
variables.put("ELASTICSEARCH_HOST",endpoint.getHost())
variables.put("ELASTICSEARCH_PORT",endpoint.getPort())
// Wait for database sever to be up and fully running.
sleep(3000)
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Start_Elasticsearch" 
    
    onTaskError="cancelJob" >
      <description>
        <![CDATA[ Start the Elasticsearch server as a service. ]]>
      </description>
      <variables>
        <variable name="SERVICE_ID" value="Elasticsearch" inherited="false" />
        <variable name="INSTANCE_NAME" value="elasticsearch-server-1" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.png"/>
        <info name="task.documentation" value="PCA/PCAUserGuide.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Service_Start/raw" language="groovy"></file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Import_from_Elasticsearch" >
      <description>
        <![CDATA[ Load data from Elasticsearch.
If your server requires authentification, then use the $ELASTICSEARCH_USER variable then add the corresponding password to 3rd party credentials under the key: elasticsearch://<ELASTICSEARCH_USER>@<ELASTICSEARCH_HOST>:<ELASTICSEARCH_PORT>
It also requires a $QUERY and an $INDEX to fetch data.
The imported data is exported in a JSON format. ]]>
      </description>
      <variables>
        <variable name="ELASTICSEARCH_QUERY" value="{&quot;query&quot;: { &quot;match&quot;: {&quot;mass&quot;: &quot;77&quot;} }}" inherited="false" />
        <variable name="ELASTICSEARCH_INDEX" value="activeeon" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.png"/>
        <info name="task.documentation" value="user/ProActiveUserGuide.html#_nosql"/>
      </genericInformation>
      <depends>
        <task ref="Export_to_Elasticsearch"/>
      </depends>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_dlm3/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
import json
from elasticsearch import Elasticsearch

print("BEGIN Import Data from Elasticsearch")

HOST = variables.get("ELASTICSEARCH_HOST")
PORT = int(variables.get("ELASTICSEARCH_PORT"))
INDEX = variables.get("ELASTICSEARCH_INDEX")
USER = variables.get("ELASTICSEARCH_USER")
PASSWORD = None

if not HOST:
    print("[ERROR] ELASTICSEARCH_HOST not defined by the user.")
    sys.exit(1)
if not PORT:
    PORT = 9200
    print("[WARNING] ELASTICSEARCH_PORT not defined by the user. Using the default value: " + PORT)
if not INDEX:
    INDEX = ""
    print("[WARNING] ELASTICSEARCH_INDEX not defined by the user. Searching in all indices.")
if USER:
    # This key is used for getting the password from 3rd party credentials.
    ELASTICSEARCH_PASSWORD_KEY = "elasticsearch://" + USER + "@" + HOST + ":" + str(PORT)
    PASSWORD = credentials.get(ELASTICSEARCH_PASSWORD_KEY)
    if not PASSWORD:
        print("[ERROR] The ELASTICSEARCH_USER is used in junction with a password. Please add the corresponding password to 3rd-party credentials in the scheduler-portal under the key :\"" + ELASTICSEARCH_URL_KEY + "\"")
        sys.exit(1)
if variables.get("ELASTICSEARCH_QUERY"):
    # This is a workaround to force the variable string value into json
    exec("QUERY=json.loads(variables.get('ELASTICSEARCH_QUERY'))")
else:
    #print("ELASTICSEARCH_QUERY not defined by the user.")
    #sys.exit(1)
    print("[WARNING] ELASTICSEARCH_QUERY not defined by the user. Fetching all documents.")
    QUERY = { "query": { "match_all": {} } }

def connect(host, port, username, password):
    """ A util for making a connection to elasticsearch """

    # Connect to cluster over HTTP:
    es_header = [{
        'host': host,
        'port': port}]
    # If a username is provided, then connect through SSL
    if username:
        es_header[0]['use_ssl'] = True
        es_header[0]['http_auth'] = (username,password)
    # Instantiate the new Elasticsearch connection:
    es = Elasticsearch(es_header)
    return es

def read_elasticsearch(index, query, host, port, username, password):

    # Connect to elasticsearch
    es = connect(host=host, port=port, username=username, password=password)


    # Make a query to the specific DB and Collection
    res = es.search(index=index, body=query)
    print("%d documents found" % res['hits']['total'])

    return res

print("EXECUTING QUERY...")
print('ELASTICSEARCH_HOST=', HOST)
print('ELASTICSEARCH_PORT=', PORT)
print('ELASTICSEARCH_USER=', USER)
print('ELASTICSEARCH_INDEX=', INDEX)
print('ELASTICSEARCH_QUERY=', json.dumps(QUERY))

query_results= read_elasticsearch(INDEX, QUERY, HOST,  PORT,  USER,  PASSWORD)

#**************Preview Data*********************
result = json.dumps(query_results).encode('utf-8')
resultMetadata.put("file.extension", ".json")
resultMetadata.put("file.name", "result.json")
resultMetadata.put("content.type", "application/json")
#***********************************************
print("END Import Data from Elasticsearch")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Export_to_Elasticsearch" >
      <description>
        <![CDATA[ This task allows exporting data to ElasticSearch.
It uses the following variables:
ELASTICSEARCH_USER (optional) If your server requires authentification, then please add the corresponding password to 3rd party credentials under the key: elasticsearch://<ELASTICSEARCH_USER>@<ELASTICSEARCH_HOST>:<ELASTICSEARCH_PORT>
ELASTICSEARCH_INDEX (required) the index to use. It is created if it does not exist
ELASTICSEARCH_DOC_TYPE (required) the documents type.
ELASTICSEARCH_INPUT (required) A JSON Object/Array to be indexed in ElasticSearch. This variable can:
 - A String describing the JSON Object/Array
 - A relative path in the data space of a JSON file. ]]>
      </description>
      <variables>
        <variable name="ELASTICSEARCH_INDEX" value="activeeon" inherited="false" />
        <variable name="ELASTICSEARCH_DOC_TYPE" value="star_wars" inherited="false" />
        <variable name="ELASTICSEARCH_INPUT" value="star_wars_people.json" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.png"/>
        <info name="task.documentation" value="user/ProActiveUserGuide.html#_nosql"/>
      </genericInformation>
      <depends>
        <task ref="Parse_Endpoint"/>
      </depends>
      <inputFiles>
        <files  includes="$ELASTICSEARCH_INPUT" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_dlm3/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
from elasticsearch import Elasticsearch
from elasticsearch.helpers import bulk
from bson.json_util import dumps, loads

ELASTICSEARCH_URL_KEY = "elasticsearch://<username>@<hostname>:<port>"

def get_input_json(input):
    """
    A util for detecting whether the input string is a valid json or a file path/url
    """
    if input.startswith(("{", "[")):
        print("Exporting a JSON String")
        return loads(input)
    else:
        print("Exporting JSON File:{0}".format(input))
        json_data = open(input, "r").read()
        return loads(json_data)

def connect(host, port, username, password):
    """ A util for making a connection to elasticsearch """

    # Connect to cluster over HTTP:
    es_header = [{
        'host': host,
        'port': port}]
    # If a username is provided, then connect through SSL
    if username:
        es_header[0]['use_ssl'] = True
        es_header[0]['http_auth'] = (username,password)
    # Instantiate the new Elasticsearch connection:
    es = Elasticsearch(es_header)
    return es

def write_elasticsearch(index, inputs, doc_type, host, port, username, password):

    # Connect to elasticsearch
    es = connect(host=host, port=port, username=username, password=password)

    # Create an index if it does not exist
    if not es.indices.exists(index=index):
        es.indices.create(index=index,body={})

    if isinstance(inputs, list):
        res = bulk(es, inputs, index=index,doc_type=doc_type, raise_on_error=True)
        if res[0] == len(inputs):
            print("Successfully inserted [{0}/{1}] documents.".format(res[0], len(inputs)))
            return 'True'
        else:
            print("Failed to insert all documents. Only [{0}/{1}] were inserted".format(res[0], len(inputs)))
            return 'False'
    elif isinstance(inputs,dict):
        res = es.index(index=index, doc_type=doc_type, body=inputs)
        if res:
            print("Successfully inserted 1 documents")
            return 'True'
        else:
            print("Failed to insert document.")
            return 'False'

HOST = variables.get("ELASTICSEARCH_HOST")
PORT = int(variables.get("ELASTICSEARCH_PORT"))
INDEX = variables.get("ELASTICSEARCH_INDEX")
DOC_TYPE = variables.get("ELASTICSEARCH_DOC_TYPE")
INPUT = get_input_json(variables.get("ELASTICSEARCH_INPUT"))
USER = variables.get("ELASTICSEARCH_USER")
PASSWORD= None

if not HOST:
    print("[ERROR] ELASTICSEARCH_HOST not defined by the user.")
    sys.exit(1)
if not PORT:
    PORT = 9200
    print("[WARNING] ELASTICSEARCH_PORT not defined by the user. Using the default value: " + PORT)
if not INDEX:
    print("[ERROR] ELASTICSEARCH_INDEX not defined by the user.")
    sys.exit(1)
if not DOC_TYPE:
    print("[ERROR] ELASTICSEARCH_DOC_TYPE not defined by the user.")
    sys.exit(1)
if USER:
    # This key is used for getting the password from 3rd party credentials.
    ELASTICSEARCH_PASSWORD_KEY = "elasticsearch://" + USER + "@" + HOST + ":" + str(PORT)
    PASSWORD = credentials.get(ELASTICSEARCH_PASSWORD_KEY)
    if not PASSWORD:
        print("[ERROR] The ELASTICSEARCH_USER is used in junction with a password. Please add the corresponding password to 3rd-party credentials in the scheduler-portal under the key :\"" + ELASTICSEARCH_URL_KEY + "\"")
        sys.exit(1)

print('BEGIN Export Data to Elasticsearch')
print('ELASTICSEARCH_HOST=', HOST)
print('ELASTICSEARCH_PORT=', PORT)
print('ELASTICSEARCH_USER=', USER)
print('ELASTICSEARCH_INDEX=', INDEX)

# Insert INPUT in Elasticsearch
write_elasticsearch(INDEX, INPUT, DOC_TYPE, HOST,  PORT,  USER,  PASSWORD)
print("END Export Data to Elasticsearch")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Elasticsearch_Service_Action" 
    
    onTaskError="cancelJob" >
      <variables>
        <variable name="INSTANCE_ID" value="" inherited="false" />
        <variable name="INSTANCE_NAME" value="elasticsearch-server-1" inherited="false" />
        <variable name="ACTION" value="Finish_Elasticsearch" inherited="true" model="PA:LIST(Pause_Elasticsearch, Resume_Elasticsearch, Finish_Elasticsearch)"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.png"/>
        <info name="task.documentation" value="PCA/PCAUserGuide.html"/>
      </genericInformation>
      <depends>
        <task ref="Import_from_Elasticsearch"/>
      </depends>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Service_Action/raw" language="groovy"></file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2854px;
            height:3248px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-362px;left:-1135px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_871" style="top: 495px; left: 1140px;"><a class="task-name"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Parse_Endpoint</span></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_874" style="top: 367px; left: 1141px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.png" width="20px">&nbsp;<span class="name">Start_Elasticsearch</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_877" style="top: 751px; left: 1141px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.png" width="20px">&nbsp;<span class="name">Import_from_Elasticsearch</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_880" style="top: 623px; left: 1141px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.png" width="20px">&nbsp;<span class="name">Export_to_Elasticsearch</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_883" style="top: 880px; left: 1141px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.png" width="20px">&nbsp;<span class="name">Elasticsearch_Service_Action</span></a></div><svg style="position:absolute;left:1182.5px;top:406.5px" width="29.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 18.5 50 8.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.1068640000000003,66.303232 L7.664175659289976,47.500924057181315 L-0.11740982136979405,52.44530747750635 L-6.1937488632036715,45.511469878551104 L-2.1068640000000003,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.1068640000000003,66.303232 L7.664175659289976,47.500924057181315 L-0.11740982136979405,52.44530747750635 L-6.1937488632036715,45.511469878551104 L-2.1068640000000003,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:1202px;top:662.5px" width="26.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 5.5 88 C 15.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.868953124999999,66.78168750000002 L12.848095417762192,46.18537370290451 L6.478576933147113,52.85089950918167 L-1.0826925730561543,47.575749894757394 L7.868953124999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.868953124999999,66.78168750000002 L12.848095417762192,46.18537370290451 L6.478576933147113,52.85089950918167 L-1.0826925730561543,47.575749894757394 L7.868953124999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:1182.5px;top:534.5px" width="40.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 19.5 88 C 29.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M20.665968,66.303232 L21.850572046463647,45.146750410352304 L16.787023539475157,52.8513254484303 L8.398665494893953,49.02569487087714 L20.665968,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M20.665968,66.303232 L21.850572046463647,45.146750410352304 L16.787023539475157,52.8513254484303 L8.398665494893953,49.02569487087714 L20.665968,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:1207.5px;top:790.5px" width="27.5" height="90" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 6.5 89 C 16.5 39 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M8.777936,67.21769599999999 L13.432655819907698,46.54564764000048 L7.168717314686422,53.31048868786009 L-0.47455149223220694,48.15486632531406 L8.777936,67.21769599999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M8.777936,67.21769599999999 L13.432655819907698,46.54564764000048 L7.168717314686422,53.31048868786009 L-0.47455149223220694,48.15486632531406 L8.777936,67.21769599999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1183px; top: 525px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1183px; top: 485px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1191.5px; top: 397px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1208px; top: 781px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1208px; top: 741px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1202.5px; top: 653px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1202.5px; top: 613px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 1214.5px; top: 910px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1214.5px; top: 870px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>