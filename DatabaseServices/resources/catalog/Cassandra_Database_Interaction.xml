<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="Cassandra_Database_Interaction" projectName="Cassandra Workflows" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="ENV_VARS" value="" />
    <variable name="CASSANDRA_KEYSPACE" value="demo" />
  </variables>
  <description>
    <![CDATA[ This workflow shows how to deploy and use a PCA Cassandra service.
It demonstrates how to start a Cassandra database server using the PCA client API, export and import data from the database then stop the service. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="database-services"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/cassandra.png"/>
    <info name="Documentation" value="user/ProActiveUserGuide.html#_sql"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Parse_Endpoint" >
      <description>
        <![CDATA[ This task aims to parse PCA endpoint in order to retrieve a HOST and a PORT number to use them as an input in the data connector tasks. ]]>
      </description>
      <depends>
        <task ref="Start_Cassandra"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def endpoint = new URL(results[0].toString())
variables.put("CASSANDRA_HOST",endpoint.getHost())
variables.put("CASSANDRA_PORT",endpoint.getPort())
variables.put("CASSANDRA_ENV_VARS", variables.get("ENV_VARS"))
// Wait for database sever to be up and fully running.
sleep(3000)
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Prepare_Cassandra_Cluster" >
      <description>
        <![CDATA[ This task aims to prepare the cassandra cluster by creating a keyspace and add authentication. ]]>
      </description>
      <depends>
        <task ref="Parse_Endpoint"/>
      </depends>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_dlm3/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import sys
import time
from cassandra.cluster import Cluster

HOST = variables.get("CASSANDRA_HOST")
PORT = variables.get("CASSANDRA_PORT")
KEYSPACE = variables.get("CASSANDRA_KEYSPACE")
if HOST is None:
    print("CASSANDRA_HOST not defined by the user.")
    sys.exit(1)
if PORT is None:
    print("CASSANDRA_PORT not defined by the user. Using the default value: 9042")
    PORT = 9042
if KEYSPACE is None:
    print("CASSANDRA_KEYSPACE not defined by the user.")
    sys.exit(1)

# This value is based on an average estimation of how long it takes cassandra cluster to be up
# Increase this value if this task fails at first attempt but succeeds at the second.
SLEEP_TIME = 15

# Wait for cassandra cluster to be up
time.sleep(SLEEP_TIME)

cluster = Cluster([HOST], port=PORT)
session = cluster.connect()
print("creating keyspace..."+ KEYSPACE)
session.execute("""CREATE KEYSPACE IF NOT EXISTS %s WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': '1' } """ % KEYSPACE)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            368
        </positionTop>
        <positionLeft>
            632.5
        </positionLeft>
      </metadata>
    </task>
    <task name="Start_Cassandra" 
    
    onTaskError="cancelJob" >
      <description>
        <![CDATA[ Start the Cassandra server as a service. ]]>
      </description>
      <variables>
        <variable name="SERVICE_ID" value="Cassandra" inherited="false" />
        <variable name="INSTANCE_NAME" value="cassandra-server" inherited="false" />
        <variable name="ENV_VARS" value="" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/cassandra.png"/>
        <info name="task.documentation" value="PCA/PCAUserGuide.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Service_Start/raw" language="groovy">
            <arguments>
              <argument value="ENV_VARS"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Cassandra_Service_Action" 
    
    onTaskError="cancelJob" >
      <variables>
        <variable name="INSTANCE_ID" value="" inherited="false" />
        <variable name="INSTANCE_NAME" value="cassandra-server" inherited="false" />
        <variable name="ACTION" value="Finish_Cassandra" inherited="false" model="PA:LIST(Pause_Cassandra, Resume_Cassandra, Finish_Cassandra)"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/cassandra.png"/>
        <info name="task.documentation" value="PCA/PCAUserGuide.html"/>
      </genericInformation>
      <depends>
        <task ref="Import_from_Cassandra"/>
      </depends>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Service_Action/raw" language="groovy"></file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Import_from_Cassandra" >
      <description>
        <![CDATA[ This task allows importing data from Cassandra.
The task requires the following third-party credentials: CASSANDRA_USERNAME and CASSANDRA_PASSWORD. Please refer to the User documentation to learn how to add third-party credentials.
It requires the following variables:
CASSANDRA_KEYSPACE: Keyspace to use.
CASSANDRA_QUERY: Query to fetch data.
CASSANDRA_OUPUT: Relative path in the data space used to save the results in a CSV file. ]]>
      </description>
      <variables>
        <variable name="CASSANDRA_QUERY" value="SELECT * FROM diabetes" inherited="false" />
        <variable name="CASSANDRA_OUTPUT" value="" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/cassandra.png"/>
        <info name="task.documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
      </genericInformation>
      <depends>
        <task ref="Export_to_Cassandra"/>
      </depends>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_dlm3/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
import numpy as np
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from cassandra.query import dict_factory

print("BEGIN Import_Data from CASSANDRA ...")
AUTHENTICATION = False
HOST = variables.get("CASSANDRA_HOST")
PORT = variables.get("CASSANDRA_PORT")
KEYSPACE = variables.get("CASSANDRA_KEYSPACE")
CASSANDRA_USERNAME = credentials.get("CASSANDRA_USERNAME")
CASSANDRA_PASSWORD = credentials.get("CASSANDRA_PASSWORD")
QUERY = variables.get("CASSANDRA_QUERY")
CASSANDRA_OUTPUT = variables.get("CASSANDRA_OUTPUT")

if HOST is None:
    print("CASSANDRA_HOST not defined by the user.")
    sys.exit(1)
if PORT is None:
    print("CASSANDRA_PORT not defined by the user. Using the default value: 9042")
    PORT = 9042
if KEYSPACE is None: 
    print("CASSANDRA_KEYSPACE not defined by the user.")
    sys.exit(1)
if (CASSANDRA_USERNAME is None and CASSANDRA_PASSWORD is not None) or (CASSANDRA_USERNAME is not None and CASSANDRA_PASSWORD is None):
    print("[ERROR] CASSANDRA_USERNAME and CASSANDRA_PASSWORD are used in junction. They should be either both entered or both blank.")
    sys.exit(1)
if CASSANDRA_USERNAME is not None and CASSANDRA_PASSWORD is not None:
    AUTHENTICATION = True
    print("*******Authentication is enabled*******")
else:
    print("*******Authentication is not enabled*******")
if QUERY is None:
    print("CASSANDRA_QUERY not defined by the user.")
    sys.exit(1)
    
########

def pandas_factory(colnames, rows):
    return pd.DataFrame(rows, columns=colnames)
auth_provider = PlainTextAuthProvider(
                    username=CASSANDRA_USERNAME, password=CASSANDRA_PASSWORD)
cluster = Cluster(contact_points=[HOST], port=PORT, auth_provider=auth_provider)
session = cluster.connect(KEYSPACE)
session.row_factory = pandas_factory
#10000000 needed for large queries, otherwise driver will do pagination. Default is 50000.
session.default_fetch_size = 10000000

print("EXECUTING QUERY...")
print('CASSANDRA_HOST='+HOST)
print('CASSANDRA_PORT=', PORT)
print('CASSANDRA_KEYSPACE='+KEYSPACE)
print('CASSANDRA_QUERY='+QUERY)
if CASSANDRA_OUTPUT:
    print('CASSANDRA_OUTPUT='+CASSANDRA_OUTPUT)

rows = session.execute(QUERY)
dataframe = rows._current_rows

columns_name = dataframe.columns
columns_number = len(columns_name)
data = dataframe.values
data_df = pd.DataFrame(data=data,columns=columns_name)


COLUMNS_NAME_JSON = pd.Series(columns_name).to_json()
DATA_TRAIN_DF_JSON = data_df.to_json(orient='split')
DATA_TEST_DF_JSON = data_df.to_json(orient='split')
DATAFRAME_JSON = dataframe.to_json(orient='split')


try:
    variables.put("DATAFRAME_JSON", DATAFRAME_JSON)
    variables.put("COLUMNS_NAME_JSON", COLUMNS_NAME_JSON)
    variables.put("DATA_TRAIN_DF_JSON", DATA_TRAIN_DF_JSON)
    variables.put("DATA_TEST_DF_JSON", DATA_TEST_DF_JSON)
    
    # Write results to the task result in CSV format
    result = dataframe.to_csv(index=False).encode('utf-8')
    resultMetadata.put("file.extension", ".csv")
    resultMetadata.put("file.name", "result.csv")
    resultMetadata.put("content.type", "text/csv")
    
    # If an CASSANDRA_OUTPUT path in the dataspace is designated, then write to this file.
    if CASSANDRA_OUTPUT:
         dataframe.to_csv(path_or_buf=CASSANDRA_OUTPUT, index=False)
except NameError:
    pass

#***********************************************
print("END Import_Data")
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="$CASSANDRA_OUTPUT" accessMode="transferToGlobalSpace"/>
      </outputFiles>
    </task>
    <task name="Export_to_Cassandra" >
      <description>
        <![CDATA[ This task allows exporting data to Cassandra.
The task requires the following third-party credentials: CASSANDRA_USERNAME and CASSANDRA_PASSWORD. Please refer to the User documentation to learn how to add third-party credentials.
It requires the following variables:
CASSANDRA_TABLE (required) Data is stored in tables containing rows of columns, similar to SQL definitions.. It is created if it does not exist
CASSANDRA_KEY (required) A primary key identifies the location and order of stored data. The primary key is defined when the table is created and cannot be altered.
CASSANDRA_INPUT (required) is the relative path of the CSV file that contains data to be imported. This variable can:
 - An URL. Valid URL schemes include http, ftp, s3, and file. 
 - A relative path in the data space of a csv file. ]]>
      </description>
      <variables>
        <variable name="CASSANDRA_TABLE" value="diabetes" inherited="false" />
        <variable name="CASSANDRA_PRIMARY_KEY" value="preg" inherited="false" />
        <variable name="CASSANDRA_INPUT" value="pima-indians-diabetes.csv" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/cassandra.png"/>
        <info name="task.documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
      </genericInformation>
      <depends>
        <task ref="Prepare_Cassandra_Cluster"/>
      </depends>
      <inputFiles>
        <files  includes="$CASSANDRA_INPUT" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_dlm3/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
import numpy as np
import re
import sys
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from cassandra.query import dict_factory

print("BEGIN Export_Data to CASSANDRA ...")
AUTHENTICATION = False
HOST = variables.get("CASSANDRA_HOST")
PORT = variables.get("CASSANDRA_PORT")
KEYSPACE = variables.get("CASSANDRA_KEYSPACE")
CASSANDRA_USERNAME = credentials.get("CASSANDRA_USERNAME")
CASSANDRA_PASSWORD = credentials.get("CASSANDRA_PASSWORD")
TABLE = variables.get("CASSANDRA_TABLE")
CASSANDRA_INPUT = variables.get("CASSANDRA_INPUT")
PRIMARY_KEY = variables.get("CASSANDRA_PRIMARY_KEY")

if HOST is None:
    print("CASSANDRA_HOST not defined by the user.")
    sys.exit(1)
if PORT is None:
    print("CASSANDRA_PORT not defined by the user. Using the default value: 9042")
    PORT = 9042
if KEYSPACE is None: 
    print("CASSANDRA_KEYSPACE not defined by the user.")
    sys.exit(1)
if (CASSANDRA_USERNAME is None and CASSANDRA_PASSWORD is not None) or (CASSANDRA_USERNAME is not None and CASSANDRA_PASSWORD is None):
    print("[ERROR] CASSANDRA_USERNAME and CASSANDRA_PASSWORD are used in junction. They should be either both entered or both blank.")
    sys.exit(1)
if CASSANDRA_USERNAME is not None and CASSANDRA_PASSWORD is not None:
    AUTHENTICATION = True
    print("*******Authentication is enabled*******")
else:
    print("*******Authentication is not enabled*******")
if TABLE is None:
    print("CASSANDRA_TABLE not defined by the user.")
    sys.exit(1)
if CASSANDRA_INPUT is None:
    print("CASSANDRA_INPUT not defined by the user.")
    sys.exit(1)
if PRIMARY_KEY is None:
    print("PRIMARY_KEY not defined by the user.")
    sys.exit(1)

########
if AUTHENTICATION:
    auth_provider = PlainTextAuthProvider(
                    username=CASSANDRA_USERNAME, password=CASSANDRA_PASSWORD)
    cluster = Cluster(contact_points=[HOST], port=PORT, auth_provider=auth_provider)
else:
    cluster = Cluster(contact_points=[HOST], port=PORT)

session = cluster.connect(KEYSPACE)

print("INSERTING DATA IN CASSANDRA...")
print('CASSANDRA_HOST='+HOST)
print('CASSANDRA_PORT=', PORT)
print('CASSANDRA_KEYSPACE='+KEYSPACE)
print('CASSANDRA_TABLE=' + TABLE)
print('CASSANDRA_PRIMARY_KEY=' + PRIMARY_KEY)

dataframe = pd.read_csv(CASSANDRA_INPUT, sep='\t|;|,',index_col=None, engine='python')
column_names = list(dataframe.columns.values) 
column_types= re.sub("\d", "",','.join('{}'.format(*k) for k in zip(dataframe.dtypes))).split(',')
TABLE_HEADER = ',\n'.join('{} {}'.format(*t) for t in zip(column_names, column_types))
CREATE_TABLE = """CREATE TABLE IF NOT EXISTS {0}.{1}({2},
  PRIMARY KEY ({3}));""".format(KEYSPACE, TABLE, TABLE_HEADER, PRIMARY_KEY)

session.execute(CREATE_TABLE)
INSERT_STATEMENT = """ INSERT INTO {0} ({1}) VALUES """.format(TABLE, ','.join(map(str, column_names)))
BATCH_SIZE = dataframe.size
BATCH_QUERY = 'BEGIN BATCH\n'
for row in dataframe.itertuples(index = False):
    BATCH_QUERY += """{0}({1})\n""".format(INSERT_STATEMENT ,','.join(map(str, row)))
BATCH_QUERY += 'APPLY BATCH;'
try:
    session.execute(BATCH_QUERY)
except Exception as e:
    print(e)
    sys.exit(1)
print("END Export_Data")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2864px;
            height:3248px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-107px;left:-627.5px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_346" style="top: 240px; left: 632.5px;"><a class="task-name"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Parse_Endpoint</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_349" style="top: 368px; left: 632.5px;"><a class="task-name"><img src="/studio/images/Python.png" width="20px">&nbsp;<span class="name">Prepare_Cassandra_Cluster</span></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_352" style="top: 112px; left: 632.5px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/cassandra.png" width="20px">&nbsp;<span class="name">Start_Cassandra</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_355" style="top: 752px; left: 632.5px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/cassandra.png" width="20px">&nbsp;<span class="name">Cassandra_Service_Action</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_358" style="top: 624px; left: 632.5px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/cassandra.png" width="20px">&nbsp;<span class="name">Import_from_Cassandra</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_361" style="top: 496px; left: 632.5px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/cassandra.png" width="20px">&nbsp;<span class="name">Export_to_Cassandra</span></a></div><svg style="position:absolute;left:675px;top:151.5px" width="23" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 12 50 2 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.6529999999999996,66.78168750000002 L5.422684726887218,47.19129913754225 L-1.8927913941925154,52.80234263424697 L-8.556660138865833,46.431090531734775 L-2.6529999999999996,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.6529999999999996,66.78168750000002 L5.422684726887218,47.19129913754225 L-1.8927913941925154,52.80234263424697 L-8.556660138865833,46.431090531734775 L-2.6529999999999996,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:675px;top:279.5px" width="49" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 28 88 C 38 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M28.3293185,65.8307285 L27.243134379193783,44.66896571766761 L23.033139643665223,52.87115715208451 L14.283563031278282,49.96514457400239 L28.3293185,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M28.3293185,65.8307285 L27.243134379193783,44.66896571766761 L23.033139643665223,52.87115715208451 L14.283563031278282,49.96514457400239 L28.3293185,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:693.5px;top:663.5px" width="27.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 6.5 88 C 16.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M8.787796875,66.78168750000002 L13.502214816791486,46.123171980483264 L7.218760132881903,52.86988949607962 L-0.4095831871289066,47.692208722601364 L8.787796875,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M8.787796875,66.78168750000002 L13.502214816791486,46.123171980483264 L7.218760132881903,52.86988949607962 L-0.4095831871289066,47.692208722601364 L8.787796875,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:688px;top:535.5px" width="26.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 5.5 88 C 15.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.868953124999999,66.78168750000002 L12.848095417762192,46.18537370290451 L6.478576933147113,52.85089950918167 L-1.0826925730561543,47.575749894757394 L7.868953124999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.868953124999999,66.78168750000002 L12.848095417762192,46.18537370290451 L6.478576933147113,52.85089950918167 L-1.0826925730561543,47.575749894757394 L7.868953124999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:688px;top:407.5px" width="36" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 25 50 15 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-1.5508800000000005,66.303232 L9.739006151742196,48.37173817821538 L1.575805362924103,52.656846447727325 L-3.9073794005304716,45.245052815291274 L-1.5508800000000005,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-1.5508800000000005,66.303232 L9.739006151742196,48.37173817821538 L1.575805362924103,52.656846447727325 L-3.9073794005304716,45.245052815291274 L-1.5508800000000005,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 675.5px; top: 270px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 675.5px; top: 230px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 703.5px; top: 398px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 703.5px; top: 358px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 677.5px; top: 142px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 700.5px; top: 782px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 700.5px; top: 742px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 694px; top: 654px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 694px; top: 614px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 688.5px; top: 526px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 688.5px; top: 486px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>
