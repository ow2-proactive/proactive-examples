<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="Elasticsearch_Service_Start" projectName="Elasticsearch" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="ELASTICSEARCH_INSTANCE_NAME" value="elasticsearch-server-1" />
  </variables>
  <description>
    <![CDATA[ Start the Elasticsearch server as a service. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="database-services"/>
    <info name="Documentation" value="https://doc.activeeon.com/latest/PCA/PCAUserGuide.html"/>
    <info name="group" value="public-objects"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.png"/>
  </genericInformation>
  <taskFlow>
    <task name="Start_Elasticsearch" 
    
    onTaskError="cancelJob" >
      <description>
        <![CDATA[ Start the Elasticsearch server as a service. ]]>
      </description>
      <variables>
        <variable name="SERVICE_ID" value="Elasticsearch" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/PCA/PCAUserGuide.html"/>
      </genericInformation>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
/*********************************************************************************
* THIS PRESCRIPT MAPS THE SERVICE SPECIFIC VARIABLES WITH GENERIC VARIABLE NAMES *
* THIS AVOIDS YOU FROM CHANGING THE WHOLE PCA WORKFLOWS IMPLEMENTATIONS          *
*********************************************************************************/

variables.put("INSTANCE_NAME", variables.get("ELASTICSEARCH_INSTANCE_NAME"))
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription

println("--- BEGIN " + variables.get("PA_TASK_NAME") + " ---")

// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def sessionId = schedulerapi.getSession()

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pcaUrl = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
//apiClient.setDebugging(true)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

def serviceId = variables.get("SERVICE_ID")
def instanceName = variables.get("INSTANCE_NAME")
println("SERVICE_ID:    " + serviceId)
println("INSTANCE_NAME: " + instanceName)


// Check existing service instances
boolean instance_exists = false
List<ServiceInstanceData> service_instances = serviceInstanceRestApi.getServiceInstancesUsingGET()

for (ServiceInstanceData serviceInstanceData : service_instances) {
	if ( (serviceInstanceData.getServiceId() == serviceId) && (serviceInstanceData.getInstanceStatus()  == "RUNNING")){
      if (serviceInstanceData.getVariables().get("INSTANCE_NAME") == instanceName) {
        instance_exists = true
        def instanceId = serviceInstanceData.getInstanceId()
  		endpoint = serviceInstanceData.getInstanceEndpoints().entrySet().iterator().next().getValue()
        println("INSTANCE_ID: " + instanceId)
        println("ENDPOINT:    " + endpoint)
        variables.put("INSTANCE_ID", instanceId)
        variables.put("ENDPOINT", endpoint)
        break
      }
  	}
}

println("INSTANCE_EXISTS ? " + instance_exists)

if (!instance_exists){
  // Prepare service description
  ServiceDescription serviceDescription = new ServiceDescription()
  serviceDescription.setBucketName("cloud-automation")
  serviceDescription.setWorkflowName(serviceId)
  serviceDescription.putVariablesItem("INSTANCE_NAME", instanceName)
  // Run service
  def serviceInstanceData = serviceInstanceRestApi.createRunningServiceInstanceUsingPOST(sessionId, serviceDescription)

  // Acquire service Instance ID
  def serviceInstanceId = serviceInstanceData.getInstanceId()

  // Create synchro channel
  def channel = "Service_Instance_" + serviceInstanceId
  println("CHANNEL: " + channel)
  synchronizationapi.createChannelIfAbsent(channel, false)
  synchronizationapi.waitUntil(channel, "RUNNING", "{k,x -> x == true}")

  // Acquire service endpoint
  serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(serviceInstanceId)
  def instanceId = serviceInstanceData.getInstanceId()
  endpoint = serviceInstanceData.getInstanceEndpoints().entrySet().iterator().next().getValue()

  println("INSTANCE_ID: " + instanceId)
  println("ENDPOINT: " + endpoint)

  variables.put("INSTANCE_ID", instanceId)
  variables.put("ENDPOINT", endpoint)
}

println("--- END " + variables.get("PA_TASK_NAME") + " ---")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1139px;
            height:566px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-333.9875030517578px;left:-481.75px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_911" style="top: 339px; left: 486.75px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.png" width="20px">&nbsp;<span class="name">Start_Elasticsearch</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 536.5px; top: 369px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>