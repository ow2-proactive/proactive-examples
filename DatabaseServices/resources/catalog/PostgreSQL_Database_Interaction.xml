<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.10"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
    name="PostgreSQL_Database_Interaction" projectName="PostgreSQL Workflows"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="POSTGRES_INSTANCE_NAME" value="postgres-server" model="PA:SPEL( (variables[POSTGRES_INSTANCE_NAME] = &quot;postgres-server-&quot;+(T(java.lang.Math).random()*1000).intValue()) instanceof T(String) )"/>
    <variable name="POSTGRES_USER" value="demo" />
    <variable name="POSTGRES_PASSWORD" value="demo" />
    <variable name="POSTGRES_DATABASE" value="demo" />
    <variable name="ACTION" value="Finish_PostgreSQL" model="PA:LIST(Pause_PostgreSQL, Resume_PostgreSQL, Finish_PostgreSQL)"/>
  </variables>
  <description>
    <![CDATA[ This workflow shows how to deploy and use a PCA PostgreSQL service.
It demonstrates how to start a PostgreSQL database server using the PCA client API, export and import data from the database then stop the service. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="database-services"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/postgresql.png"/>
    <info name="Documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_sql"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Parse_Endpoint">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="Start_PostgreSQL"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def endpoint = new URL(variables.get("ENDPOINT" ))
variables.put("POSTGRES_HOST",endpoint.getHost())
variables.put("POSTGRES_PORT",endpoint.getPort())
// Wait for database sever to be up and fully running.
sleep(3000)
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Import_from_PostgreSQL">
      <description>
        <![CDATA[ This task allows to import data from PostgreSQL database.
It requires the following third-party credential: {key: postgresql://<username>@<host>:<port>, value: POSTGRESQL_PASSWORD}. Please refer to the User documentation to learn how to add third-party credentials.
It uses the following variables:
$LABEL (optional) used when the imported data is labeled. Then, the user can specify the label column name.
$POSTGRES_QUERY (required) is the user's sql query.
$OUTPUT_FILE (optional) is a relative path in the data space used to save the results in a CSV file.
$OUTPUT_TYPE (optional) if set to HTML, it allows to preview the results in Scheduler Portal in an HTML format. Default is CSV
This task uses also the task variable RMDB_DRIVER as a driver to connect to the database. The specified default driver "psycopg2" is already provided for this task. To use another driver, make sure you have it properly installed before.
The imported data is exported in a JSON format using the variable $DATAFRAME_JSON. ]]>
      </description>
      <variables>
        <variable name="LABEL" value="" inherited="false" />
        <variable name="POSTGRES_QUERY" value="SELECT * FROM diabetes" inherited="false" />
        <variable name="RDBMS_DRIVER" value="psycopg2" inherited="false" />
        <variable name="OUTPUT_FILE" value="imported_data.csv" inherited="false" />
        <variable name="OUTPUT_TYPE" value="HTML" inherited="false" model="PA:List(CSV,HTML)"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/postgresql.png"/>
        <info name="task.documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_sql"/>
      </genericInformation>
      <depends>
        <task ref="Export_to_PostgreSQL"/>
      </depends>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
# In the Java Home location field, use the value: "/usr" to force using the JRE provided in the docker image below (Recommended).
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters
containerName = 'activeeon/dlm3'
dockerRunCommand = 'docker run '
dockerParameters = '--rm '
# Prepare ProActive home volume
paHomeHost = variables.get("PA_SCHEDULER_HOME")
paHomeContainer = variables.get("PA_SCHEDULER_HOME")
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' '
# Prepare working directory (For Dataspaces and serialized task file)
workspaceHost = localspace
workspaceContainer = localspace
workspaceVolume = '-v '+localspace +':'+localspace+' '
# Prepare container working directory
containerWorkingDirectory = '-w '+workspaceContainer+' '
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
import numpy as np
from sqlalchemy import create_engine
import sys

RDBMS_NAME = 'postgresql'
RDBMS_DRIVER = variables.get("RDBMS_DRIVER")
POSTGRES_URL_KEY = "postgresql://<username>@<host>:<port>"

HOST = variables.get("POSTGRES_HOST")
PORT = int(variables.get("POSTGRES_PORT"))
DATABASE = variables.get("POSTGRES_DATABASE")
USER = variables.get("POSTGRES_USER")

# This key is used for getting the password from 3rd party credentials.
POSTGRES_PASSWORD_KEY = "postgresql://" + USER + "@" + HOST + ":" + str(PORT)
POSTGRES_PASSWORD=credentials.get(POSTGRES_PASSWORD_KEY)

SQL_QUERY = variables.get("POSTGRES_QUERY")
OUTPUT_FILE = variables.get("OUTPUT_FILE")
OUTPUT_TYPE = variables.get("OUTPUT_TYPE")

if not HOST:
    print("ERROR: POSTGRES_HOST variable is not provided by the user.")
    sys.exit(1)
if not PORT:
    PORT = 5432
    print("WARNING: POSTGRES_PORT variable is not provided by the user. Using the default value:", PORT)
if not DATABASE:
    print("ERROR: POSTGRES_DATABASE variable is not provided by the user.")
    sys.exit(1)
if not USER:
    print("ERROR: POSTGRES_USER variable is not provided by the user.")
    sys.exit(1)
if not POSTGRES_PASSWORD:
    print("ERROR: Please add your PostgreSQL password to 3rd-party credentials in the scheduler-portal under the key :\"" + POSTGRES_URL_KEY + "\"")
    sys.exit(1)
if not SQL_QUERY:
    print("ERROR: POSTGRES_QUERY variable is not provided by the user.")
    sys.exit(1)

IS_LABELED_DATA = 'False'
LABEL = variables.get("LABEL")
if LABEL:
    IS_LABELED_DATA='True'

# Please refer to SQLAlchemy doc for more info about database urls.
# http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls
# Never print this to avoid displaying your credentials in the logs
print("BEGIN Import_Data from " + RDBMS_NAME + " database using " + variables.get("RDBMS_DRIVER") + " connector")
print("EXECUTING QUERY...")
print('POSTGRES_HOST=' , HOST)
print('POSTGRES_PORT=' , PORT)
print('POSTGRES_USER=' , USER)
print('POSTGRES_DATABASE=' , DATABASE)
print('POSTGRES_QUERY=' , SQL_QUERY)
if OUTPUT_FILE:
    print('OUTPUT_FILE=' + OUTPUT_FILE)

database_url = '{0}+{1}://{2}:{3}@{4}:{5}/{6}'.format(RDBMS_NAME,RDBMS_DRIVER,USER,POSTGRES_PASSWORD,HOST,PORT,DATABASE)
engine = create_engine(database_url)

with engine.connect() as conn, conn.begin():
    #pd.read_sql() can take either a SQL query as a parameter or a table name
    dataframe = pd.read_sql(SQL_QUERY, conn)

columns_name = dataframe.columns
columns_number = len(columns_name)

if IS_LABELED_DATA == 'True':
    label_index= dataframe.columns.get_loc(LABEL)
    data_indices=[x for i,x in enumerate(range(columns_number)) if i!=label_index]
    data  = dataframe.values[:,data_indices]
    label = dataframe.values[:,label_index]
    data_df = pd.DataFrame(data=data,columns=columns_name[data_indices])
    label_df = pd.DataFrame(data=label,columns=[columns_name[label_index]])
    LABEL_TRAIN_DF_JSON = label_df.to_json(orient='split')
    LABEL_TEST_DF_JSON = label_df.to_json(orient='split')
elif IS_LABELED_DATA == 'False':
    data = dataframe.values
    data_df = pd.DataFrame(data=data,columns=columns_name)

DATAFRAME_JSON = dataframe.to_json(orient='split')
COLUMNS_NAME_JSON = pd.Series(columns_name).to_json()
DATA_TRAIN_DF_JSON = data_df.to_json(orient='split')
DATA_TEST_DF_JSON = data_df.to_json(orient='split')

if IS_LABELED_DATA == 'True':
    variables.put("LABEL_TRAIN_DF_JSON", LABEL_TRAIN_DF_JSON)
    variables.put("LABEL_TEST_DF_JSON", LABEL_TEST_DF_JSON)
    dataframe=data_df.join(label_df)

variables.put("DATAFRAME_JSON", DATAFRAME_JSON)
variables.put("COLUMNS_NAME_JSON", COLUMNS_NAME_JSON)
variables.put("DATA_TRAIN_DF_JSON", DATA_TRAIN_DF_JSON)
variables.put("DATA_TEST_DF_JSON", DATA_TEST_DF_JSON)
variables.put("IS_LABELED_DATA", IS_LABELED_DATA)

#***************# HTML PREVIEW STYLING #***************#
styles = [
    dict(selector="th", props=[("font-weight", "bold"),
                               ("text-align", "center"),
                               ("background", "#0B6FA4"),
                               ("color", "white")]),
    dict(selector="td", props=[("text-align", "right"),
                               ("padding", "3px 5px"),
                               ("border-bottom", "1px solid #999999")]),
    dict(selector="table", props=[("border", "1px solid #999999"),
                                  ("text-align", "center"),
                                  ("width", "100%"),
                                  ("border", "1px solid #999999")])
]
#******************************************************#

if OUTPUT_TYPE == "HTML":
    result = dataframe.style.set_table_styles(styles).render().encode('utf-8')
    resultMetadata.put("file.extension", ".html")
    resultMetadata.put("file.name", "output.html")
    resultMetadata.put("content.type", "text/html")
else:
    # Write results to the task result in CSV format
    result = dataframe.to_csv(index=False).encode('utf-8')
    resultMetadata.put("file.extension", ".csv")
    resultMetadata.put("file.name", "result.csv")
    resultMetadata.put("content.type", "text/csv")

# If an OUTPUT_FILE path in the dataspace is designated, then write to this file.
if OUTPUT_FILE:
    dataframe.to_csv(path_or_buf=OUTPUT_FILE, index=False)

print("END Import_Data")
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="$OUTPUT_FILE" accessMode="transferToGlobalSpace"/>
      </outputFiles>
    </task>
    <task name="Export_to_PostgreSQL">
      <description>
        <![CDATA[ This task allows to export data to PostgreSQL database.
It requires the following third-party credential: {key: postgresql://<username>@<host>:<port>, value: POSTGRESQL_PASSWORD}. Please refer to the User documentation to learn how to add third-party credentials.
It uses the following variables: 
$POSTGRES_TABLE (required) is the table name.
$INSERT_MODE (required) indicates the behavior to follow when the table exists in the database amongst: 
. fail: If table exists, do nothing.
. replace: If table exists, drop it, recreate it, and insert data.
. append: (default) If table exists, insert data. Create if does not exist.
$INPUT_FILE (required) is the relative path in the data space of the CSV file that contains data to be imported. The string could also be a URL. Valid URL schemes include http, ftp, s3, and file. 
This task uses also the task variable RMDB_DRIVER as a driver to connect to the database. The specified default driver "psycopg2" is already provided for this task. To use another driver, make sure you have it properly installed before. ]]>
      </description>
      <variables>
        <variable name="POSTGRES_TABLE" value="diabetes" inherited="false" />
        <variable name="RDBMS_DRIVER" value="psycopg2" inherited="false" />
        <variable name="INSERT_MODE" value="append" inherited="false" model="PA:LIST(fail, replace, append)"/>
        <variable name="INPUT_FILE" value="pima-indians-diabetes.csv" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/postgresql.png"/>
        <info name="task.documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_sql"/>
      </genericInformation>
      <depends>
        <task ref="Parse_Endpoint"/>
      </depends>
      <inputFiles>
        <files  includes="$INPUT_FILE" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
# In the Java Home location field, use the value: "/usr" to force using the JRE provided in the docker image below (Recommended).
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters
containerName = 'activeeon/dlm3'
dockerRunCommand = 'docker run '
dockerParameters = '--rm '
# Prepare ProActive home volume
paHomeHost = variables.get("PA_SCHEDULER_HOME")
paHomeContainer = variables.get("PA_SCHEDULER_HOME")
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' '
# Prepare working directory (For Dataspaces and serialized task file)
workspaceHost = localspace
workspaceContainer = localspace
workspaceVolume = '-v '+localspace +':'+localspace+' '
# Prepare container working directory
containerWorkingDirectory = '-w '+workspaceContainer+' '
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
import numpy as np
from sqlalchemy import create_engine
import sys

RDBMS_NAME = 'postgresql'
RDBMS_DRIVER = variables.get("RDBMS_DRIVER")
POSTGRES_URL_KEY = "postgresql://<username>@<host>:<port>"

HOST = variables.get("POSTGRES_HOST")
PORT = int(variables.get("POSTGRES_PORT"))
DATABASE = variables.get("POSTGRES_DATABASE")
USER = variables.get("POSTGRES_USER")

# This key is used for getting the password from 3rd party credentials.
POSTGRES_PASSWORD_KEY = "postgresql://" + USER + "@" + HOST + ":" + str(PORT)
POSTGRES_PASSWORD=credentials.get(POSTGRES_PASSWORD_KEY)

SQL_TABLE = variables.get("POSTGRES_TABLE")
INPUT_FILE = variables.get("INPUT_FILE")
INSERT_MODE = variables.get("INSERT_MODE")

if not HOST:
    print("ERROR: POSTGRES_HOST variable is not provided by the user.")
    sys.exit(1)
if not PORT:
    PORT = 5432
    print("WARNING: POSTGRES_PORT variable is not provided by the user. Using the default value:", PORT)
if not DATABASE:
    print("ERROR: POSTGRES_DATABASE variable is not provided by the user.")
    sys.exit(1)
if not USER:
    print("ERROR: POSTGRES_USER variable is not provided by the user.")
    sys.exit(1)
if not POSTGRES_PASSWORD:
    print("ERROR: Please add your PostgreSQL password to 3rd-party credentials in the scheduler-portal under the key :\"" + POSTGRES_URL_KEY + "\"")
    sys.exit(1)
if not INPUT_FILE:
    print("ERROR: INPUT_FILE variable is not provided by the user.")
    sys.exit(1)
if not SQL_TABLE:
    print("ERROR: POSTGRES_TABLE variable is not provided by the user.")
    sys.exit(1)
if not INSERT_MODE:
    INSERT_MODE = 'append'

# Please refer to SQLAlchemy doc for more info about database urls.
# http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls
# Never print this to avoid displaying your credentials in the logs

print("BEGIN Export_Data to " + RDBMS_NAME + " database using " + variables.get("RDBMS_DRIVER") + " connector")
print("INSERTING DATA IN POSTGRESQL...")
print('POSTGRES_HOST=' , HOST)
print('POSTGRES_PORT=' , PORT)
print('POSTGRES_USER=' , USER)
print('POSTGRES_DATABASE=' , DATABASE)
print('POSTGRES_TABLE=' , SQL_TABLE)
database_url = '{0}+{1}://{2}:{3}@{4}:{5}/{6}'.format(RDBMS_NAME,RDBMS_DRIVER,USER,POSTGRES_PASSWORD,HOST,PORT,DATABASE)
engine = create_engine(database_url)
dataframe = pd.read_csv(INPUT_FILE, sep='\s+|;|,',index_col=None, engine='python')
with engine.connect() as conn, conn.begin():
     dataframe.to_sql(SQL_TABLE, conn, schema=None, if_exists=INSERT_MODE, index=True, index_label=None, chunksize=None, dtype=None)

print("END Export_Data")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Start_PostgreSQL"
    
    
    onTaskError="cancelJob" >
      <description>
        <![CDATA[ Start the PostgreSQL server as a service. ]]>
      </description>
      <variables>
        <variable name="SERVICE_ID" value="PostgreSQL" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/postgresql.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/PCA/PCAUserGuide.html"/>
      </genericInformation>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
/*********************************************************************************
* THIS PRESCRIPT MAPS THE SERVICE SPECIFIC VARIABLES WITH GENERIC VARIABLE NAMES *
* THIS AVOIDS YOU FROM CHANGING THE WHOLE PCA WORKFLOWS IMPLEMENTATIONS          *
*********************************************************************************/

variables.put("INSTANCE_NAME", variables.get("POSTGRES_INSTANCE_NAME"))
variables.put("USER", variables.get("POSTGRES_USER"))
variables.put("PASSWORD", variables.get("POSTGRES_PASSWORD"))
variables.put("DATABASE", variables.get("POSTGRES_DATABASE"))
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription

println("BEGIN " + variables.get("PA_TASK_NAME"))

/*********************************************************************************
* THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE       *
/********************************************************************************/
def user = variables.get("USER")
def password = variables.get("PASSWORD")
def database = variables.get("DATABASE")
/********************************************************************************/

// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def sessionId = schedulerapi.getSession()

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pcaUrl = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
//apiClient.setDebugging(true)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

def serviceId = variables.get("SERVICE_ID")
def instanceName = variables.get("INSTANCE_NAME")
println("SERVICE_ID:    " + serviceId)
println("INSTANCE_NAME: " + instanceName)

// Check existing service instances
boolean instance_exists = false
List<ServiceInstanceData> service_instances = serviceInstanceRestApi.getServiceInstancesUsingGET()

for (ServiceInstanceData serviceInstanceData : service_instances) {
    if ( (serviceInstanceData.getServiceId() == serviceId) && (serviceInstanceData.getInstanceStatus()  == "RUNNING")){
        if (serviceInstanceData.getVariables().get("INSTANCE_NAME") == instanceName) {
            instance_exists = true
            def instanceId = serviceInstanceData.getInstanceId()
            endpoint = serviceInstanceData.getInstanceEndpoints().entrySet().iterator().next().getValue()
            println("INSTANCE_ID: " + instanceId)
            println("ENDPOINT:    " + endpoint)
            variables.put("INSTANCE_ID", instanceId)
            variables.put("ENDPOINT", endpoint)
            break
        }
  	}
}

println("INSTANCE_EXISTS ? " + instance_exists)

if (!instance_exists){
    // Prepare service description
    ServiceDescription serviceDescription = new ServiceDescription()
    serviceDescription.setBucketName("cloud-automation")
    serviceDescription.setWorkflowName(serviceId)
    serviceDescription.putVariablesItem("INSTANCE_NAME", instanceName)

/*********************************************************************************
* THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE       *
/********************************************************************************/
    serviceDescription.putVariablesItem("USER", user)
    serviceDescription.putVariablesItem("PASSWORD", password)
     serviceDescription.putVariablesItem("DATABASE", database)
/********************************************************************************/
    // Run service
    def serviceInstanceData = serviceInstanceRestApi.createRunningServiceInstanceUsingPOST(sessionId, serviceDescription)

    // Acquire service Instance ID
    def serviceInstanceId = serviceInstanceData.getInstanceId()

    // Create synchro channel
    def channel = "Service_Instance_" + serviceInstanceId
    println("CHANNEL: " + channel)
    synchronizationapi.createChannelIfAbsent(channel, false)
    synchronizationapi.waitUntil(channel, "RUNNING", "{k,x -> x == true}")

    // Acquire service endpoint
    serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(serviceInstanceId)
    def instanceId = serviceInstanceData.getInstanceId()
    endpoint = serviceInstanceData.getInstanceEndpoints().entrySet().iterator().next().getValue()

    println("INSTANCE_ID: " + instanceId)
    println("ENDPOINT: " + endpoint)

    variables.put("INSTANCE_ID", instanceId)
    variables.put("ENDPOINT", endpoint)
}

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="PostgreSQL_Service_Action"
    
    
    onTaskError="cancelJob" >
      <variables>
        <variable name="INSTANCE_ID" value="" inherited="true" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/postgresql.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/PCA/PCAUserGuide.html"/>
      </genericInformation>
      <depends>
        <task ref="Import_from_PostgreSQL"/>
      </depends>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN " + variables.get("PA_TASK_NAME") + " ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription

// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def sessionId = schedulerapi.getSession()

// Define PCA URL
def schedulerRestUrl = variables.get("PA_SCHEDULER_REST_URL")
def pcaUrl = schedulerRestUrl.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
//apiClient.setDebugging(true)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

def instanceId = variables.get("INSTANCE_ID") as int
println("INSTANCE_ID: " + instanceId)
assert instanceId != null

// Execute action on service
ServiceDescription service = new ServiceDescription()
service.setBucketName("cloud-automation")
service.setWorkflowName(variables.get("ACTION"))
serviceInstanceRestApi.launchServiceInstanceActionUsingPUT(sessionId, instanceId, service)

println("--- END " + variables.get("PA_TASK_NAME") + " ---")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
  </taskFlow>
</job>