<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.9"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.9 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.9/schedulerjob.xsd"
    name="Machining_process" projectName="MC-Virtual"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2"
>
  <variables>
    <variable name="generic_VMSCMD_file_path_from_dataspace" value="TEMP.VMSCMD" />
    <variable name="geometry_file_path_from_dataspace" value="fori_TEST.stl" />
    <variable name="tool_file_path_from_dataspace" value="tool.tool" />
	<variable name="CAD_file_path_from_dataspace" value="fori_TEST.igs" />
    <variable name="Phase" value="Roughing" />
    <variable name="Strategy" value="Contour" />
    <variable name="SpindleSpeed" value="1111" />
    <variable name="ApproachFeed" value="2222" />
    <variable name="WorkingFeed" value="3333" />
    <variable name="Radius" value="11.111" />
    <variable name="Diameter" value="22.222" />
    <variable name="Length" value="33.333" />
    <variable name="Flutes" value="0" />
    <variable name="ToolFile" value="" />
    <variable name="Shape" value="RECTANGLE" />
    <variable name="Offset" value="4.444" />
  </variables>
  <genericInformation>
   <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mc-virtual.png" />
  </genericInformation>
  <taskFlow>
    <task name="InstanciateConfFile">
	<inputFiles>
	    <files  includes="ini4j-0.5.1.jar" accessMode="transferFromUserSpace"/>
        <files  includes="HiMill_conf.ini" accessMode="transferFromUserSpace"/>
      </inputFiles>
	   <forkEnvironment>
			<additionalClasspath>
				<pathElement path="ini4j-0.5.1.jar" />
			</additionalClasspath>
	</forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ini4j.Wini

println "InstanciateConfFile ..."

def HiMill_conf_file = new File(localspace, "HiMill_conf.ini")
def HiMill_conf_wini = new Wini(HiMill_conf_file)

HiMill_conf_wini.put("MACHINING", "Phase", variables.get("Phase"))
HiMill_conf_wini.put("MACHINING", "Strategy", variables.get("Strategy"))
HiMill_conf_wini.put("MACHINING PARAMETERS", "SpindleSpeed", variables.get("SpindleSpeed"))
HiMill_conf_wini.put("MACHINING PARAMETERS", "ApproachFeed", variables.get("ApproachFeed"))
HiMill_conf_wini.put("MACHINING PARAMETERS", "WorkingFeed", variables.get("WorkingFeed"))
HiMill_conf_wini.put("TOOL PARAMETERS", "Radius", variables.get("Radius"))
HiMill_conf_wini.put("TOOL PARAMETERS", "Diameter", variables.get("Diameter"))
HiMill_conf_wini.put("TOOL PARAMETERS", "Length", variables.get("Length"))
HiMill_conf_wini.put("TOOL PARAMETERS", "Flutes", variables.get("Flutes"))
HiMill_conf_wini.put("TOOL PARAMETERS", "ToolFile", variables.get("ToolFile"))
HiMill_conf_wini.put("WORKING AREA", "Shape", variables.get("Shape"))
HiMill_conf_wini.put("WORKING AREA", "Offset", variables.get("Offset"))
HiMill_conf_wini.store()

println "... InstanciateConfFile"
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="HiMill_conf.ini" accessMode="transferToUserSpace"/>
      </outputFiles>
    </task>
    <task name="ProcedureWriter">
      <variables>
        <variable name="procedurewriter_exe_file_path" value="C:/MCsuite/ProcedureWriter.exe" inherited="false" />
      </variables>
      <depends>
        <task ref="InstanciateConfFile"/>
      </depends>
      <inputFiles>
	    <files  includes="ini4j-0.5.1.jar" accessMode="transferFromUserSpace"/>
        <files  includes="HiMill_conf.ini" accessMode="transferFromUserSpace"/>
		<files  includes="$CAD_file_path_from_dataspace" accessMode="transferFromUserSpace"/>
      </inputFiles>
	  <forkEnvironment>
			<additionalClasspath>
				<pathElement path="ini4j-0.5.1.jar" />
			</additionalClasspath>
	</forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.apache.commons.io.FileUtils
import org.ini4j.Wini

println "ProcedureWriter ..."

// Retrieve some variables
def procedurewriter_exe_file_path = variables.get("procedurewriter_exe_file_path")
def CAD_file_path_from_dataspace = variables.get("CAD_file_path_from_dataspace")

// Update the HiMill conf file with the current CAD path
def HiMill_conf_file = new File(localspace, "HiMill_conf.ini")
def HiMill_conf_wini = new Wini(HiMill_conf_file)
def CAD_file = new File(localspace, CAD_file_path_from_dataspace)
HiMill_conf_wini.put("MACHINING", "CAD", CAD_file.name)
HiMill_conf_wini.store()

// Copy files into procedurewriter_exe_file_path dir
FileUtils.copyFileToDirectory(CAD_file, new File(procedurewriter_exe_file_path).getParentFile())
FileUtils.copyFileToDirectory(HiMill_conf_file, new File(procedurewriter_exe_file_path).getParentFile())

// Command execution
def cmd = ["\"" + procedurewriter_exe_file_path + "\"", "HiMill_conf.ini"]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

println "... ProcedureWriter (MCdefault.prc generated in the task localspace)"
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="MCdefault.prc" accessMode="transferToUserSpace"/>
      </outputFiles>
    </task>
    <task name="HiMill">
      <variables>
        <variable name="himill_exe_file_path" value="C:/Fidia/HI-MILL/himill.exe" inherited="false" />
      </variables>
      <depends>
        <task ref="ProcedureWriter"/>
      </depends>
      <inputFiles>
        <files  includes="MCdefault.prc" accessMode="transferFromUserSpace"/>
        <files  includes="$CAD_file_path_from_dataspace" accessMode="transferFromUserSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.apache.commons.io.FilenameUtils
import org.apache.commons.io.FileUtils
			
println "HiMill ..."


// Retrieve some variables
def himill_exe_file_path = variables.get("himill_exe_file_path")
def CAD_file_path_from_dataspace = variables.get("CAD_file_path_from_dataspace")	
def Shape = variables.get("Shape")
def Offset = variables.get("Offset")

// Get the FileName property from the generated MCdefault.prc file
def MCdefault_props = new Properties()
def MCdefault_file = new File(localspace, "MCdefault.prc")
def MCdefault_dis = MCdefault_file.newDataInputStream()
MCdefault_props.load(MCdefault_dis)
def ISO_file_path = MCdefault_props.getProperty("FileName")
def ISO_file = new File(ISO_file_path)

// Push some variables
variables.put("ISO_file_name", ISO_file.name)
variables.put("APT_file_name", FilenameUtils.removeExtension(ISO_file.name) + ".apt")

// Command execution
def cmd = ["\"" + himill_exe_file_path + "\"", "\"" + new File(localspace, CAD_file_path_from_dataspace).absolutePath + "\"", "\"" + new File(localspace, "MCdefault.prc").absolutePath + "\"", Shape, Offset]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

// Move the generated iso file into the task localspace
def src = new File(new File(himill_exe_file_path).getParentFile(), ISO_file.name)
def dest = new File(localspace)
FileUtils.moveFileToDirectory(src, dest, false)


println "... HiMill (ISO file generated in the HiMill dir and moved into the task localspace)"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <outputFiles>
        <files  includes="$ISO_file_name" accessMode="transferToUserSpace"/>
      </outputFiles>
    </task>
    <task name="FormatConverter">
      <variables>
        <variable name="formatconverter_exe_file_path" value="C:/Users/machpro/Desktop/FIDIA/FormatConverter.exe" inherited="false" />
      </variables>
      <depends>
        <task ref="HiMill"/>
      </depends>
      <inputFiles>
        <files  includes="HiMill_conf.ini" accessMode="transferFromUserSpace"/>
        <files  includes="$ISO_file_name" accessMode="transferFromUserSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println "FormatConverter ..."

// Retrieve some variables 
def formatconverter_exe_file_path = variables.get("formatconverter_exe_file_path")
def ISO_file_name = variables.get("ISO_file_name")	
def APT_file_name = variables.get("APT_file_name")

// Command execution
def cmd = ["\"" + formatconverter_exe_file_path + "\"", "\"" + new File(localspace, "HiMill_conf.ini").absolutePath + "\"", "\"" + new File(localspace, ISO_file_name).absolutePath + "\""]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

println "... FormatConverter (APT file generated in the task localspace)"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <outputFiles>
        <files  includes="$APT_file_name" accessMode="transferToUserSpace"/>
      </outputFiles>
    </task>
    <task name="Surface_computation_and_visualization">
      <variables>
        <variable name="app_exe_file_path" value="C:/MCsuite/APP.exe" inherited="false" />
      </variables>
      <depends>
        <task ref="MACHpro"/>
      </depends>
      <inputFiles>
        <files  includes="$tool_file_path_from_dataspace" accessMode="transferFromUserSpace"/>
        <files  includes="$geometry_file_path_from_dataspace" accessMode="transferFromUserSpace"/>
        <files  includes="$APT_file_name" accessMode="transferFromUserSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.apache.commons.io.FileUtils

println "Surface_computation_and_visualization ..."
	
// Retrieve some variables
def app_exe_file_path = variables.get("app_exe_file_path")
def tool_file_path_from_dataspace = variables.get("tool_file_path_from_dataspace")
def geometry_file_path_from_dataspace = variables.get("geometry_file_path_from_dataspace")
def APT_file_name = variables.get("APT_file_name")

// Copy app_exe input files into the app_exe dir
def app_dir = new File(app_exe_file_path).getParentFile()
def tool_file = new File(localspace, tool_file_path_from_dataspace)
def geometry_file = new File(localspace, geometry_file_path_from_dataspace)
def APT_file = new File(localspace, APT_file_name)
FileUtils.copyFileToDirectory(tool_file, app_dir)
FileUtils.copyFileToDirectory(geometry_file, app_dir)
FileUtils.copyFileToDirectory(APT_file, app_dir)

// Command execution
def cmd = ["\"" + app_exe_file_path + "\"", "\"" + tool_file.absolutePath + "\"", "\"" + geometry_file.absolutePath + "\"", "\"" + APT_file.absolutePath + "\""]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

println "... Surface_computation_and_visualization"
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="result.pcd" accessMode="transferToUserSpace"/>
      </outputFiles>
    </task>
    <task name="MACHpro">
      <variables>
        <variable name="machpro_exe_file_path" value="C:/Program Files/MACHpro/MACHpro.exe" inherited="false" />
      </variables>
      <depends>
        <task ref="FormatConverter"/>
      </depends>
      <inputFiles>
        <files  includes="$generic_VMSCMD_file_path_from_dataspace" accessMode="transferFromUserSpace"/>
        <files  includes="$geometry_file_path_from_dataspace" accessMode="transferFromUserSpace"/>
        <files  includes="$APT_file_name" accessMode="transferFromUserSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println "MACHpro ..."

// Retrieve some variables
def geometry_file_path_from_dataspace = variables.get("geometry_file_path_from_dataspace")
def APT_file_name = variables.get("APT_file_name")
def generic_VMSCMD_file_path_from_dataspace = variables.get("generic_VMSCMD_file_path_from_dataspace")
def machpro_exe_file_path = variables.get("machpro_exe_file_path")

// XML file instantiation
// Retrieve file paths to be considered for the instantiation
def geometry_file_path = new File(localspace, geometry_file_path_from_dataspace).absolutePath.replaceAll("\\\\","/")
def APT_file_path = new File(localspace, APT_file_name).absolutePath.replaceAll("\\\\","/")

// Replace VARIABLES
def file_content = new File(localspace, generic_VMSCMD_file_path_from_dataspace).text
file_content = file_content.replaceAll("GEOMETRY_FILE_PATH_TO_SET", geometry_file_path);
file_content = file_content.replaceAll("APT_FILE_PATH_TO_SET", APT_file_path);

// Create the instantiated xml file
def instanciated_VMSCMD_file = new File(localspace, "instanciated_" + generic_VMSCMD_file_path_from_dataspace)
instanciated_VMSCMD_file.withWriter{ it << file_content }

// Command execution
def cmd = ["\"" + machpro_exe_file_path + "\"", "\"" + instanciated_VMSCMD_file.getAbsolutePath() + "\"", "nogui"]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

println "... MACHpro"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Expose_results">
      <depends>
        <task ref="Surface_computation_and_visualization"/>
      </depends>
      <inputFiles>
        <files  includes="$ISO_file_name" accessMode="transferFromUserSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// Expose the HiMill output file
def ISO_file_name = variables.get("ISO_file_name")
result = new File(ISO_file_name).getBytes()
resultMetadata.put("file.name", ISO_file_name)
resultMetadata.put("content.type", "application/octet-stream")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
  </taskFlow>
</job>