<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="Part_Program_Enhancer" tags="Machining process,Optimization" projectName="MC-Bridge" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="iso_file_path_from_dataspace" value="" description="iso file location."/>
    <variable name="csv_file1_path_from_dataspace" value="" description="1st csv file location."/>
    <variable name="csv_file2_path_from_dataspace" value="" description="2nd csv file location."/>
    <variable name="csv_file3_path_from_dataspace" value="" description="3rd csv file location."/>
    <variable name="max_violation" value="" description="Maximum violation."/>
    <variable name="enhanced_method" value="" description="Enhanced method."/>
    <variable name="keep_alive" value="" description="Keep alive or not."/>
  </variables>
  <description>
    <![CDATA[ Part program enhancement to estimate where high level of vibration or of cutting force are expected in the machining process. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="machining"/>
    <info name="group" value="public-objects"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mc-bridge.png"/>
  </genericInformation>
  <taskFlow>
    <task name="PartProgramEnhancer" >
      <variables>
        <variable name="PartProgramEnhancer_exec_file_name" value="PartProgramEnhancer.exe" inherited="false" />
        <variable name="PartProgramEnhancer_config_file_name" value="PartProgramEnhancer.ini" inherited="false" />
        <variable name="seko_file_path_from_dataspace" value="Seko512.txt" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mc-bridge.png"/>
      </genericInformation>
      <inputFiles>
        <files  includes="$PartProgramEnhancer_exec_file_name" accessMode="transferFromUserSpace"/>
        <files  includes="$PartProgramEnhancer_config_file_name" accessMode="transferFromUserSpace"/>
        <files  includes="$iso_file_path_from_dataspace" accessMode="transferFromUserSpace"/>
        <files  includes="$csv_file1_path_from_dataspace" accessMode="transferFromUserSpace"/>
        <files  includes="$csv_file2_path_from_dataspace" accessMode="transferFromUserSpace"/>
        <files  includes="$csv_file3_path_from_dataspace" accessMode="transferFromUserSpace"/>
        <files  includes="ini4j-0.5.1.jar" accessMode="transferFromUserSpace"/>
        <files  includes="$seko_file_path_from_dataspace" accessMode="transferFromUserSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="ini4j-0.5.1.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import java.util.zip.*
import org.apache.commons.io.FilenameUtils
import org.apache.commons.io.FileUtils
import org.ini4j.Wini
import java.text.SimpleDateFormat

println "PartProgramEnhancer ..."



// F U N C T I O N S ///////////////////////////////////////


// Create a zip file of files in file_paths_list
void create_archive (file_paths_list, archive_file) {
	ZipOutputStream zipFile = new ZipOutputStream(new FileOutputStream(archive_file))
	file_paths_list.each { file ->
  		//check if file
  		if (file.isFile()){
    		zipFile.putNextEntry(new ZipEntry(file.name))
    		def buffer = new byte[file.size()]
    		file.withInputStream {
	      		zipFile.write(buffer, 0, it.read(buffer))
    		}
    		zipFile.closeEntry()
  		}
	}
	zipFile.close()
}


// M A I N ///////////////////////////////////////


// Retrieve some variables
def PartProgramEnhancer_exec_file_name = variables.get("PartProgramEnhancer_exec_file_name")
def PartProgramEnhancer_config_file_name = variables.get("PartProgramEnhancer_config_file_name")
def iso_file_path_from_dataspace = variables.get("iso_file_path_from_dataspace")
def csv_file1_path_from_dataspace = variables.get("csv_file1_path_from_dataspace")
def csv_file2_path_from_dataspace = variables.get("csv_file2_path_from_dataspace")
def csv_file3_path_from_dataspace = variables.get("csv_file3_path_from_dataspace")
def seko_file_path_from_dataspace = variables.get("seko_file_path_from_dataspace")
def max_violation = variables.get("max_violation")
def enhanced_method = variables.get("enhanced_method")
def keep_alive = variables.get("keep_alive")

// Create files from paths
def PartProgramEnhancer_exec_file = new File(localspace, PartProgramEnhancer_exec_file_name)
def PartProgramEnhancer_config_file = new File(localspace, PartProgramEnhancer_config_file_name)
def iso_file = new File(localspace, iso_file_path_from_dataspace)
def seko_file = new File(localspace, seko_file_path_from_dataspace)

// Update config file with user params
def PartProgramEnhancer_config_ini = new Wini(PartProgramEnhancer_config_file)
PartProgramEnhancer_config_ini.put("FILE_NAMES", "PPfileName", iso_file.name)
PartProgramEnhancer_config_ini.put("FILE_NAMES", "CSVfileName1", csv_file1_path_from_dataspace)
if (!csv_file2_path_from_dataspace.isEmpty())
    PartProgramEnhancer_config_ini.put("FILE_NAMES", "CSVfileName2", csv_file2_path_from_dataspace)
if (!csv_file3_path_from_dataspace.isEmpty())
    PartProgramEnhancer_config_ini.put("FILE_NAMES", "CSVfileName3", csv_file3_path_from_dataspace)
PartProgramEnhancer_config_ini.put("ENHANCING_PARAMETERS", "MaxViolations", max_violation)
PartProgramEnhancer_config_ini.put("ENHANCING_PARAMETERS", "EnhanceMethod", enhanced_method)
PartProgramEnhancer_config_ini.put("ENHANCING_PARAMETERS", "KeepAlive", keep_alive)
PartProgramEnhancer_config_ini.store();

// Command execution
def cmd = ["\"" + PartProgramEnhancer_exec_file.absolutePath + "\""]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

// Zip output files
def lof_file = new File(localspace, "logfile.txt")
def enhanced_iso_file = new File(localspace, FilenameUtils.removeExtension(iso_file.name) + "_enhanced." + FilenameUtils.getExtension(iso_file.name))
def file_paths_list = [lof_file, enhanced_iso_file, seko_file, PartProgramEnhancer_config_file]
def archive_file = new File(localspace, "archive.zip")
create_archive(file_paths_list, archive_file)

// Expose it as a task output
result = archive_file.getBytes()
resultMetadata.put("file.name", archive_file.name)
resultMetadata.put("content.type", "application/octet-stream")

// And save it into a specific dir
def current_time = new SimpleDateFormat("MM-dd-yyyy_HH-mm-ss").format(new Date())
variables.put("current_time", current_time)
def dest_dir = new File(new File(localspace, "MC_BRIDGE"), current_time)
dest_dir.mkdirs()
FileUtils.moveFileToDirectory(archive_file, dest_dir, false)

println "... PartProgramEnhancer"
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="MC_BRIDGE/**" accessMode="transferToUserSpace"/>
      </outputFiles>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1139px;
            height:566px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-333.9875030517578px;left:-472px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_1932" style="top: 339px; left: 477px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/mc-bridge.png" width="20px">&nbsp;<span class="name">PartProgramEnhancer</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 534px; top: 369px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>