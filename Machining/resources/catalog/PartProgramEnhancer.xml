<?xml version="1.0" encoding="UTF-8"?>
<job
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns="urn:proactive:jobdescriptor:3.10"
		xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
		name="PartProgramEnhancer" projectName="MC-Bridge"
		priority="normal"
		onTaskError="continueJobExecution"
		maxNumberOfExecution="2"
>
	<variables>
		<variable name="csv_file1_path_from_dataspace" value="" />
		<variable name="csv_file2_path_from_dataspace" value="" />
		<variable name="csv_file3_path_from_dataspace" value="" />
		<variable name="enhanced_method" value="" />
		<variable name="iso_file_path_from_dataspace" value="" />
		<variable name="keep_alive" value="" />
		<variable name="max_violation" value="" />
	</variables>
	<genericInformation>
		<info name="bucketName" value="machining"/>
		<info name="group" value="public-objects"/>
		<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mc-bridge.png"/>
	</genericInformation>
	<taskFlow>
		<task name="PartProgramEnhancer">
			<variables>
				<variable name="PartProgramEnhancer_exec_file_name" value="PartProgramEnhancer.exe" inherited="false" />
				<variable name="PartProgramEnhancer_config_file_name" value="PartProgramEnhancer.ini" inherited="false" />
				<variable name="seko_file_path_from_dataspace" value="Seko512.txt" inherited="false" />
			</variables>
			<genericInformation>
				<info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mc-bridge.png"/>
			</genericInformation>
			<inputFiles>
				<files  includes="$PartProgramEnhancer_exec_file_name" accessMode="transferFromUserSpace"/>
				<files  includes="$PartProgramEnhancer_config_file_name" accessMode="transferFromUserSpace"/>
				<files  includes="$iso_file_path_from_dataspace" accessMode="transferFromUserSpace"/>
				<files  includes="$csv_file1_path_from_dataspace" accessMode="transferFromUserSpace"/>
				<files  includes="$csv_file2_path_from_dataspace" accessMode="transferFromUserSpace"/>
				<files  includes="$csv_file3_path_from_dataspace" accessMode="transferFromUserSpace"/>
				<files  includes="ini4j-0.5.1.jar" accessMode="transferFromUserSpace"/>
				<files  includes="$seko_file_path_from_dataspace" accessMode="transferFromUserSpace"/>
			</inputFiles>
			<forkEnvironment >
				<additionalClasspath>
					<pathElement path="ini4j-0.5.1.jar"/>
				</additionalClasspath>
			</forkEnvironment>
			<scriptExecutable>
				<script>
					<code language="groovy">
						<![CDATA[
import java.util.zip.*
import org.apache.commons.io.FilenameUtils
import org.ini4j.Wini

println "PartProgramEnhancer ..."



// F U N C T I O N S ///////////////////////////////////////


// Create a zip file of files in file_paths_list
void create_archive (file_paths_list, archive_file) {
	ZipOutputStream zipFile = new ZipOutputStream(new FileOutputStream(archive_file))
	file_paths_list.each { file ->
  		//check if file
  		if (file.isFile()){
    		zipFile.putNextEntry(new ZipEntry(file.name))
    		def buffer = new byte[file.size()]
    		file.withInputStream {
	      		zipFile.write(buffer, 0, it.read(buffer))
    		}
    		zipFile.closeEntry()
  		}
	}
	zipFile.close()
}


// M A I N ///////////////////////////////////////


// Retrieve some variables
def PartProgramEnhancer_exec_file_name = variables.get("PartProgramEnhancer_exec_file_name")
def PartProgramEnhancer_config_file_name = variables.get("PartProgramEnhancer_config_file_name")
def iso_file_path_from_dataspace = variables.get("iso_file_path_from_dataspace")
def csv_file1_path_from_dataspace = variables.get("csv_file1_path_from_dataspace")
def csv_file2_path_from_dataspace = variables.get("csv_file2_path_from_dataspace")
def csv_file3_path_from_dataspace = variables.get("csv_file3_path_from_dataspace")
def seko_file_path_from_dataspace = variables.get("seko_file_path_from_dataspace")
def max_violation = variables.get("max_violation")
def enhanced_method = variables.get("enhanced_method")
def keep_alive = variables.get("keep_alive")

// Create files from paths
def PartProgramEnhancer_exec_file = new File(localspace, PartProgramEnhancer_exec_file_name)
def PartProgramEnhancer_config_file = new File(localspace, PartProgramEnhancer_config_file_name)
def iso_file = new File(localspace, iso_file_path_from_dataspace)
def seko_file = new File(localspace, seko_file_path_from_dataspace)

// Update config file with user params
def PartProgramEnhancer_config_ini = new Wini(PartProgramEnhancer_config_file)
PartProgramEnhancer_config_ini.put("FILE_NAMES", "PPfileName", iso_file.name)
PartProgramEnhancer_config_ini.put("FILE_NAMES", "CSVfileName1", csv_file1_path_from_dataspace)
if (!csv_file2_path_from_dataspace.isEmpty())
    PartProgramEnhancer_config_ini.put("FILE_NAMES", "CSVfileName2", csv_file2_path_from_dataspace)
if (!csv_file3_path_from_dataspace.isEmpty())
    PartProgramEnhancer_config_ini.put("FILE_NAMES", "CSVfileName3", csv_file3_path_from_dataspace)
PartProgramEnhancer_config_ini.put("ENHANCING_PARAMETERS", "MaxViolations", max_violation)
PartProgramEnhancer_config_ini.put("ENHANCING_PARAMETERS", "EnhanceMethod", enhanced_method)
PartProgramEnhancer_config_ini.put("ENHANCING_PARAMETERS", "KeepAlive", keep_alive)
PartProgramEnhancer_config_ini.store();

// Command execution
def cmd = ["\"" + PartProgramEnhancer_exec_file.absolutePath + "\""]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

// Zip output files
def lof_file = new File(localspace, "logfile.txt")
def enhanced_iso_file = new File(localspace, FilenameUtils.removeExtension(iso_file.name) + "_enhanced." + FilenameUtils.getExtension(iso_file.name))
def file_paths_list = [lof_file, enhanced_iso_file, seko_file]
def archive_file = new File(localspace, "archive.zip")
create_archive(file_paths_list, archive_file)

// Expose the resulting chart image
result = archive_file.getBytes()
resultMetadata.put("file.name", archive_file.name)
resultMetadata.put("content.type", "application/octet-stream")


println "... PartProgramEnhancer"
]]>
					</code>
				</script>
			</scriptExecutable>
			<outputFiles>
				<files  includes="*" accessMode="transferToUserSpace"/>
			</outputFiles>
		</task>
	</taskFlow>
</job>