<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.13" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="1" name="YARN" onTaskError="continueJobExecution" priority="normal" projectName="Service Automation - Deployment" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd">
  <variables>
    <variable name="INSTANCE_NAME" value="yarn-$PA_JOB_ID" model="PA:NOT_EMPTY_STRING" description="The name of the service to be deployed" group="" advanced="false" hidden="false"/>
    <variable name="swarm_service_instance_id" value="xx" model="PA:NOT_EMPTY_STRING" description="The Swarm service instance identifier that will be used." group="" advanced="false" hidden="false"/>
    <variable name="hdfs_service_instance_id" value="xx" model="PA:NOT_EMPTY_STRING" description="The HDFS service instance identifier that will be used." group="" advanced="false" hidden="false"/>
    <variable name="nb_yarn_nodemanagers" value="3" model="PA:NOT_EMPTY_STRING" description="The number of Yarn node managers" group="" advanced="false" hidden="false"/>
  </variables>
  <description>
    <![CDATA[ Deploy a YARN resource manager of nb_yarn_nodemanagers YARN node managers.
A Swarm service (Docker_Swarm) needs to be started first, and the swarm_service_instance_id variable must be set to the service instance id of this targeted Docker Swarm.
To connect a HDFS platform (optional), a HDFS service needs to be started after the Swarm service, and the hdfs_service_instance_id variable must be set to the service instance id of this targeted HDFS. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="service-automation"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/yarn.png"/>
    <info name="pca.states" value="(VOID,RUNNING)"/>
    <info name="Documentation" value="https://hadoop.apache.org/docs/r2.7.2/hadoop-yarn/hadoop-yarn-site/index.html"/>
    <info name="pca.service.id" value="YARN"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task fork="true" name="retrieve_services_variables">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/yarn.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Retrieve_variables_from_service_instance_id/raw">
            <arguments>
              <argument value="$swarm_service_instance_id"/>
              <argument value="swarm_token_name"/>
              <argument value="INSTANCE_NAME"/>
              <argument value="swarm_manager_and_workers_pa_node_names"/>
              <argument value="swarm_manager_and_workers_pa_node_names"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Retrieve_variables_from_service_instance_id/raw">
            <arguments>
              <argument value="$hdfs_service_instance_id"/>
              <argument value="hdfs_network_name"/>
              <argument value="hdfs_network_name"/>
              <argument value="hdfs_namenode_host_port"/>
              <argument value="hdfs_namenode_host_port"/>
            </arguments>
          </file>
        </script>
      </post>
      <metadata>
        <positionTop>
          62.81945037841797
        </positionTop>
        <positionLeft>
          549.7361145019531
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="start_yarn_master">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/yarn.png"/>
        <info name="NODE_ACCESS_TOKEN" value="$swarm_token_name"/>
      </genericInformation>
      <depends>
        <task ref="retrieve_services_variables"/>
      </depends>
      <selection>
        <script type="dynamic">
          <code language="groovy">
            <![CDATA[
// The overlay network must be created on the swarm manager host
def swarm_manager_pa_node_name = variables.get("swarm_manager_and_workers_pa_node_names").split(",")[0]
selected = (nodename == swarm_manager_pa_node_name)
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// Retrieve variables
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long
def instance_name = variables.get("INSTANCE_NAME")
def job_id = variables.get("PA_JOB_ID")
def pa_node_name = variables.get("PA_NODE_NAME")
def pa_node_host = variables.get("PA_NODE_HOST")
def hdfs_network_name = variables.get("hdfs_network_name")
def hdfs_namenode_host_port = variables.get("hdfs_namenode_host_port")
def nb_yarn_nodemanagers = variables.get("nb_yarn_nodemanagers") as Integer
def targeted_network_name = hdfs_network_name

// Find a free port for yarn_master_gui_port
def yarn_master_gui_port = null
try {
  def server = new ServerSocket(0)
  yarn_master_gui_port = server.getLocalPort()
  server.close()
} catch (IOException e) {
  throw new RuntimeException( "Failed to find free local port to bind the agent to", e);
}

// Start the yarn master docker container
def yarn_master_container_name = instance_name + "-yarn-master"
cmd = ["docker", "run", "--rm", "-dit", "--publish", yarn_master_gui_port + ":" + 8088, "--name", yarn_master_container_name, "--net", targeted_network_name, "activeeon/yarn:latest"]
println cmd
def yarn_master_container_id = new StringBuilder()
cmd.execute().waitForProcessOutput(yarn_master_container_id, System.err)

// Yarn master configuration + Start
def hdfs_namenode_container_name = hdfs_namenode_host_port.split(":")[0]
def hdfs_core_site_config_command = "sed -i 's/toreplace:port/" + hdfs_namenode_host_port + "/g' \$HADOOP_HOME/etc/hadoop/core-site.xml"
def hdfs_hdfs_site_config = "sed -i 's/toreplace/" + hdfs_namenode_container_name + "/g' \$HADOOP_HOME/etc/hadoop/hdfs-site.xml"
def yarn_mapred_site_config = "sed -i 's/toreplace/" + yarn_master_container_name + "/g' \$HADOOP_HOME/etc/hadoop/mapred-site.xml"
def yarn_yarn_site_config = "sed -i 's/toreplace/" + "" + "/g' \$HADOOP_HOME/etc/hadoop/yarn-site.xml"
def start_master_command = "\$HADOOP_HOME/sbin/yarn-daemon.sh start resourcemanager"
def command_in_container = hdfs_core_site_config_command + ";" + hdfs_hdfs_site_config + ";"  + yarn_mapred_site_config + ";" + yarn_yarn_site_config + ";" + start_master_command
cmd = ["docker", "exec", yarn_master_container_name, "/bin/sh", "-c", command_in_container]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

// Ensure Master is started
cmd = ["docker", "exec", yarn_master_container_name, "jps"]
println cmd

def docker_exec_jps_output = new StringBuilder()
while (!docker_exec_jps_output.toString().contains("ResourceManager")){
	cmd.execute().waitForProcessOutput(docker_exec_jps_output, System.err)
	println(docker_exec_jps_output)
	sleep(1000)
}

// Propagate variables
variables.put("yarn_master_gui_port", yarn_master_gui_port)
variables.put("targeted_network_name", targeted_network_name)
variables.put("yarn_master_container_name", yarn_master_container_name)
variables.put("yarn_master_url", "yarn://" + yarn_master_container_name + ":8088")
variables.put("nb_yarn_deployments", (nb_yarn_nodemanagers + 1))
variables.put("yarn_master_and_workers_pa_node_names", pa_node_name)
variables.put("hdfs_namenode_container_name", hdfs_namenode_container_name)
resultMap.put("yarn_service_instance_id", service_instance_id)

// Propagate variables to the current post script
new File(localspace, "yarn_master_container_id").text = yarn_master_container_id.toString()
new File(localspace, "yarn_master_container_name").text = yarn_master_container_name
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
runs = variables.get("nb_yarn_nodemanagers")
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.JsonOutput

// Retrieve the script arguments
def yarn_master_container_id = new File(localspace, "yarn_master_container_id").text
def yarn_master_container_name = new File(localspace, "yarn_master_container_name").text

// Retrieve variables
def job_id = variables.get("PA_JOB_ID")
def pca_public_rest_url = variables.get('PA_CLOUD_AUTOMATION_REST_PUBLIC_URL')
def instance_id = variables.get("PCA_INSTANCE_ID")
def instance_name = variables.get("INSTANCE_NAME")
def pa_node_name = variables.get("PA_NODE_NAME")
def pa_node_host = variables.get("PA_NODE_HOST")
def pa_node_source_name = variables.get("PA_NODE_SOURCE")
def pa_node_url = variables.get("PA_NODE_URL")
def yarn_master_gui_port = variables.get("yarn_master_gui_port")
def yarn_master_endpoint_url = "http://" + pa_node_host + ":" + yarn_master_gui_port

// Build the proxified url
def endpoint_id = "yarn_master-gui-" + job_id
def proxyfied_url = pca_public_rest_url + "/services/" + instance_id + "/endpoints/" + endpoint_id + "/"

// Create the deployment map and json
def deployment_map = ["endpoint":["id":endpoint_id,"url":yarn_master_endpoint_url,"proxyfied_url":proxyfied_url],"node":["name":pa_node_name,"host":pa_node_host,"node_source_name":pa_node_source_name,"url":pa_node_url],"container":["id":yarn_master_container_id,"name":yarn_master_container_name]]
def deployment_json = JsonOutput.toJson(deployment_map)

// Propagate the deployment map
variables.put("yarn_deployment_json_0", deployment_json)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
          190.81945037841797
        </positionTop>
        <positionLeft>
          550.7361145019531
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="start_yarn_nodemanager">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/yarn.png"/>
        <info name="NODE_ACCESS_TOKEN" value="$swarm_token_name"/>
      </genericInformation>
      <depends>
        <task ref="start_yarn_master"/>
      </depends>
      <selection>
        <script type="dynamic">
          <code language="groovy">
            <![CDATA[
def task_replication_id = variables.get("PA_TASK_REPLICATION") as Integer
def swarm_manager_and_workers_pa_node_names = variables.get("swarm_manager_and_workers_pa_node_names")

def targeted_pa_node_name = swarm_manager_and_workers_pa_node_names.split(",")[task_replication_id]

selected = (nodename == targeted_pa_node_name)
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// Retrieve variables
def instance_name = variables.get("INSTANCE_NAME")
def task_replication_id = variables.get("PA_TASK_REPLICATION") as Integer
def targeted_network_name = variables.get("targeted_network_name")
def yarn_master_url = variables.get("yarn_master_url")
def pa_node_host = variables.get("PA_NODE_HOST")
def pa_node_name = variables.get("PA_NODE_NAME")
def hdfs_namenode_host_port = variables.get("hdfs_namenode_host_port")
def hdfs_namenode_container_name = variables.get("hdfs_namenode_container_name")
def yarn_master_container_name = variables.get("yarn_master_container_name")

// Find a free port for yarn_master_gui_port
def yarn_nodemanager_gui_port = null
try {
  def server = new ServerSocket(0)
  yarn_nodemanager_gui_port = server.getLocalPort()
  server.close()
} catch (IOException e) {
  throw new RuntimeException( "Failed to find free local port to bind the agent to", e);
}

// Start the yarn worker container
def yarn_nodemanager_container_name = instance_name + "-yarn-nodemanager-" + task_replication_id
def cmd = ["docker", "run", "--rm", "-dit","-p", yarn_nodemanager_gui_port + ":" + 8042, "--name", yarn_nodemanager_container_name, "--net", targeted_network_name, "activeeon/yarn:latest"]
println cmd
def yarn_nodemanager_container_id = new StringBuilder()
cmd.execute().waitForProcessOutput(yarn_nodemanager_container_id, System.err)

// yarn nodemanager configuration + Start
def hdfs_core_site_config_command = "sed -i 's/toreplace:port/" + hdfs_namenode_host_port + "/g' \$HADOOP_HOME/etc/hadoop/core-site.xml"
def hdfs_hdfs_site_config = "sed -i 's/toreplace/" + hdfs_namenode_container_name + "/g' \$HADOOP_HOME/etc/hadoop/hdfs-site.xml"
def yarn_mapred_site_config = "sed -i 's/toreplace/" + yarn_master_container_name + "/g' \$HADOOP_HOME/etc/hadoop/mapred-site.xml"
def yarn_yarn_site_config = "sed -i 's/toreplace/" + yarn_master_container_name + "/g' \$HADOOP_HOME/etc/hadoop/yarn-site.xml"
def start_nodemanager_command = "\$HADOOP_HOME/sbin/yarn-daemon.sh start nodemanager"
def command_in_container = hdfs_core_site_config_command + ";" + hdfs_hdfs_site_config + ";" + yarn_mapred_site_config + ";" + yarn_yarn_site_config + ";" + start_nodemanager_command
cmd = ["docker", "exec", yarn_nodemanager_container_name, "/bin/sh", "-c", command_in_container]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

// Ensure Master is started
cmd = ["docker", "exec", yarn_nodemanager_container_name, "jps"]
println cmd

def docker_exec_jps_output = new StringBuilder()
while (!docker_exec_jps_output.toString().contains("NodeManager")){
	cmd.execute().waitForProcessOutput(docker_exec_jps_output, System.err)
	println(docker_exec_jps_output)
	sleep(1000)
}

// Propagate variables
variables.put("yarn_nodemanager_" + task_replication_id + "_pa_node_name", pa_node_name)

// Propagate variables to the current post script
new File(localspace, "yarn_nodemanager_container_id").text = yarn_nodemanager_container_id.toString()
new File(localspace, "yarn_nodemanager_container_name").text = yarn_nodemanager_container_name
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.JsonOutput

// Retrieve the script arguments
def yarn_nodemanager_container_id = new File(localspace, "yarn_nodemanager_container_id").text
def yarn_nodemanager_container_name = new File(localspace, "yarn_nodemanager_container_name").text

// Retrieve variables
def task_replication_id = variables.get("PA_TASK_REPLICATION")
def instance_name = variables.get("INSTANCE_NAME")
def pa_node_name = variables.get("PA_NODE_NAME")
def pa_node_host = variables.get("PA_NODE_HOST")
def pa_node_source_name = variables.get("PA_NODE_SOURCE")
def pa_node_url = variables.get("PA_NODE_URL")
def yarn_nodemanager_endpoint_name = "yarn_nodemanager_" + task_replication_id + "_gui_url"

// Create the deployment map and json
def deployment_map = ["endpoint":["id":yarn_nodemanager_endpoint_name],"node":["name":pa_node_name,"host":pa_node_host,"node_source_name":pa_node_source_name,"url":pa_node_url],"container":["id":yarn_nodemanager_container_id,"name":yarn_nodemanager_container_name]]
def deployment_json = JsonOutput.toJson(deployment_map)

// Propagate the deployment map
variables.put("yarn_deployment_json_" + ((task_replication_id as Integer) + 1), deployment_json)

// Add token to the current node (RM API)
rmapi.connect()
println "Adding token " + instance_name + " to node " + pa_node_url
rmapi.addNodeToken(pa_node_url, instance_name)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
          318.81945037841797
        </positionTop>
        <positionLeft>
          549.7361145019531
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="merge_json_deployments_and_propagate">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/yarn.png"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="start_yarn_nodemanager"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// Retrieve variables
def nb_yarn_nodemanagers = variables.get("nb_yarn_nodemanagers") as Integer
def yarn_master_and_workers_pa_node_names = variables.get("yarn_master_and_workers_pa_node_names")
for (i = 0; i < nb_yarn_nodemanagers; i++) {
    yarn_master_and_workers_pa_node_names += "," + variables.get("yarn_nodemanager_" + i + "_pa_node_name")
}

variables.put("yarn_master_and_workers_pa_node_names", yarn_master_and_workers_pa_node_names)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
          446.8194808959961
        </positionTop>
        <positionLeft>
          549.7361145019531
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="propagate_variables_and_update_deployments_with_service">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/yarn.png"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="merge_json_deployments_and_propagate"/>
      </depends>
      <pre>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Propagate_variables_to_current_service/raw">
            <arguments>
              <argument value="targeted_network_name"/>
              <argument value="VARIABLE_VALUE"/>
              <argument value="yarn_master_url"/>
              <argument value="VARIABLE_VALUE"/>
              <argument value="hdfs_namenode_host_port"/>
              <argument value="VARIABLE_VALUE"/>
              <argument value="hdfs_namenode_container_name"/>
              <argument value="VARIABLE_VALUE"/>
              <argument value="yarn_master_and_workers_pa_node_names"/>
              <argument value="VARIABLE_VALUE"/>
              <argument value="yarn_master_container_name"/>
              <argument value="VARIABLE_VALUE"/>
            </arguments>
          </file>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Add_deployments_and_update_service/raw">
            <arguments>
              <argument value="yarn_deployment_json_"/>
              <argument value="$nb_yarn_deployments"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <cleaning>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Clean_Start_Service/raw"/>
        </script>
      </cleaning>
      <metadata>
        <positionTop>
          574.8194808959961
        </positionTop>
        <positionLeft>
          549.7361145019531
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="loop_over_yarn_master_status">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/yarn.png"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="propagate_variables_and_update_deployments_with_service"/>
      </depends>
      <selection>
        <script type="dynamic">
          <code language="groovy">
            <![CDATA[
def yarn_master_and_workers_pa_node_names = variables.get("yarn_master_and_workers_pa_node_names")
def yarn_master_pa_node_name = yarn_master_and_workers_pa_node_names.split(",")[0]
selected = (nodename == yarn_master_pa_node_name)
]]>
          </code>
        </script>
      </selection>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
// Retrieve variables
def yarn_master_container_name = variables.get("yarn_master_container_name")
def instance_name = variables.get("INSTANCE_NAME")

// Ensure yarn master is running
def cmd = ["docker", "exec", yarn_master_container_name, "jps"]
println cmd
def docker_exec_jps_output = new StringBuilder()
cmd.execute().waitForProcessOutput(docker_exec_jps_output, System.err)

def is_yarn_master_ok = docker_exec_jps_output.toString().contains("ResourceManager")
println "DEBUG is_yarn_master_ok " + is_yarn_master_ok
def is_docker_based_service = true
def token_to_remove = instance_name

// Propagate to the current task script
new File(localspace, "arguments.txt").text = String.valueOf(is_yarn_master_ok) + "," + String.valueOf(is_docker_based_service) + "," + token_to_remove
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Loop_over_service_instance_status/raw"/>
        </script>
      </scriptExecutable>
      <controlFlow>
        <loop target="loop_over_yarn_master_status">
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Fetch_Logs/raw"/>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
          702.8194808959961
        </positionTop>
        <positionLeft>
          549.7361145019531
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2508px;
            height:2764px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-57.81945037841797px;left:-544.7361145019531px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_160" style="top: 62.833px; left: 549.75px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/yarn.png" width="20px">&nbsp;<span class="name">retrieve_services_variables</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_ active-task" id="jsPlumb_1_163" style="top: 190.819px; left: 550.736px; z-index: 24;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/yarn.png" width="20px">&nbsp;<span class="name">start_yarn_master</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_166" style="top: 318.833px; left: 549.75px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title=""><img src="/automation-dashboard/styles/patterns/img/wf-icons/yarn.png" width="20px">&nbsp;<span class="name">start_yarn_nodemanager</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_169" style="top: 446.833px; left: 549.75px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/yarn.png" width="20px">&nbsp;<span class="name">merge_json_deployments_and_propagate</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_172" style="top: 574.833px; left: 549.75px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/yarn.png" width="20px">&nbsp;<span class="name">propagate_variables_and_update_deployments_with_service</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_175" style="top: 702.833px; left: 549.75px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/yarn.png" width="20px">&nbsp;<span class="name">loop_over_yarn_master_status</span></a></div><svg style="position:absolute;left:597.7361145019531px;top:102.5px" width="39.763885498046875" height="88.81945037841797" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 87.81945037841797 C -10 37.81945037841797 28.763885498046875 50 18.763885498046875 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.2289322900390633,66.1381258708496 L10.89362825054786,48.758726400792966 L2.53751716051503,52.654288934116025 L-2.5902086861857194,44.992276950238875 L-1.2289322900390633,66.1381258708496" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.2289322900390633,66.1381258708496 L10.89362825054786,48.758726400792966 L2.53751716051503,52.654288934116025 L-2.5902086861857194,44.992276950238875 L-1.2289322900390633,66.1381258708496" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:632.2361145019531px;top:220.31945037841797px" width="44.06388549804683" height="99.18054962158203" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 23.06388549804683 88.18054962158203 C 33.06388549804683 88.18054962158203 -10 -10 0 0 " transform="translate(10.5,10.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#e5db3d" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M23.32638273385006,77.10237304673767 L24.746542666561982,55.960397127597105 L19.597498860984942,63.60809925884206 L11.252268878666374,59.689281000462216 L23.32638273385006,77.10237304673767" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M23.32638273385006,77.10237304673767 L24.746542666561982,55.960397127597105 L19.597498860984942,63.60809925884206 L11.252268878666374,59.689281000462216 L23.32638273385006,77.10237304673767" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_186" style="position: absolute; transform: translate(-50%, -50%); left: 653.768px; top: 270.66px;">replicate</div><svg style="position:absolute;left:597.7361145019531px;top:230.31945037841797px" width="34.763885498046875" height="89.18054962158203" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 13.763885498046875 88.18054962158203 C 23.763885498046875 38.18054962158203 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M15.420497788085939,66.46833812915038 L18.113533210012285,45.45054661300269 L12.512494112266122,52.77368535438393 L4.418880435245834,48.35855028882251 L15.420497788085939,66.46833812915038" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M15.420497788085939,66.46833812915038 L18.113533210012285,45.45054661300269 L12.512494112266122,52.77368535438393 L4.418880435245834,48.35855028882251 L15.420497788085939,66.46833812915038" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:611.5px;top:358.5px" width="59" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 38 88 C 48 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M37.268423999999996,65.364084 L33.72466221075183,44.472895609172056 L30.498736331201272,53.10964281049999 L21.470221021251813,51.24258327797078 L37.268423999999996,65.364084" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M37.268423999999996,65.364084 L33.72466221075183,44.472895609172056 L30.498736331201272,53.10964281049999 L21.470221021251813,51.24258327797078 L37.268423999999996,65.364084" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:649.5px;top:486.5px" width="63.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 42.5 88 C 52.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M41.154719375000006,64.9032055 L36.49908598088989,44.23136287047984 L33.73953468002493,53.028230302577164 L24.624110783467057,51.64654756545491 L41.154719375000006,64.9032055" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M41.154719375000006,64.9032055 L36.49908598088989,44.23136287047984 L33.73953468002493,53.028230302577164 L24.624110783467057,51.64654756545491 L41.154719375000006,64.9032055" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:624.5px;top:614.5px" width="88.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 77.5 50 67.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.793354999999998,63.554236 L23.95125368309902,54.500235886894586 L14.764222750965242,53.726632207988374 L14.12364989108739,44.529368135929346 L4.793354999999998,63.554236" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.793354999999998,63.554236 L23.95125368309902,54.500235886894586 L14.764222750965242,53.726632207988374 L14.12364989108739,44.529368135929346 L4.793354999999998,63.554236" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:701.0266769263776px;top:652.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_204" style="position: absolute; transform: translate(-50%, -50%); left: 713px; top: 722.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 617px; top: 93px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 598.236px; top: 220.819px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 598.236px; top: 180.819px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint replicate-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 632.736px; top: 220.819px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 612px; top: 349px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint replicate-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 655.8px; top: 309px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 612px; top: 309px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 650px; top: 477px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 650px; top: 437px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 692.5px; top: 605px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 692.5px; top: 565px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 625px; top: 733px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 625px; top: 693px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 711px; top: 693px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 711px; top: 733px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
