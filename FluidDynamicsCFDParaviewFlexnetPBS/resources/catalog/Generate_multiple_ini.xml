<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.13" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd"  name="Generate_Multiple_INI" projectName="CLIMB post-treatment" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="1" >
  <variables>
    <variable name="mapping_file_path_from_dataspace" value="mapping_logs_ini_templates.txt" description="The location of the config file describing per line: init file name,log file name."/>
  </variables>
  <description>
    <![CDATA[ Generate properties files from an incomplete properties files (i.e. files including keys without values) and  logs (where key-value pairs can be found). ]]>
  </description>
  <genericInformation>
    <info name="group" value="public-objects"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/multiple_ini.png"/>
  </genericInformation>
  <taskFlow>
    <task name="init" >
      <inputFiles>
        <files  includes="$mapping_file_path_from_dataspace" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// Retrieve the mapping file
def mapping_file_path_from_dataspace = variables.get("mapping_file_path_from_dataspace")

// Retrieve the content file
def file_content = new File(mapping_file_path_from_dataspace).text

// Number of tasks 
def lines_array = file_content.split("\n")
def nb_lines = lines_array.length 

// Store it + all inputs for each task
variables["nb_tasks"] = nb_lines

(0..nb_lines-1).each {
     def mapping = lines_array[it].split(",")
     variables["ini_template_file_${it}"] = mapping[0]
     variables["log_file_${it}"] = mapping[1]
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
runs=variables.get("nb_tasks")
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
    </task>
    <task name="generate_ini_files" >
      <depends>
        <task ref="init"/>
      </depends>
      <inputFiles>
        <files  includes="$ini_template_file_$PA_TASK_REPLICATION" accessMode="transferFromGlobalSpace"/>
        <files  includes="$log_file_$PA_TASK_REPLICATION" accessMode="transferFromGlobalSpace"/>
        <files  includes="commons-jexl3-3.0.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="commons-jexl3-3.0.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.apache.commons.jexl3.JexlBuilder
import org.apache.commons.jexl3.JexlContext
import org.apache.commons.jexl3.MapContext
import java.util.regex.Pattern

def isDouble (string)
{
	try {
		Double.parseDouble(string)
		return true
	} catch (e) {
		return false
	}
}

def isVariable (string)
{
	return string.matches("[a-zA-Z]+")
}

def findValue (key, logContent)
{
    def keyLinePattern = Pattern.compile(key + ".*")
    def occurences = logContent.findAll(keyLinePattern)

    def val = "null"
    if (occurences.isEmpty())
    	return val
    
    // Get the last occurence
    def nbOccurences = occurences.size()
	def lastOccurence = occurences.get(nbOccurences - 1)
    
    // Only retrieve val if detecting "xxx key = val xxx"
	def words = lastOccurence.split()
	def nbWords = words.size()
	for (i = 0; i < nbWords-2; i++)
	{
		if (words[i] == key && words[i+1] == "=")
		val = words[i+2]
	}
    return val
}

// Retrieve the replicated task	id
def task_id = variables.get("PA_TASK_REPLICATION")

// Retrieve the ini template file
def ini_template_file_name = variables.get("ini_template_file_" + task_id)
def ini_template_file = new File(ini_template_file_name)

// Retrieve the log file
def log_file_name = variables.get("log_file_" + task_id)
def log_file = new File(log_file_name)
def log_file_content = log_file.text

def ini_template_props = new Properties()
def ini_template_dis = ini_template_file.newDataInputStream()
ini_template_props.load(ini_template_dis)
def ini_template_props_names = ini_template_props.propertyNames()

while (ini_template_props_names.hasMoreElements()) 
{
	// Parse the property (key/val)
	def key = ini_template_props_names.nextElement()
	def val = ini_template_props.getProperty(key)
          
	// If the val is empty
	if (val.isEmpty())
	{
		def valFromLog = findValue(key, log_file_content)
		ini_template_props.setProperty(key, valFromLog)
	}
	
	// If it is an expression
	else if (!isDouble(val) && !isVariable(val))
	{
      		def engine = new JexlBuilder().create()
        	def expression = engine.createExpression(val)
        	def variables = expression.getVariables()
        
        	// Retrieve all variables from the expression, look into the log their values, and update paramsMap
        	def paramsMap = new MapContext()
		variables.each { variable ->
            
    			// ... retrieve the value from the log ...
	        	println("variable " + variable)
			// (by default, variable like aa.bb.cc will be retrieved into [[aa][bb][cc]], so merge)        	        
			variableJoin = String.join(".", variable);
        	        println("variableJoin " + variableJoin)
        	        def valFromLog = findValue(variableJoin, log_file_content)
        	        println("valFromLog " + valFromLog)
        	       
			 // ... and add it to the paramsMap
			if (valFromLog != "null")
        	        	paramsMap.set(variableJoin, Double.parseDouble(valFromLog));
			else
				paramsMap.set(variableJoin, valFromLog);
		};
      
        	// Evaluate the expression with the parameters
	        def result = expression.evaluate(paramsMap)
	        println("result " + result)

	        // Set the result in the properties file
	        ini_template_props.setProperty(key, result + "")
	}
}

// Save
def instanciated_ini_props_file_name = task_id + "_" + ini_template_file_name
def instanciated_ini_props_file = new File(instanciated_ini_props_file_name)
ini_template_props.store(instanciated_ini_props_file.newWriter(), null)

// For the output file transfer
variables["instanciated_ini_props_file_name"] = instanciated_ini_props_file_name

// Expose the instanciated ini file
result = instanciated_ini_props_file.getBytes()
resultMetadata.put("file.name", instanciated_ini_props_file.name)
resultMetadata.put("content.type", "application/octet-stream")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <outputFiles>
        <files  includes="$instanciated_ini_props_file_name" accessMode="transferToGlobalSpace"/>
      </outputFiles>
    </task>
    <task name="end" >
      <depends>
        <task ref="generate_ini_files"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println ""
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1139px;
            height:566px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-205.9875030517578px;left:-501px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_4189" style="top: 211px; left: 506px;"><a class="task-name"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">init</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_4192" style="top: 339px; left: 506px;"><a class="task-name"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">generate_ini_files</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_4195" style="top: 467px; left: 506px;"><a class="task-name"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">end</span></a></div><svg style="position:absolute;left:575.5px;top:240.5px" width="31.399999999999977" height="99" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 10.399999999999977 88 C 20.399999999999977 88 -10 -10 0 0 " transform="translate(10.5,10.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#e5db3d" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M12.152672099999979,77.41936575 L16.243697126380056,56.628417858344555 L10.16597747640129,63.56104534410073 L2.385376720480788,58.61511248194325 L12.152672099999979,77.41936575" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M12.152672099999979,77.41936575 L16.243697126380056,56.628417858344555 L10.16597747640129,63.56104534410073 L2.385376720480788,58.61511248194325 L12.152672099999979,77.41936575" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_4203" style="position: absolute; transform: translate(-50%, -50%); left: 590.7px; top: 290.75px;">replicate</div><svg style="position:absolute;left:545.5px;top:250.5px" width="27.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 6.5 88 C 16.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M8.787796875,66.78168750000002 L13.502214816791486,46.123171980483264 L7.218760132881903,52.86988949607962 L-0.4095831871289066,47.692208722601364 L8.787796875,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M8.787796875,66.78168750000002 L13.502214816791486,46.123171980483264 L7.218760132881903,52.86988949607962 L-0.4095831871289066,47.692208722601364 L8.787796875,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:545.5px;top:378.5px" width="27.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 16.5 50 6.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.287796875,66.78168750000002 L6.909583187128906,47.692208722601364 L-0.7187601328819035,52.86988949607962 L-7.002214816791488,46.123171980483264 L-2.287796875,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.287796875,66.78168750000002 L6.909583187128906,47.692208722601364 L-0.7187601328819035,52.86988949607962 L-7.002214816791488,46.123171980483264 L-2.287796875,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 546px; top: 241px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint replicate-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 576px; top: 241px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 552.5px; top: 369px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint replicate-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 586.4px; top: 329px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 552.5px; top: 329px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 546px; top: 497px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 546px; top: 457px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>