<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.13" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd"  name="PostLaBS_Multiple" projectName="CLIMB post-treatment" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="1" >
  <variables>
    <variable name="nb_split" value="2" />
    <variable name="postlabs_dir_path" value="/home/gantha/Public/Tests/tests_JM/PostLaBS-3" />
    <variable name="postlabs_input_file_path_from_dataspace" value="params_demo1.params" />
    <variable name="paraview_dir_path" value="/home/gantha/ParaView/ParaView-4.3.1-Linux-64bit/" />
    <variable name="paraview_plugin_dir_path" value="/home/gantha/ParaView/ParaView-4.3.1-Linux-64bit/lib/paraview-4.3" />
  </variables>
  <description>
    <![CDATA[ Submit multiple PostLaBS tasks in parallel. ]]>
  </description>
  <genericInformation>
    <info name="group" value="public-objects"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/multiple_postlabs.png"/>
  </genericInformation>
  <taskFlow>
    <task name="process_params" >
      <inputFiles>
        <files  includes="$postlabs_input_file_path_from_dataspace" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <selection>
        <script type="dynamic">
          <code language="groovy">
            <![CDATA[
def postlabs_dir_path = variables.get("postlabs_dir_path")
def paraview_dir_path = variables.get("paraview_dir_path")
def paraview_plugin_dir_path = variables.get("paraview_plugin_dir_path")

if (new File(postlabs_dir_path).exists() && new File(paraview_dir_path).exists() && new File(paraview_plugin_dir_path).exists()) {
	
    selected = true;
} else {
	selected = false;
}
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println "process_params ..."


// Retrieve variables
def nb_split = variables.get("nb_split")
def postlabs_dir_path = variables.get("postlabs_dir_path")
def postlabs_input_file_path_from_dataspace = variables.get("postlabs_input_file_path_from_dataspace")
def paraview_dir_path = variables.get("paraview_dir_path")
def paraview_plugin_dir_path = variables.get("paraview_plugin_dir_path")

// Define cmd
def pvbatch_file_path = new File(paraview_dir_path, "bin/pvbatch").absolutePath
def postlabs_parallel_dir_path = new File (postlabs_dir_path, "Parallel").absolutePath
def postlabs_python_file_path = new File (postlabs_parallel_dir_path, "Functions/main_process_params.py").absolutePath
def cmd = [pvbatch_file_path, "--use-offscreen-rendering", postlabs_python_file_path, nb_split, postlabs_parallel_dir_path, postlabs_input_file_path_from_dataspace, postlabs_dir_path]

// Execute command
def envVars = []
cmd.execute(envVars, null).waitForProcessOutput(System.out, System.out)

// Store GEOMETRY_PATH and DATA_PATH into variables for the node selection of the next task
def average_params_file = new File (localspace, "temp/average/average.txt")
def average_params_file_content = average_params_file.text
def average_params_file_props = new Properties()
def average_params_file_dis = average_params_file.newDataInputStream()

average_params_file_props.load(average_params_file_dis)

// Store variables
variables["average_geometry_file_path"] = average_params_file_props.getProperty("GEOMETRY_PATH")
variables["average_data_path"] = average_params_file_props.getProperty("DATA_PATH")

  
println "... process_params"
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="temp/**" accessMode="transferToGlobalSpace"/>
      </outputFiles>
    </task>
    <task name="distrib_postlabs_inputs_and_first_postlabs" >
      <depends>
        <task ref="process_params"/>
      </depends>
      <inputFiles>
        <files  includes="temp/**" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <selection>
        <script type="dynamic">
          <code language="groovy">
            <![CDATA[
// Retrieve variables
def postlabs_dir_path = variables.get("postlabs_dir_path")
def paraview_dir_path = variables.get("paraview_dir_path")
def paraview_plugin_dir_path = variables.get("paraview_plugin_dir_path")
def average_geometry_file_path = variables.get("average_geometry_file_path")
def average_data_path = variables.get("average_data_path")
 
// Conditional node selection
if (new File(postlabs_dir_path).exists() && new File(paraview_dir_path).exists() && new File(paraview_plugin_dir_path).exists() && new File(average_geometry_file_path).exists() && new File(average_data_path).exists()) {
	selected = true;
} else {
	selected = false;
}
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.io.FileType


println "distrib_postlabs_inputs_and_first_postlabs ..."


// Retrieve variables
def nb_split = variables.get("nb_split") as Integer
def average_params_file_path = new File (localspace, "temp/average/average.txt").absolutePath
def postlabs_dir_path = variables.get("postlabs_dir_path")
def paraview_dir_path = variables.get("paraview_dir_path")
def paraview_plugin_dir_path = variables.get("paraview_plugin_dir_path")
def python_path = variables.get("python_path")


// For each postlabs input file, store its name, its related geometry and data file names, into dedicated variables
(0..nb_split-1).each{ split_id ->

	// Parse the param file
	def params_file_path_from_dataspace = "temp/" + split_id + "/process_" + split_id + ".txt"
	def params_file = new File (localspace, params_file_path_from_dataspace)
	def params_file_content = params_file.text
	def params_file_props = new Properties()
	def params_file_dis = params_file.newDataInputStream()

	params_file_props.load(params_file_dis)

	// Store variables
	variables["params_file_path_from_dataspace_" + split_id] = params_file_path_from_dataspace
        variables["geometry_path_" + split_id] = params_file_props.getProperty("GEOMETRY_PATH")
	variables["data_path_" + split_id] = params_file_props.getProperty("DATA_PATH")
}

// First postlabs to generate the average parameter file
// Define envVars
def envVars = ["MACROPARAM="+average_params_file_path, "MACRODIR="+postlabs_dir_path, "PARAVIEWDIR="+paraview_dir_path, "PARAVIEWPLUGINDIR="+paraview_plugin_dir_path, "PYTHONPATH="+python_path]

// Define cmd
def pvbatch_file_path = new File(paraview_dir_path, "bin/pvbatch").absolutePath
def postlabs_python_file_path = new File (postlabs_dir_path, "PostLaBS.py").absolutePath
def cmd = [pvbatch_file_path, "--use-offscreen-rendering", postlabs_python_file_path]

// Execute command
cmd.execute(envVars, null).waitForProcessOutput(System.out, System.out)
    
    
println "... distrib_postlabs_inputs_and_first_postlabs"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
// Dynamic replication
runs=variables.get("nb_split")
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
      <outputFiles>
        <files  includes="temp/**" accessMode="transferToGlobalSpace"/>
      </outputFiles>
    </task>
    <task name="postlabs" >
      <depends>
        <task ref="distrib_postlabs_inputs_and_first_postlabs"/>
      </depends>
      <inputFiles>
        <files  includes="temp/$PA_TASK_REPLICATION/process_$PA_TASK_REPLICATION.txt" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <selection>
        <script type="dynamic">
          <code language="groovy">
            <![CDATA[
// Retrieve variables
def postlabs_dir_path = variables.get("postlabs_dir_path")
def paraview_dir_path = variables.get("paraview_dir_path")
def paraview_plugin_dir_path = variables.get("paraview_plugin_dir_path")
def task_id = variables.get('PA_TASK_REPLICATION')
def geometry_path = variables.get('geometry_path_' + task_id)
def data_path = variables.get('data_path_' + task_id);
 
// Conditional node selection
if (new File(postlabs_dir_path).exists() && new File(paraview_dir_path).exists() && new File(paraview_plugin_dir_path).exists() && new File(geometry_path).exists() && new File(data_path).exists()) {
	selected = true;
} else {
	selected = false;
}
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println "postlabs ..."


// Retrieve some variables
def task_id = variables.get("PA_TASK_REPLICATION")
def params_file_path_from_dataspace = variables.get("params_file_path_from_dataspace_" + task_id)
def postlabs_dir_path = variables.get("postlabs_dir_path")
def paraview_dir_path = variables.get("paraview_dir_path")
def paraview_plugin_dir_path = variables.get("paraview_plugin_dir_path")
def python_path = variables.get("python_path")

// Define envVars
def params_file_path = new File(localspace, params_file_path_from_dataspace).absolutePath
def envVars = ["MACROPARAM="+params_file_path, "MACRODIR="+postlabs_dir_path, "PARAVIEWDIR="+paraview_dir_path, "PARAVIEWPLUGINDIR="+paraview_plugin_dir_path, "PYTHONPATH="+python_path]

// Define cmd
def pvbatch_file_path = new File(paraview_dir_path, "bin/pvbatch").absolutePath
def postlabs_python_file_path = new File (postlabs_dir_path, "PostLaBS.py").absolutePath
def cmd = [pvbatch_file_path, "--use-offscreen-rendering", postlabs_python_file_path]

// Execute command
cmd.execute(envVars, null).waitForProcessOutput(System.out, System.out)


println "... postlabs"
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="temp/$PA_TASK_REPLICATION/*.log" accessMode="transferToGlobalSpace"/>
      </outputFiles>
    </task>
    <task name="end" >
      <depends>
        <task ref="postlabs"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="javascript">
            <![CDATA[
print("end ...");


// For the cloud automation portal integration
var myObject={};
myObject.id="multiPostLaBS";
myObject.status="TERMINATED";
myObject.endpoint="";
result = JSON.stringify(myObject);


print("... end");
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1122px;
            height:582px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-142px;left:-528.25px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_5023" style="top: 147px; left: 533.25px;"><a class="task-name"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">process_params</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_5026" style="top: 275px; left: 533.25px;"><a class="task-name"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">distrib_postlabs_inputs_and_first_postlabs</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_5029" style="top: 403px; left: 533.25px;"><a class="task-name"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">postlabs</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_5032" style="top: 531px; left: 533.25px;"><a class="task-name"><img src="/studio/images/Javascript.png" width="20px">&nbsp;<span class="name">end</span></a></div><svg style="position:absolute;left:578px;top:186.5px" width="78" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 57 88 C 67 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M53.680506750000006,63.998374500000004 L46.050422394111685,44.23017243906314 L44.60766171298321,53.33612882030008 L35.38817671441176,53.303017476079944 L53.680506750000006,63.998374500000004" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M53.680506750000006,63.998374500000004 L46.050422394111685,44.23017243906314 L44.60766171298321,53.33612882030008 L35.38817671441176,53.303017476079944 L53.680506750000006,63.998374500000004" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:603.5px;top:304.5px" width="119.39999999999998" height="99" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 88 108.39999999999998 -10 98.39999999999998 0 " transform="translate(10.5,10.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#e5db3d" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M10.889951699999994,74.43729225 L30.279260238080944,65.89008718547153 L21.11574300142288,64.87522174933206 L20.71718973741301,55.66429588404864 L10.889951699999994,74.43729225" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M10.889951699999994,74.43729225 L30.279260238080944,65.89008718547153 L21.11574300142288,64.87522174933206 L20.71718973741301,55.66429588404864 L10.889951699999994,74.43729225" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_5043" style="position: absolute; transform: translate(-50%, -50%); left: 662.7px; top: 354.75px;">replicate</div><svg style="position:absolute;left:573.5px;top:314.5px" width="82.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 71.5 50 61.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M3.809294624999998,63.998374500000004 L22.47110010955924,53.961591347192794 L13.256289695604634,53.666178018323336 L12.138903627882573,44.514596276588165 L3.809294624999998,63.998374500000004" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M3.809294624999998,63.998374500000004 L22.47110010955924,53.961591347192794 L13.256289695604634,53.666178018323336 L12.138903627882573,44.514596276588165 L3.809294624999998,63.998374500000004" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:568.9817132113825px;top:442.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 578.5px; top: 177px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 635.5px; top: 305px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 635.5px; top: 265px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint replicate-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 702.4px; top: 305px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 574px; top: 433px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint replicate-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 604px; top: 393px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 574px; top: 393px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 574px; top: 561px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 574px; top: 521px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>