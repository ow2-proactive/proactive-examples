<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.10"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
    name="Paraview_server_stop" projectName="CLIMB post-treatment"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
    <description>
        <![CDATA[ Stop a Paraview server. ]]>
    </description>
 <genericInformation>
    <info name="group" value="public-objects"/>
    <info name="pca.service.id" value="Paraview_server"/>
    <info name="pca.states" value="(PARAVIEW_SERVER_STARTED,FINISHED)"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/paraview_server.png"/>
  </genericInformation>
 <taskFlow>
    

    <task name="get_service_infos">
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Retrieve variables
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// get the node source name and store it
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
def Paraview_server_IP_address = service_instance_data.getVariables().get("Paraview_server_IP_address")
variables.put("Paraview_server_IP_address", Paraview_server_IP_address)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="stop_LaBSGUI_and_update_servince_instance">
      <depends>
        <task ref="get_service_infos"/>
      </depends>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <selection>
        <script>
          <code language="groovy">
            <![CDATA[
def Paraview_server_IP_address = variables.get("Paraview_server_IP_address")
if (org.ow2.proactive.scripting.helper.selection.SelectionUtils.checkIp(Paraview_server_IP_address)) {
    selected = true
} else {
    selected = false
}
]]>
          </code>
        </script>
      </selection>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Retrieve variables
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Kill the labs process
def cmd = ["pkill", "pvserver"]
cmd.execute().waitForProcessOutput(System.out, System.err)

// Update the related service instance status
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
service_instance_data.setInstanceStatus("FINISHED")
service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>


  </taskFlow>
</job>
