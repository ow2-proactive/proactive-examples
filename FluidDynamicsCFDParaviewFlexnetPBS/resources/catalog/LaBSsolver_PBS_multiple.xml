<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.13" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd"  name="Solve_Multiple_Labs_PBS" projectName="CLIMB treatment" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="qsub_commands_file_path_from_dataspace" value="qsub_commands.txt" description="The qsub commands file location."/>
    <variable name="waiting_finished_jobs_timeout_in_sec" value="30" description="PBS job timeout."/>
  </variables>
  <description>
    <![CDATA[ An example of multiple PBS jobs submissions. Here we does not natively handle PBS jobs. ]]>
  </description>
  <genericInformation>
    <info name="group" value="public-objects"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/multiple_labssolver_pbs.png"/>
  </genericInformation>
  <taskFlow>
    <task name="exec_qsub_commands" >
      <inputFiles>
        <files  includes="$qsub_commands_file_path_from_dataspace" accessMode="transferFromGlobalSpace"/>
        <files  includes="*.run" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println "exec_qsub_commands ..."

// Retrieve the qsub command file
def qsub_commands_file_path_from_dataspace = variables.get("qsub_commands_file_path_from_dataspace")

// 1 line = 1 qsub command
def file_content = new File(qsub_commands_file_path_from_dataspace).text
def lines_array = file_content.split("\n")

// Retrieve nb_qsub_commands
def nb_qsub_commands = lines_array.length
def job_ids = ""

(0..nb_qsub_commands-1).each {

	 // Build the qsub command
	 def qsub_command = lines_array[it]
	 println "command: " + qsub_command
	 qsub_command_arr = qsub_command.split()
	 
	 // execute qsub and save the job id
	 def job_id = new StringBuilder()
	 qsub_command_arr.execute().waitForProcessOutput(job_id, System.err)
	 
	 // store all submitted job ids
	 job_ids += (job_id+"").split("\\.")[0] + " "
}

variables.put("submitted_job_ids", job_ids)
println "job_ids: " + job_ids	 

println "... exec_qsub_commands"
]]>
          </code>
        </script>
      </scriptExecutable>
     </task>
	<task name="wait_jobs_executions">
      <depends>
        <task ref="exec_qsub_commands"/>
      </depends>
      <inputFiles>
        <files  includes="*.run" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.time.TimeCategory 
			
println "wait_jobs_executions ..."
			
// Retrieve the timeout
def timeout_in_sec = variables["waiting_finished_jobs_timeout_in_sec"].toInteger()

// Retrieve the submitted job ids
def submitted_job_ids = variables["submitted_job_ids"]
def nb_submitted_job_ids = submitted_job_ids.split().length

// Build the qstat command to retrive the zombies/finished jobs among the submitted ones
def qstat_command = "qstat " + submitted_job_ids
qstat_command_arr = qstat_command.split()

def timeStart = new Date()
while(true)
{
	// execute the qstat command
	def qstat_res = new StringBuilder()
	qstat_command_arr.execute().waitForProcessOutput(qstat_res, System.err)
	println "qstat_res: " + qstat_res	

	def all_completed = qstat_res.toString().isEmpty()
	println "all_completed: " + all_completed		

	// Break if all submitted jobs no more appear in the qstat command result or the timeout is reached
	if (all_completed || (TimeCategory.minus(new Date(), timeStart).seconds > timeout_in_sec))
		break
	
	// every 2s
	sleep(2000)
} 

println "... wait_jobs_executions"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1139px;
            height:566px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-269.9875030517578px;left:-477px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_4537" style="top: 275px; left: 482px;"><a class="task-name"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">exec_qsub_commands</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_4540" style="top: 403px; left: 482px;"><a class="task-name"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">wait_jobs_executions</span></a></div><svg style="position:absolute;left:536.5px;top:314.5px" width="25" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 14 50 4 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.4906875000000004,66.78168750000002 L6.088432834392776,47.40647926142854 L-1.3695665952116438,52.82664941632405 L-7.866605249283188,46.28535835664018 L-2.4906875000000004,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.4906875000000004,66.78168750000002 L6.088432834392776,47.40647926142854 L-1.3695665952116438,52.82664941632405 L-7.866605249283188,46.28535835664018 L-2.4906875000000004,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 541px; top: 305px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 537px; top: 433px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 537px; top: 393px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>