<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.14" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="SOAP_Countries" onTaskError="continueJobExecution" priority="normal" projectName="1. SOAP Workflows" tags="SOAP,API,Web Service" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd">
  <variables>
    <variable advanced="false" description="Public SOAP service URL" group="Connection Parameters" hidden="false" model="PA:URL" name="SERVICE_URL" value="http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso"/>
    <variable advanced="false" description="The ISO country code" group="Service Parameters" hidden="false" model="PA:NOT_EMPTY_STRING" name="COUNTRY_CODE" value="US"/>
  </variables>
  <description>
    <![CDATA[ A workflow that runs a collection of public SOAP requests (that do not require any authentication). It returns for a given country code:
- The international phone code
- The name of the capital city
- The currency name ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="communication-soap"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/api-soap.png"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Get_Capital_City">
        <description>
            <![CDATA[ A task that runs a public SOAP request to return for a given country code the name of its capital city. ]]>
        </description>
        <variables>
        <variable name="ENVELOPE" value="Capital_City_Envelope.xml" inherited="false" model="NOT_EMPTY_STRING" description="SOAP envelope consumed by the service." group="Service Parameters" advanced="false" hidden="true"/>
        </variables>
        <genericInformation>
        <info name="PRE_SCRIPT_AS_FILE" value="${ENVELOPE}"/>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/api-soap.png"/>
      </genericInformation>
      <pre>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/communication-soap/resources/Capital_City_Envelope/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
@Grab(group='com.github.groovy-wslite', module='groovy-wslite', version='1.1.0')

import groovy.xml.*
import wslite.soap.*
import wslite.http.auth.*
import java.io.StringReader
import javax.xml.parsers.DocumentBuilder
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.transform.Transformer
import javax.xml.transform.TransformerException
import javax.xml.transform.TransformerFactory
import javax.xml.transform.dom.DOMSource
import javax.xml.transform.stream.StreamResult
import org.w3c.dom.Document
import org.xml.sax.InputSource
import javax.xml.transform.OutputKeys

serviceURL = variables.get("SERVICE_URL")
countryCode = variables.get("COUNTRY_CODE")
envelope = variables.get("ENVELOPE")

def client = new SOAPClient(serviceURL)

def soapEnvelope = new File(envelope).text
def doc = convertStringToXMLDocument(soapEnvelope)
doc.getElementsByTagName("sCountryISOCode").item(0).setTextContent(countryCode)

def convertStringToXMLDocument(def xmlString){
    //API to obtain DOM Document instance with default configuration
    def builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
    def doc = builder.parse(new InputSource(new StringReader(xmlString)));
    doc.getDocumentElement().normalize();
    return doc
}

def convertXMLDocumentToString(def doc){
    def tf = TransformerFactory.newInstance();
    def transformer;
    transformer = tf.newTransformer();
    // below code to remove XML declaration
    // transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
    def writer = new StringWriter()
    transformer.transform(new DOMSource(doc), new StreamResult(writer))
    return writer.getBuffer().toString()
}

def response = client.send(connectTimeout:5000,
                           readTimeout:20000,
                           useCaches:false,
                           followRedirects:false,
                           sslTrustAllCerts:true, convertXMLDocumentToString(doc))

resultMap.put("Country Code", countryCode)
resultMap.put("City Capital", response.getBody().toString())
println("Country Code is: " + countryCode)
println("City capital is: " + response.getBody().toString())
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            242.8559112548828
        </positionTop>
        <positionLeft>
            428.2899475097656
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Get_International_Phone_Code">
        <description>
        <![CDATA[ A task that runs a public SOAP request to return for a given country code its international phone code. ]]>
        </description>
        <variables>
            <variable name="ENVELOPE" value="International_Phone_Code_Envelope.xml" inherited="false" model="NOT_EMPTY_STRING" description="SOAP envelope consumed by the service." group="Service Parameters" advanced="false" hidden="true"/>
        </variables>
        <genericInformation>
        <info name="PRE_SCRIPT_AS_FILE" value="${ENVELOPE}"/>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/api-soap.png"/>
      </genericInformation>
      <pre>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/communication-soap/resources/International_Phone_Code_Envelope/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
@Grab(group='com.github.groovy-wslite', module='groovy-wslite', version='1.1.0')

import groovy.xml.*
import wslite.soap.*
import wslite.http.auth.*
import java.io.StringReader
import javax.xml.parsers.DocumentBuilder
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.transform.Transformer
import javax.xml.transform.TransformerException
import javax.xml.transform.TransformerFactory
import javax.xml.transform.dom.DOMSource
import javax.xml.transform.stream.StreamResult
import org.w3c.dom.Document
import org.xml.sax.InputSource
import javax.xml.transform.OutputKeys

serviceURL = variables.get("SERVICE_URL")
countryCode = variables.get("COUNTRY_CODE")
envelope = variables.get("ENVELOPE")

def client = new SOAPClient(serviceURL)

def soapEnvelope = new File(envelope).text
def doc = convertStringToXMLDocument(soapEnvelope)
doc.getElementsByTagName("sCountryISOCode").item(0).setTextContent(countryCode)

def convertStringToXMLDocument(def xmlString){
    //API to obtain DOM Document instance with default configuration
    def builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
    def doc = builder.parse(new InputSource(new StringReader(xmlString)));
    doc.getDocumentElement().normalize();
    return doc
}

def convertXMLDocumentToString(def doc){
    def tf = TransformerFactory.newInstance();
    def transformer;
    transformer = tf.newTransformer();
    // below code to remove XML declaration
    // transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
    def writer = new StringWriter()
    transformer.transform(new DOMSource(doc), new StreamResult(writer))
    return writer.getBuffer().toString()
}

def response = client.send(connectTimeout:5000,
                           readTimeout:20000,
                           useCaches:false,
                           followRedirects:false,
                           sslTrustAllCerts:true, convertXMLDocumentToString(doc))

resultMap.put("International Phone Code", response.getBody().toString())
println("International Phone Code is: " + response.getBody().toString())
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            237.97743225097656
        </positionTop>
        <positionLeft>
            583.4114685058594
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Get_Currency">
        <description>
        <![CDATA[ A task that runs a public SOAP request to return for a given country code its currency. ]]>
        </description>
        <variables>
            <variable name="ENVELOPE" value="Currency_Envelope.xml" inherited="false" model="NOT_EMPTY_STRING" description="SOAP envelope consumed by the service." group="Service Parameters" advanced="false" hidden="true"/>
        </variables>
        <genericInformation>
        <info name="PRE_SCRIPT_AS_FILE" value="${ENVELOPE}"/>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/api-soap.png"/>
      </genericInformation>
      <pre>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/communication-soap/resources/Currency_Envelope/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
@Grab(group='com.github.groovy-wslite', module='groovy-wslite', version='1.1.0')

import groovy.xml.*
import wslite.soap.*
import wslite.http.auth.*
import java.io.StringReader
import javax.xml.parsers.DocumentBuilder
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.transform.Transformer
import javax.xml.transform.TransformerException
import javax.xml.transform.TransformerFactory
import javax.xml.transform.dom.DOMSource
import javax.xml.transform.stream.StreamResult
import org.w3c.dom.Document
import org.xml.sax.InputSource
import javax.xml.transform.OutputKeys

serviceURL = variables.get("SERVICE_URL")
countryCode = variables.get("COUNTRY_CODE")
envelope = variables.get("ENVELOPE")

def client = new SOAPClient(serviceURL)

def soapEnvelope = new File(envelope).text
def doc = convertStringToXMLDocument(soapEnvelope)
doc.getElementsByTagName("sCountryISOCode").item(0).setTextContent(countryCode)

def convertStringToXMLDocument(def xmlString){
    //API to obtain DOM Document instance with default configuration
    def builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
    def doc = builder.parse(new InputSource(new StringReader(xmlString)));
    doc.getDocumentElement().normalize();
    return doc
}

def convertXMLDocumentToString(def doc){
    def tf = TransformerFactory.newInstance();
    def transformer;
    transformer = tf.newTransformer();
    // below code to remove XML declaration
    // transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
    def writer = new StringWriter()
    transformer.transform(new DOMSource(doc), new StreamResult(writer))
    return writer.getBuffer().toString()
}

def response = client.send(connectTimeout:5000,
                           readTimeout:20000,
                           useCaches:false,
                           followRedirects:false,
                           sslTrustAllCerts:true, convertXMLDocumentToString(doc))
currency = convertStringToXMLDocument(response.text).getElementsByTagName("m:sName").item(0).getTextContent()
resultMap.put("Currency", currency)
println("Currency is: " + currency)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            234.98265075683594
        </positionTop>
        <positionLeft>
            816.4150085449219
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2388px;
            height:3142px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-229.98265075683594px;left:-423.2899475097656px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_366" style="top: 242.864px; left: 428.298px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/api-soap.png" width="20px">&nbsp;<span class="name">Get_Captial_City</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i id="called-icon"></i></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_369" style="top: 237.986px; left: 583.42px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/api-soap.png" width="20px">&nbsp;<span class="name">Get_International_Phone_Code</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i id="called-icon"></i></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_372" style="top: 234.991px; left: 816.423px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/api-soap.png" width="20px">&nbsp;<span class="name">Get_Currency</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i id="called-icon"></i></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 475.5px; top: 273px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 663px; top: 268px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 857px; top: 265px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
