<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.14" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="SOAP_Calculator" onTaskError="continueJobExecution" priority="normal" projectName="1. SOAP Workflows" tags="SOAP,API,Web Service" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd">
  <variables>
    <variable advanced="false" description="Public SOAP service URL" group="Connection Parameters" hidden="false" model="PA:URL" name="SERVICE_URL" value="http://www.dneonline.com/calculator.asmx"/>
    <variable advanced="false" description="The name of the operation to be considered" group="Service Parameters" hidden="false" model="PA:LIST(Add,Divide,Multiply,Subtract)" name="ARITHMETIC_OPERATOR" value="Multiply"/>
    <variable advanced="false" description="The value of the first operand" group="Service Parameters" hidden="false" model="PA:INTEGER" name="OPERAND_1" value="5"/>
    <variable advanced="false" description="The value of the second operand" group="Service Parameters" hidden="false" model="PA:INTEGER" name="OPERAND_2" value="7"/>
  </variables>
  <description>
    <![CDATA[ A workflow that runs some basic public SOAP request (that do not require any authentication). It takes as input two operands and one of the following arithmetic operations: Add, Divide, Multiply and Subtract.
    It returns the result of the arithmetic operation applied to the given operands.]]>
  </description>
  <genericInformation>
<info name="bucketName" value="communication-soap"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/api-soap.png"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Compute_Arithmetic_Operation">
        <description>
        <![CDATA[ A task that runs a public SOAP request to return the result of an arithmetic operation defined by the user. ]]>
        </description>
        <variables>
            <variable name="ENVELOPE" value="Calculator_Envelope.xml" inherited="false" model="NOT_EMPTY_STRING" description="SOAP envelope consumed by the service." group="Service Parameters" advanced="false" hidden="true"/>
        </variables>
        <genericInformation>
        <info name="PRE_SCRIPT_AS_FILE" value="${ENVELOPE}"/>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/api-soap.png"/>
      </genericInformation>
      <pre>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/communication-soap/resources/Calculator_Envelope/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
@Grab(group='com.github.groovy-wslite', module='groovy-wslite', version='1.1.0')

import groovy.xml.*
import wslite.soap.*
import wslite.http.auth.*
import java.io.StringReader
import javax.xml.parsers.DocumentBuilder
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.transform.Transformer
import javax.xml.transform.TransformerException
import javax.xml.transform.TransformerFactory
import javax.xml.transform.dom.DOMSource
import javax.xml.transform.stream.StreamResult
import org.w3c.dom.Document
import org.w3c.dom.Attr
import org.w3c.dom.Element
import org.xml.sax.InputSource
import javax.xml.transform.OutputKeys

serviceURL = variables.get("SERVICE_URL")
arithmeticOperator = variables.get("ARITHMETIC_OPERATOR")
operand1 = variables.get("OPERAND_1")
operand2 = variables.get("OPERAND_2")
envelope = variables.get("ENVELOPE")

def client = new SOAPClient(serviceURL)

def soapEnvelope = new File(envelope).text
def doc = convertStringToXMLDocument(soapEnvelope)
element = doc.getElementsByTagName("Operator").item(0)
element2 = doc.createElement(arithmeticOperator);
attrs = element.getAttributes();
for (int i = 0; i < attrs.getLength(); i++) {
      Attr attr2 = (Attr) doc.importNode(attrs.item(i), true);
      element2.getAttributes().setNamedItem(attr2);
}
while (element.hasChildNodes()) {
      element2.appendChild(element.getFirstChild());
}
element.getParentNode().replaceChild(element2, element);
doc.getElementsByTagName("intA").item(0).setTextContent(operand1)
doc.getElementsByTagName("intB").item(0).setTextContent(operand2)


def convertStringToXMLDocument(def xmlString){
    //API to obtain DOM Document instance with default configuration
    def builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
    def doc = builder.parse(new InputSource(new StringReader(xmlString)));
    doc.getDocumentElement().normalize();
    return doc
}

def convertXMLDocumentToString(def doc){
    def tf = TransformerFactory.newInstance();
    def transformer;
    transformer = tf.newTransformer();
    // below code to remove XML declaration
    // transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
    def writer = new StringWriter()
    transformer.transform(new DOMSource(doc), new StreamResult(writer))
    return writer.getBuffer().toString()
}

def response = client.send(connectTimeout:5000,
                           readTimeout:20000,
                           useCaches:false,
                           followRedirects:false,
                           sslTrustAllCerts:true, convertXMLDocumentToString(doc))
resultMap.put("Arithmetic Operator", arithmeticOperator)
resultMap.put("Operand 1", operand1)
resultMap.put("Operand 2", operand2)
resultMap.put("Result", response.getBody().toString())
println(arithmeticOperator + " result: " + response.getBody().toString())
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            242.86460876464844
        </positionTop>
        <positionLeft>
            518.2986145019531
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2388px;
            height:2889px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-237.86460876464844px;left:-513.2986145019531px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable active-task" id="jsPlumb_1_375" style="top: 242.873px; left: 518.307px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title=""><img src="/automation-dashboard/styles/patterns/img/wf-icons/api-soap.png" width="20px">&nbsp;<span class="name">Compute_Arithmetic_Operation</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i id="called-icon"></i></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 598px; top: 273px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
