<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.13" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd"  name="SSH_Terminal_Via_Browser" projectName="Service Automation - Deployment" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
  <variables>
    <variable name="USE_MANAGED_HOST_LIST" value="false" model="PA:Boolean" description="If true, change the SSH_TARGET_HOST variable model to the list of hosts managed in the resource manager" group="SSH Parameters" advanced="false" hidden="false"/>
    <variable name="SSH_TARGET_HOST" value="my_target_host"  description="Depending on the USE_MANAGED_HOST_LIST value, the SSH target host can be either provided as string or as a value selected from the list of hosts managed by ProActive Resource Manager" group="SSH Parameters" advanced="false" hidden="false"/>
    <variable name="SSH_PORT" value="22" model="PA:INTEGER" description="The listening port of the SSH server. Default value is 22" group="SSH Parameters" advanced="true" hidden="false"/>
    <variable name="SSH_USER" value="my_user" model="PA:NOT_EMPTY_STRING" description="SSH user name" group="SSH Parameters" advanced="false" hidden="false"/>
    <variable name="SSH_PASSWORD" value="ENC(dP8Lz2T+xXBd+XWKjUzijg==)" model="PA:HIDDEN" description="SSH server password" group="SSH Connection" advanced="false" hidden="false"/>
    <variable name="SSH_PRIVATE_KEY" value="${SSH_USER}@${SSH_TARGET_HOST}" model="PA:CREDENTIAL" description="SSH private key" group="SSH Connection" advanced="false" hidden="true"/>
    <variable name="AUTHENTICATION_METHOD" value="SSH_PASSWORD" model="PA:LIST(SSH_PASSWORD,SSH_PRIVATE_KEY)" description="Authentication method to use either password or private key" group="SSH Connection" advanced="false" hidden="false"/>
    <variable name="AUTHENTICATION_METHOD_HANDLER" value="" model="PA:SPEL(variables[&#39;AUTHENTICATION_METHOD&#39;] == &#39;SSH_PASSWORD&#39; ? showVar(&#39;SSH_PASSWORD&#39;) &amp;&amp; hideVar(&#39;SSH_PRIVATE_KEY&#39;) : showVar(&#39;SSH_PRIVATE_KEY&#39;) &amp;&amp; hideVar(&#39;SSH_PASSWORD&#39;))" description="Handler which enables SSH_PASSWORD field or SSH_PRIVATE_KEY based on the chosen AUTHENTICATION_METHOD" group="SSH Connection" advanced="false" hidden="true"/>
    <variable name="MANAGED_HOST_LIST_HANDLER" value="" model="PA:SPEL(variables[&#39;USE_MANAGED_HOST_LIST&#39;] == &#39;true&#39; ? (models[&#39;SSH_TARGET_HOST&#39;] = &#39;PA:MODEL_FROM_URL(${PA_SCHEDULER_REST_PUBLIC_URL}/rm/model/hosts)&#39;)  instanceof T(String) : true)" description="Allows users to either freely provide the target host or as to select from the list of hosts managed by ProActive Resource Manager" group="SSH Parameters" advanced="false" hidden="true"/>
    <variable name="INSTANCE_NAME" value="shell-terminal-${PA_JOB_ID}" model="PA:NOT_EMPTY_STRING" description="Name of SSH service instance" group="Deployment Parameters" advanced="true" hidden="false"/>
    <variable name="PROXYFIED" value="True" model="PA:Boolean" description="Whether the service should be accessed via the ProActive server proxy (for restricted access control)" group="Deployment Parameters" advanced="true" hidden="false"/>
    </variables>
  <description>
    <![CDATA[ Deploy a Wetty service to provide to users a SSH terminal to connect to the target host machine via a web browser. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="service-automation"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png"/>
    <info name="pca.states" value="(VOID,RUNNING)"/>
    <info name="Documentation" value="https://github.com/butlerx/wetty"/>
    <info name="NODE_ACCESS_TOKEN" value="$NODE_ACCESS_TOKEN"/>
    <info name="pca.service.id" value="SSH_via_Browser"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Start_Shell_Terminal" fork="false">
      <description>
        <![CDATA[ Pull Wetty image and start a container ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png"/>
        <info name="Documentation" value="PSA/PSAUserGuide.html"/>
      </genericInformation>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
variables.put("ENDPOINT_ID","shell-terminal-"+variables.get("PA_JOB_ID"))
variables.put("HTTP_ENABLED","true")

def instanceId = variables.get("PCA_INSTANCE_ID") as long
def instanceName = variables.get("INSTANCE_NAME")
def endpointID = variables.get("ENDPOINT_ID")
def proxified = variables.get("PROXYFIED")

def pcaPublicUrl = variables.get('PA_CLOUD_AUTOMATION_REST_PUBLIC_URL')

if ("true".equalsIgnoreCase(proxified)) {
    proxyfiedURL = pcaPublicUrl+"/services/"+instanceId+"/endpoints/"+endpointID+"/"
    wsURL = proxyfiedURL.replace("https://", "wss://")
    wsURL = wsURL.replace("http://", "ws://")
    println "Proxyfied URL :" + proxyfiedURL
    println "WebSocket URL :" + wsURL
    variables.put("PROXYFIED_URL", proxyfiedURL)
    variables.put("WS_PROXYFIED_URL", wsURL)
}


if (variables.get("AUTHENTICATION_METHOD").equals("SSH_PRIVATE_KEY")){
    sshKey= credentials.get(variables.get("SSH_PRIVATE_KEY"))
    File file = new File("ssh-key.pem")
    file.write sshKey + "\n"
}
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo BEGIN "$variables_PA_TASK_NAME"

################################################################################
### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
# Check if the Linux machine supports AVX instructions
DOCKER_IMAGE=wettyoss/wetty:main
TERMINAL_INTERNAL_PORT=3000
INSTANCE_NAME=$variables_INSTANCE_NAME

if [ -z "$variables_SSH_TARGET_HOST" ]
then
  if [ ! -z "awk -F/ '$2 == "docker"' /proc/self/cgroup" ]; then
      host_tmp=$(hostname)
      TARGET_HOST=${host_tmp// }
    else
      TARGET_HOST=$variables_PA_NODE_HOST
  fi
else
    TARGET_HOST=$variables_SSH_TARGET_HOST
fi
################################################################################
GET_RANDOM_PORT(){
    PCA_SERVICES_PORT_RANGE_FILE=$variables_PA_SCHEDULER_HOME/config/pca_services_port_range
    if [[ -f "$PCA_SERVICES_PORT_RANGE_FILE" ]]; then
        read LOWERPORT UPPERPORT < $PCA_SERVICES_PORT_RANGE_FILE
    else
        read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
    fi
    while :
    do
        RND_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
        ss -lpn | grep -q ":$RND_PORT " || break
    done
    echo $RND_PORT
}

echo "Picking a random port number"
TERMINAL_HOST_PORT=$(GET_RANDOM_PORT)

echo "[INFO] The service will be initialized on port $TERMINAL_HOST_PORT"

if [ -z "$INSTANCE_NAME" ]; then
    echo "[ERROR] The INSTANCE_NAME is not provided by the user. Empty value is not allowed."
    exit 1
fi

PORT_OPTION="--ssh-port=$variables_SSH_PORT"
USER_OPTION="--ssh-user=$variables_SSH_USER"
VOLUME_OPTION=""
AUTHENTICATION_OPTIONS=""
keyPath=/tmp/pa/keys/$variables_PA_USER

if [ "$variables_AUTHENTICATION_METHOD" = "SSH_PRIVATE_KEY" ]; then
	key="ssh-key.pem"
  	mkdir -p $keyPath
  	cp $key $keyPath
  	chmod 600 $keyPath/$key
  	AUTHENTICATION_OPTIONS="--ssh-auth=publickey --ssh-key=/keys/$key"
  	VOLUME_OPTION="-v $keyPath:/keys"
else
	AUTHENTICATION_OPTIONS="--ssh-auth=password --ssh-pass=$variables_SSH_PASSWORD"
fi

echo "Pulling "$variables_PA_JOB_NAME" image"
docker pull $DOCKER_IMAGE

if [ "$(docker ps --format '{{.Names}}' | grep ^$INSTANCE_NAME$)" ]; then
    RUNNING=$(docker inspect --format="{{ .State.Running }}" $INSTANCE_NAME 2> /dev/null)
    STOPPED=$(docker inspect --format="{{ .State.Status }}" $INSTANCE_NAME 2> /dev/null)
    if [ "${RUNNING,,}" = "true" ]; then
        echo "$INSTANCE_NAME container is running"
    elif [ "${STOPPED,,}" = "exited" ]; then
        echo "Starting $INSTANCE_NAME container"
        docker start $INSTANCE_NAME
    fi
else
    echo "Running $INSTANCE_NAME container"

    if [ "$TARGET_HOST" = "service-node" ]; then
    echo docker run -d --name $INSTANCE_NAME $VOLUME_OPTION --network="compose_pa-network" -p $TERMINAL_HOST_PORT:$TERMINAL_INTERNAL_PORT $DOCKER_IMAGE --base=/ --ssh-host=proactive-node $PORT_OPTION $USER_OPTION $AUTHENTICATION_OPTIONS
    docker run -d --name $INSTANCE_NAME $VOLUME_OPTION --network="compose_pa-network" -p $TERMINAL_HOST_PORT:$TERMINAL_INTERNAL_PORT $DOCKER_IMAGE --base=/ --ssh-host=proactive-node $PORT_OPTION $USER_OPTION $AUTHENTICATION_OPTIONS
    else
    echo docker run -d --name $INSTANCE_NAME $VOLUME_OPTION -p $TERMINAL_HOST_PORT:$TERMINAL_INTERNAL_PORT $DOCKER_IMAGE --base=/ --ssh-host=$TARGET_HOST $PORT_OPTION $USER_OPTION $AUTHENTICATION_OPTIONS
    docker run -d --name $INSTANCE_NAME $VOLUME_OPTION -p $TERMINAL_HOST_PORT:$TERMINAL_INTERNAL_PORT $DOCKER_IMAGE --base=/ --ssh-host=$TARGET_HOST $PORT_OPTION $USER_OPTION $AUTHENTICATION_OPTIONS
    fi
fi

TERMINAL_PORT=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "'$TERMINAL_INTERNAL_PORT'/tcp") 0).HostPort}}' $INSTANCE_NAME)
echo "$TERMINAL_PORT" > $INSTANCE_NAME"_port"

containerID=$(docker ps -aqf "name=^$INSTANCE_NAME$")
echo "$containerID" > $INSTANCE_NAME"_containerID"

echo END "$variables_PA_TASK_NAME"
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Post_Start_Service/raw" language="groovy"></file>
        </script>
      </post>
      <metadata>
        <positionTop>
          193.57421875
        </positionTop>
        <positionLeft>
          622.099609375
        </positionLeft>
      </metadata>
    </task>
    <task name="Check_Status" fork="false">
      <description>
        <![CDATA[ Loop over service instance status and fetch docker container logs. It runs every minute. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png"/>
        <info name="Documentation" value="PSA/PSAUserGuide.html"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="Start_Shell_Terminal"/>
      </depends>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Check_Instance_Status/raw" language="groovy"></file>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="Check_Status">
          <script>
            <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Fetch_Logs/raw" language="groovy"></file>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
          339.580078125
        </positionTop>
        <positionLeft>
          637.12890625
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2685px;
            height:3577px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-188.57421875px;left:-617.099609375px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_100" style="top: 193.584px; left: 622.1px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Pull Wetty image and start a container"><img src="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png" width="20px">&nbsp;<span class="name">Start_Shell_Terminal</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_103" style="top: 339.59px; left: 637.129px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Loop over service instance status and fetch docker container logs. It runs every minute."><img src="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png" width="20px">&nbsp;<span class="name">Check_Status</span></a></div><svg style="position:absolute;left:675px;top:233.5px" width="22.5" height="106" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 1.5 105 C 11.5 55 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.223774625000001,80.21603625 L10.21054627766988,59.889733950300034 L3.5206976481112915,66.23370158212107 L-3.771788390209049,60.592810927188744 L4.223774625000001,80.21603625" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.223774625000001,80.21603625 L10.21054627766988,59.889733950300034 L3.5206976481112915,66.23370158212107 L-3.771788390209049,60.592810927188744 L4.223774625000001,80.21603625" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:717.0266769263776px;top:288.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_114" style="position: absolute; transform: translate(-50%, -50%); left: 729px; top: 358.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 675.5px; top: 224px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 677px; top: 369px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 677px; top: 329px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 727px; top: 329px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 727px; top: 369px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>