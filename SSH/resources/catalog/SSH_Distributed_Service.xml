<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.13" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="SSH_Distributed_Service" onTaskError="continueJobExecution" priority="normal" projectName="Service Automation - Management" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd">
  <variables>
    <variable model="PA:NOT_EMPTY_STRING" name="INSTANCE_NAME" value="ssh-terminal-for-distributed-nodes-${PA_JOB_ID}"/>
    <variable model="PA:Boolean" name="PROXYFIED" value="True"/>
    <variable model="PA:NOT_EMPTY_STRING" name="SSH_PORT" value="22"/>
    <variable model="PA:INTEGER" name="NUMBER_OF_HOSTS" value="2"/>
  </variables>
  <description>
    <![CDATA[ Reserves a number of hosts given as input, and deploys a SSH terminal (using the WeTTy software) in one of the reserved hosts, thus allowing to execute distributed commands via the SSH terminal. The service assumes that SSH is configured in the reserved machines (e.g., they use the SSH port given as input).
This service takes as input:
- INSTANCE_NAME: name of the service instance to be deployed
- NUMBER_OF_HOSTS: number of hosts to be reserved, among those managed by ProActive Resource Manager
- SSH_PORT: port used by SSH in the reserved hosts.
- PROXYFIED: whether the service should be accessed via the ProActive server proxy (for restricted access control) ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="service-automation"/>
<info name="DOCUMENTATION" value="https://github.com/butlerx/wetty"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png"/>
<info name="pca.service.id" value="SSH_Terminal_For_Distributed_Nodes"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Start_SSH_Distributed_Service" onTaskError="cancelJob">
      <description>
        <![CDATA[ Starts SSH terminal via web browser as a service and reserves the number of hosts given as input. ]]>
      </description>
      <variables>
        <variable inherited="false" name="SERVICE_ID" value="SSH_Terminal_For_Distributed_Nodes"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png"/>
        <info name="task.documentation" value="PSA/PSAUserGuide.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw">
            <arguments>
              <argument value="true"/>
              <argument value="false"/>
              <argument value="INSTANCE_NAME"/>
              <argument value="PROXYFIED"/>
              <argument value="SSH_PORT"/>
              <argument value="NUMBER_OF_HOSTS"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
// Get schedulerapi access and acquire session id
schedulerapi.connect()

joblist = [variables.get("SERVICE_JOB_ID")]

serviceResults = schedulerapi.getJobResultMaps(joblist).entrySet().iterator().next().getValue()

while(serviceResults.isEmpty()) { 
    println("Waiting for service results to be published")
    sleep(10000)
    serviceResults = schedulerapi.getJobResultMaps(joblist).entrySet().iterator().next().getValue()
}

println serviceResults

resultMap.putAll(serviceResults)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            253.99147033691406
        </positionTop>
        <positionLeft>
            581.6192932128906
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Stop_SSH_Distributed_Service" onTaskError="cancelJob">
      <description>
        <![CDATA[ Stops the deployed service instance of SSH terminal and releases the reserved hosts. ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:LIST(Finish_SSH_Terminal_For_Distributed_Nodes)" name="ACTION" value="Finish_SSH_Terminal_For_Distributed_Nodes"/>
        <variable inherited="false" name="INSTANCE_ID" value=""/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png"/>
        <info name="task.documentation" value="PSA/PSAUserGuide.html"/>
      </genericInformation>
      <depends>
        <task ref="wait_for_stop"/>
      </depends>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Action/raw"/>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            513.0255584716797
        </positionTop>
        <positionLeft>
            578.6363830566406
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="wait_for_stop">
      <description>
        <![CDATA[ A task that declares being ready for receiving the signal "Terminate_Job_and_Service", then iterates to check whether this signal is received (for example when sent by user from the Workflow Execution portal). When this signal is received, the task terminates. ]]>
      </description>
      <variables>
        <variable inherited="false" name="SIGNALS" value="Terminate_Job_and_Service"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/signal-wait.png"/>
        <info name="TASK.DOCUMENTATION" value="user/ProActiveUserGuide.html#_task_signal_api"/>
      </genericInformation>
      <depends>
        <task ref="Start_SSH_Distributed_Service"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import com.google.common.base.Splitter;

if (variables.get("PA_TASK_ITERATION")==0){

    // Read the variable SIGNALS
	signals = variables.get("SIGNALS")

	// Split the value of the variable SIGNALS and transform it into a list
	Set signalsSet = new HashSet<>(Splitter.on(',').trimResults().omitEmptyStrings().splitToList(signals))

    // Send a ready notification for each signal in the set
    println("Ready for signals "+ signalsSet)
    signalsSet.each {
        signal -> signalapi.readyForSignal(signal)
    }

    // Add the signals set as a variable to be used by next tasks
    variables.put("SIGNALS_SET", signalsSet)
}

//Read the variable SIGNALS_SET
Set signalsSet =  variables.get("SIGNALS_SET")

// Check whether one signal among those specified as input is received
println("Checking whether one signal in the set "+ signalsSet +" is received")
receivedSignal = signalapi.checkForSignals(signalsSet)

// If a signal is received, remove ready signals and break the loop, else sleep 10 seconds then restart
if (receivedSignal != null){

    // remove ready signals
	signalapi.removeManySignals(new HashSet<>(signalsSet.collect { signal -> "ready_"+signal }))

    // print the received signal
    println("Received signal: "+ receivedSignal.getName())
    result = receivedSignal.getName()

} else {
    result = null
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <loop target="wait_for_stop">
          <script>
            <code language="groovy">
              <![CDATA[
if (result!=null){
    loop = false
} else {
    loop = "* * * * *"
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            386.0084991455078
        </positionTop>
        <positionLeft>
            578.6363830566406
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2483px;
            height:2810px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-248.99147033691406px;left:-573.6363830566406px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable active-task" id="jsPlumb_1_100" style="top: 253.992px; left: 581.633px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Starts SSH terminal via web browser as a service and reserves the number of hosts given as input."><img src="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png" width="20px">&nbsp;<span class="name">Start_SSH_Distributed_Service</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_103" style="top: 513.026px; left: 578.65px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Stops the deployed service instance of SSH terminal and releases the reserved hosts."><img src="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png" width="20px">&nbsp;<span class="name">Stop_SSH_Distributed_Service</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_106" style="top: 386.009px; left: 578.65px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task that declares being ready for receiving the signal &quot;Terminate_Job_and_Service&quot;, then iterates to check whether this signal is received (for example when sent by user from the Workflow Execution portal). When this signal is received, the task terminates."><img src="/automation-dashboard/styles/patterns/img/wf-icons/signal-wait.png" width="20px">&nbsp;<span class="name">wait_for_stop</span></a></div><svg style="position:absolute;left:618.5px;top:425.5px" width="58" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 37 87 C 47 37 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M36.363006,64.458666 L32.917818536921146,43.55099555721168 L29.651192652438006,52.17243136169487 L20.631583898616018,50.262808904773664 L36.363006,64.458666" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M36.363006,64.458666 L32.917818536921146,43.55099555721168 L29.651192652438006,52.17243136169487 L20.631583898616018,50.262808904773664 L36.363006,64.458666" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:618.5px;top:293.5px" width="61.5" height="93" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 92 C -10 42 50.5 50 40.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M1.1467901249999974,68.5062245 L17.08960587663722,54.548193624932125 L8.042338865983893,56.322160828108125 L4.9055422047453385,47.65264488394823 L1.1467901249999974,68.5062245" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M1.1467901249999974,68.5062245 L17.08960587663722,54.548193624932125 L8.042338865983893,56.322160828108125 L4.9055422047453385,47.65264488394823 L1.1467901249999974,68.5062245" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:659.0266769263776px;top:335.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_120" style="position: absolute; transform: translate(-50%, -50%); left: 671px; top: 405.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 659.5px; top: 284px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 656px; top: 543px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 656px; top: 503px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 619px; top: 416px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 619px; top: 376px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 669px; top: 376px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 669px; top: 416px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
