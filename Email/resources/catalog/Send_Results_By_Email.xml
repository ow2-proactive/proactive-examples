<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.12" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd"  name="Send_Results_By_Email" projectName="Notifications" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="1"  >
  <description>
    <![CDATA[ A task that will send direct parent tasks results by email. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="notification-tools"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/email_notification_red_one.png"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="send_results_by_email" 
    
    
    
    
    fork="true">
      <description>
        <![CDATA[
         A task that will send direct parent tasks results and logs by email.
         Simply append this task as a children to tasks that produces results.
         If task variables "includeTasksResults" and "includeTasksLogs" are set to true it will send a zip file containing results and a log file.
         If both are false or if there are now results, no email will be sent.
         Do not forget to specify the recipient of the email by updating the "to" task variable value.
]]>
      </description>
      <variables>
        <variable name="includeTasksResults" value="true" inherited="false" model="PA:BOOLEAN"/>
        <variable name="includeTasksLogs" value="true" inherited="false" model="PA:BOOLEAN"/>
        <variable name="from" value="support@activeeon.com" inherited="true" model="PA:NOT_EMPTY_STRING"/>
        <variable name="to" value="user@domain.org" inherited="true" model="PA:NOT_EMPTY_STRING"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/email_notification_red_one.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
/*
Sending an email requires to configure an SMTP connection
Please look at the following link for the configuration:
http://doc.activeeon.com/latest/admin/ProActiveAdminGuide.html#_email_notification

This task loops through the results array to retieve files and send them by email.
If a parent task produces a file and stores it in the result field, then it will be accessible in this task.
If not the result will be converted to a text file.

To add corresponding tasks logs set addTasksLogs to true, this will produce a text file with all results logs
which is the Stdout and Stderr outputs of tasks.

Note that if a result produces a source code file like a .java there is a high probabilty that the attachment
will be blocked by the email service, considering it potentially dangerous.
For some email services this behavior is configurable.
*/

// Go to https://try.activeeon.com/doc/user/ProActiveUserGuide.html#_task_result for further documentation about task results.

import java.util.zip.*
import org.ow2.proactive.addons.email.EmailSender;

def jobId = variables.get("PA_JOB_ID");
def jobName = variables.get("PA_JOB_NAME");

// Retrieve user inputs
def from = variables.get("from");
def to = variables.get("to");
def addTasksResults = variables.get("includeTasksResults").toBoolean();
def addTasksLogs = variables.get("includeTasksLogs").toBoolean();

def subject = "Result of parent tasks for job: "+ jobName +" with id: "+ jobId;

def emailBody = String.format("Dear Activeeon ProActive Workflow & Scheduler (PWS) User,%n%nYou will find in attachment the results of parent tasks for job %s , Id: %s.%n%nBest Regards, %nActiveeon Team %n -- %nThis email was auto-generated by ProActive Workflows & Scheduling (PWS) installed on Host %nPlease do not reply.",
                                 jobName,
                                 jobId);

// Array that will contain all the results files
def resultFiles = []

def tasksLogsFile = new File("job"+jobId+"-logs.log");
tasksLogsFile.createNewFile();

// ------------------------- FUNCTION ---------------------------
void addLogs(result, logsFile) {
        logsFile.append("Logs of task " + result.getTaskId().value())
        logsFile.append(System.getProperty("line.separator"))
        // Get task logs without timestamp
        logsFile.append(result.getOutput().getAllLogs(false));
        logsFile.append(System.getProperty("line.separator"))
        logsFile.append("Metadata: "+result.getMetadata().toString());
        logsFile.append(System.getProperty("line.separator"))
        logsFile.append("Result map: "+result.getResultMap().toString());
        logsFile.append(System.getProperty("line.separator"))
        logsFile.append("==========================================================================================")
        logsFile.append(System.getProperty("line.separator"))
}
// --------------------------------------------------------------

if (addTasksResults || addTasksLogs) {

    // If the first element of the results is the default "true" string, there are no results
    if (results[0] != null && !results[0].toString().equals("true")) {

		// Loop over tasks results
		results.eachWithIndex { item, index ->
        	if (addTasksResults) {
            	// Base file name is taskId.txt
            	def fileName = item.getTaskId().toString()+".txt";

        		// There is a file.name property
        		if (item.getMetadata() != null && item.getMetadata().containsKey("file.name")) {

    				fileName = item.getMetadata().get("file.name");

        		// There is a file.extension property then file name is taskId + file extension
        		} else if (item.getMetadata() != null && item.getMetadata().containsKey("file.extension")) {

            		def fileExtension = item.getMetadata().get("file.extension")
        			def baseName = item.getTaskId().toString();
            		fileName = baseName + fileExtension;
        		}

            	resultFile = new File(fileName);
        		resultFile.createNewFile();
    			resultFile.append(item.getSerializedValue());
				resultFiles.add(resultFile);
        	}

        	if (addTasksLogs) {
            	addLogs(item, tasksLogsFile);
        	}
		}
	}

    // Add logs file the zipped files if there is content
	if (!tasksLogsFile.getText().isEmpty()) {
    	resultFiles.add(tasksLogsFile)
	}

    if (!resultFiles.isEmpty()) {
		// Create zip file
		def File archiveFile = new File("job-"+ jobId +"-results.zip");
		archiveFile.createNewFile();

		ZipOutputStream zipFile = new ZipOutputStream(new FileOutputStream(archiveFile));

		// Write each result in the zip file
		resultFiles.each { file ->
    		if (file.isFile()) {
     			zipFile.putNextEntry(new ZipEntry(file.name));
        		def buffer = new byte[file.size()];
        		file.withInputStream {
                    zipFile.write(buffer, 0, it.read(buffer));
        		}
        		zipFile.closeEntry();
    		}
		}
		zipFile.close();

		// Don't change code below
		EmailSender.Builder builder = new EmailSender.Builder(credentials);
		builder.setFrom(from)
		builder.addRecipient(to)
		builder.setSubject(subject)
		builder.setBody(emailBody.toString())
		builder.setAttachmentPath(archiveFile.getAbsolutePath())
		builder.setAttachmentName("job-"+jobId+"-results.zip")
		builder.build().sendPlainTextEmailWithAttachment();
	} else {
    	println "There are no results, email of task "Send_Results_By_Email" is not sent"
	}
} else {
    println "Both includeTasksResult and includeTasksLogs variables are false, email of task "Send_Results_By_Email" is not sent "
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            404.48333740234375
        </positionTop>
        <positionLeft>
            571.5
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2830px;
            height:3196px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-399.48333740234375px;left:-566.5px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable active-task" style="top: 404.483px; left: 571.5px; z-index: 24;" id="jsPlumb_1_216"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task that will send direct parent tasks results by email."><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">send_results_by_email</span></a></div><div style="position: absolute; height: 20px; width: 20px; left: 632.5px; top: 434.483px;" class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>