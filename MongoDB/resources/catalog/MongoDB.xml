<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.10"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
    name="MongoDB" projectName="Cloud Automation - Deployment"
    priority="normal"
    onTaskError="pauseJob"
     maxNumberOfExecution="2">
  <variables>
    <variable name="MONGODB_INSTANCE_NAME" value="mongodb-server-1" />
    <variable name="MONGODB_PASSWORD" value="" />
    <variable name="MONGODB_USER" value="" />
  </variables>
  <description>
    <![CDATA[ Deployment of the Mongo Database server.  ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="cloud-automation"/>
    <info name="Documentation" value="https://www.mongodb.com/"/>
    <info name="group" value="public-objects"/>
    <info name="pca.service.id" value="MongoDB"/>
    <info name="pca.states" value="(VOID,RUNNING)(STOPPED,RUNNING)"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
  </genericInformation>
  <taskFlow>
    <task name="Loop_Over_Instance_Status">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
      </genericInformation>
      <depends>
        <task ref="Update_Service_Instance"/>
      </depends>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN Loop_Over_Instance_Status ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Acquire service instance id
def service_instance_id = Long.valueOf(variables.get("PCA_INSTANCE_ID"))
println("service_instance_id: " + service_instance_id)

// Construct synchro channel
channel = "Service_Instance_" + service_instance_id  
//synchronizationapi.createChannelIfAbsent(channel, false)

// Delete service instance from database is set to false
synchronizationapi.put(channel, "DELETE_LAUNCHED", false) 
synchronizationapi.put(channel, "DELETE_INSTANCE", false) 

// Loop over service instance status
def current_status = "RUNNING"
def container = variables.get("MONGODB_INSTANCE_NAME")
print("container: " + container)

while(current_status=="RUNNING") {
  sleep(10000);
  
  // Check docker container status 
  def ByteArrayOutputStream sout = new ByteArrayOutputStream();
  def ByteArrayOutputStream serr = new ByteArrayOutputStream();
  def proc = ["docker", "inspect", "--format", "{{ .State.Running }}", "${container}"].execute().waitForProcessOutput(sout, serr)
  def container_running = new String(sout.toByteArray()).trim()
  
  if ((container_running != "true") && (synchronizationapi.get(channel, "DELETE_LAUNCHED") == false)){
          current_status = 'ERROR'
          // Update docker container is not running
          def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
          service_instance_data.setInstanceStatus(current_status)
          service_instance_data = service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)
          break    
  }
  
  // Check service instance status
  current_status = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id).getInstanceStatus() 
  println("current_status: " + current_status)
}

// Allow the Delete workflow to be fulfilled
synchronizationapi.put(channel, "DELETE_INSTANCE", true)

println("--- END Loop_Over_Instance_Status ---")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Start_MongoDB">
      <description>
        <![CDATA[ Pull MongoDB image and start a container ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo "--- BEGIN Start_MongoDB ---"
echo "Pulling MongoDB image"

docker pull activeeon/mongo

CONTAINER=$variables_MONGODB_INSTANCE_NAME_CL
MONGODB_USER=$variables_MONGODB_USER_CL
MONGODB_PASSWORD=$variables_MONGODB_PASSWORD_CL

if [ -z "$variables_MONGODB_INSTANCE_NAME_CL" ]; then
  CONTAINER=$variables_MONGODB_INSTANCE_NAME
fi

if [ -z "$variables_MONGODB_USER_CL" ]; then
  MONGODB_USER=$variables_MONGODB_USER
fi

if [ -z "$variables_MONGODB_PASSWORD_CL" ]; then
  MONGODB_PASSWORD=$variables_MONGODB_PASSWORD
fi

echo MONGODB_INSTANCE_NAME = "$CONTAINER"
echo MONGODB_USER = "$MONGODB_USER"
echo MONGODB_PASSWORD = "$MONGODB_PASSWORD"


# Check whether MONGODB_USER and MONGODB_PASSWORD have been well entered
if [ \( ! -z "$MONGODB_USER" -a -z "$MONGODB_PASSWORD" \) -o \( -z "$MONGODB_USER" -a ! -z "$MONGODB_PASSWORD" \) ]; then
  echo ERROR: MONGODB_USER and MONGODB_PASSWORD are used in junction. They should be either both entered or both blank. 
    exit 1
fi

if [ "$(docker ps -a | grep $CONTAINER)" ]; then
 RUNNING=$(docker inspect --format="{{ .State.Running }}" $CONTAINER 2> /dev/null)
 STOPPED=$(docker inspect --format="{{ .State.Status }}" $CONTAINER 2> /dev/null)  

 if [ "$RUNNING" == "true" ]; then 
   echo "$CONTAINER container is running"
 elif [ "$STOPPED" == "exited" ]; then 
   echo "Starting $CONTAINER container"
   docker start $CONTAINER
 fi 

else 
 echo "Running $CONTAINER container"
 if [ "$MONGODB_USER" == null ]; then
   docker run --name $CONTAINER -p 27017 -d activeeon/mongo
 else
   docker run --name $CONTAINER -p 27017 -e MONGO_INITDB_ROOT_USERNAME=$MONGODB_USER -e MONGO_INITDB_ROOT_PASSWORD=$MONGODB_PASSWORD -d activeeon/mongo
 fi 

fi

port=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "27017/tcp") 0).HostPort}}' $CONTAINER)
echo "$port" > $CONTAINER"_port"

# Endpoint added to the job variables using a groovy post-script
echo "--- END Start_MongoDB ---"
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN POST-SCRIPT Start_MongoDB ---")

def PA_SCHEDULER_REST_URL = variables.get('PA_SCHEDULER_REST_URL')
def hostname = new URL(PA_SCHEDULER_REST_URL).getHost()
def CONTAINER = variables.get("MONGODB_INSTANCE_NAME_CL")
if (CONTAINER == null)
  CONTAINER = variables.get("MONGODB_INSTANCE_NAME")

def port = CONTAINER+"_port"
def endpoint = 'http://'+hostname + ":" + new File(port).text.trim()

println("mongodb_endpoint: " + endpoint)

variables.put("endpoint", endpoint)

println("--- END POST-SCRIPT Start_MongoDB ---")
]]>
          </code>
        </script>
      </post>
    </task>
    <task name="Update_Service_Instance">
      <description>
        <![CDATA[ Update service instance data ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
      </genericInformation>
      <depends>
        <task ref="Start_MongoDB"/>
      </depends>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN Update_Service_Instance ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData


// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Acquire service instance id
def service_instance_id = Long.valueOf(variables.get("PCA_INSTANCE_ID"))
println("service_instance_id: " + service_instance_id)

// Set service instance status to running
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
service_instance_data.setInstanceStatus("RUNNING")

// Set service instance status endpoint
HashMap<String, String> endpoints = new HashMap<String, String>()
def instance_name = variables.get("MONGODB_INSTANCE_NAME")
def endpoint = variables.get("endpoint")
service_instance_data = service_instance_data.putInstanceEndpointsItem(instance_name, endpoint)

// Update service instance data
service_instance_data = service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)

// Inform other platforms that service is running
channel = "Service_Instance_" + service_instance_id  
synchronizationapi.createChannelIfAbsent(channel, false)
synchronizationapi.put(channel, "RUNNING", true)
synchronizationapi.put(channel, "MONGODB_INSTANCE_NAME", instance_name)

println("--- END Update_Service_Instance ---")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>