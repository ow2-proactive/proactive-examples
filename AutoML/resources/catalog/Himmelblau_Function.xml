<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.11" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="1" name="Himmelblau_Function" onTaskError="cancelJob" priority="normal" projectName="3. Objective Function Examples" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd">
  <variables>
    <variable name="INPUT_VARIABLES" value="{&quot;x&quot;: 3.5976705887960527, &quot;y&quot;: -1.8471754188451843}"/>
  </variables>
  <description>
    <![CDATA[ Python script used as objective function for hyperparameter optmization algorithms. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="auto-ml-optimization"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/himmelblau_function.png"/>
<info name="Documentation" value="https://en.wikipedia.org/wiki/Himmelblau%27s_function"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task name="Himmelblau_Function">
      <description>
        <![CDATA[ The simplest task, ran by a Python engine. ]]>
      </description>
      <variables>
        <variable inherited="true" name="INPUT_VARIABLES" value="{&quot;x&quot;: 3.5976705887960527, &quot;y&quot;: -1.8471754188451843}"/>
        <variable inherited="true" name="TOKEN" value="{&quot;_token_id&quot;: 0}"/>
        <variable inherited="true" model="PA:Boolean" name="DOCKER_ENABLED" value="True"/>
        <variable inherited="true" name="DOCKER_IMAGE" value="activeeon/dlm3"/>
      </variables>
      <genericInformation>
        <info name="PYTHON_COMMAND" value="/usr/local/bin/python3"/>
        <info name="task.documentation" value="https://en.wikipedia.org/wiki/Himmelblau%27s_function"/>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/himmelblau_function.png"/>
      </genericInformation>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
if str(variables.get("DOCKER_ENABLED")).lower() == 'true':
  #Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
  # Prepare Docker parameters 
  containerName = variables.get("DOCKER_IMAGE") 
  dockerRunCommand =  'docker run ' 
  dockerParameters = '--rm ' 
  # Prepare ProActive home volume 
  paHomeHost = variables.get("PA_SCHEDULER_HOME") 
  paHomeContainer = variables.get("PA_SCHEDULER_HOME") 
  proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' 
  # Prepare working directory (For Dataspaces and serialized task file) 
  workspaceHost = localspace 
  workspaceContainer = localspace 
  workspaceVolume = '-v '+localspace +':'+localspace+' ' 
  # Prepare container working directory 
  containerWorkingDirectory = '-w '+workspaceContainer+' ' 
  # Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node 
  preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
else:
  print("Fork environment disabled")
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
params_encoded = variables.get('params_encoded')
token_encoded = variables.get('token_encoded')

// If encoded variables are found
if ((params_encoded != null && params_encoded.length() > 0) &&
    (token_encoded != null && token_encoded.length() > 0))
{
    println "Found encoded variables:"
    println "params_encoded: " + params_encoded
    println "token_encoded: " + token_encoded
    
    byte[] params_decoded = params_encoded.decodeBase64()
    byte[] token_decoded = token_encoded.decodeBase64()
    
    input_variables = new String(params_decoded)
    token = new String(token_decoded)
    
    variables.put('INPUT_VARIABLES', input_variables)
    variables.put('TOKEN', token)
}
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
# 
# Himmelblau's function is multimodal with 4 defined minimums in [-6, 6]^2, used to test the performance of optimization algorithms.
# https://en.wikipedia.org/wiki/Himmelblau%27s_function
#
import json

# Get token and input variables
token = variables.get('TOKEN')
input_variables = variables.get('INPUT_VARIABLES')

# Convert from JSON to dict
token = json.loads(token)
input_variables = json.loads(input_variables)
print("token: ", token, ", input_variables: ", input_variables)

# Himmelblau's function
def objective_function(x, y):
    return (x**2 + y - 11)**2 + (x + y**2 - 7)**2

# Calculate the loss for the sampled point (minimized)
loss = objective_function(**input_variables)
print('loss: ', loss)

# return the loss value
result = {
    'token': token,
    'loss': loss
}
result = json.dumps(result)
resultMap.put("RESULT_JSON", result)
print('result: ', result)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            195.71182250976562
        </positionTop>
        <positionLeft>
            177.39581298828125
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2351px;
            height:3002px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-190.71182250976562px;left:-172.39581298828125px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_889" style="top: 195.729px; left: 177.396px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/himmelblau_function.png" width="20px">&nbsp;<span class="name">Himmelblau_Function</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 233.5px; top: 226px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>
