<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.12" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Himmelblau_Function" onTaskError="continueJobExecution" priority="normal" projectName="3. Objective Function Examples" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd">
  <variables>
    <variable model="PA:LIST(,SLURM)" name="NS" value=""/>
    <variable name="NODE_SOURCE_NAME" value=""/>
    <variable name="NODE_ACCESS_TOKEN" value=""/>
    <variable name="INPUT_VARIABLES" value="{&quot;x&quot;: 3.5976705887960527, &quot;y&quot;: -1.8471754188451843}"/>
    <variable name="SEARCH_SPACE" value="{'x': uniform(-6, 6), 'y': uniform(-6, 6)}"/>
  </variables>
  <description>
    <![CDATA[ Python script used as objective function for hyperparameter optmization algorithms. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="auto-ml-optimization"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/himmelblau_function.png"/>
<info name="NS" value="$NS"/>
<info name="NODE_ACCESS_TOKEN" value="$NODE_ACCESS_TOKEN"/>
<info name="Documentation" value="MLOS/MLOSUserGuide.html#_objective_function_examples"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Himmelblau_Function">
      <description>
        <![CDATA[ The simplest task, ran by a Python engine. ]]>
      </description>
      <variables>
        <variable inherited="true" name="INPUT_VARIABLES" value="{&quot;x&quot;: 3.5976705887960527, &quot;y&quot;: -1.8471754188451843}"/>
        <variable inherited="true" name="TOKEN" value="{&quot;_token_id&quot;: 0}"/>
        <variable inherited="false" model="PA:LIST(,docker,podman,singularity)" name="CONTAINER_PLATFORM" value="docker"/>
        <variable inherited="false" model="PA:LIST(,docker://activeeon/dlm3,docker://activeeon/cuda)" name="CONTAINER_IMAGE" value="docker://activeeon/dlm3"/>
        <variable inherited="false" model="PA:Boolean" name="CONTAINER_GPU_ENABLED" value="False"/>
        <variable inherited="false" model="PA:Boolean" name="CONTAINER_ROOTLESS_ENABLED" value="False"/>
      </variables>
      <genericInformation>
        <info name="task.documentation" value="MLOS/MLOSUserGuide.html#_objective_function_examples"/>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/himmelblau_function.png"/>
        <info name="NS" value="SLURM"/>
      </genericInformation>
      <selection>
        <script type="static">
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_node_source_name/raw"/>
        </script>
      </selection>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_cuda_universal/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/get_automl_variables/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
# 
# Himmelblau's function is multimodal with 4 defined minimums in [-6, 6]^2, used to test the performance of optimization algorithms.
# https://en.wikipedia.org/wiki/Himmelblau%27s_function
#
import json
import numpy as np

# Get token and input variables
token = variables.get('TOKEN')
input_variables = variables.get('INPUT_VARIABLES')

# Get current job ID
PA_JOB_ID = variables.get("PA_JOB_ID")

# Check parent job ID
PARENT_JOB_ID = genericInformation.get('PARENT_JOB_ID')

# Convert from JSON to dict
token = json.loads(token)
input_variables = json.loads(input_variables)
#print("token: ", token, ", input_variables: ", input_variables)

# Himmelblau's function
def objective_function(x, y):
    return (x**2 + y - 11)**2 + (x + y**2 - 7)**2

# Calculate the loss for the sampled point (minimized)
x = input_variables['x']
y = input_variables['y']
print('x: ', x)
print('y: ', y)
loss = objective_function(**input_variables)
print('loss: ', loss)

### BEGIN TENSORBOARD ###
TENSORBOARD_ENABLED = variables.get("TENSORBOARD_ENABLED")
if TENSORBOARD_ENABLED is not None and TENSORBOARD_ENABLED.lower() == "true":
    from tensorboardX import SummaryWriter
    DOCKER_LOG_PATH = variables.get("DOCKER_LOG_PATH")
    assert DOCKER_LOG_PATH is not None
    PA_JOB_ID = "job_ID_" + variables.get("PA_JOB_ID")
    PATH = os.path.join(DOCKER_LOG_PATH, PA_JOB_ID)
    print('PATH: ', PATH)
    if os.path.isdir(PATH):
        try:
            print('Removing existing path')
            shutil.rmtree(PATH)
        except:
            print('Error while deleting directory')
    os.mkdir(PATH)
    writer = SummaryWriter(PATH)
    token_id = token['_chocolate_id'] # 0
    writer.add_text('Text/parent_job', 'text logged at job: ' + PA_JOB_ID, loss)
    writer.add_scalar('Loss', loss, token_id)
    writer.close()
### END TENSORBOARD ###

### BEGIN VISDOM ###
VISDOM_ENDPOINT = variables.get("VISDOM_ENDPOINT")
if VISDOM_ENDPOINT is not None:
    from visdom import Visdom
    
    VISDOM_ENDPOINT = VISDOM_ENDPOINT.replace("http://", "")
    print("VISDOM_ENDPOINT: ", VISDOM_ENDPOINT)
    (VISDOM_HOST, VISDOM_PORT) = VISDOM_ENDPOINT.split(":")
    
    print("VISDOM_HOST: ", VISDOM_HOST)
    print("VISDOM_PORT: ", VISDOM_PORT)
    
    print("Connecting to %s:%s" % (VISDOM_HOST, VISDOM_PORT))
    vis = Visdom(server="http://"+VISDOM_HOST, port=int(VISDOM_PORT))
    assert vis.check_connection()
    
    env = 'main'
    if PARENT_JOB_ID is not None:
        env = 'job_id_' + PARENT_JOB_ID
    
    win_params = 'win_params'
    append = True if vis.win_exists(win_params, env=env) else False
    if not append:
        vis.text("List of hyperparameters:\n", append=append, env=env, win=win_params)
        append = True
    vis.text("Job ID: {}, x: {:.4f}, y: {:.4f}\n".format(PA_JOB_ID, x, y), append=append, env=env, win=win_params)
    
    # plot scatter
    win_scatter = 'win_scatter'
    update = 'append' if vis.win_exists(win_scatter, env=env) else None
    vis.scatter(
        X=[[x, y]],
        Y=[1],
        opts=dict(
            #legend=['params'],
            markersize=10,
            markersymbol='cross-thin-open',
            title='Hyperparameters value',
            xlabel='X',
            ylabel='Y',
            markercolor=np.floor([255]),
        ),
        env=env,
        win=win_scatter,
        update=update
    )
    
    # plot surface
    X = np.linspace(-10, 10, 100)
    X = np.tile(X, (100, 1))
    Y = X.transpose()
    Z = objective_function(X, Y)

    win_surface = 'win_surface'
    if not vis.win_exists(win_surface, env=env):
        vis.surf(X=Z, opts=dict(colormap='Hot'), env=env, win=win_surface)
    else:
        print('The surface plot is already done')
### END VISDOM ###

# to appear in Job Analytics
#resultMap.put("X", str(x))
#resultMap.put("Y", str(y))
resultMap.put("LOSS", str(loss))

# to be used by AutoML workflow
result = {
    'token': token,
    'loss': loss
}
result = json.dumps(result)
resultMap.put("RESULT_JSON", result)
#print('result: ', result)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            187.03125
        </positionTop>
        <positionLeft>
            145.44921875
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2645px;
            height:3500px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-182.03125px;left:-140.44921875px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_305" style="top: 187.047px; left: 145.461px; z-index: 24;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="The simplest task, ran by a Python engine."><img src="/automation-dashboard/styles/patterns/img/wf-icons/himmelblau_function.png" width="20px">&nbsp;<span class="name">Himmelblau_Function</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 207.961px; top: 217.047px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
