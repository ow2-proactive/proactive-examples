<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.13" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Distributed_Auto_ML" onTaskError="continueJobExecution" priority="normal" projectName="1. Automated Machine Learning" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd">
  <variables>
    <variable name="CONTAINER_PLATFORM" value="docker" advanced="true" description="Container platform used for executing the workflow tasks." group="Container Parameters" hidden="false" model="PA:LIST(no-container,docker,podman,singularity)"/>
    <variable name="CONTAINER_IMAGE" value="" advanced="true" description="Name of the container image being used." group="Container Parameters" hidden="false" model="PA:LIST(,docker://activeeon/dlm3)"/>
    <variable name="TUNING_ALGORITHM" value="Random" advanced="false" description="Tuner algorithm used for hyperparameter optimization." hidden="false" model="PA:LIST(Bayes,Grid,Random,QuasiRandom,CMAES,MOCMAES)"/>
    <variable name="MAX_ITERATIONS" value="2" advanced="false" description="Number of maximum iterations. It should be an integer higher than zero. Set -1 for an infinite loop." hidden="false" model="PA:Integer"/>
    <variable name="PARALLEL_EXECUTIONS_PER_ITERATION" value="2" advanced="false" description="Number of parallel executions per iteration. It should be an integer higher than zero." hidden="false" model="PA:Integer"/>
    <variable name="NUMBER_OF_REPETITIONS" value="-1" advanced="false" description="Number of hyperparameter sampling repetitions, to ensures every experiment is repeated a given number of times. It should be an integer higher than one. Set -1 to never have repetitions." hidden="false" model="PA:Integer"/>
    <variable name="PAUSE_AFTER_EVERY_ITERATIONS" value="-1" advanced="false" description="If higher than zero, pause the workflow after every specified number of iterations. Set to -1 not to pause." hidden="false" model="PA:Integer"/>
    <variable name="STOP_IF_LOSS_IS_LOWER_THAN" value="-1" advanced="false" description="If higher than zero, stop the workflow execution if loss is lower than the specified value. Set to -1 to disable." hidden="false" model="PA:FLOAT"/>
    <variable name="TARGET_WORKFLOW" value="auto-ml-optimization/Himmelblau_Function" advanced="false" description="Workflow that should be optimized. Set its path from the catalog." hidden="false" model="PA:CATALOG_OBJECT"/>
    <variable name="TARGET_NATIVE_SCHEDULER" value="" advanced="true" description="Name of the native scheduler node source to use on the target workflow tasks when deployed inside a cluster such as SLURM, LSF, etc." group="Target Workflow Resource Management" hidden="false"/>
    <variable name="TARGET_NATIVE_SCHEDULER_PARAMS" value="" advanced="true" description="Parameters given to the native scheduler (SLURM, LSF, etc) while requesting a ProActive node used to deploy the target workflow tasks." group="Target Workflow Resource Management" hidden="false"/>
    <variable name="TARGET_NODE_ACCESS_TOKEN" value="" advanced="true" description="If not empty, the target workflow tasks will be run only on nodes that contains the specified token." group="Target Workflow Resource Management" hidden="false"/>
    <variable name="TARGET_NODE_SOURCE_NAME" value="" advanced="true" description="If not empty, the target workflow tasks will be run only on nodes belonging to the specified node source." group="Target Workflow Resource Management" hidden="false"/>
    <variable name="TARGET_CONTAINER_PLATFORM" value="" advanced="true" description="Container platform used for executing the target workflow tasks." group="Target Workflow Container Parameters" hidden="false" model="PA:LIST(,no-container,docker,podman,singularity)"/>
    <variable name="TARGET_CONTAINER_IMAGE" value="" advanced="true" description="Name of the container image being used to run the target workflow tasks." group="Target Workflow Container Parameters" hidden="false" model="PA:LIST(,docker://activeeon/dlm3,docker://activeeon/cuda,docker://activeeon/cuda2,docker://activeeon/rapidsai,docker://activeeon/nvidia:rapidsai,docker://activeeon/nvidia:pytorch,docker://activeeon/nvidia:tensorflow,docker://activeeon/tensorflow:latest,docker://activeeon/tensorflow:latest-gpu)"/>
    <variable name="TARGET_CONTAINER_GPU_ENABLED" value="" advanced="true" description="If True, it will activate the use of GPU for the target workflow tasks on the selected container platform." group="Target Workflow Container Parameters" hidden="false" model="PA:LIST(,True,False)"/>
    <variable name="TARGET_NVIDIA_RAPIDS_ENABLED" value="" advanced="true" description="If True, it will activate the use of NVIDIA RAPIDS for the target workflow tasks on the selected container platform." group="Target Workflow Container Parameters" hidden="false" model="PA:LIST(,True,False)"/>
    <variable name="VISDOM_ENABLED" value="False" advanced="false" description="If True, the Visdom service is started allowing the user to visualize the hyperparameter optimization using the Visdom web interface." hidden="false" model="PA:Boolean"/>
    <variable name="VISDOM_PROXYFIED" value="True" advanced="false" description="If True, requests to Visdom are sent via a proxy server." hidden="true" model="PA:Boolean"/>
    <variable name="VISDOM_ENABLED_HANDLER" value="" advanced="false" hidden="true" model="PA:SPEL(variables['VISDOM_ENABLED'].toLowerCase() == 'true' ? showVar('VISDOM_PROXYFIED') : hideVar('VISDOM_PROXYFIED'))"/>
    <variable name="TENSORBOARD_ENABLED" value="False" advanced="false" description="If True, the TensorBoard service is started allowing the user to visualize the hyperparameter optimization using the TensorBoard web interface." hidden="false" model="PA:Boolean"/>
    <variable name="TENSORBOARD_PROXYFIED" value="True" advanced="false" description="If True, requests to TensorBoard are sent via a proxy server." hidden="true" model="PA:Boolean"/>
    <variable name="TENSORBOARD_ENABLED_HANDLER" value="" advanced="false" hidden="true" model="PA:SPEL(variables['TENSORBOARD_ENABLED'].toLowerCase() == 'true' ? showVar('TENSORBOARD_PROXYFIED') : hideVar('TENSORBOARD_PROXYFIED'))"/>
  </variables>
  <description>
    <![CDATA[ Allow to use six different algorithms for hyperparameter optimization. The choice of the sampling/search strategy depends strongly on the problem tackled. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="auto-ml-optimization"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tuning_algorithm.png"/>
<info name="Documentation" value="PML/PMLUserGuide.html#_AutoML"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Split">
      <description>
        <![CDATA[ This task defines some input, here strings to be processed. ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:Boolean" name="CONTAINER_GPU_ENABLED" value="False" description="If True, containers will run based on images containing libraries that are compatible with GPU."/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="Else"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import ssl
import json
import numpy as np

from urllib.request import Request, urlopen
from lxml import etree

import chocolate as choco
from chocolate import uniform, quantized_uniform, log, quantized_log, choice
from chocolate import MongoDBConnection, Bayes, Grid, Random, QuasiRandom, CMAES, MOCMAES, Repeat


def raiser(msg): raise Exception(msg)


PA_JOB_ID = variables.get("PA_JOB_ID")
print('PA_JOB_ID: ', PA_JOB_ID)

PA_TASK_ITERATION = int(variables.get('PA_TASK_ITERATION'))
print("PA_TASK_ITERATION: ", PA_TASK_ITERATION)

PA_CATALOG_REST_URL = variables.get("PA_CATALOG_REST_URL")
print('PA_CATALOG_REST_URL: ', PA_CATALOG_REST_URL)

# Get the workflow to optimize
TARGET_WORKFLOW = variables.get("TARGET_WORKFLOW")
bucket_name, workflow_name = TARGET_WORKFLOW.split('/')
print("bucket_name: ", bucket_name, ", workflow_name: ", workflow_name)

# Set the workflow url
workflow_url = PA_CATALOG_REST_URL + '/buckets/'+bucket_name+'/resources/'+workflow_name+'/raw'
print("workflow_url: ", workflow_url)

# Get schedulerapi access and acquire session id
schedulerapi.connect()
session_id = schedulerapi.getSession()
print("session_id: ", session_id)

# Get the workflow xml
workflow_req = Request(workflow_url)
workflow_req.add_header('sessionid', session_id)
if workflow_url.startswith('https'):
    workflow_xml = urlopen(workflow_req, context=ssl._create_unverified_context()).read()
else:
    workflow_xml = urlopen(workflow_req).read()
# print("workflow_xml: " + str(workflow_xml))

# Define the search space
# space = "space=" + variables.get('SEARCH_SPACE')
# print('SEARCH_SPACE: ', space)
# exec(space)
workflow_root = etree.fromstring(workflow_xml)

search_space_xpath = "string(//*[@name='SEARCH_SPACE']/@value)"
search_space = str(workflow_root.xpath(search_space_xpath))

if len(str(search_space)) <= 0:
    raiser("The objective workflow do not contains a SEARCH_SPACE variable!")

search_space_model_xpath = "string(//*[@name='SEARCH_SPACE']/@model)"
search_space_model = str(workflow_root.xpath(search_space_model_xpath))

if len(str(search_space_model)) <= 0:
    raiser("The SEARCH_SPACE variable of the objective workflow do not contains a model type!")

# search key dict
def key_search(i):
    try:
        keys = list(i.keys())
    except:
         keys = []
    return keys

# get key and value dict
def key_value_get(key, value):
    aux = key.strip() + "(" + str(value) + ")"
    if key.strip() == 'uniform' or key.strip() == "quantized_uniform" or key.strip() == "log" or key.strip() == "quantized_log":
        aux = aux.replace('[', '')
        aux = aux.replace(']', '')
    return aux

# convert json to chocolate format
def json_to_choco_convert(search_space):
    cont_model = 0
    for data in search_space:
        key_list = key_search(data)
        if not key_list:
            key, value = list(search_space[data].items())[0]
            aux = key_value_get(key, value)
            search_space[data] = eval(aux)
        else:
            for i in key_list:
                try:
                    key, value = list(data[i].items())[0]
                    aux = key_value_get(key, value)
                    search_space[cont_model][i] = eval(aux)
                except:
                    pass
            cont_model += 1
    return search_space

if search_space_model.upper() == 'PA:JSON':
    # Define the search space from a JSON string
    space = "space=" + str(search_space)
    exec(space)
    space = json_to_choco_convert(space)
    print("\nspace: ", space)

if search_space_model.upper() == 'PA:CATALOG_OBJECT':
    # Define the search space from a JSON file stored in the catalog
    search_space_bucket_name, search_space_script_name = search_space.split('/')
    print("search_space_bucket_name: ", search_space_bucket_name, ", search_space_script_name: ", search_space_script_name)
    search_space_script_url = PA_CATALOG_REST_URL + '/buckets/'+search_space_bucket_name+'/resources/'+search_space_script_name+'/raw'
    print("search_space_script_url: ", search_space_script_url)
    search_space_script_req = Request(search_space_script_url)
    search_space_script_req.add_header('sessionid', session_id)
    if search_space_script_url.startswith('https'):
        search_space_script_json = json.loads(urlopen(search_space_script_req, context=ssl._create_unverified_context()).read())
    else:
        search_space_script_json = json.loads(urlopen(search_space_script_req).read())
    print("\nsearch_space_script_json: ", search_space_script_json)
    space = json_to_choco_convert(search_space_script_json)
    print("\nspace: ", space)


# Establish a connection to a MongoDB local database
MONGODB_URL = variables.get('MONGODB_URL')
print('MONGODB_URL: ', MONGODB_URL)
conn = MongoDBConnection(MONGODB_URL)
if PA_TASK_ITERATION == 0:
    print('Cleaning database for the first iteration')
    conn.clear() # Clear all data from the database.

TUNING_ALGORITHM = variables.get('TUNING_ALGORITHM')
assert TUNING_ALGORITHM is not None, "TUNING_ALGORITHM must be set!"
TUNING_ALGORITHM = TUNING_ALGORITHM.lower()
print('TUNING_ALGORITHM: ', TUNING_ALGORITHM)

cross_validation = int(variables.get('NUMBER_OF_REPETITIONS'))
cv = None
if cross_validation > 1:
    cv = Repeat(repetitions=cross_validation, reduce=np.mean, rep_col="_repetition_id")

# Construct the optimizer
sampler = None
if TUNING_ALGORITHM == "grid":
    sampler = Grid(connection=conn, space=space, crossvalidation=cv)
if TUNING_ALGORITHM == "random":
    sampler = Random(connection=conn, space=space, crossvalidation=cv)
if TUNING_ALGORITHM == "quasirandom":
    sampler = QuasiRandom(connection=conn, space=space, crossvalidation=cv)
if TUNING_ALGORITHM == "bayes":
    sampler = Bayes(connection=conn, space=space, crossvalidation=cv)
if TUNING_ALGORITHM == "cmaes":
    sampler = CMAES(connection=conn, space=space, crossvalidation=cv)
if TUNING_ALGORITHM == "mocmaes":
    sampler = MOCMAES(connection=conn, space=space, crossvalidation=cv, mu=2)
assert sampler is not None, "TUNING_ALGORITHM must be selected!"

# Check for previous results
workflow_results = None
if PA_TASK_ITERATION > 0:
    workflow_results = variables.get('workflow_results')

# Add previous loss values to the database
if workflow_results is not None:
    previous_results = json.loads(workflow_results)
    print("Adding previous loss values to the database")
    for i, previous_result in enumerate(previous_results):
        # print(i, previous_result)
        previous_token = previous_result['token']
        previous_loss = previous_result['loss']
        print(i, 'previous_token: ', previous_token, ', previous_loss: ', previous_loss)
        # Add the loss to the database
        # sampler.update(token, loss)
        sampler.update(previous_token, previous_loss)

# Sample the next point
samples_per_iteration = int(variables.get('PARALLEL_EXECUTIONS_PER_ITERATION'))
result = []
try:
    for i in range(samples_per_iteration):
        token, params = sampler.next()
        token_params = {
          'token': token,
          'params': params
        }
        token_params_json = json.dumps(token_params)
        print("sample: ", i, ", token_params: ", token_params_json)
        result.append(token_params_json)
except StopIteration:
    print("Stopping iteration...")
    pass

print('result: ', result)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
runs = result.size()
println "runs: " + runs
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
      <metadata>
        <positionTop>
            819.46875
        </positionTop>
        <positionLeft>
            362.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Submit_Job_No_Wait">
      <description>
        <![CDATA[ This task will be replicated according to the 'runs' value specified in the replication script.
The replication index is used in each task's instance to select the input. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_submit_job_no_wait.png"/>
      </genericInformation>
      <depends>
        <task ref="Split"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

def jsonSlurper = new JsonSlurper()

int replication = variables.get('PA_TASK_REPLICATION')
token_params_json = results[0].value()[replication]
println "token_params_json: " + token_params_json

def object = jsonSlurper.parseText(token_params_json)
token = object.token
params = object.params
println "token:  " + token
println "params: " + params

//String token_encoded = JsonOutput.toJson([token: token]).bytes.encodeBase64().toString()
//String params_encoded = JsonOutput.toJson([params: params]).bytes.encodeBase64().toString()
String token_encoded = JsonOutput.toJson(token).bytes.encodeBase64().toString()
String params_encoded = JsonOutput.toJson(params).bytes.encodeBase64().toString()
println "token_encoded:  " + token_encoded
println "params_encoded: " + params_encoded

// Check Visdom support
def VISDOM_ENABLED = false
if ("true".equalsIgnoreCase(variables.get("VISDOM_ENABLED"))) {
    VISDOM_ENABLED = true
}

// Check Tensorboard support
def TENSORBOARD_ENABLED = false
if ("true".equalsIgnoreCase(variables.get("TENSORBOARD_ENABLED"))) {
    TENSORBOARD_ENABLED = true
}

// Submit a workflow referenced in the ProActive Catalog (or accessible by url)
// Please add the bucket and workflow names that you want to execute as Task Variables 'call_workflow'
// connect to the scheduler
schedulerapi.connect()

// Get the workflow information
def target_workflow = variables.get("TARGET_WORKFLOW")

// Variables submitted to the workflow: Empty in the example, modify this map to give parameters to the submitted workflow
// workflow_variables = Collections.EMPTY_MAP
workflow_variables = [:]
workflow_variables.put("token_encoded", token_encoded)
workflow_variables.put("params_encoded", params_encoded)

def TARGET_NATIVE_SCHEDULER = variables.get("TARGET_NATIVE_SCHEDULER")
if (TARGET_NATIVE_SCHEDULER?.trim()) { workflow_variables.put("NATIVE_SCHEDULER", TARGET_NATIVE_SCHEDULER) }

def TARGET_NATIVE_SCHEDULER_PARAMS = variables.get("TARGET_NATIVE_SCHEDULER_PARAMS")
if (TARGET_NATIVE_SCHEDULER_PARAMS?.trim()) { workflow_variables.put("NATIVE_SCHEDULER_PARAMS", TARGET_NATIVE_SCHEDULER_PARAMS) }

def TARGET_NODE_ACCESS_TOKEN = variables.get("TARGET_NODE_ACCESS_TOKEN")
if (TARGET_NODE_ACCESS_TOKEN?.trim()) { workflow_variables.put("NODE_ACCESS_TOKEN", TARGET_NODE_ACCESS_TOKEN) }

def TARGET_NODE_SOURCE_NAME = variables.get("TARGET_NODE_SOURCE_NAME")
if (TARGET_NODE_SOURCE_NAME?.trim()) { workflow_variables.put("NODE_SOURCE_NAME", TARGET_NODE_SOURCE_NAME) }

def TARGET_CONTAINER_PLATFORM = variables.get("TARGET_CONTAINER_PLATFORM")
if (TARGET_CONTAINER_PLATFORM?.trim()) { workflow_variables.put("CONTAINER_PLATFORM", TARGET_CONTAINER_PLATFORM) }

def TARGET_CONTAINER_IMAGE = variables.get("TARGET_CONTAINER_IMAGE")
if (TARGET_CONTAINER_IMAGE?.trim()) { workflow_variables.put("CONTAINER_IMAGE", TARGET_CONTAINER_IMAGE) }

def TARGET_CONTAINER_GPU_ENABLED = variables.get("TARGET_CONTAINER_GPU_ENABLED")
if (TARGET_CONTAINER_GPU_ENABLED?.trim()) { workflow_variables.put("CONTAINER_GPU_ENABLED", TARGET_CONTAINER_GPU_ENABLED) }

def TARGET_NVIDIA_RAPIDS_ENABLED = variables.get("TARGET_NVIDIA_RAPIDS_ENABLED")
if (TARGET_NVIDIA_RAPIDS_ENABLED?.trim()) { workflow_variables.put("USE_NVIDIA_RAPIDS", TARGET_NVIDIA_RAPIDS_ENABLED) }

// Add generated params from search space as a workflow variable
params.each {
    workflow_variables.put(it.key, it.value)
}

workflow_variables.put("TENSORBOARD_ENABLED", variables.get("TENSORBOARD_ENABLED"))
if (TENSORBOARD_ENABLED) {
    println "Adding Tensorboard support to the workflow variables"
    def TENSORBOARD_HOST_LOG_PATH = variables.get("TENSORBOARD_HOST_LOG_PATH")
	if (TENSORBOARD_HOST_LOG_PATH?.trim()) { workflow_variables.put("TENSORBOARD_HOST_LOG_PATH", TENSORBOARD_HOST_LOG_PATH) }

    def TENSORBOARD_CONTAINER_LOG_PATH = variables.get("TENSORBOARD_CONTAINER_LOG_PATH")
	if (TENSORBOARD_CONTAINER_LOG_PATH?.trim()) { workflow_variables.put("TENSORBOARD_CONTAINER_LOG_PATH", TENSORBOARD_CONTAINER_LOG_PATH) }

    def TENSORBOARD_INSTANCE_NAME = variables.get("TENSORBOARD_INSTANCE_NAME")
	if (TENSORBOARD_INSTANCE_NAME?.trim()) { workflow_variables.put("TENSORBOARD_INSTANCE_NAME", TENSORBOARD_INSTANCE_NAME) }

    def CONTAINER_ROOTLESS_ENABLED = variables.get("CONTAINER_ROOTLESS_ENABLED")
	if (CONTAINER_ROOTLESS_ENABLED?.trim()) { workflow_variables.put("CONTAINER_ROOTLESS_ENABLED", CONTAINER_ROOTLESS_ENABLED) }
}

workflow_variables.put("VISDOM_ENABLED", VISDOM_ENABLED)
if (VISDOM_ENABLED) {
    println "[visdom] Adding Visdom support to the workflow variables"
    def VISDOM_INSTANCE_NAME = variables.get("VISDOM_INSTANCE_NAME")
    def VISDOM_ENDPOINT = variables.get("ENDPOINT_" + VISDOM_INSTANCE_NAME)
    if (VISDOM_ENDPOINT?.trim()) { workflow_variables.put("VISDOM_ENDPOINT", VISDOM_ENDPOINT) }
}

println "Submitting workflow " + target_workflow

// submitting the job
def PA_CATALOG_REST_URL = variables.get("PA_CATALOG_REST_URL")
def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]
println "------------------------------"
println "PA_CATALOG_REST_URL:  " + PA_CATALOG_REST_URL
println "bucket_workflow_name: " + target_workflow
println "workflow_variables:   " + workflow_variables
println "generic_infos_map:    " + generic_infos_map
println "------------------------------"
jobid = schedulerapi.submitFromCatalog(PA_CATALOG_REST_URL, target_workflow, workflow_variables, generic_infos_map)

// alternatively you can submit a workflow from a direct url
// // add sessionId to request header map
// requestHeader = Collections.singletonMap("sessionId", schedulerapi.getSession()
// jobUrl = "https://try.activeeon.com/catalog/buckets/basic-examples/resources/distributed_computing_Pi/raw"
// jobid = schedulerapi.submit(jobURL, variables, generic_infos_map, requestHeader)

println "Job submitted with job id " + jobid
jobid_params = JsonOutput.toJson(params)
result = [jobid, jobid_params]
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            947.46875
        </positionTop>
        <positionLeft>
            362.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Merge">
      <description>
        <![CDATA[ As a merge operation, we simply print the results from previous tasks. ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:Boolean" name="CONTAINER_GPU_ENABLED" value="False" description="If True, containers will run based on images containing libraries that are compatible with GPU."/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="Submit_Job_No_Wait"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import json, os, math, shutil
import numpy as np

from io import BytesIO
from PIL import Image
from argparse import ArgumentParser
from time import sleep

# connect to the scheduler
schedulerapi.connect()

PA_JOB_ID = variables.get("PA_JOB_ID")
print('PA_JOB_ID: ', PA_JOB_ID)

EARLY_STOPPING = 0
STOP_IF_LOSS_IS_LOWER_THAN = variables.get("STOP_IF_LOSS_IS_LOWER_THAN")
try:
    STOP_IF_LOSS_IS_LOWER_THAN = float(STOP_IF_LOSS_IS_LOWER_THAN)
except Exception:
    STOP_IF_LOSS_IS_LOWER_THAN = -1.0
print('STOP_IF_LOSS_IS_LOWER_THAN: ', STOP_IF_LOSS_IS_LOWER_THAN)

# Check Visdom support
VISDOM_ENABLED = variables.get("VISDOM_ENABLED")
if VISDOM_ENABLED is not None and VISDOM_ENABLED.lower() == "true":
    VISDOM_ENABLED = True
    from visdom import Visdom
else:
    VISDOM_ENABLED = False

# Check Tensorboard support
TENSORBOARD_ENABLED = variables.get("TENSORBOARD_ENABLED")
if TENSORBOARD_ENABLED is not None and TENSORBOARD_ENABLED.lower() == "true":
    TENSORBOARD_ENABLED = True
    from tensorboardX import SummaryWriter
else:
    TENSORBOARD_ENABLED = False

writer = None
if TENSORBOARD_ENABLED:
    TENSORBOARD_CONTAINER_LOG_PATH = variables.get("TENSORBOARD_CONTAINER_LOG_PATH")
    assert TENSORBOARD_CONTAINER_LOG_PATH is not None
    TENSORBOARD_JOB_ID = "job_ID_" + variables.get("PA_JOB_ID")
    TENSORBOARD_PATH = os.path.join(TENSORBOARD_CONTAINER_LOG_PATH, TENSORBOARD_JOB_ID)
    print('TENSORBOARD_PATH: ', TENSORBOARD_PATH)
    try:
        if not os.path.exists(TENSORBOARD_PATH):
            os.makedirs(TENSORBOARD_PATH)
        writer = SummaryWriter(TENSORBOARD_PATH)
    except:
        print("Error while using: ", TENSORBOARD_PATH)
        print("Deactivating Tensorboard")
        TENSORBOARD_ENABLED = False
        pass

# print('received results: ', results)

parent_job_id = PA_JOB_ID

### BEGIN VISDOM ###
vis = None
if VISDOM_ENABLED:
    try:
        VISDOM_HOST = variables.get('VISDOM_HOST')
        VISDOM_PORT = variables.get('VISDOM_PORT')
        print("[visdom] Connecting to %s:%s" % (VISDOM_HOST, VISDOM_PORT))
        vis = Visdom(server="http://"+VISDOM_HOST, port=int(VISDOM_PORT))
        if vis.check_connection(timeout_seconds=10):
            print("[visdom] Connected to Visdom")
            win_text_loss = variables.get('VISDOM_win_text_loss')
            win_plot_loss = variables.get('VISDOM_win_plot_loss')
            print("[visdom] [debug] win_text_loss: ", win_text_loss)
            print("[visdom] [debug] win_plot_loss: ", win_plot_loss)
        else:
            raise Exception('[visdom] Visdom server seems to be down. TimeoutError.')
    except Exception as e:
        print("[visdom] Error while connecting to Visdom: ", e)
        print("[visdom] Deactivating Visdom")
        VISDOM_ENABLED = False
        variables.put("VISDOM_ENABLED", "False")
        pass
### END VISDOM ###

results_list = []
job_id_params = {}
for r in results:
    # v = int(str(r.value()))
    job_id = int(str(r.value()[0]))
    params = json.loads(str(r.value()[1]))
    job_id_params["job_id_"+str(job_id)] = params
    results_list.append(job_id)
results_list.sort()

workflow_results = []
# for i, res in enumerate(results):
for i, job_id in enumerate(results_list):
    # job_id = str(res.getValue())
    # print(i, job_id)

    # Wait for the job termination
    is_finished = False
    while True:
        is_finished = schedulerapi.isJobFinished(str(job_id))
        print(i, "job_id: ", job_id, ", is_finished: ", is_finished)
        if is_finished:
            break
        else:
            sleep(0.5)  # 500ms

    # Get job result
    # RESULT_JSON: {"token": {"_token_id": 0}, "loss": 0.009321813276374468}
    result_map = schedulerapi.getJobResult(str(job_id)).getResultMap()
    result_json = result_map['RESULT_JSON']
    job_result = json.loads(result_json)
    print(i, "job_id: ", job_id, ", job_result: ", job_result)
    workflow_results.append(job_result)

    token = job_result['token']        # {'_chocolate_id': 0}
    loss = job_result['loss']          # 450.9434895085956
    token_id = token['_chocolate_id']  # 0

    try:
        if STOP_IF_LOSS_IS_LOWER_THAN >= 0 and float(loss) <= STOP_IF_LOSS_IS_LOWER_THAN:
            EARLY_STOPPING = 1
    except:
        print("Error while checking the early stopping mechanism!")
        pass

    if VISDOM_ENABLED:
        try:
            VISDOM_JOB_ID = 'job_id_' + parent_job_id
            # vis.text("{:.4f}\n".format(loss), win=win_text_loss, append=True, env=VISDOM_JOB_ID)
            vis.text("Job ID: {}, Loss: {:.4f}\n".format(job_id, loss), win=win_text_loss, append=True, env=VISDOM_JOB_ID)
            # vis.line(Y=np.array([loss]), X=np.array([token_id]), win=win_plot_loss, update='append', env=VISDOM_JOB_ID)
            vis.line(Y=np.array([loss]), X=np.array([job_id]), win=win_plot_loss, update='append', env=VISDOM_JOB_ID)
        except:
            print("[visdom] Error while plotting with Visdom!")
            pass

    if TENSORBOARD_ENABLED:
        try:
            writer.add_text('Text/parent_job', 'text logged at job: ' + str(job_id), loss)
            writer.add_scalar('Loss', np.array([loss]), job_id)
            # writer.add_scalar('Loss', np.array([loss]), token_id)

            # Parallel Coordinates Plot
            params = job_id_params["job_id_"+str(job_id)]
            writer.add_hparams(params, {'PLoss': loss}, name="job_id_"+str(job_id))
        except:
            print("Error while plotting with Tensorboard!")
            pass

if TENSORBOARD_ENABLED:
    writer.close()

workflow_results = json.dumps(workflow_results)
print('workflow_results: ', workflow_results)

variables.put('workflow_results', workflow_results)
variables.put('EARLY_STOPPING', str(EARLY_STOPPING))
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="end"/>
      <metadata>
        <positionTop>
            1075.46875
        </positionTop>
        <positionLeft>
            362.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Start">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png"/>
      </genericInformation>
      <depends>
        <task ref="Join_Task"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
PA_TASK_ITERATION = variables.get('PA_TASK_ITERATION')
println '\n\nLoop block start ' + PA_TASK_ITERATION
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="start"/>
      <metadata>
        <positionTop>
            437.46875
        </positionTop>
        <positionLeft>
            468.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Loop">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png"/>
      </genericInformation>
      <depends>
        <task ref="Finally"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="javascript">
            <![CDATA[
print('Loop block end ' + variables.get('PA_TASK_ITERATION'))
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="end">
        <loop target="Start">
          <script>
            <code language="groovy">
              <![CDATA[
import com.google.common.base.Splitter;

MAX_ITERATIONS = variables.get('MAX_ITERATIONS') as Integer
PA_TASK_ITERATION = variables.get('PA_TASK_ITERATION') as Integer
PAUSE_AFTER_EVERY_ITERATIONS = variables.get('PAUSE_AFTER_EVERY_ITERATIONS') as Integer
EARLY_STOPPING = variables.get('EARLY_STOPPING') as Integer
println("MAX_ITERATIONS:               " + MAX_ITERATIONS)
println("PA_TASK_ITERATION:            " + PA_TASK_ITERATION)
println("PAUSE_AFTER_EVERY_ITERATIONS: " + PAUSE_AFTER_EVERY_ITERATIONS)
println("EARLY_STOPPING:               " + EARLY_STOPPING)

def pauseIsEnabled() {
    return PAUSE_AFTER_EVERY_ITERATIONS > 0 && ((PA_TASK_ITERATION + 1) % PAUSE_AFTER_EVERY_ITERATIONS == 0)
}

def waitForSignals() {
    // Read the variable SIGNALS
    signals = "Continue_Optimization,Stop_Optimization"
    signals2remove = "Continue_Optimization"

    // Split the value of the variable SIGNALS and transform it into a list
    Set signalsSet = new HashSet<>(Splitter.on(',').trimResults().omitEmptyStrings().splitToList(signals))
    Set signalsSet2remove = new HashSet<>(Splitter.on(',').trimResults().omitEmptyStrings().splitToList(signals2remove))

    // Send a ready notification for each signal in the set
    println("[signal] Ready for signals "+ signalsSet)
    signalsSet.each { signal ->
        signalapi.readyForSignal(signal)
    }

    // Wait until one signal among those specified is received
    println("[signal] Waiting for any signal among "+ signalsSet)
    receivedSignal = signalapi.waitForAny(signalsSet)

    // Remove ready signals
    // signalapi.removeManySignals(new HashSet<>(signalsSet.collect { signal -> "ready_"+signal }))
    signalapi.removeManySignals(new HashSet<>(signalsSet2remove.collect { signal -> "ready_"+signal }))

    // Display the received signal and add it to the job result
    println("[signal] Received signal: "+ receivedSignal.getName())
    if ("Continue_Optimization".equalsIgnoreCase(receivedSignal.getName())) {
        println("[signal] Received signal to continue the workflow optimization!")
        return true
    } else {
        println("[signal] Received signal to stop the workflow optimization!")
        return false
    }
}

public static boolean containsIgnoreCase(String str, String searchStr) {
    if(str == null || searchStr == null) return false;
    final int length = searchStr.length();
    if (length == 0)
        return true;
    for (int i = str.length() - length; i >= 0; i--) {
        if (str.regionMatches(true, i, searchStr, 0, length))
            return true;
    }
    return false;
}

def checkForSignals() {
    // Read the variable SIGNALS_SET
    Set signalsSet = variables.get("SIGNALS_SET")

    // Check whether one signal among those specified as input is received
    println("[signal] Checking whether one signal in the set " + signalsSet + " is received")
    receivedSignals = signalapi.checkForSignals(signalsSet)

    // If a signal is received, remove ready signals and break the loop, else sleep 10 seconds then restart
    if (receivedSignals != null && !receivedSignals.isEmpty()) {
        // Remove ready signals
        signalapi.removeManySignals(new HashSet<>(signalsSet.collect { signal -> "ready_"+signal }))

        // Print the received signal
        println("[signal] Received signals: " + receivedSignals.toString())
        for (String s : Arrays.asList(receivedSignals.keySet())) {
            if (containsIgnoreCase(s, "Stop_Optimization")) {
                println("[signal] Received signal to stop the workflow optimization!")
                return false
            }
        }
        return true
    } else {
        return true
    }
}

// Check if loop should be true or false
println("[signal] Checking the loop condition...")
if((MAX_ITERATIONS < 0) || (MAX_ITERATIONS > 0 && PA_TASK_ITERATION < (MAX_ITERATIONS - 1))) {
    loop = checkForSignals()
    if (loop && pauseIsEnabled()) {
        loop = waitForSignals()
    }
} else {
    loop = false
}

if (EARLY_STOPPING) {
    println("[signal] Early stopping mechanism reached!")
    loop = false
}

if (loop) {
    println("[signal] Continuing the workflow optimization...")
} else {
    println("[signal] Stopping the workflow optimization!")
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            819.46875
        </positionTop>
        <positionLeft>
            631.234375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Parse_MongoDB_Endpoint">
      <description>
        <![CDATA[ This task aims to parse PCA endpoint in order to retrieve a HOST and a PORT number to use them as an input in the data connector tasks. ]]>
      </description>
      <depends>
        <task ref="Start_MongoDB"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def endpoint = new URI(results[0].toString())
variables.put("MONGODB_HOST", endpoint.getHost())
variables.put("MONGODB_PORT", endpoint.getPort())

// Wait for database sever to be up and fully running.
sleep(10000)

MONGODB_HOST = variables.get("MONGODB_HOST")
MONGODB_PORT = variables.get("MONGODB_PORT")
MONGODB_USER = variables.get("MONGODB_USER")
MONGODB_PASS = variables.get("MONGODB_PASS")

MONGODB_URL  = "mongodb://"+MONGODB_USER+":"+MONGODB_PASS+"@"+MONGODB_HOST+":"+MONGODB_PORT
variables.put("MONGODB_URL", MONGODB_URL)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            183.46875
        </positionTop>
        <positionLeft>
            26.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Start_MongoDB" onTaskError="cancelJob">
      <description>
        <![CDATA[ Start the MongoDB server as a service. ]]>
      </description>
      <variables>
        <variable inherited="false" name="SERVICE_ID" value="MongoDB" description="Id of the MongoDB service."/>
        <variable inherited="false" name="INSTANCE_NAME" value="mongodb-server-${PA_JOB_ID}" description="Instance name of the server to be used."/>
        <variable inherited="false" name="ENGINE" value="$CONTAINER_PLATFORM" description="Container platform used for executing the workflow tasks."/>
        <variable inherited="false" name="USER" value="activeeon" description="Database user name"/>
        <variable inherited="false" name="PASSWORD" model="PA:HIDDEN" value="ENC(T11vzCF5nEz9mzCTXMOeqjTzBLOp2Axu)" description="User password that will be used to access the MongoDB service"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
        <info name="task.documentation" value="PSA/PSAUserGuide.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw">
            <arguments>
              <argument value="false"/>
              <argument value="false"/>
              <argument value="USER"/>
              <argument value="PASSWORD"/>
              <argument value="NATIVE_SCHEDULER"/>
              <argument value="NATIVE_SCHEDULER_PARAMS"/>
              <argument value="NODE_ACCESS_TOKEN"/>
              <argument value="NODE_SOURCE_NAME"/>
              <argument value="ENGINE"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
variables.put('MONGODB_USER', variables.get("USER"))
variables.put('MONGODB_PASS', variables.get("PASSWORD"))
variables.put('MONGODB_INSTANCE_NAME', variables.get("INSTANCE_NAME"))
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            55.46875
        </positionTop>
        <positionLeft>
            26.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Join_Task">
      <description>
        <![CDATA[ The simplest task, ran by a Groovy engine. ]]>
      </description>
      <depends>
        <task ref="Parse_MongoDB_Endpoint"/>
        <task ref="Continuation1"/>
        <task ref="Continuation2"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import com.google.common.base.Splitter;

if (variables.get("READY_SENT") == null) {
    // Read the variable SIGNALS
    signals = "Stop_Optimization"

    // Split the value of the variable SIGNALS and transform it into a list
    Set signalsSet = new HashSet<>(Splitter.on(',').trimResults().omitEmptyStrings().splitToList(signals))

    // Send a ready notification for each signal in the set
    println("[signal] Ready for signals "+ signalsSet)
    signalsSet.each {
        signal -> signalapi.readyForSignal(signal)
    }

    // Add a variable to avoid sending ready notifications again
    variables.put("READY_SENT", true)

    // Add the signals set as a variable to be used by next tasks
    variables.put("SIGNALS_SET", signalsSet)
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            311.46875
        </positionTop>
        <positionLeft>
            468.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Stop_MongoDB" onTaskError="cancelJob">
      <variables>
        <variable inherited="false" name="INSTANCE_ID" value="" description="Service instance ID."/>
        <variable inherited="false" name="INSTANCE_NAME" value="mongodb-server-${PA_JOB_ID}" description="Service instance name."/>
        <variable inherited="false" name="ACTION" model="PA:LIST(Finish_MongoDB)" value="Finish_MongoDB" description="Action that will be processed regarding the service status."/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
        <info name="task.documentation" value="PSA/PSAUserGuide.html"/>
      </genericInformation>
      <depends>
        <task ref="Loop"/>
      </depends>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Action/raw">
            <arguments>
              <argument value="MONGODB_INSTANCE_NAME"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            947.46875
        </positionTop>
        <positionLeft>
            533.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Check_Algorithm_Condition">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <depends>
        <task ref="Start"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("Checking the branch condition of the algorithm")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <if continuation="Finally" else="Else" target="If_Bayes">
          <script>
            <code language="groovy">
              <![CDATA[
TUNING_ALGORITHM = variables.get('TUNING_ALGORITHM')

if(TUNING_ALGORITHM.toLowerCase().contains("bayes")) {
    branch = "if";
} else {
    branch = "else";
}
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            563.46875
        </positionTop>
        <positionLeft>
            417.234375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="If_Bayes">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("Running the If_Bayes branch")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="start"/>
      <metadata>
        <positionTop>
            691.46875
        </positionTop>
        <positionLeft>
            194.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Else">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("Running the Else branch")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="start"/>
      <metadata>
        <positionTop>
            691.46875
        </positionTop>
        <positionLeft>
            362.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Finally">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("Running the continuation branch [Finally task]")
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            691.46875
        </positionTop>
        <positionLeft>
            579.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Split_Submit_Job_and_Wait">
      <description>
        <![CDATA[ The simplest task, ran by a Python engine. ]]>
      </description>
      <variables>
        <variable inherited="false" name="CONTAINER_GPU_ENABLED" model="PA:Boolean" value="False" description="If True, containers will run based on images containing libraries that are compatible with GPU."/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="If_Bayes"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import os, math, json, base64, shutil
import numpy as np
import ssl

from urllib.request import Request, urlopen
from lxml import etree
from io import BytesIO
from PIL import Image
from argparse import ArgumentParser
from time import sleep

import chocolate as choco
from chocolate import uniform, quantized_uniform, log, quantized_log, choice
from chocolate import MongoDBConnection, Bayes, Grid, Random, QuasiRandom, CMAES, MOCMAES

from py4j.java_collections import SetConverter, MapConverter, ListConverter


def raiser(msg): raise Exception(msg)


def is_not_none_and_not_empty(p): return bool(p and not p.isspace())


PA_JOB_ID = variables.get("PA_JOB_ID")
print('PA_JOB_ID: ', PA_JOB_ID)

PA_TASK_ITERATION = int(variables.get('PA_TASK_ITERATION'))
print("PA_TASK_ITERATION: ", PA_TASK_ITERATION)

PA_CATALOG_REST_URL = variables.get("PA_CATALOG_REST_URL")
print('PA_CATALOG_REST_URL: ', PA_CATALOG_REST_URL)

EARLY_STOPPING = 0
STOP_IF_LOSS_IS_LOWER_THAN = variables.get("STOP_IF_LOSS_IS_LOWER_THAN")
try:
    STOP_IF_LOSS_IS_LOWER_THAN = float(STOP_IF_LOSS_IS_LOWER_THAN)
except Exception:
    STOP_IF_LOSS_IS_LOWER_THAN = -1.0
print('STOP_IF_LOSS_IS_LOWER_THAN: ', STOP_IF_LOSS_IS_LOWER_THAN)

# Check Visdom support
VISDOM_ENABLED = variables.get("VISDOM_ENABLED")
if VISDOM_ENABLED is not None and VISDOM_ENABLED.lower() == "true":
    VISDOM_ENABLED = True
    from visdom import Visdom
else:
    VISDOM_ENABLED = False

# Check Tensorboard support
TENSORBOARD_ENABLED = variables.get("TENSORBOARD_ENABLED")
if TENSORBOARD_ENABLED is not None and TENSORBOARD_ENABLED.lower() == "true":
    TENSORBOARD_ENABLED = True
    from tensorboardX import SummaryWriter
else:
    TENSORBOARD_ENABLED = False

writer = None
if TENSORBOARD_ENABLED:
    TENSORBOARD_CONTAINER_LOG_PATH = variables.get("TENSORBOARD_CONTAINER_LOG_PATH")
    assert TENSORBOARD_CONTAINER_LOG_PATH is not None
    TENSORBOARD_JOB_ID = "job_ID_" + variables.get("PA_JOB_ID")
    TENSORBOARD_PATH = os.path.join(TENSORBOARD_CONTAINER_LOG_PATH, TENSORBOARD_JOB_ID)
    print('TENSORBOARD_PATH: ', TENSORBOARD_PATH)
    try:
        if not os.path.exists(TENSORBOARD_PATH):
            os.makedirs(TENSORBOARD_PATH)
        writer = SummaryWriter(TENSORBOARD_PATH)
    except:
        print("Error while using: ", TENSORBOARD_PATH)
        print("Deactivating Tensorboard")
        TENSORBOARD_ENABLED = False
        pass


# Get the workflow to optimize
TARGET_WORKFLOW = variables.get("TARGET_WORKFLOW")
bucket_name, workflow_name = TARGET_WORKFLOW.split('/')
print("bucket_name: ", bucket_name, ", workflow_name: ", workflow_name)

# Set the workflow url
workflow_url = PA_CATALOG_REST_URL + '/buckets/'+bucket_name+'/resources/'+workflow_name+'/raw'
print("workflow_url: ", workflow_url)

# Get schedulerapi access and acquire session id
schedulerapi.connect()
session_id = schedulerapi.getSession()
print("session_id: ", session_id)

# Get the workflow xml
workflow_req = Request(workflow_url)
workflow_req.add_header('sessionid', session_id)
if workflow_url.startswith('https'):
    workflow_xml = urlopen(workflow_req, context=ssl._create_unverified_context()).read()
else:
    workflow_xml = urlopen(workflow_req).read()
# print("workflow_xml: " + str(workflow_xml))

# Define the search space
# space = "space=" + variables.get('SEARCH_SPACE')
# print('SEARCH_SPACE: ', space)
# exec(space)
workflow_root = etree.fromstring(workflow_xml)

search_space_xpath = "string(//*[@name='SEARCH_SPACE']/@value)"
search_space = str(workflow_root.xpath(search_space_xpath))

if len(str(search_space)) <= 0:
    raiser("The objective workflow do not contains a SEARCH_SPACE variable!")

search_space_model_xpath = "string(//*[@name='SEARCH_SPACE']/@model)"
search_space_model = str(workflow_root.xpath(search_space_model_xpath))

if len(str(search_space_model)) <= 0:
    raiser("The SEARCH_SPACE variable of the objective workflow do not contains a model type!")

# search key dict
def key_search(i):
    try:
        keys = list(i.keys())
    except:
         keys = []
    return keys

# get key and value dict
def key_value_get(key, value):
    aux = key.strip() + "(" + str(value) + ")"
    if key.strip() == 'uniform' or key.strip() == "quantized_uniform" or key.strip() == "log" or key.strip() == "quantized_log":
        aux = aux.replace('[', '')
        aux = aux.replace(']', '')
    return aux

# convert json to chocolate format
def json_to_choco_convert(search_space):
    cont_model = 0
    for data in search_space:
        key_list = key_search(data)
        if not key_list:
            key, value = list(search_space[data].items())[0]
            aux = key_value_get(key, value)
            search_space[data] = eval(aux)
        else:
            for i in key_list:
                try:
                    key, value = list(data[i].items())[0]
                    aux = key_value_get(key, value)
                    search_space[cont_model][i] = eval(aux)
                except:
                    pass
            cont_model += 1
    return search_space


if search_space_model.upper() == 'PA:JSON':
    # Define the search space from a JSON string
    space = "space=" + str(search_space)
    exec(space)
    space = json_to_choco_convert(space)
    print("\nspace: ", space)

if search_space_model.upper() == 'PA:CATALOG_OBJECT':
    # Define the search space from a JSON file stored in the catalog
    search_space_bucket_name, search_space_script_name = search_space.split('/')
    print("search_space_bucket_name: ", search_space_bucket_name, ", search_space_script_name: ", search_space_script_name)
    search_space_script_url = PA_CATALOG_REST_URL + '/buckets/'+search_space_bucket_name+'/resources/'+search_space_script_name+'/raw'
    print("search_space_script_url: ", search_space_script_url)
    search_space_script_req = Request(search_space_script_url)
    search_space_script_req.add_header('sessionid', session_id)
    if search_space_script_url.startswith('https'):
        search_space_script_json = json.loads(urlopen(search_space_script_req, context=ssl._create_unverified_context()).read())
    else:
        search_space_script_json = json.loads(urlopen(search_space_script_req).read())
    print("\nsearch_space_script_json: ", search_space_script_json)
    space = json_to_choco_convert(search_space_script_json)
    print("\nspace: ", space)


# Establish a connection to a MongoDB local database
MONGODB_URL = variables.get('MONGODB_URL')
print('MONGODB_URL: ', MONGODB_URL)
conn = MongoDBConnection(MONGODB_URL)
if PA_TASK_ITERATION == 0:
    print('Cleaning database for the first iteration')
    conn.clear()  # Clear all data from the database.

TUNING_ALGORITHM = variables.get('TUNING_ALGORITHM')
assert TUNING_ALGORITHM is not None, "TUNING_ALGORITHM must be set!"
TUNING_ALGORITHM = TUNING_ALGORITHM.lower()
print('TUNING_ALGORITHM: ', TUNING_ALGORITHM)

cross_validation = int(variables.get('NUMBER_OF_REPETITIONS'))
cv = None
if cross_validation > 1:
    cv = Repeat(repetitions=cross_validation, reduce=np.mean, rep_col="_repetition_id")

# Construct the optimizer
sampler = None
if TUNING_ALGORITHM == "grid":
    sampler = Grid(conn, space, cv)
if TUNING_ALGORITHM == "random":
    sampler = Random(conn, space, cv)
if TUNING_ALGORITHM == "quasirandom":
    sampler = QuasiRandom(conn, space, cv)
if TUNING_ALGORITHM == "bayes":
    sampler = Bayes(conn, space, cv)
if TUNING_ALGORITHM == "cmaes":
    sampler = CMAES(conn, space, cv)
if TUNING_ALGORITHM == "mocmaes":
    sampler = MOCMAES(conn, space, cv)
assert sampler is not None, "TUNING_ALGORITHM must be selected!"

# Check for previous results
workflow_results = None
if PA_TASK_ITERATION > 0:
    workflow_results = variables.get('workflow_results')

# Add previous loss values to the database
if workflow_results is not None:
    previous_results = json.loads(workflow_results)
    print("Adding previous loss values to the database")
    for i, previous_result in enumerate(previous_results):
        # print(i, previous_result)
        previous_token = previous_result['token']
        previous_loss = previous_result['loss']
        print(i, 'previous_token: ', previous_token, ', previous_loss: ', previous_loss)
        # Add the loss to the database
        # sampler.update(token, loss)
        sampler.update(previous_token, previous_loss)

# Sample the next point and submit job
samples_per_iteration = int(variables.get('PARALLEL_EXECUTIONS_PER_ITERATION'))
results = []
map_converter = MapConverter()
job_id_params = {}
for i in range(samples_per_iteration):
    try:
    	token, params = sampler.next()
    	print("sample: ", i, ", token: ", token, ", params: ", params)
    except StopIteration:
        print("Stopping iteration...")
        break

    token_encoded = base64.b64encode(json.dumps(token).encode('utf-8')).decode("utf-8")
    params_encoded = base64.b64encode(json.dumps(params).encode("utf-8")).decode("utf-8")
    print("token_encoded:  ", token_encoded)
    print("params_encoded: ", params_encoded)

    # variables submitted to the workflow
    workflow_variables = {
        "token_encoded": token_encoded,
        "params_encoded": params_encoded
    }

    # Add generated params from the search space as a workflow variable
    workflow_variables.update(params)

    TARGET_NATIVE_SCHEDULER = variables.get("TARGET_NATIVE_SCHEDULER")
    TARGET_NATIVE_SCHEDULER_PARAMS = variables.get("TARGET_NATIVE_SCHEDULER_PARAMS")
    TARGET_NODE_ACCESS_TOKEN = variables.get("TARGET_NODE_ACCESS_TOKEN")
    TARGET_NODE_SOURCE_NAME = variables.get("TARGET_NODE_SOURCE_NAME")
    TARGET_CONTAINER_PLATFORM = variables.get("TARGET_CONTAINER_PLATFORM")
    TARGET_CONTAINER_IMAGE = variables.get("TARGET_CONTAINER_IMAGE")
    TARGET_CONTAINER_GPU_ENABLED = variables.get("TARGET_CONTAINER_GPU_ENABLED")
    TARGET_NVIDIA_RAPIDS_ENABLED = variables.get("TARGET_NVIDIA_RAPIDS_ENABLED")

    if is_not_none_and_not_empty(TARGET_NATIVE_SCHEDULER): workflow_variables['NATIVE_SCHEDULER'] = TARGET_NATIVE_SCHEDULER
    if is_not_none_and_not_empty(TARGET_NATIVE_SCHEDULER_PARAMS): workflow_variables['NATIVE_SCHEDULER_PARAMS'] = TARGET_NATIVE_SCHEDULER_PARAMS
    if is_not_none_and_not_empty(TARGET_NODE_ACCESS_TOKEN): workflow_variables['NODE_ACCESS_TOKEN'] = TARGET_NODE_ACCESS_TOKEN
    if is_not_none_and_not_empty(TARGET_NODE_SOURCE_NAME): workflow_variables['NODE_SOURCE_NAME'] = TARGET_NODE_SOURCE_NAME
    if is_not_none_and_not_empty(TARGET_CONTAINER_PLATFORM): workflow_variables['CONTAINER_PLATFORM'] = TARGET_CONTAINER_PLATFORM
    if is_not_none_and_not_empty(TARGET_CONTAINER_IMAGE): workflow_variables['CONTAINER_IMAGE'] = TARGET_CONTAINER_IMAGE
    if is_not_none_and_not_empty(TARGET_CONTAINER_GPU_ENABLED): workflow_variables['CONTAINER_GPU_ENABLED'] = TARGET_CONTAINER_GPU_ENABLED
    if is_not_none_and_not_empty(TARGET_NVIDIA_RAPIDS_ENABLED): workflow_variables['USE_NVIDIA_RAPIDS'] = TARGET_NVIDIA_RAPIDS_ENABLED

    workflow_variables['TENSORBOARD_ENABLED'] = str(TENSORBOARD_ENABLED).lower()
    if TENSORBOARD_ENABLED:
        print("Adding Tensorboard support to the workflow variables")
        TENSORBOARD_INSTANCE_NAME = variables.get("TENSORBOARD_INSTANCE_NAME")
        TENSORBOARD_HOST_LOG_PATH = variables.get("TENSORBOARD_HOST_LOG_PATH")
        TENSORBOARD_CONTAINER_LOG_PATH = variables.get("TENSORBOARD_CONTAINER_LOG_PATH")
        CONTAINER_ROOTLESS_ENABLED = variables.get("CONTAINER_ROOTLESS_ENABLED")
        if is_not_none_and_not_empty(TENSORBOARD_INSTANCE_NAME): workflow_variables['TENSORBOARD_INSTANCE_NAME'] = TENSORBOARD_INSTANCE_NAME
        if is_not_none_and_not_empty(TENSORBOARD_HOST_LOG_PATH): workflow_variables['TENSORBOARD_HOST_LOG_PATH'] = TENSORBOARD_HOST_LOG_PATH
        if is_not_none_and_not_empty(TENSORBOARD_CONTAINER_LOG_PATH): workflow_variables['TENSORBOARD_CONTAINER_LOG_PATH'] = TENSORBOARD_CONTAINER_LOG_PATH
        if is_not_none_and_not_empty(CONTAINER_ROOTLESS_ENABLED): workflow_variables['CONTAINER_ROOTLESS_ENABLED'] = CONTAINER_ROOTLESS_ENABLED

    workflow_variables['VISDOM_ENABLED'] = str(VISDOM_ENABLED).lower()
    if VISDOM_ENABLED:
        print("[visdom] Adding Visdom support to the workflow variables")
        VISDOM_INSTANCE_NAME = variables.get("VISDOM_INSTANCE_NAME")
        VISDOM_ENDPOINT = variables.get("ENDPOINT_" + VISDOM_INSTANCE_NAME)
        if is_not_none_and_not_empty(VISDOM_ENDPOINT): workflow_variables['VISDOM_ENDPOINT'] = VISDOM_ENDPOINT

    workflow_variables_java_map = map_converter.convert(workflow_variables, schedulerapi._gateway_client)
    # print('workflow_variables_java_map: ', workflow_variables_java_map)
    generic_infos_map = {
        "PARENT_JOB_ID": PA_JOB_ID
    }
    generic_infos_java_map = map_converter.convert(generic_infos_map, schedulerapi._gateway_client)
    # print('generic_infos_java_map: ', generic_infos_java_map)

    print("Submitting workflow ", TARGET_WORKFLOW)
    # submitting the job
    print("-"*30)
    print("PA_CATALOG_REST_URL: ", PA_CATALOG_REST_URL)
    print("bucket_name:         ", bucket_name)
    print("workflow_name:       ", workflow_name)
    print("workflow_variables:  ", workflow_variables)
    print("generic_infos_map:   ", generic_infos_map)
    print("-"*30)
    job_id = schedulerapi.submitFromCatalog(PA_CATALOG_REST_URL, bucket_name, workflow_name, workflow_variables_java_map, generic_infos_java_map).longValue()
    print("Job submitted with job id ", job_id)

    results.append(job_id)
    job_id_params["job_id_"+str(job_id)] = params
# end iterations

parent_job_id = PA_JOB_ID

### BEGIN VISDOM ###
vis = None
if VISDOM_ENABLED:
    try:
        VISDOM_HOST = variables.get('VISDOM_HOST')
        VISDOM_PORT = variables.get('VISDOM_PORT')
        print("[visdom] Connecting to %s:%s" % (VISDOM_HOST, VISDOM_PORT))
        vis = Visdom(server="http://"+VISDOM_HOST, port=int(VISDOM_PORT))
        if vis.check_connection(timeout_seconds=10):
            print("[visdom] Connected to Visdom")
            win_text_loss = variables.get('VISDOM_win_text_loss')
            win_plot_loss = variables.get('VISDOM_win_plot_loss')
            print("[visdom] [debug] win_text_loss: ", win_text_loss)
            print("[visdom] [debug] win_plot_loss: ", win_plot_loss)
        else:
            raise Exception('[visdom] Visdom server seems to be down. TimeoutError.')
    except Exception as e:
        print("[visdom] Error while connecting to Visdom: ", e)
        print("[visdom] Deactivating Visdom")
        VISDOM_ENABLED = False
        variables.put("VISDOM_ENABLED", "False")
        pass
### END VISDOM ###

workflow_results = []
results.sort()
for i, res in enumerate(results):
    job_id = str(res)
    # print(i, job_id)

    # Wait for the job termination
    is_finished = False
    while True:
        is_finished = schedulerapi.isJobFinished(job_id)
        print(i, "job_id: ", job_id, ", is_finished: ", is_finished)
        if is_finished:
            break
        else:
            sleep(0.5)  # 500ms

    # Get job result
    # RESULT_JSON: {"token": {"_token_id": 0}, "loss": 0.009321813276374468}
    result_map = schedulerapi.getJobResult(job_id).getResultMap()
    result_json = result_map['RESULT_JSON']
    job_result = json.loads(result_json)
    print(i, "job_id: ", job_id, ", job_result: ", job_result)
    workflow_results.append(job_result)

    token = job_result['token']        # {'_chocolate_id': 0}
    loss = job_result['loss']          # 450.9434895085956
    token_id = token['_chocolate_id']  # 0

    try:
        if STOP_IF_LOSS_IS_LOWER_THAN >= 0 and float(loss) <= STOP_IF_LOSS_IS_LOWER_THAN:
            EARLY_STOPPING = 1
    except:
        print("Error while checking the early stopping mechanism!")
        pass

    if VISDOM_ENABLED:
        try:
            # vis.text("{:.4f}\n".format(loss), win=win_text_loss, append=True, env='job_id_'+parent_job_id)
            vis.text("Job ID: {}, Loss: {:.4f}\n".format(job_id, loss), win=win_text_loss, append=True, env='job_id_'+parent_job_id)
            # vis.line(Y=np.array([loss]), X=np.array([token_id]), win=win_plot_loss, update='append', env='job_id_'+parent_job_id)
            vis.line(Y=np.array([loss]), X=np.array([int(job_id)]), win=win_plot_loss, update='append', env='job_id_'+parent_job_id)
        except:
            print("[visdom] Error while plotting with Visdom!")
            pass

    if TENSORBOARD_ENABLED:
        try:
            writer.add_text('Text/parent_job', 'text logged at job: ' + str(job_id), loss)
            writer.add_scalar('Loss', np.array([loss]), int(job_id))
            # writer.add_scalar('Loss', np.array([loss]), token_id)

            # Parallel Coordinates Plot
            params = job_id_params["job_id_"+str(job_id)]
            writer.add_hparams(params, {'PLoss': loss}, name="job_id_"+str(job_id))
        except:
            print("Error while plotting with Tensorboard!")
            pass

if TENSORBOARD_ENABLED:
    writer.close()

workflow_results = json.dumps(workflow_results)
print('workflow_results: ', workflow_results)

variables.put('workflow_results', workflow_results)
variables.put('EARLY_STOPPING', str(EARLY_STOPPING))
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="end"/>
      <metadata>
        <positionTop>
            819.46875
        </positionTop>
        <positionLeft>
            194.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Check_Visdom_Support">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("[visdom] Checking for Visdom support")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <if continuation="Continuation1" else="Nothing1" target="Start_Visdom">
          <script>
            <code language="groovy">
              <![CDATA[
if ("true".equalsIgnoreCase(variables.get("VISDOM_ENABLED"))) {
    println("[visdom] Visdom is enabled!")
    branch = "if"
} else {
    println("[visdom] Visdom is disabled!")
    branch = "else"
}
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            55.46875
        </positionTop>
        <positionLeft>
            399.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Start_Visdom">
      <description>
        <![CDATA[ Start the Visdom server as a service. ]]>
      </description>
      <variables>
        <variable inherited="false" name="VISDOM_INSTANCE_NAME" model="PA:NOT_EMPTY_STRING" value="visdom-server-${PA_JOB_ID}" description="Name of the Visdom service instance to use."/>
        <variable inherited="false" name="VISDOM_ENABLE_LOGIN" model="PA:Boolean" value="False" description="If True, a login in required for accessing the Visdom service."/>
        <variable inherited="false" name="VISDOM_USERNAME" value="" description="Username to access the Visdom service."/>
        <variable inherited="false" name="VISDOM_PASSWORD" model="PA:HIDDEN" value="" description="Password to access the Visdom service."/>
        <variable inherited="false" name="SERVICE_ID" value="Visdom" description="Visdom instance ID to be used."/>
        <variable inherited="false" name="INSTANCE_NAME" value="$VISDOM_INSTANCE_NAME" description="Instance name of the server to be used to broadcast the visualization."/>
        <variable inherited="false" name="ENGINE" value="$CONTAINER_PLATFORM" description="Container platform used for executing the workflow tasks."/>
        <variable inherited="false" name="PROXYFIED" value="$VISDOM_PROXYFIED" description="If True, requests to Visdom are sent via a proxy server."/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/visdom.png"/>
        <info name="task.documentation" value="PML/PMLUserGuide.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw">
            <arguments>
              <argument value="true"/>
              <argument value="false"/>
              <argument value="PROXYFIED"/>
              <argument value="VISDOM_ENABLE_LOGIN"/>
              <argument value="VISDOM_USERNAME"/>
              <argument value="VISDOM_PASSWORD"/>
              <argument value="NATIVE_SCHEDULER"/>
              <argument value="NATIVE_SCHEDULER_PARAMS"/>
              <argument value="NODE_ACCESS_TOKEN"/>
              <argument value="NODE_SOURCE_NAME"/>
              <argument value="ENGINE"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
variables.put("VISDOM_INSTANCE_NAME", variables.get("VISDOM_INSTANCE_NAME"))
variables.put("VISDOM_ENABLE_LOGIN", variables.get("VISDOM_ENABLE_LOGIN"))
variables.put("VISDOM_USERNAME", variables.get("VISDOM_USERNAME"))
variables.put("VISDOM_PASSWORD", variables.get("VISDOM_PASSWORD"))
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            183.46875
        </positionTop>
        <positionLeft>
            192.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Nothing1">
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("[visdom] Visdom disabled!")
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            183.46875
        </positionTop>
        <positionLeft>
            330.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Continuation1">
      <variables>
        <variable inherited="false" name="CONTAINER_GPU_ENABLED" model="PA:Boolean" value="False" description="If True, containers will run based on images containing libraries that are compatible with GPU."/>
      </variables>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
# Wait for Visdom sever to be up and fully running.
import time
time.sleep(10)

VISDOM_ENABLED = variables.get('VISDOM_ENABLED')

if VISDOM_ENABLED is not None and VISDOM_ENABLED == "true":
    import numpy as np
    from visdom import Visdom
    VISDOM_INSTANCE_NAME = variables.get("VISDOM_INSTANCE_NAME")
    VISDOM_ENDPOINT = variables.get("ENDPOINT_" + VISDOM_INSTANCE_NAME)
    #VISDOM_ENDPOINT = variables.get("VISDOM_ENDPOINT") if variables.get("VISDOM_ENDPOINT") else results[0].__str__()
    print("[visdom] [debug] VISDOM_ENDPOINT: ", VISDOM_ENDPOINT)

    if VISDOM_ENDPOINT is not None:
        VISDOM_ENDPOINT = VISDOM_ENDPOINT.replace("http://", "")
        print(VISDOM_ENDPOINT)

    (VISDOM_HOST, VISDOM_PORT) = VISDOM_ENDPOINT.split(":")

    variables.put('VISDOM_HOST', VISDOM_HOST)
    variables.put('VISDOM_PORT', VISDOM_PORT)
    print("[visdom] [debug] VISDOM_HOST: ", VISDOM_HOST)
    print("[visdom] [debug] VISDOM_PORT: ", VISDOM_PORT)
    try:
        print("[visdom] Connecting to %s:%s" % (VISDOM_HOST, VISDOM_PORT))
        vis = Visdom(server="http://"+VISDOM_HOST, port=int(VISDOM_PORT))
        if vis.check_connection(timeout_seconds=10):
            parent_job_id = variables.get("PA_JOB_ID")
            vis.text('A new experiment was created, please see job_id_'+parent_job_id+' environment in Visdom for more info.')
            win_text_loss = vis.text("Loss (objective to optimize):\n", env='job_id_'+parent_job_id)
            win_plot_loss = vis.line(
                Y = np.array([np.nan]),
                X = np.array([np.nan]),
                opts = dict(
                    xlabel = 'Job ID',
                    ylabel = 'Loss',
                    title = 'Model loss',
                    ),
                env='job_id_'+parent_job_id
            )
            variables.put('VISDOM_win_text_loss', win_text_loss)
            variables.put('VISDOM_win_plot_loss', win_plot_loss)
            print("[visdom] [debug] win_text_loss: ", win_text_loss)
            print("[visdom] [debug] win_plot_loss: ", win_plot_loss)
        else:
            raise Exception('[visdom] Visdom server seems to be down. TimeoutError.')
    except Exception as e:
        print("[visdom] Error while connecting to Visdom: ", e)
        print("[visdom] Deactivating Visdom")
        VISDOM_ENABLED = False
        variables.put("VISDOM_ENABLED", "False")
        pass
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            183.46875
        </positionTop>
        <positionLeft>
            468.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Check_Tensorboard_Support">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("Checking for Tensorboard support")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <if continuation="Continuation2" else="Nothing2" target="Start_Tensorboard">
          <script>
            <code language="groovy">
              <![CDATA[
if ("true".equalsIgnoreCase(variables.get("TENSORBOARD_ENABLED"))) {
    branch = "if"
} else {
    branch = "else"
}
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            55.46875
        </positionTop>
        <positionLeft>
            830.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Nothing2">
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("Tensorboard disabled")
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            183.46875
        </positionTop>
        <positionLeft>
            761.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Continuation2">
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// Wait for Tensorboard sever to be up and fully running.
sleep(10000)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            183.46875
        </positionTop>
        <positionLeft>
            899.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Start_Tensorboard" onTaskError="cancelJob">
      <description>
        <![CDATA[ Start the Tensorboard server as a service. ]]>
      </description>
      <variables>
        <variable inherited="false" name="TENSORBOARD_INSTANCE_NAME" model="PA:NOT_EMPTY_STRING" value="tensorboard-server-${PA_JOB_ID}" description="Name of the Tensorboard service instance to use."/>
        <variable inherited="false" name="TENSORBOARD_HOST_LOG_PATH" model="PA:NOT_EMPTY_STRING" value="/shared/$TENSORBOARD_INSTANCE_NAME" description="Specifies the path where Tensorboard logs are created and stored on the host."/>
        <variable inherited="false" name="TENSORBOARD_CONTAINER_LOG_PATH" model="PA:NOT_EMPTY_STRING" value="/tmp/$TENSORBOARD_INSTANCE_NAME" description="Specifies the path where Tensorboard logs are created and stored in the container."/>
        <variable inherited="false" name="SERVICE_ID" value="Tensorboard" description="Tensorboard instance ID to be used."/>
        <variable inherited="false" name="INSTANCE_NAME" value="$TENSORBOARD_INSTANCE_NAME" description="Instance name of the server to be used to broadcast the visualization."/>
        <variable inherited="false" name="PROXYFIED" value="$TENSORBOARD_PROXYFIED" description="If True, requests to Tensorboard are sent via a proxy server."/>
        <variable inherited="false" name="MOUNT_LOG_PATH" value="$TENSORBOARD_HOST_LOG_PATH" description="Path where Tensorboard logs are created and stored on the host."/>
        <variable inherited="false" name="ENGINE" value="$CONTAINER_PLATFORM" description="Container platform used for executing the workflow tasks."/>
        <variable inherited="false" name="CONTAINER_ROOTLESS_ENABLED" model="PA:Boolean" value="False" description="If True, the user will be able to run the workflow in a rootless mode."/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="task.documentation" value="PSA/PSAUserGuide.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw">
            <arguments>
              <argument value="true"/>
              <argument value="false"/>
              <argument value="PROXYFIED"/>
              <argument value="MOUNT_LOG_PATH"/>
              <argument value="NATIVE_SCHEDULER"/>
              <argument value="NATIVE_SCHEDULER_PARAMS"/>
              <argument value="NODE_ACCESS_TOKEN"/>
              <argument value="NODE_SOURCE_NAME"/>
              <argument value="ENGINE"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
variables.put("TENSORBOARD_INSTANCE_NAME", variables.get("TENSORBOARD_INSTANCE_NAME"))
variables.put("TENSORBOARD_HOST_LOG_PATH", variables.get("TENSORBOARD_HOST_LOG_PATH"))
variables.put("TENSORBOARD_CONTAINER_LOG_PATH", variables.get("TENSORBOARD_CONTAINER_LOG_PATH"))
variables.put("CONTAINER_ROOTLESS_ENABLED", variables.get("CONTAINER_ROOTLESS_ENABLED"))
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            183.46875
        </positionTop>
        <positionLeft>
            615.484375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Stop_If_Tensorboard_Enabled" onTaskError="cancelJob">
      <variables>
        <variable inherited="false" name="INSTANCE_ID" value="" description="Service instance ID."/>
        <variable inherited="false" name="INSTANCE_NAME" value="$TENSORBOARD_INSTANCE_NAME" description="Service instance name."/>
        <variable inherited="false" name="ACTION" model="PA:LIST(Finish_Tensorboard)" value="Finish_Tensorboard" description="Action that will be processed regarding the service status."/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="task.documentation" value="PSA/PSAUserGuide.html"/>
      </genericInformation>
      <depends>
        <task ref="Wait_Signal_If_Services_Enabled"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.CatalogRestApi
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.CloudAutomationWorkflow
import org.ow2.proactive.pca.service.client.model.ServiceDescription
import java.util.concurrent.TimeoutException

println("BEGIN " + variables.get("PA_TASK_NAME"))

// Check Tensorboard support
def TENSORBOARD_ENABLED = false
if ("true".equalsIgnoreCase(variables.get("TENSORBOARD_ENABLED"))) {
    TENSORBOARD_ENABLED = true
}

if (TENSORBOARD_ENABLED) {
    try {
    // Get schedulerapi access
    schedulerapi.connect()

    // Acquire session id
    def sessionId = schedulerapi.getSession()

    // Define PCA URL
    def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')

    // Connect to APIs
    def apiClient = new ApiClient()
    apiClient.setBasePath(pcaUrl)
    //apiClient.setDebugging(true)
    def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)
    def instanceName = variables.get("INSTANCE_NAME")
    def instanceId = (!variables.get("INSTANCE_ID") && instanceName)? variables.get("INSTANCE_ID_" + instanceName) : variables.get("INSTANCE_ID")
    if (!instanceId && !instanceName){
        throw new IllegalArgumentException("You have to specify an INSTANCE_NAME or an INSTANCE_ID. Empty value for both is not allowed.");
    }

    println("INSTANCE_ID: " + instanceId)

    def action = variables.get("ACTION")
    if (action.isEmpty()) {
        throw new IllegalArgumentException("You have to provide an ACTION value. Empty value is not allowed.");
    }

    def bucketName
    def isActionExists = false
    def catalogRestApi = new CatalogRestApi(apiClient)
    def actionVariables = new HashMap()

    List<CloudAutomationWorkflow> listExecutableActions = catalogRestApi.listExecutableActionsByInstanceIdUsingGET(sessionId, instanceId.toString()).get(instanceId.toString())
    for (CloudAutomationWorkflow actionIterator : listExecutableActions) {
        if (actionIterator.getName().equals(action)){
            bucketName = actionIterator.getBucket()
            //retrieve default action variables
            actionVariables = actionIterator.getVariables().collectEntries {var -> [var.getName(), var.getValue()]}
            isActionExists = true
            break
        }
    }
    if(!isActionExists){
        throw new IllegalArgumentException("The provided ACTION: " + action + " does not belong to the existing possible actions that can be applied to the current state of the service. You have to specify a valid action.")
    }

    // Retrieve and update workflow variables
    if (binding.variables["args"]){
        for (String var: args){
            actionVariables.put(var, variables.get(var))
        }
    }

    // Execute action on service
    ServiceDescription service = new ServiceDescription()
    service.setBucketName(bucketName)
    service.setWorkflowName(action)
    if( !actionVariables.isEmpty() ){
        actionVariables.each{ k, v -> service.putVariablesItem("${k}", "${v}") }
    }
    def serviceInstanceData = serviceInstanceRestApi.launchServiceInstanceActionUsingPUT(sessionId, instanceId as int, service, variables.get("PA_JOB_ID"))

    if (action.toLowerCase().contains("finish")) {
        try {
            schedulerapi.waitForJob(serviceInstanceData.getJobSubmissions().get(0).getJobId().toString(), 180000)
        } catch (TimeoutException toe) {
            println("[warning] Timeout reached. Disable to wait until the PCA service " + instanceId + " finishes." )
        }
    }}
    catch (Throwable ex) {
        println("[error] Unable to finalize the PCA service. It was already finished?" )
    }
    catch (Exception ex) {
        println("[error] Unable to finalize the PCA service. It was already finished?" )
    }
}

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
          <arguments>
            <argument value="TENSORBOARD_INSTANCE_NAME"/>
          </arguments>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            1075.46875
        </positionTop>
        <positionLeft>
            618.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Stop_If_Visdom_Enabled" onTaskError="cancelJob">
      <variables>
        <variable inherited="false" name="INSTANCE_ID" value="" description="Service instance ID."/>
        <variable inherited="false" name="INSTANCE_NAME" value="$VISDOM_INSTANCE_NAME" description="Service instance name."/>
        <variable inherited="false" name="ACTION" model="PA:LIST(Finish_Visdom)" value="Finish_Visdom" description="Action that will be processed regarding the service status."/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/visdom.png"/>
        <info name="task.documentation" value="PSA/PSAUserGuide.html"/>
      </genericInformation>
      <depends>
        <task ref="Wait_Signal_If_Services_Enabled"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.CatalogRestApi
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.CloudAutomationWorkflow
import org.ow2.proactive.pca.service.client.model.ServiceDescription
import java.util.concurrent.TimeoutException

println("BEGIN " + variables.get("PA_TASK_NAME"))

// Check Visdom support
def VISDOM_ENABLED = false
if ("true".equalsIgnoreCase(variables.get("VISDOM_ENABLED"))) {
    VISDOM_ENABLED = true
}

if (VISDOM_ENABLED) {
    try {
    // Get schedulerapi access
    schedulerapi.connect()

    // Acquire session id
    def sessionId = schedulerapi.getSession()

    // Define PCA URL
    def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')

    // Connect to APIs
    def apiClient = new ApiClient()
    apiClient.setBasePath(pcaUrl)
    //apiClient.setDebugging(true)
    def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)
    def instanceName = variables.get("INSTANCE_NAME")
    def instanceId = (!variables.get("INSTANCE_ID") && instanceName)? variables.get("INSTANCE_ID_" + instanceName) : variables.get("INSTANCE_ID")
    if (!instanceId && !instanceName){
        throw new IllegalArgumentException("You have to specify an INSTANCE_NAME or an INSTANCE_ID. Empty value for both is not allowed.");
    }

    println("INSTANCE_ID: " + instanceId)

    def action = variables.get("ACTION")
    if (action.isEmpty()) {
        throw new IllegalArgumentException("You have to provide an ACTION value. Empty value is not allowed.");
    }

    def bucketName
    def isActionExists = false
    def catalogRestApi = new CatalogRestApi(apiClient)
    def actionVariables = new HashMap()

    List<CloudAutomationWorkflow> listExecutableActions = catalogRestApi.listExecutableActionsByInstanceIdUsingGET(sessionId, instanceId.toString()).get(instanceId.toString())
    for (CloudAutomationWorkflow actionIterator : listExecutableActions) {
        if (actionIterator.getName().equals(action)){
            bucketName = actionIterator.getBucket()
            //retrieve default action variables
            actionVariables = actionIterator.getVariables().collectEntries {var -> [var.getName(), var.getValue()]}
            isActionExists = true
            break
        }
    }
    if(!isActionExists){
        throw new IllegalArgumentException("The provided ACTION: " + action + " does not belong to the existing possible actions that can be applied to the current state of the service. You have to specify a valid action.")
    }

    // Retrieve and update workflow variables
    if (binding.variables["args"]){
        for (String var: args){
            actionVariables.put(var, variables.get(var))
        }
    }

    // Execute action on service
    ServiceDescription service = new ServiceDescription()
    service.setBucketName(bucketName)
    service.setWorkflowName(action)
    if( !actionVariables.isEmpty() ){
        actionVariables.each{ k, v -> service.putVariablesItem("${k}", "${v}") }
    }
    def serviceInstanceData = serviceInstanceRestApi.launchServiceInstanceActionUsingPUT(sessionId, instanceId as int, service, variables.get("PA_JOB_ID"))

    if (action.toLowerCase().contains("finish")) {
        try {
            schedulerapi.waitForJob(serviceInstanceData.getJobSubmissions().get(0).getJobId().toString(), 180000)
        } catch (TimeoutException toe) {
            println("[warning] Timeout reached. Disable to wait until the PCA service " + instanceId + " finishes." )
        }
    }}
    catch (Throwable ex) {
        println("[error] Unable to finalize the PCA service. It was already finished?" )
    }
    catch (Exception ex) {
        println("[error] Unable to finalize the PCA service. It was already finished?" )
    }
}

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
          <arguments>
            <argument value="VISDOM_INSTANCE_NAME"/>
          </arguments>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            1075.46875
        </positionTop>
        <positionLeft>
            815.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Wait_Signal_If_Services_Enabled">
      <description>
        <![CDATA[ The simplest task, ran by a Groovy engine. ]]>
      </description>
      <depends>
        <task ref="Loop"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import com.google.common.base.Splitter;

println("BEGIN " + variables.get("PA_TASK_NAME"))

// Remove Stop_Optimization signal
Set prevSignalsSet = variables.get("SIGNALS_SET")
signalapi.removeManySignals(new HashSet<>(prevSignalsSet.collect { signal -> "ready_"+signal }))

// Check Tensorboard support
def TENSORBOARD_ENABLED = false
if ("true".equalsIgnoreCase(variables.get("TENSORBOARD_ENABLED"))) {
    TENSORBOARD_ENABLED = true
}

// Check Visdom support
def VISDOM_ENABLED = false
if ("true".equalsIgnoreCase(variables.get("VISDOM_ENABLED"))) {
    VISDOM_ENABLED = true
}

if (TENSORBOARD_ENABLED || VISDOM_ENABLED) {
    // Read the variable SIGNALS
    signals = "Terminate_Job_And_Services"

    // Split the value of the variable SIGNALS and transform it into a list
    Set signalsSet = new HashSet<>(Splitter.on(',').trimResults().omitEmptyStrings().splitToList(signals))

    // Send a ready notification for each signal in the set
    println("[signal] Ready for signals "+ signalsSet)
    signalsSet.each { signal ->
        signalapi.readyForSignal(signal)
    }

    // Wait until one signal among those specified is received
    println("[signal] Waiting for any signal among "+ signalsSet)
    receivedSignal = signalapi.waitForAny(signalsSet)

    // Remove ready signals
    signalapi.removeManySignals(new HashSet<>(signalsSet.collect { signal -> "ready_"+signal }))

    // Display the received signal and add it to the job result
    println("[signal] Received signal: "+ receivedSignal.getName())
}

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            947.46875
        </positionTop>
        <positionLeft>
            717.484375
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2476px;
            height:3328px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-50.7421875px;left:-46.9921875px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1" style="top: 819.75px; left: 387.75px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task defines some input, here strings to be processed."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">Split</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_4" style="top: 947.75px; left: 387.75px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task will be replicated according to the 'runs' value specified in the replication script.
The replication index is used in each task's instance to select the input."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_submit_job_no_wait.png" width="20px">&nbsp;<span class="name">Submit_Job_No_Wait</span></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_7" style="top: 1075.75px; left: 387.75px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="As a merge operation, we simply print the results from previous tasks."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">Merge</span></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_10" style="top: 437.75px; left: 494px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png" width="20px">&nbsp;<span class="name">Start</span></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_13" style="top: 819.75px; left: 656px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png" width="20px">&nbsp;<span class="name">Loop</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_16" style="top: 183.75px; left: 52px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task aims to parse PCA endpoint in order to retrieve a HOST and a PORT number to use them as an input in the data connector tasks."><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Parse_MongoDB_Endpoint</span></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_19" style="top: 55.7498px; left: 52px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Start the MongoDB server as a service."><img src="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png" width="20px">&nbsp;<span class="name">Start_MongoDB</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_22" style="top: 311.75px; left: 494px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="The simplest task, ran by a Groovy engine."><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Join_Task</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_25" style="top: 947.75px; left: 559px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png" width="20px">&nbsp;<span class="name">Stop_MongoDB</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_28" style="top: 563.75px; left: 442.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Check_Algorithm_Condition</span></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_31" style="top: 691.75px; left: 219.75px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">If_Bayes</span></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_34" style="top: 691.75px; left: 387.75px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Else</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_37" style="top: 691.75px; left: 604.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Finally</span></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_40" style="top: 819.75px; left: 219.75px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="The simplest task, ran by a Python engine."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">Split_Submit_Job_and_Wait</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_43" style="top: 55.7498px; left: 425px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Check_Visdom_Support</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_46" style="top: 183.75px; left: 218px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Start the Visdom server as a service."><img src="/automation-dashboard/styles/patterns/img/wf-icons/visdom.png" width="20px">&nbsp;<span class="name">Start_Visdom</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_49" style="top: 183.75px; left: 356px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Nothing1</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_52" style="top: 183.75px; left: 494px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/studio/images/Python.png" width="20px">&nbsp;<span class="name">Continuation1</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_55" style="top: 55.7498px; left: 856px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Check_Tensorboard_Support</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_58" style="top: 183.75px; left: 787px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Nothing2</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_61" style="top: 183.75px; left: 925px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Continuation2</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_64" style="top: 183.75px; left: 640.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Start the Tensorboard server as a service."><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Start_Tensorboard</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_67" style="top: 1075.75px; left: 643.75px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Stop_If_Tensorboard_Enabled</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_70" style="top: 1075.75px; left: 840.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/visdom.png" width="20px">&nbsp;<span class="name">Stop_If_Visdom_Enabled</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_73" style="top: 947.75px; left: 742px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="The simplest task, ran by a Groovy engine."><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Wait_Signal_If_Services_Enabled</span></a></div><svg style="position:absolute;left:422.98171321138256px;top:731.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path></svg><svg style="position:absolute;left:457.5px;top:849.5px" width="45.80000000000001" height="99" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 24.80000000000001 88 C 34.80000000000001 88 -10 -10 0 0 " transform="translate(10.5,10.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#e5db3d" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M24.864965600000012,76.942366 L25.922275531898748,55.7791409218625 L20.905167656289922,63.51403772560228 L12.493947257501022,59.738938865572585 L24.864965600000012,76.942366" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M24.864965600000012,76.942366 L25.922275531898748,55.7791409218625 L20.905167656289922,63.51403772560228 L12.493947257501022,59.738938865572585 L24.864965600000012,76.942366" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_84" style="position: absolute; transform: translate(-50%, -50%); left: 479.9px; top: 899.75px;">replicate</div><svg style="position:absolute;left:427.5px;top:859.5px" width="36.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 15.5 88 C 25.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M17.008112,66.303232 L19.23307240780623,45.23074872954288 L13.796275816661353,52.67663637484854 L5.606476782654781,48.44258491288153 L17.008112,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M17.008112,66.303232 L19.23307240780623,45.23074872954288 L13.796275816661353,52.67663637484854 L5.606476782654781,48.44258491288153 L17.008112,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:427.5px;top:987.5px" width="36.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 25.5 50 15.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.5081120000000008,66.303232 L9.893523217345216,48.44258491288153 L1.703724183338643,52.67663637484854 L-3.733072407806235,45.23074872954288 L-1.5081120000000008,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.5081120000000008,66.303232 L9.893523217345216,48.44258491288153 L1.703724183338643,52.67663637484854 L-3.733072407806235,45.23074872954288 L-1.5081120000000008,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:528.9783554952701px;top:351.5px" width="15.521644504729927" height="87" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 86 C -10 36 -10 50 0 0 " transform="translate(15.021644504729927,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.331249999999999,64.94400000000002 L-1.2792764656232984,43.975321988607305 L-7.004697339623629,51.20163196089339 L-15.021644504729927,46.64876932823094 L-4.331249999999999,64.94400000000002" class="" stroke="#666" fill="#666" transform="translate(15.021644504729927,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.331249999999999,64.94400000000002 L-1.2792764656232984,43.975321988607305 L-7.004697339623629,51.20163196089339 L-15.021644504729927,46.64876932823094 L-4.331249999999999,64.94400000000002" class="" stroke="#666" fill="#666" transform="translate(15.021644504729927,0.5)"></path></svg><svg style="position:absolute;left:644.5px;top:731.5px" width="72" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 51 88 C 61 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M48.576,64.44800000000001 L42.12796115021043,44.26328313323161 L40.14937832765171,53.26801577858403 L30.947976928794457,52.6899048055799 L48.576,64.44800000000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M48.576,64.44800000000001 L42.12796115021043,44.26328313323161 L40.14937832765171,53.26801577858403 L30.947976928794457,52.6899048055799 L48.576,64.44800000000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:583.5px;top:477.5px" width="183" height="343" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 0 C -10 50 172 292 162 342 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M27.324000000000005,76.82400000000001 L42.91501442494442,91.17392227160745 L33.914627297030975,89.17566514408605 L30.56334928085837,97.76454956863843 L27.324000000000005,76.82400000000001" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M27.324000000000005,76.82400000000001 L42.91501442494442,91.17392227160745 L33.914627297030975,89.17566514408605 L30.56334928085837,97.76454956863843 L27.324000000000005,76.82400000000001" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_102" style="position: absolute; transform: translate(-50%, -50%); left: 674.5px; top: 648.5px;">loop</div><svg style="position:absolute;left:94.5px;top:95.5px" width="46" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 25 88 C 35 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M25.59935375,65.8307285 L25.249839212925558,44.64399114880849 L20.757116933078812,52.69479524008836 L12.113905953013912,49.486227965729675 L25.59935375,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M25.59935375,65.8307285 L25.249839212925558,44.64399114880849 L20.757116933078812,52.69479524008836 L12.113905953013912,49.486227965729675 L25.59935375,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:119.5px;top:223.5px" width="435" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 414 88 C 424 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M337.46457599999997,57.860352000000006 L318.6436746246133,48.125174989900536 L323.6028839463296,55.89732031171502 L316.6806429363283,61.98686704357093 L337.46457599999997,57.860352000000006" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M337.46457599999997,57.860352000000006 L318.6436746246133,48.125174989900536 L323.6028839463296,55.89732031171502 L316.6806429363283,61.98686704357093 L337.46457599999997,57.860352000000006" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:528.9817132113825px;top:223.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path></svg><svg style="position:absolute;left:533.5px;top:223.5px" width="452" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 441 50 431 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M79.78745600000002,57.860352000000006 L100.54876733923338,62.09921404958597 L93.65956213773892,55.97231828650156 L98.66073362573495,48.22710791184707 L79.78745600000002,57.860352000000006" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M79.78745600000002,57.860352000000006 L100.54876733923338,62.09921404958597 L93.65956213773892,55.97231828650156 L98.66073362573495,48.22710791184707 L79.78745600000002,57.860352000000006" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:601.5px;top:859.5px" width="115" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 104 50 94 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M9.257624999999999,62.2538125 L29.704196391253102,56.69164400719164 L20.79425635246247,54.322473581672284 L21.772857472925384,45.15501265472916 L9.257624999999999,62.2538125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M9.257624999999999,62.2538125 L29.704196391253102,56.69164400719164 L20.79425635246247,54.322473581672284 L21.772857472925384,45.15501265472916 L9.257624999999999,62.2538125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:512px;top:477.5px" width="42.5" height="87" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 86 C -10 36 31.5 50 21.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-0.9948960000000009,64.474304 L11.816458178835555,47.59623526852386 L3.3105125398425246,51.15276289902182 L-1.5050829221426287,43.29082672868133 L-0.9948960000000009,64.474304" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-0.9948960000000009,64.474304 L11.816458178835555,47.59623526852386 L3.3105125398425246,51.15276289902182 L-1.5050829221426287,43.29082672868133 L-0.9948960000000009,64.474304" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:209.5px;top:603.5px" width="244" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 233 50 223 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M35.93430475,59.00425649999999 L57.06598877650767,60.57012054385578 L49.453962219309616,55.36848121644068 L53.43021349294836,47.05046307454617 L35.93430475,59.00425649999999" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M35.93430475,59.00425649999999 L57.06598877650767,60.57012054385578 L49.453962219309616,55.36848121644068 L53.43021349294836,47.05046307454617 L35.93430475,59.00425649999999" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_122" style="position: absolute; transform: translate(-50%, -50%); left: 331px; top: 647.5px;">if</div><svg style="position:absolute;left:377.5px;top:603.5px" width="76" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 65 50 55 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M2.839999999999998,64.44800000000001 L20.86340542224991,53.30543041371461 L11.647531623104692,53.56556522151359 L9.980970643763493,44.497898790609916 L2.839999999999998,64.44800000000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M2.839999999999998,64.44800000000001 L20.86340542224991,53.30543041371461 L11.647531623104692,53.56556522151359 L9.980970643763493,44.497898790609916 L2.839999999999998,64.44800000000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_126" style="position: absolute; transform: translate(-50%, -50%); left: 415px; top: 647.5px;">else</div><svg style="position:absolute;left:432.5px;top:603.5px" width="183" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 162 88 C 172 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M139.5,60.1875 L123.29819653295807,46.530942439057036 L126.4157068780754,55.20741230001354 L118.31810883297162,59.61523556098164 L139.5,60.1875" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M139.5,60.1875 L123.29819653295807,46.530942439057036 L126.4157068780754,55.20741230001354 L118.31810883297162,59.61523556098164 L139.5,60.1875" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_130" style="position: absolute; transform: translate(-50%, -50%); left: 523.5px; top: 647.5px;">continuation</div><svg style="position:absolute;left:259.5px;top:731.5px" width="51" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 30 88 C 40 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M30.149295000000002,65.8307285 L28.583909256055367,44.69900903676998 L24.560839508460937,52.99448429777766 L15.747665053833021,50.287464528309044 L30.149295000000002,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M30.149295000000002,65.8307285 L28.583909256055367,44.69900903676998 L24.560839508460937,52.99448429777766 L15.747665053833021,50.287464528309044 L30.149295000000002,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:207.5px;top:95.5px" width="228" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 88 C -10 38 217 50 207 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M31.932576000000005,59.394175999999995 L53.09355787196037,60.495468973992374 L45.3691052552342,55.462295842462694 L49.161677714423064,47.05893971875818 L31.932576000000005,59.394175999999995" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M31.932576000000005,59.394175999999995 L53.09355787196037,60.495468973992374 L45.3691052552342,55.462295842462694 L49.161677714423064,47.05893971875818 L31.932576000000005,59.394175999999995" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_139" style="position: absolute; transform: translate(-50%, -50%); left: 321px; top: 139.5px;">if</div><svg style="position:absolute;left:345.5px;top:95.5px" width="90" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 79 50 69 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.964021999999998,63.554236 L24.215374502276852,54.7006815254921 L15.036918129478272,53.83123422252708 L14.492372724803928,44.627785396013834 L4.964021999999998,63.554236" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.964021999999998,63.554236 L24.215374502276852,54.7006815254921 L15.036918129478272,53.83123422252708 L14.492372724803928,44.627785396013834 L4.964021999999998,63.554236" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_143" style="position: absolute; transform: translate(-50%, -50%); left: 390px; top: 139.5px;">else</div><svg style="position:absolute;left:414.5px;top:95.5px" width="90" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 69 88 C 79 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M64.035978,63.554236 L54.507627275196064,44.627785396013834 L53.96308187052173,53.83123422252709 L44.78462549772315,54.700681525492115 L64.035978,63.554236" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M64.035978,63.554236 L54.507627275196064,44.627785396013834 L53.96308187052173,53.83123422252709 L44.78462549772315,54.700681525492115 L64.035978,63.554236" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_147" style="position: absolute; transform: translate(-50%, -50%); left: 459px; top: 139.5px;">continuation</div><svg style="position:absolute;left:630.5px;top:95.5px" width="236" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 225 50 215 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M33.27376,59.394175999999995 L54.42290526584743,60.70324227948445 L46.74825703747608,55.59444843252249 L50.62317769836993,47.22874524200838 L33.27376,59.394175999999995" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M33.27376,59.394175999999995 L54.42290526584743,60.70324227948445 L46.74825703747608,55.59444843252249 L50.62317769836993,47.22874524200838 L33.27376,59.394175999999995" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_153" style="position: absolute; transform: translate(-50%, -50%); left: 748px; top: 139.5px;">if</div><svg style="position:absolute;left:776.5px;top:95.5px" width="90" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 79 50 69 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.964021999999998,63.554236 L24.215374502276852,54.7006815254921 L15.036918129478272,53.83123422252708 L14.492372724803928,44.627785396013834 L4.964021999999998,63.554236" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.964021999999998,63.554236 L24.215374502276852,54.7006815254921 L15.036918129478272,53.83123422252708 L14.492372724803928,44.627785396013834 L4.964021999999998,63.554236" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_157" style="position: absolute; transform: translate(-50%, -50%); left: 821px; top: 139.5px;">else</div><svg style="position:absolute;left:845.5px;top:95.5px" width="90" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 69 88 C 79 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M64.035978,63.554236 L54.507627275196064,44.627785396013834 L53.96308187052173,53.83123422252709 L44.78462549772315,54.700681525492115 L64.035978,63.554236" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M64.035978,63.554236 L54.507627275196064,44.627785396013834 L53.96308187052173,53.83123422252709 L44.78462549772315,54.700681525492115 L64.035978,63.554236" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_161" style="position: absolute; transform: translate(-50%, -50%); left: 890px; top: 139.5px;">continuation</div><svg style="position:absolute;left:718.5px;top:987.5px" width="126.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 115.5 50 105.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M11.306593,61.830692 L32.035965017323186,57.438296780143475 L23.274899087537978,54.567108215462135 L24.77238123278532,45.46999069260549 L11.306593,61.830692" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M11.306593,61.830692 L32.035965017323186,57.438296780143475 L23.274899087537978,54.567108215462135 L24.77238123278532,45.46999069260549 L11.306593,61.830692" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:824px;top:987.5px" width="101" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 80 88 C 90 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M73.3821925,63.115491500000005 L62.41759593693373,44.98326543122414 L62.58699162606104,54.20125355773553 L53.50335799466925,55.77846630516309 L73.3821925,63.115491500000005" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M73.3821925,63.115491500000005 L62.41759593693373,44.98326543122414 L62.58699162606104,54.20125355773553 L53.50335799466925,55.77846630516309 L73.3821925,63.115491500000005" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:695.5px;top:859.5px" width="149.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 128.5 88 C 138.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M112.69340799999999,60.999424000000005 L97.79695500820283,45.92972963471253 L100.114706695988,54.85318340070297 L91.65071440890578,58.508430938724516 L112.69340799999999,60.999424000000005" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M112.69340799999999,60.999424000000005 L97.79695500820283,45.92972963471253 L100.114706695988,54.85318340070297 L91.65071440890578,58.508430938724516 L112.69340799999999,60.999424000000005" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 428px; top: 850px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 428px; top: 810px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint replicate-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 458px; top: 850px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 443.5px; top: 978px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint replicate-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 482.8px; top: 938px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 443.5px; top: 938px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 428px; top: 1106px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 428px; top: 1066px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 534px; top: 468px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 534px; top: 428px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 584px; top: 468px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 696px; top: 850px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 696px; top: 810px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 746px; top: 810px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 120px; top: 214px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 120px; top: 174px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 95px; top: 86px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 534px; top: 342px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 534px; top: 302px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 602px; top: 978px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 602px; top: 938px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 512.5px; top: 594px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 512.5px; top: 554px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 433px; top: 594px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 260px; top: 722px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 210px; top: 682px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 428px; top: 722px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 378px; top: 682px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 645px; top: 722px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 595px; top: 682px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 290px; top: 850px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 290px; top: 810px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 486.5px; top: 86px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 415px; top: 86px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 258px; top: 214px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 208px; top: 174px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 396px; top: 214px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 346px; top: 174px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 534px; top: 214px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 484px; top: 174px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 928.5px; top: 86px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 846px; top: 86px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 827px; top: 214px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 777px; top: 174px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 965px; top: 214px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 915px; top: 174px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 689.5px; top: 214px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 631px; top: 174px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 719px; top: 1106px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 719px; top: 1066px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 904.5px; top: 1106px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 904.5px; top: 1066px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 824.5px; top: 978px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 824.5px; top: 938px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
