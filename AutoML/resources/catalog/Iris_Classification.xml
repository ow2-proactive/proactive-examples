<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.12" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Iris_Classification" onTaskError="continueJobExecution" priority="normal" projectName="3.  Hyperparameter Optimization" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd">
  <variables>
    <variable name="NATIVE_SCHEDULER" value=""/>
    <variable name="NATIVE_SCHEDULER_PARAMS" value=""/>
    <variable name="NODE_ACCESS_TOKEN" value=""/>
    <variable name="NODE_SOURCE_NAME" value=""/>
    <variable model="PA:LIST(no-container,docker,podman,singularity)" name="CONTAINER_PLATFORM" value="docker"/>
    <variable model="PA:LIST(,docker://activeeon/dlm3,docker://activeeon/cuda)" name="CONTAINER_IMAGE" value="docker://activeeon/dlm3"/>
    <variable model="PA:Boolean" name="CONTAINER_GPU_ENABLED" value="False"/>
    <variable model="PA:Boolean" name="CONTAINER_ROOTLESS_ENABLED" value="False"/>
    <variable model="PA:JSON" name="INPUT_VARIABLES" value="{&quot;algo&quot; : &quot;SVC&quot;, &quot;kernel&quot; : &quot;rbf&quot;, &quot;C&quot; : 0.2, &quot;gamma&quot; : 0.1}"/>
    <variable model="PA:JSON" name="SEARCH_SPACE" value="[{&quot;algo&quot; : &quot;SVC&quot;,                &quot;C&quot;: {&quot;log&quot;: [-2, 10, 10]},    &quot;degree&quot;: {&quot;quantized_uniform&quot;: [1, 5, 1]},        &quot;coef0&quot;: {&quot;uniform&quot;: [-1, 1]}},   {&quot;algo&quot; : &quot;LinearSVC&quot;,               &quot;C&quot;: {&quot;log&quot;: [2, 10, 10]}} ]"/>
  </variables>
  <description>
    <![CDATA[ Python script illustrating an example of multiple SVM models optimization. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="auto-ml-optimization"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/scikit_learn.png"/>
<info name="NS" value="$NATIVE_SCHEDULER"/>
<info name="NODE_ACCESS_TOKEN" value="$NODE_ACCESS_TOKEN"/>
<info name="Documentation" value="MLOS/MLOSUserGuide.html#_objective_ml_examples"/>
<info name="NS_BATCH" value="$NATIVE_SCHEDULER_PARAMS"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Iris_Classification">
      <description>
        <![CDATA[ The simplest task, ran by a Python engine. ]]>
      </description>
      <variables>
        <variable inherited="true" name="TOKEN" value="{&quot;_token_id&quot;: 0}"/>
      </variables>
      <genericInformation>
        <info name="task.documentation" value="MLOS/MLOSUserGuide.html#_objective_ml_examples"/>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/scikit_learn.png"/>
      </genericInformation>
      <selection>
        <script type="static">
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_node_source_name/raw"/>
        </script>
      </selection>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_cuda_universal/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/get_automl_variables/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
from sklearn.metrics import f1_score
from sklearn.model_selection import train_test_split
from sklearn.datasets import make_classification, load_iris
from sklearn.svm import SVC, LinearSVC

import json

# Get token and input variables
token = variables.get('TOKEN')
input_variables = variables.get('INPUT_VARIABLES')
#input_variables = '{"algo" : "SVC", "kernel" : "rbf", "C" : 0.2, "gamma" : 0.1}'

# Convert from JSON to dict
#token = {'_id': 0}
token = json.loads(token)
input_variables = json.loads(input_variables)
print("token: ", token, ", input_variables: ", input_variables)

#X, y = make_classification(n_samples=1000, random_state=1)
X, y = load_iris(return_X_y=True)

def score_svm(X, y, algo, **input_variables):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)
    
    if algo == "SVC":
        algo = SVC
    if algo == "LinearSVC":
        algo = LinearSVC
    
    clf = algo(**input_variables)
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    
    # Calculate metrics globally by counting the total true positives, false negatives and false positives.
    return 1-f1_score(y_test, y_pred, average='micro')


# Calculate the loss for the sampled point (minimized)
loss = score_svm(X, y, **input_variables)
print('loss: ', loss)

# return the loss value
result = {
    'token': token,
    'loss': loss
}
result = json.dumps(result)
resultMap.put("RESULT_JSON", result)
print('result: ', result)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            203.3806915283203
        </positionTop>
        <positionLeft>
            231.15054321289062
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1943px;
            height:2763px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-198.3806915283203px;left:-226.15054321289062px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_2405" style="top: 203.387px; left: 231.153px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="The simplest task, ran by a Python engine."><img src="/automation-dashboard/styles/patterns/img/wf-icons/scikit_learn.png" width="20px">&nbsp;<span class="name">Iris_Classification</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 277.5px; top: 234px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
