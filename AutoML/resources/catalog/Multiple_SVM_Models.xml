<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.11" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="1" name="Multiple_SVM_Models" onTaskError="cancelJob" priority="normal" projectName="2. Objective ML Examples" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd">
  <variables>
    <variable name="INPUT_VARIABLES" value="{&quot;algo&quot; : &quot;SVC&quot;, &quot;kernel&quot; : &quot;rbf&quot;, &quot;C&quot; : 0.2, &quot;gamma&quot; : 0.1}"/>
    <variable name="SEARCH_SPACE" value="[{&quot;algo&quot; : &quot;SVC&quot;, &quot;kernel&quot; : &quot;rbf&quot;,               &quot;C&quot; : log(low=-2, high=10, base=10),               &quot;gamma&quot; : log(low=-9, high=3, base=10)},          {&quot;algo&quot; : &quot;SVC&quot;, &quot;kernel&quot; : &quot;poly&quot;,               &quot;C&quot; : log(low=-2, high=10, base=10),               &quot;gamma&quot; : log(low=-9, high=3, base=10),               &quot;degree&quot; : quantized_uniform(low=1, high=5, step=1),               &quot;coef0&quot; : uniform(low=-1, high=1)},          {&quot;algo&quot; : &quot;LinearSVC&quot;,               &quot;C&quot; : log(low=-2, high=10, base=10)}]"/>
  </variables>
  <description>
    <![CDATA[ Python script illustrating an example of multiple SVM models optimization. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="auto-ml-optimization"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/multiple_svm.png"/>
<info name="Documentation" value="MLOS/MLOSUserGuide.html"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task name="Multiple_SVM_Models">
      <description>
        <![CDATA[ The simplest task, ran by a Python engine. ]]>
      </description>
      <variables>
        <variable inherited="true" name="INPUT_VARIABLES" value="{&quot;algo&quot; : &quot;SVC&quot;, &quot;kernel&quot; : &quot;rbf&quot;, &quot;C&quot; : 0.2, &quot;gamma&quot; : 0.1}"/>
        <variable inherited="true" name="TOKEN" value="{&quot;_token_id&quot;: 0}"/>
        <variable inherited="true" model="PA:Boolean" name="DOCKER_ENABLED" value="True"/>
        <variable inherited="true" name="DOCKER_IMAGE" value="activeeon/dlm3"/>
      </variables>
      <genericInformation>
        <info name="PYTHON_COMMAND" value="/usr/local/bin/python3"/>
        <info name="task.documentation" value="MLOS/MLOSUserGuide.html"/>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/multiple_svm.png"/>
      </genericInformation>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_vars/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
params_encoded = variables.get('params_encoded')
token_encoded = variables.get('token_encoded')

// If encoded variables are found
if ((params_encoded != null && params_encoded.length() > 0) &&
    (token_encoded != null && token_encoded.length() > 0))
{
    println "Found encoded variables:"
    println "params_encoded: " + params_encoded
    println "token_encoded: " + token_encoded
    
    byte[] params_decoded = params_encoded.decodeBase64()
    byte[] token_decoded = token_encoded.decodeBase64()
    
    input_variables = new String(params_decoded)
    token = new String(token_decoded)
    
    variables.put('INPUT_VARIABLES', input_variables)
    variables.put('TOKEN', token)
}
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
from sklearn.metrics import f1_score
from sklearn.model_selection import train_test_split
from sklearn.datasets import make_classification, load_iris
from sklearn.svm import SVC, LinearSVC

import json

# Get token and input variables
token = variables.get('TOKEN')
input_variables = variables.get('INPUT_VARIABLES')
#input_variables = '{"algo" : "SVC", "kernel" : "rbf", "C" : 0.2, "gamma" : 0.1}'

# Convert from JSON to dict
#token = {'_id': 0}
token = json.loads(token)
input_variables = json.loads(input_variables)
print("token: ", token, ", input_variables: ", input_variables)

#X, y = make_classification(n_samples=1000, random_state=1)
X, y = load_iris(return_X_y=True)

def score_svm(X, y, algo, **input_variables):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)
    
    if algo == "SVC":
        algo = SVC
    if algo == "LinearSVC":
        algo = LinearSVC
    
    clf = algo(**input_variables)
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    
    # Calculate metrics globally by counting the total true positives, false negatives and false positives.
    return 1-f1_score(y_test, y_pred, average='micro')


# Calculate the loss for the sampled point (minimized)
loss = score_svm(X, y, **input_variables)
print('loss: ', loss)

# return the loss value
result = {
    'token': token,
    'loss': loss
}
result = json.dumps(result)
resultMap.put("RESULT_JSON", result)
print('result: ', result)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            219.42709350585938
        </positionTop>
        <positionLeft>
            245.48614501953125
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2351px;
            height:3002px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-214.42709350585938px;left:-240.48614501953125px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_1135" style="top: 219.444px; left: 245.486px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/multiple_svm.png" width="20px">&nbsp;<span class="name">Multiple_SVM_Models</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 303px; top: 249px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>
