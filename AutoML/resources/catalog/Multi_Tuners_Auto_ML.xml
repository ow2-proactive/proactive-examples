<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.12" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Multi_Tuners_Auto_ML" onTaskError="continueJobExecution" priority="normal" projectName="1. Tuning Algorithms" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd">
  <variables>
    <variable name="NATIVE_SCHEDULER" value=""/>
    <variable name="NATIVE_SCHEDULER_PARAMS" value=""/>
    <variable name="NODE_ACCESS_TOKEN" value=""/>
    <variable name="NODE_SOURCE_NAME" value=""/>
    <variable model="PA:LIST(no-container,docker,podman,singularity)" name="CONTAINER_PLATFORM" value="docker"/>
    <variable model="PA:Boolean" name="PROPAGATE_CONTAINER_PLATFORM" value="True"/>
    <variable model="PA:Boolean" name="CONTAINER_GPU_ENABLED" value="False"/>
    <variable model="PA:LIST(,docker://activeeon/dlm3,docker://activeeon/cuda,docker://activeeon/cuda2,docker://activeeon/rapidsai,docker://activeeon/tensorflow:latest,docker://activeeon/tensorflow:latest-gpu)" name="CONTAINER_IMAGE" value=""/>
    <variable model="PA:LIST(Bayes,Grid,Random,QuasiRandom,CMAES,MOCMAES)" name="TUNING_ALGORITHM" value="Random"/>
    <variable model="PA:CATALOG_OBJECT" name="WORKFLOW_TO_OPTIMIZE" value="auto-ml-optimization/Himmelblau_Function"/>
    <variable model="PA:Integer" name="MAX_ITERATIONS" value="2"/>
    <variable model="PA:Integer" name="PARALLEL_EXECUTIONS_PER_ITERATION" value="2"/>
    <variable model="PA:Integer" name="PAUSE_AFTER_EVERY_ITERATIONS" value="-1"/>
    <variable model="PA:Boolean" name="VISDOM_ENABLED" value="False"/>
    <variable model="PA:Boolean" name="VISDOM_PROXYFIED" value="False"/>
    <variable model="PA:Boolean" name="VISDOM_ENABLE_LOGIN" value="False"/>
    <variable name="VISDOM_USERNAME" value=""/>
    <variable model="PA:HIDDEN" name="VISDOM_PASSWORD" value=""/>
    <variable model="PA:NOT_EMPTY_STRING" name="VISDOM_INSTANCE_NAME" value="visdom-server-${PA_JOB_ID}"/>
    <variable model="PA:Boolean" name="TENSORBOARD_ENABLED" value="False"/>
    <variable model="PA:NOT_EMPTY_STRING" name="TENSORBOARD_INSTANCE_NAME" value="tensorboard-server-${PA_JOB_ID}"/>
    <variable model="PA:NOT_EMPTY_STRING" name="TENSORBOARD_HOST_LOG_PATH" value="/shared/$TENSORBOARD_INSTANCE_NAME"/>
    <variable model="PA:NOT_EMPTY_STRING" name="TENSORBOARD_CONTAINER_LOG_PATH" value="/tmp/$TENSORBOARD_INSTANCE_NAME"/>
    <variable model="PA:Boolean" name="TENSORBOARD_PROXYFIED" value="False"/>
  </variables>
  <description>
    <![CDATA[ This workflow proposes six algorithms for hyperparameter optimization. The choice of the sampling/search strategy depends strongly on the problem tackled. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="auto-ml-optimization"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tunning_algorithm.png"/>
<info name="NODESOURCENAME" value="$NODE_SOURCE_NAME"/>
<info name="NS" value="$NATIVE_SCHEDULER"/>
<info name="Documentation" value="PML/PMLUserGuide.html#_AutoML"/>
<info name="NODE_ACCESS_TOKEN" value="$NODE_ACCESS_TOKEN"/>
<info name="NS_BATCH" value="$NATIVE_SCHEDULER_PARAMS"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Split">
      <description>
        <![CDATA[ This task defines some input, here strings to be processed. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="Else"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_cuda_universal/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import ssl
import json
import numpy as np
import urllib.request
from lxml import etree

import chocolate as choco
from chocolate import uniform, quantized_uniform, log, quantized_log, choice
from chocolate import MongoDBConnection, Bayes, Grid, Random, QuasiRandom, CMAES, MOCMAES


def raiser(msg): raise Exception(msg)


PA_JOB_ID = variables.get("PA_JOB_ID")
print('PA_JOB_ID: ', PA_JOB_ID)

PA_TASK_ITERATION = int(variables.get('PA_TASK_ITERATION'))
print("PA_TASK_ITERATION: ", PA_TASK_ITERATION)

PA_CATALOG_REST_URL = variables.get("PA_CATALOG_REST_URL")
print('PA_CATALOG_REST_URL: ', PA_CATALOG_REST_URL)

# Workflow to optimize
WORKFLOW_TO_OPTIMIZE = variables.get("WORKFLOW_TO_OPTIMIZE")
bucket_name, workflow_name = WORKFLOW_TO_OPTIMIZE.split('/')
print("bucket_name: ", bucket_name, ", workflow_name: ", workflow_name)

# workflow_url = PA_CATALOG_REST_URL + '/buckets/auto-ml-optimization/resources/Himmelblau_Function/raw'
workflow_url = PA_CATALOG_REST_URL + '/buckets/'+bucket_name+'/resources/'+workflow_name+'/raw'
print("workflow_url: ", workflow_url)

if workflow_url.startswith('https'):
    workflow_xml = urllib.request.urlopen(workflow_url, context=ssl._create_unverified_context()).read()
else:
    workflow_xml = urllib.request.urlopen(workflow_url).read()
# print("workflow_xml: " + str(workflow_xml))

# Define the search space
# space = "space=" + variables.get('SEARCH_SPACE')
# print('SEARCH_SPACE: ', space)
# exec(space)
workflow_root = etree.fromstring(workflow_xml)

search_space_xpath = "string(//*[@name='SEARCH_SPACE']/@value)"
search_space = str(workflow_root.xpath(search_space_xpath))

if len(str(search_space)) <= 0:
    raiser("The objective workflow do not contains a SEARCH_SPACE variable!")

search_space_model_xpath = "string(//*[@name='SEARCH_SPACE']/@model)"
search_space_model = str(workflow_root.xpath(search_space_model_xpath))

if len(str(search_space_model)) <= 0:
    raiser("The SEARCH_SPACE variable of the objective workflow do not contains a model type!")

# search key dict
def key_search(i):
    try:
        keys = list(i.keys())
    except:
         keys = []
    return keys

# get key and value dict
def key_value_get(key, value):
    aux = key.strip() + "(" + str(value) + ")"
    if key.strip() == 'uniform' or key.strip() == "quantized_uniform" or key.strip() == "log" or key.strip() == "quantized_log":
        aux = aux.replace('[', '')
        aux = aux.replace(']', '')
    return aux

# convert json to chocolate format
def json_to_choco_convert(search_space):
    cont_model = 0
    for data in search_space:
        key_list = key_search(data) 
        if not key_list:
            key, value = list(search_space[data].items())[0]
            aux = key_value_get(key, value)
            search_space[data] = eval(aux)
        else:
            for i in key_list:
                try:
                    key, value = list(data[i].items())[0]
                    aux = key_value_get(key, value)
                    search_space[cont_model][i] = eval(aux)
                except:
                    pass
            cont_model += 1
    return search_space

if search_space_model.upper() == 'PA:JSON':
    # Define the search space from a JSON string
    space = "space=" + str(search_space)
    exec(space)
    space = json_to_choco_convert(space)
    print("\nspace: ", space)

if search_space_model.upper() == 'PA:CATALOG_OBJECT':
    # Define the search space from a JSON file stored in the catalog
    search_space_bucket_name, search_space_script_name = search_space.split('/')
    print("search_space_bucket_name: ", search_space_bucket_name, ", search_space_script_name: ", search_space_script_name)
    search_space_script_url = PA_CATALOG_REST_URL + '/buckets/'+search_space_bucket_name+'/resources/'+search_space_script_name+'/raw'
    print("search_space_script_url: ", search_space_script_url)
    if search_space_script_url.startswith('https'):
        search_space_script_json = json.loads(urllib.request.urlopen(search_space_script_url, context=ssl._create_unverified_context()).read())
    else:
        search_space_script_json = json.loads(urllib.request.urlopen(search_space_script_url).read())
    print("\nsearch_space_script_json: ", search_space_script_json)
    space = json_to_choco_convert(search_space_script_json)
    print("\nspace: ", space)


# Establish a connection to a MongoDB local database
MONGODB_URL = variables.get('MONGODB_URL')
print('MONGODB_URL: ', MONGODB_URL)
conn = MongoDBConnection(MONGODB_URL)
if PA_TASK_ITERATION == 0:
    print('Cleaning database for the first iteration')
    conn.clear() # Clear all data from the database.

TUNING_ALGORITHM = variables.get('TUNING_ALGORITHM')
assert TUNING_ALGORITHM is not None, "TUNING_ALGORITHM must be set!"
TUNING_ALGORITHM = TUNING_ALGORITHM.lower()
print('TUNING_ALGORITHM: ', TUNING_ALGORITHM)

# Construct the optimizer
sampler = None
if TUNING_ALGORITHM == "grid":
    sampler = Grid(conn, space)
if TUNING_ALGORITHM == "random":
    sampler = Random(conn, space)
if TUNING_ALGORITHM == "quasirandom":
    sampler = QuasiRandom(conn, space)
if TUNING_ALGORITHM == "bayes":
    sampler = Bayes(conn, space)
if TUNING_ALGORITHM == "cmaes":
    sampler = CMAES(conn, space)
if TUNING_ALGORITHM == "mocmaes":
    sampler = MOCMAES(conn, space, 10)
assert sampler is not None, "TUNING_ALGORITHM must be selected!"

# Check for previous results
workflow_results = None
if PA_TASK_ITERATION > 0:
    workflow_results = variables.get('workflow_results')

# Add previous loss values to the database
if workflow_results is not None:
    previous_results = json.loads(workflow_results)
    print("Adding previous loss values to the database")
    for i, previous_result in enumerate(previous_results):
        # print(i, previous_result)
        previous_token = previous_result['token']
        previous_loss = previous_result['loss']
        print(i, 'previous_token: ', previous_token, ', previous_loss: ', previous_loss)
        # Add the loss to the database
        # sampler.update(token, loss)
        sampler.update(previous_token, previous_loss)

# Sample the next point
samples_per_iteration = int(variables.get('PARALLEL_EXECUTIONS_PER_ITERATION'))
result = []
try:
    for i in range(samples_per_iteration):
        token, params = sampler.next()
        token_params = {
          'token': token,
          'params': params
        }
        token_params_json = json.dumps(token_params)
        print("sample: ", i, ", token_params: ", token_params_json)
        result.append(token_params_json)
except StopIteration:
    print("Stopping iteration...")
    pass

print('result: ', result)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
runs = result.size()
println "runs: " + runs
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
      <metadata>
        <positionTop>
            797.8125
        </positionTop>
        <positionLeft>
            481.62109375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Submit_Job_No_Wait">
      <description>
        <![CDATA[ This task will be replicated according to the 'runs' value specified in the replication script.
The replication index is used in each task's instance to select the input. ]]>
      </description>
      <variables>
        <variable inherited="true" model="PA:CATALOG_OBJECT" name="WORKFLOW_TO_OPTIMIZE" value="auto-ml-optimization/Himmelblau_Function"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_submit_job_no_wait.png"/>
      </genericInformation>
      <depends>
        <task ref="Split"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

def jsonSlurper = new JsonSlurper()

int replication = variables.get('PA_TASK_REPLICATION')
token_params_json = results[0].value()[replication]
println "token_params_json: " + token_params_json

def object = jsonSlurper.parseText(token_params_json)
token = object.token
params = object.params
println "token:  " + token
println "params: " + params

//String token_encoded = JsonOutput.toJson([token: token]).bytes.encodeBase64().toString()
//String params_encoded = JsonOutput.toJson([params: params]).bytes.encodeBase64().toString()
String token_encoded = JsonOutput.toJson(token).bytes.encodeBase64().toString()
String params_encoded = JsonOutput.toJson(params).bytes.encodeBase64().toString()
println "token_encoded:  " + token_encoded
println "params_encoded: " + params_encoded

// Check Visdom support
def VISDOM_ENABLED = false
if ("true".equalsIgnoreCase(variables.get("VISDOM_ENABLED"))) {
    VISDOM_ENABLED = true
}

// Check Tensorboard support
def TENSORBOARD_ENABLED = false
if ("true".equalsIgnoreCase(variables.get("TENSORBOARD_ENABLED"))) {
    TENSORBOARD_ENABLED = true
}

// Check if container platform should be propagated
def PROPAGATE_CONTAINER_PLATFORM = false
if ("true".equalsIgnoreCase(variables.get("PROPAGATE_CONTAINER_PLATFORM"))) {
    PROPAGATE_CONTAINER_PLATFORM = true
}

// Submit a workflow referenced in the ProActive Catalog (or accessible by url)
// Please add the bucket and workflow names that you want to execute as Task Variables 'call_workflow'
// connect to the scheduler
schedulerapi.connect()

// get the workflow information from Task Variables
def calledWorkflow = variables.get("WORKFLOW_TO_OPTIMIZE")

// variables submitted to the workflow: Empty in the example, modify this map to give parameters to the submitted workflow
//workflow_variables = Collections.EMPTY_MAP
workflow_variables = [:]
workflow_variables.put("token_encoded", token_encoded)
workflow_variables.put("params_encoded", params_encoded)

def NS = variables.get("NS")
if (NS?.trim()) { workflow_variables.put("NS", NS) }

def NS_BATCH = variables.get("NS_BATCH")
if (NS_BATCH?.trim()) { workflow_variables.put("NS_BATCH", NS_BATCH) }

def NODE_ACCESS_TOKEN = variables.get("NODE_ACCESS_TOKEN")
if (NODE_ACCESS_TOKEN?.trim()) { workflow_variables.put("NODE_ACCESS_TOKEN", NODE_ACCESS_TOKEN) }

def NODE_SOURCE_NAME = variables.get("NODE_SOURCE_NAME")
if (NODE_SOURCE_NAME?.trim()) { workflow_variables.put("NODE_SOURCE_NAME", NODE_SOURCE_NAME) }

def NATIVE_SCHEDULER = variables.get("NATIVE_SCHEDULER")
if (NATIVE_SCHEDULER?.trim()) { workflow_variables.put("NATIVE_SCHEDULER", NATIVE_SCHEDULER) }

def NATIVE_SCHEDULER_PARAMS = variables.get("NATIVE_SCHEDULER_PARAMS")
if (NATIVE_SCHEDULER_PARAMS?.trim()) { workflow_variables.put("NATIVE_SCHEDULER_PARAMS", NATIVE_SCHEDULER_PARAMS) }

// Add generated params from search space as a workflow variable
params.each {
    workflow_variables.put(it.key, it.value)
}

workflow_variables.put("TENSORBOARD_ENABLED", variables.get("TENSORBOARD_ENABLED"))
if (TENSORBOARD_ENABLED) {
    println "Adding Tensorboard support to the workflow variables"
    def HOST_LOG_PATH = variables.get("HOST_LOG_PATH")
	if (HOST_LOG_PATH?.trim()) { workflow_variables.put("HOST_LOG_PATH", HOST_LOG_PATH) }
    
    def CONTAINER_LOG_PATH = variables.get("CONTAINER_LOG_PATH")
	if (CONTAINER_LOG_PATH?.trim()) { workflow_variables.put("CONTAINER_LOG_PATH", CONTAINER_LOG_PATH) }
    
    def INSTANCE_NAME = variables.get("INSTANCE_NAME")
	if (INSTANCE_NAME?.trim()) { workflow_variables.put("INSTANCE_NAME", INSTANCE_NAME) }
    
    def CONTAINER_ROOTLESS_ENABLED = variables.get("CONTAINER_ROOTLESS_ENABLED")
	if (CONTAINER_ROOTLESS_ENABLED?.trim()) { workflow_variables.put("CONTAINER_ROOTLESS_ENABLED", CONTAINER_ROOTLESS_ENABLED) }
}

workflow_variables.put("VISDOM_ENABLED", VISDOM_ENABLED)
if (VISDOM_ENABLED) {
    println "Adding Visdom support to the workflow variables"
    def VISDOM_INSTANCE_NAME = variables.get("VISDOM_INSTANCE_NAME")
    def VISDOM_ENDPOINT = variables.get("ENDPOINT_" + VISDOM_INSTANCE_NAME)
    if (VISDOM_ENDPOINT?.trim()) { workflow_variables.put("VISDOM_ENDPOINT", VISDOM_ENDPOINT) }
}

if (PROPAGATE_CONTAINER_PLATFORM) {
    println "Propagating container platform to the workflow variables"
    def CONTAINER_PLATFORM = variables.get("CONTAINER_PLATFORM")
    if (CONTAINER_PLATFORM?.trim()) { workflow_variables.put("CONTAINER_PLATFORM", CONTAINER_PLATFORM) }
}

println "Submitting workflow " + calledWorkflow

// submitting the job
def PA_CATALOG_REST_URL = variables.get("PA_CATALOG_REST_URL")
def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]
println "------------------------------"
println "PA_CATALOG_REST_URL:  " + PA_CATALOG_REST_URL
println "bucket_workflow_name: " + calledWorkflow
println "workflow_variables:   " + workflow_variables
println "generic_infos_map:    " + generic_infos_map
println "------------------------------"
jobid = schedulerapi.submitFromCatalog(PA_CATALOG_REST_URL, calledWorkflow, workflow_variables, generic_infos_map)

// alternatively you can submit a workflow from a direct url
// // add sessionId to request header map
// requestHeader = Collections.singletonMap("sessionId", schedulerapi.getSession()
// jobUrl = "https://try.activeeon.com/catalog/buckets/basic-examples/resources/distributed_computing_Pi/raw"
// jobid = schedulerapi.submit(jobURL, variables, generic_infos_map, requestHeader)

println "Job submitted with job id " + jobid
jobid_params = JsonOutput.toJson(params)
result = [jobid, jobid_params]
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            925.3125
        </positionTop>
        <positionLeft>
            481.62109375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Merge">
      <description>
        <![CDATA[ As a merge operation, we simply print the results from previous tasks. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="Submit_Job_No_Wait"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_cuda_universal/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import json, os, math, shutil
import numpy as np

from io import BytesIO
from PIL import Image
from argparse import ArgumentParser
from time import sleep

# connect to the scheduler
schedulerapi.connect()

PA_JOB_ID = variables.get("PA_JOB_ID")
print('PA_JOB_ID: ', PA_JOB_ID)

# Check Visdom support
VISDOM_ENABLED = variables.get("VISDOM_ENABLED")
if VISDOM_ENABLED is not None and VISDOM_ENABLED.lower() == "true":
    VISDOM_ENABLED = True
    from visdom import Visdom
else:
    VISDOM_ENABLED = False

# Check Tensorboard support
TENSORBOARD_ENABLED = variables.get("TENSORBOARD_ENABLED")
if TENSORBOARD_ENABLED is not None and TENSORBOARD_ENABLED.lower() == "true":
    TENSORBOARD_ENABLED = True
    from tensorboardX import SummaryWriter
else:
    TENSORBOARD_ENABLED = False

writer = None
if TENSORBOARD_ENABLED:
    CONTAINER_LOG_PATH = variables.get("CONTAINER_LOG_PATH")
    assert CONTAINER_LOG_PATH is not None
    TENSORBOARD_JOB_ID = "job_ID_" + variables.get("PA_JOB_ID")
    TENSORBOARD_PATH = os.path.join(CONTAINER_LOG_PATH, TENSORBOARD_JOB_ID)
    print('TENSORBOARD_PATH: ', TENSORBOARD_PATH)
    try:
        if not os.path.exists(TENSORBOARD_PATH):
            os.makedirs(TENSORBOARD_PATH)
        
        writer = SummaryWriter(TENSORBOARD_PATH)
    except:
        print("Error while using: ", TENSORBOARD_PATH)
        print("Deactivating Tensorboard")
        TENSORBOARD_ENABLED = False
        pass

# print('received results: ', results)

parent_job_id = PA_JOB_ID

### BEGIN VISDOM ###
vis = None
if VISDOM_ENABLED:
    VISDOM_HOST = variables.get('VISDOM_HOST')
    VISDOM_PORT = variables.get('VISDOM_PORT')
    print("Connecting to %s:%s" % (VISDOM_HOST, VISDOM_PORT))
    vis = Visdom(server="http://"+VISDOM_HOST, port=int(VISDOM_PORT))
    assert vis.check_connection()
    print("OK")
    win_text_loss = variables.get('VISDOM_win_text_loss')
    win_plot_loss = variables.get('VISDOM_win_plot_loss')
    print("win_text_loss: ", win_text_loss)
    print("win_plot_loss: ", win_plot_loss)
### END VISDOM ###

results_list = []
job_id_params = {}
for r in results:
    # v = int(str(r.value()))
    job_id = int(str(r.value()[0]))
    params = json.loads(str(r.value()[1]))
    job_id_params["job_id_"+str(job_id)] = params
    results_list.append(job_id)
results_list.sort()

workflow_results = []
# for i, res in enumerate(results):
for i, job_id in enumerate(results_list):
    # job_id = str(res.getValue())
    # print(i, job_id)

    # Wait for the job termination
    is_finished = False
    while True:
        is_finished = schedulerapi.isJobFinished(str(job_id))
        print(i, "job_id: ", job_id, ", is_finished: ", is_finished)
        if is_finished:
            break
        else:
            sleep(0.5)  # 500ms

    # Get job result
    # RESULT_JSON: {"token": {"_token_id": 0}, "loss": 0.009321813276374468}
    result_map = schedulerapi.getJobResult(str(job_id)).getResultMap()
    result_json = result_map['RESULT_JSON']
    job_result = json.loads(result_json)
    print(i, "job_id: ", job_id, ", job_result: ", job_result)
    workflow_results.append(job_result)

    token = job_result['token']        # {'_chocolate_id': 0}
    loss = job_result['loss']          # 450.9434895085956
    token_id = token['_chocolate_id']  # 0

    if VISDOM_ENABLED:
        try:
            VISDOM_JOB_ID = 'job_id_' + parent_job_id
            # vis.text("{:.4f}\n".format(loss), win=win_text_loss, append=True, env=VISDOM_JOB_ID)
            vis.text("Job ID: {}, Loss: {:.4f}\n".format(job_id, loss), win=win_text_loss, append=True, env=VISDOM_JOB_ID)
            # vis.line(Y=np.array([loss]), X=np.array([token_id]), win=win_plot_loss, update='append', env=VISDOM_JOB_ID)
            vis.line(Y=np.array([loss]), X=np.array([job_id]), win=win_plot_loss, update='append', env=VISDOM_JOB_ID)
        except:
            print("Error while plotting with Visdom!")
            pass

    if TENSORBOARD_ENABLED:
        try:
            writer.add_text('Text/parent_job', 'text logged at job: ' + str(job_id), loss)
            writer.add_scalar('Loss', np.array([loss]), job_id)
            # writer.add_scalar('Loss', np.array([loss]), token_id)

            # Parallel Coordinates Plot
            params = job_id_params["job_id_"+str(job_id)]
            writer.add_hparams(params, {'PLoss': loss}, name="job_id_"+str(job_id))
        except:
            print("Error while plotting with Tensorboard!")
            pass

if TENSORBOARD_ENABLED:
    writer.close()

workflow_results = json.dumps(workflow_results)
print('workflow_results: ', workflow_results)

variables.put('workflow_results', workflow_results)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="end"/>
      <metadata>
        <positionTop>
            1050.9375
        </positionTop>
        <positionLeft>
            481.62109375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Start">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png"/>
      </genericInformation>
      <depends>
        <task ref="Join_Task"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
PA_TASK_ITERATION = variables.get('PA_TASK_ITERATION')
println '\n\nLoop block start ' + PA_TASK_ITERATION

MONGODB_HOST = variables.get("MONGODB_HOST")
MONGODB_PORT = variables.get("MONGODB_PORT")
MONGODB_USER = variables.get("MONGODB_USER")
MONGODB_PASS = variables.get("MONGODB_PASS")

MONGODB_URL  = "mongodb://"+MONGODB_USER+":"+MONGODB_PASS+"@"+MONGODB_HOST+":"+MONGODB_PORT
variables.put("MONGODB_URL", MONGODB_URL)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="start"/>
      <metadata>
        <positionTop>
            415.3125
        </positionTop>
        <positionLeft>
            666.3671875
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Loop">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png"/>
      </genericInformation>
      <depends>
        <task ref="Finally"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="javascript">
            <![CDATA[
print('Loop block end ' + variables.get('PA_TASK_ITERATION'))
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="end">
        <loop target="Start">
          <script>
            <code language="groovy">
              <![CDATA[
import com.google.common.base.Splitter;

MAX_ITERATIONS = variables.get('MAX_ITERATIONS') as Integer
PA_TASK_ITERATION = variables.get('PA_TASK_ITERATION') as Integer
PAUSE_AFTER_EVERY_ITERATIONS = variables.get('PAUSE_AFTER_EVERY_ITERATIONS') as Integer
println("MAX_ITERATIONS:               " + MAX_ITERATIONS)
println("PA_TASK_ITERATION:            " + PA_TASK_ITERATION)
println("PAUSE_AFTER_EVERY_ITERATIONS: " + PAUSE_AFTER_EVERY_ITERATIONS)

def pauseEnabled() {
    return PAUSE_AFTER_EVERY_ITERATIONS > 0 && ((PA_TASK_ITERATION + 1) % PAUSE_AFTER_EVERY_ITERATIONS == 0)
}

def checkForSignals() {
    // Read the variable SIGNALS
    signals = "Continue_Iterations,Stop_Iterations"

    // Split the value of the variable SIGNALS and transform it into a list
    Set signalsSet = new HashSet<>(Splitter.on(',').trimResults().omitEmptyStrings().splitToList(signals))

    // Send a ready notification for each signal in the set
    println("Ready for signals "+ signalsSet)
    signalsSet.each { signal ->
        signalapi.readyForSignal(signal)
    }

    // Wait until one signal among those specified is received
    println("Waiting for any signal among "+ signalsSet)
    receivedSignal = signalapi.waitForAny(signalsSet)

    // Remove ready signals
    signalapi.removeManySignals(new HashSet<>(signalsSet.collect { signal -> "ready_"+signal }))

    // Display the received signal and add it to the job result
    println("Received signal: "+ receivedSignal)
    if ("Continue_Iterations".equalsIgnoreCase(receivedSignal)) {
        return true
    } else {
        return false
    }
}

// Check if loop should be true or false
if((MAX_ITERATIONS < 0) || (MAX_ITERATIONS > 0 && PA_TASK_ITERATION < (MAX_ITERATIONS - 1))) {
    if (pauseEnabled()) {
        loop = checkForSignals()
    } else {
        loop = true
    }
} else {
    loop = false
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            797.8125
        </positionTop>
        <positionLeft>
            707.63671875
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Parse_MongoDB_Endpoint">
      <description>
        <![CDATA[ This task aims to parse PCA endpoint in order to retrieve a HOST and a PORT number to use them as an input in the data connector tasks. ]]>
      </description>
      <depends>
        <task ref="Start_MongoDB"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def endpoint = new URL(results[0].toString())
variables.put("MONGODB_HOST", endpoint.getHost())
variables.put("MONGODB_PORT", endpoint.getPort())
// Wait for database sever to be up and fully running.
sleep(10000)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            160.3125
        </positionTop>
        <positionLeft>
            196.875
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Start_MongoDB" onTaskError="cancelJob">
      <description>
        <![CDATA[ Start the MongoDB server as a service. ]]>
      </description>
      <variables>
        <variable inherited="false" name="SERVICE_ID" value="MongoDB"/>
        <variable inherited="false" name="INSTANCE_NAME" value="mongodb-server-${PA_JOB_ID}"/>
        <variable inherited="false" name="ENGINE" value="$CONTAINER_PLATFORM"/>
        <variable inherited="false" name="USER" value="activeeon"/>
        <variable inherited="false" model="PA:HIDDEN" name="PASSWORD" value="ENC(T11vzCF5nEz9mzCTXMOeqjTzBLOp2Axu)"/>
        <variable inherited="true" name="NATIVE_SCHEDULER" value=""/>
        <variable inherited="true" name="NATIVE_SCHEDULER_PARAMS" value=""/>
        <variable inherited="true" name="NODE_ACCESS_TOKEN" value=""/>
        <variable inherited="true" name="NODE_SOURCE_NAME" value=""/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
        <info name="task.documentation" value="PSA/PSAUserGuide.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw">
            <arguments>
              <argument value="false"/>
              <argument value="false"/>
              <argument value="USER"/>
              <argument value="PASSWORD"/>
              <argument value="NATIVE_SCHEDULER"/>
              <argument value="NATIVE_SCHEDULER_PARAMS"/>
              <argument value="NODE_ACCESS_TOKEN"/>
              <argument value="NODE_SOURCE_NAME"/>
              <argument value="ENGINE"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
variables.put('MONGODB_USER', variables.get("USER"))
variables.put('MONGODB_PASS', variables.get("PASSWORD"))
variables.put('MONGODB_INSTANCE_NAME', variables.get("INSTANCE_NAME"))
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            32.8125
        </positionTop>
        <positionLeft>
            196.875
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Join_Task">
      <description>
        <![CDATA[ The simplest task, ran by a Groovy engine. ]]>
      </description>
      <depends>
        <task ref="Parse_MongoDB_Endpoint"/>
        <task ref="Continuation1"/>
        <task ref="Continuation2"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            287.8125
        </positionTop>
        <positionLeft>
            666.3671875
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Finish_MongoDB" onTaskError="cancelJob">
      <variables>
        <variable inherited="false" name="INSTANCE_ID" value=""/>
        <variable inherited="false" name="INSTANCE_NAME" value="mongodb-server-${PA_JOB_ID}"/>
        <variable inherited="false" model="PA:LIST(Finish_MongoDB)" name="ACTION" value="Finish_MongoDB"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png"/>
        <info name="task.documentation" value="PSA/PSAUserGuide.html"/>
      </genericInformation>
      <depends>
        <task ref="Loop"/>
      </depends>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Action/raw">
            <arguments>
              <argument value="MONGODB_INSTANCE_NAME"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            925.3125
        </positionTop>
        <positionLeft>
            707.63671875
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Check_Algorithm_Condition">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <depends>
        <task ref="Start"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("Checking the branch condition of the algorithm")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <if continuation="Finally" else="Else" target="If_Bayes">
          <script>
            <code language="groovy">
              <![CDATA[
TUNING_ALGORITHM = variables.get('TUNING_ALGORITHM')

if(TUNING_ALGORITHM.toLowerCase().contains("bayes")){
    branch = "if";
} else {
    branch = "else";
}
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            542.8125
        </positionTop>
        <positionLeft>
            550.37109375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="If_Bayes">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("Running the If_Bayes branch")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="start"/>
      <metadata>
        <positionTop>
            670.3125
        </positionTop>
        <positionLeft>
            304.62890625
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Else">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("Running the Else branch")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="start"/>
      <metadata>
        <positionTop>
            670.3125
        </positionTop>
        <positionLeft>
            481.62109375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Finally">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("Running the continuation branch [Finally task]")
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            670.3125
        </positionTop>
        <positionLeft>
            619.12109375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Split_and_Submit_Job_No_Wait">
      <description>
        <![CDATA[ The simplest task, ran by a Python engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="If_Bayes"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_cuda_universal/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import os, math, json, base64, shutil
import numpy as np
import ssl
import urllib.request

from lxml import etree
from io import BytesIO
from PIL import Image
from argparse import ArgumentParser
from time import sleep

import chocolate as choco
from chocolate import uniform, quantized_uniform, log, quantized_log, choice
from chocolate import MongoDBConnection, Bayes, Grid, Random, QuasiRandom, CMAES, MOCMAES

from py4j.java_collections import SetConverter, MapConverter, ListConverter


def raiser(msg): raise Exception(msg)


# Connect to the scheduler
schedulerapi.connect()

PA_JOB_ID = variables.get("PA_JOB_ID")
print('PA_JOB_ID: ', PA_JOB_ID)

PA_TASK_ITERATION = int(variables.get('PA_TASK_ITERATION'))
print("PA_TASK_ITERATION: ", PA_TASK_ITERATION)

PA_CATALOG_REST_URL = variables.get("PA_CATALOG_REST_URL")
print('PA_CATALOG_REST_URL: ', PA_CATALOG_REST_URL)

# Check Visdom support
VISDOM_ENABLED = variables.get("VISDOM_ENABLED")
if VISDOM_ENABLED is not None and VISDOM_ENABLED.lower() == "true":
    VISDOM_ENABLED = True
    from visdom import Visdom
else:
    VISDOM_ENABLED = False

# Check Tensorboard support
TENSORBOARD_ENABLED = variables.get("TENSORBOARD_ENABLED")
if TENSORBOARD_ENABLED is not None and TENSORBOARD_ENABLED.lower() == "true":
    TENSORBOARD_ENABLED = True
    from tensorboardX import SummaryWriter
else:
    TENSORBOARD_ENABLED = False

# Check if container platform should be propagated
PROPAGATE_CONTAINER_PLATFORM = variables.get("PROPAGATE_CONTAINER_PLATFORM")
if PROPAGATE_CONTAINER_PLATFORM is not None and PROPAGATE_CONTAINER_PLATFORM.lower() == "true":
    PROPAGATE_CONTAINER_PLATFORM = True
else:
    PROPAGATE_CONTAINER_PLATFORM = False

writer = None
if TENSORBOARD_ENABLED:
    CONTAINER_LOG_PATH = variables.get("CONTAINER_LOG_PATH")
    assert CONTAINER_LOG_PATH is not None
    TENSORBOARD_JOB_ID = "job_ID_" + variables.get("PA_JOB_ID")
    TENSORBOARD_PATH = os.path.join(CONTAINER_LOG_PATH, TENSORBOARD_JOB_ID)
    print('TENSORBOARD_PATH: ', TENSORBOARD_PATH)
    try:
        if not os.path.exists(TENSORBOARD_PATH):
            os.makedirs(TENSORBOARD_PATH)
        
        writer = SummaryWriter(TENSORBOARD_PATH)
    except:
        print("Error while using: ", TENSORBOARD_PATH)
        print("Deactivating Tensorboard")
        TENSORBOARD_ENABLED = False
        pass


# Workflow to optimize
WORKFLOW_TO_OPTIMIZE = variables.get("WORKFLOW_TO_OPTIMIZE")
bucket_name, workflow_name = WORKFLOW_TO_OPTIMIZE.split('/')
print("bucket_name: ", bucket_name, ", workflow_name: ", workflow_name)

# workflow_url = PA_CATALOG_REST_URL + '/buckets/auto-ml-optimization/resources/Himmelblau_Function/raw'
workflow_url = PA_CATALOG_REST_URL + '/buckets/'+bucket_name+'/resources/'+workflow_name+'/raw'
print("workflow_url: ", workflow_url)

if workflow_url.startswith('https'):
    workflow_xml = urllib.request.urlopen(workflow_url, context=ssl._create_unverified_context()).read()
else:
    workflow_xml = urllib.request.urlopen(workflow_url).read()
# print("workflow_xml: " + str(workflow_xml))

# Define the search space
# space = "space=" + variables.get('SEARCH_SPACE')
# print('SEARCH_SPACE: ', space)
# exec(space)
workflow_root = etree.fromstring(workflow_xml)

search_space_xpath = "string(//*[@name='SEARCH_SPACE']/@value)"
search_space = str(workflow_root.xpath(search_space_xpath))

if len(str(search_space)) <= 0:
    raiser("The objective workflow do not contains a SEARCH_SPACE variable!")

search_space_model_xpath = "string(//*[@name='SEARCH_SPACE']/@model)"
search_space_model = str(workflow_root.xpath(search_space_model_xpath))

if len(str(search_space_model)) <= 0:
    raiser("The SEARCH_SPACE variable of the objective workflow do not contains a model type!")

# search key dict
def key_search(i):
    try:
        keys = list(i.keys())
    except:
         keys = []
    return keys

# get key and value dict
def key_value_get(key, value):
    aux = key.strip() + "(" + str(value) + ")"
    if key.strip() == 'uniform' or key.strip() == "quantized_uniform" or key.strip() == "log" or key.strip() == "quantized_log":
        aux = aux.replace('[', '')
        aux = aux.replace(']', '')
    return aux

# convert json to chocolate format
def json_to_choco_convert(search_space):
    cont_model = 0
    for data in search_space:
        key_list = key_search(data) 
        if not key_list:
            key, value = list(search_space[data].items())[0]
            aux = key_value_get(key, value)
            search_space[data] = eval(aux)
        else:
            for i in key_list:
                try:
                    key, value = list(data[i].items())[0]
                    aux = key_value_get(key, value)
                    search_space[cont_model][i] = eval(aux)
                except:
                    pass
            cont_model += 1
    return search_space


if search_space_model.upper() == 'PA:JSON':
    # Define the search space from a JSON string
    space = "space=" + str(search_space)
    exec(space)
    space = json_to_choco_convert(space)
    print("\nspace: ", space)

if search_space_model.upper() == 'PA:CATALOG_OBJECT':
    # Define the search space from a JSON file stored in the catalog
    search_space_bucket_name, search_space_script_name = search_space.split('/')
    print("search_space_bucket_name: ", search_space_bucket_name, ", search_space_script_name: ", search_space_script_name)
    search_space_script_url = PA_CATALOG_REST_URL + '/buckets/'+search_space_bucket_name+'/resources/'+search_space_script_name+'/raw'
    print("search_space_script_url: ", search_space_script_url)
    if search_space_script_url.startswith('https'):
        search_space_script_json = json.loads(urllib.request.urlopen(search_space_script_url, context=ssl._create_unverified_context()).read())
    else:
        search_space_script_json = json.loads(urllib.request.urlopen(search_space_script_url).read())
    print("\nsearch_space_script_json: ", search_space_script_json)
    space = json_to_choco_convert(search_space_script_json)
    print("\nspace: ", space)


# Establish a connection to a MongoDB local database
MONGODB_URL = variables.get('MONGODB_URL')
print('MONGODB_URL: ', MONGODB_URL)
conn = MongoDBConnection(MONGODB_URL)
if PA_TASK_ITERATION == 0:
    print('Cleaning database for the first iteration')
    conn.clear()  # Clear all data from the database.

TUNING_ALGORITHM = variables.get('TUNING_ALGORITHM')
assert TUNING_ALGORITHM is not None, "TUNING_ALGORITHM must be set!"
TUNING_ALGORITHM = TUNING_ALGORITHM.lower()
print('TUNING_ALGORITHM: ', TUNING_ALGORITHM)

# Construct the optimizer
sampler = None
if TUNING_ALGORITHM == "grid":
    sampler = Grid(conn, space)
if TUNING_ALGORITHM == "random":
    sampler = Random(conn, space)
if TUNING_ALGORITHM == "quasirandom":
    sampler = QuasiRandom(conn, space)
if TUNING_ALGORITHM == "bayes":
    sampler = Bayes(conn, space)
if TUNING_ALGORITHM == "cmaes":
    sampler = CMAES(conn, space)
if TUNING_ALGORITHM == "mocmaes":
    sampler = MOCMAES(conn, space, 10)
assert sampler is not None, "TUNING_ALGORITHM must be selected!"

# Check for previous results
workflow_results = None
if PA_TASK_ITERATION > 0:
    workflow_results = variables.get('workflow_results')

# Add previous loss values to the database
if workflow_results is not None:
    previous_results = json.loads(workflow_results)
    print("Adding previous loss values to the database")
    for i, previous_result in enumerate(previous_results):
        # print(i, previous_result)
        previous_token = previous_result['token']
        previous_loss = previous_result['loss']
        print(i, 'previous_token: ', previous_token, ', previous_loss: ', previous_loss)
        # Add the loss to the database
        # sampler.update(token, loss)
        sampler.update(previous_token, previous_loss)

# Sample the next point and submit job
samples_per_iteration = int(variables.get('PARALLEL_EXECUTIONS_PER_ITERATION'))
results = []
map_converter = MapConverter()
job_id_params = {}
for i in range(samples_per_iteration):
    try:
    	token, params = sampler.next()
    	print("sample: ", i, ", token: ", token, ", params: ", params)
    except StopIteration:
        print("Stopping iteration...")
        break

    token_encoded = base64.b64encode(json.dumps(token).encode('utf-8')).decode("utf-8")
    params_encoded = base64.b64encode(json.dumps(params).encode("utf-8")).decode("utf-8")
    print("token_encoded:  ", token_encoded)
    print("params_encoded: ", params_encoded)

    # variables submitted to the workflow
    NS = variables.get("NS")
    NS_BATCH = variables.get("NS_BATCH")
    NODE_ACCESS_TOKEN = variables.get("NODE_ACCESS_TOKEN")
    NODE_SOURCE_NAME = variables.get("NODE_SOURCE_NAME")
    NATIVE_SCHEDULER = variables.get("NATIVE_SCHEDULER")
    NATIVE_SCHEDULER_PARAMS = variables.get("NATIVE_SCHEDULER_PARAMS")
    workflow_variables = {
        "token_encoded": token_encoded,
        "params_encoded": params_encoded,
        "NS": NS if NS is not None else '',
        "NS_BATCH": NS_BATCH if NS_BATCH is not None else '',
        "NODE_ACCESS_TOKEN": NODE_ACCESS_TOKEN if NODE_ACCESS_TOKEN is not None else '',
        "NODE_SOURCE_NAME": NODE_SOURCE_NAME if NODE_SOURCE_NAME is not None else '',
        "NATIVE_SCHEDULER": NATIVE_SCHEDULER if NATIVE_SCHEDULER is not None else '',
        "NATIVE_SCHEDULER_PARAMS": NATIVE_SCHEDULER_PARAMS if NATIVE_SCHEDULER_PARAMS is not None else ''
    }
    
    # Add generated params from the search space as a workflow variable
    workflow_variables.update(params)

    workflow_variables['TENSORBOARD_ENABLED'] = str(TENSORBOARD_ENABLED).lower()
    if TENSORBOARD_ENABLED:
        print("Adding Tensorboard support to the workflow variables")
        HOST_LOG_PATH = variables.get("HOST_LOG_PATH")
        CONTAINER_LOG_PATH = variables.get("CONTAINER_LOG_PATH")
        INSTANCE_NAME = variables.get("TENSORBOARD_INSTANCE_NAME")
        CONTAINER_ROOTLESS_ENABLED = variables.get("CONTAINER_ROOTLESS_ENABLED")
        workflow_variables['HOST_LOG_PATH'] = HOST_LOG_PATH if HOST_LOG_PATH is not None else ''
        workflow_variables['CONTAINER_LOG_PATH'] = CONTAINER_LOG_PATH if CONTAINER_LOG_PATH is not None else ''
        workflow_variables['INSTANCE_NAME'] = INSTANCE_NAME if INSTANCE_NAME is not None else ''
        workflow_variables['CONTAINER_ROOTLESS_ENABLED'] = CONTAINER_ROOTLESS_ENABLED if CONTAINER_ROOTLESS_ENABLED is not None else ''

    workflow_variables['VISDOM_ENABLED'] = str(VISDOM_ENABLED).lower()
    if VISDOM_ENABLED:
        print("Adding Visdom support to the workflow variables")
        VISDOM_INSTANCE_NAME = variables.get("VISDOM_INSTANCE_NAME")
        VISDOM_ENDPOINT = variables.get("ENDPOINT_" + VISDOM_INSTANCE_NAME)
        workflow_variables['VISDOM_ENDPOINT'] = VISDOM_ENDPOINT if VISDOM_ENDPOINT is not None else ''

    if PROPAGATE_CONTAINER_PLATFORM:
        print("Propagating container platform to the workflow variables")
        CONTAINER_PLATFORM = variables.get("CONTAINER_PLATFORM")
        workflow_variables['CONTAINER_PLATFORM'] = CONTAINER_PLATFORM if CONTAINER_PLATFORM is not None else ''

    workflow_variables_java_map = map_converter.convert(workflow_variables, schedulerapi._gateway_client)
    #print('workflow_variables_java_map: ', workflow_variables_java_map)
    generic_infos_map = {
        "PARENT_JOB_ID": PA_JOB_ID
    }
    generic_infos_java_map = map_converter.convert(generic_infos_map, schedulerapi._gateway_client)
    #print('generic_infos_java_map: ', generic_infos_java_map)

    print("Submitting workflow ", WORKFLOW_TO_OPTIMIZE)
    # submitting the job
    print("-"*30)
    print("PA_CATALOG_REST_URL: ", PA_CATALOG_REST_URL)
    print("bucket_name:         ", bucket_name)
    print("workflow_name:       ", workflow_name)
    print("workflow_variables:  ", workflow_variables)
    print("generic_infos_map:   ", generic_infos_map)
    print("-"*30)
    job_id = schedulerapi.submitFromCatalog(PA_CATALOG_REST_URL, bucket_name, workflow_name, workflow_variables_java_map, generic_infos_java_map).longValue()
    print("Job submitted with job id ", job_id)

    results.append(job_id)
    job_id_params["job_id_"+str(job_id)] = params
# end iterations

parent_job_id = PA_JOB_ID

### BEGIN VISDOM ###
vis = None
if VISDOM_ENABLED:
    VISDOM_HOST = variables.get('VISDOM_HOST')
    VISDOM_PORT = variables.get('VISDOM_PORT')
    print("Connecting to %s:%s" % (VISDOM_HOST, VISDOM_PORT))
    vis = Visdom(server="http://"+VISDOM_HOST, port=int(VISDOM_PORT))
    assert vis.check_connection()
    print("OK")
    win_text_loss = variables.get('VISDOM_win_text_loss')
    win_plot_loss = variables.get('VISDOM_win_plot_loss')
    print("win_text_loss: ", win_text_loss)
    print("win_plot_loss: ", win_plot_loss)
### END VISDOM ###

workflow_results = []
results.sort()
for i, res in enumerate(results):
    job_id = str(res)
    # print(i, job_id)

    # Wait for the job termination
    is_finished = False
    while True:
        is_finished = schedulerapi.isJobFinished(job_id)
        print(i, "job_id: ", job_id, ", is_finished: ", is_finished)
        if is_finished:
            break
        else:
            sleep(0.5)  # 500ms

    # Get job result
    # RESULT_JSON: {"token": {"_token_id": 0}, "loss": 0.009321813276374468}
    result_map = schedulerapi.getJobResult(job_id).getResultMap()
    result_json = result_map['RESULT_JSON']
    job_result = json.loads(result_json)
    print(i, "job_id: ", job_id, ", job_result: ", job_result)
    workflow_results.append(job_result)

    token = job_result['token']        # {'_chocolate_id': 0}
    loss = job_result['loss']          # 450.9434895085956
    token_id = token['_chocolate_id']  # 0

    if VISDOM_ENABLED:
        try:
            # vis.text("{:.4f}\n".format(loss), win=win_text_loss, append=True, env='job_id_'+parent_job_id)
            vis.text("Job ID: {}, Loss: {:.4f}\n".format(job_id, loss), win=win_text_loss, append=True, env='job_id_'+parent_job_id)
            # vis.line(Y=np.array([loss]), X=np.array([token_id]), win=win_plot_loss, update='append', env='job_id_'+parent_job_id)
            vis.line(Y=np.array([loss]), X=np.array([int(job_id)]), win=win_plot_loss, update='append', env='job_id_'+parent_job_id)
        except:
            print("Error while plotting with Visdom!")
            pass

    if TENSORBOARD_ENABLED:
        try:
            writer.add_text('Text/parent_job', 'text logged at job: ' + str(job_id), loss)
            writer.add_scalar('Loss', np.array([loss]), int(job_id))
            # writer.add_scalar('Loss', np.array([loss]), token_id)

            # Parallel Coordinates Plot
            params = job_id_params["job_id_"+str(job_id)]
            writer.add_hparams(params, {'PLoss': loss}, name="job_id_"+str(job_id))
        except:
            print("Error while plotting with Tensorboard!")
            pass

if TENSORBOARD_ENABLED:
    writer.close()

workflow_results = json.dumps(workflow_results)
print('workflow_results: ', workflow_results)

variables.put('workflow_results', workflow_results)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="end"/>
      <metadata>
        <positionTop>
            797.8125
        </positionTop>
        <positionLeft>
            304.62890625
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Check_Visdom_Support">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("Checking for Visdom support")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <if continuation="Continuation1" else="Nothing1" target="Start_Visdom_Service">
          <script>
            <code language="groovy">
              <![CDATA[
if ("true".equalsIgnoreCase(variables.get("VISDOM_ENABLED"))) {
    branch = "if"
} else {
    branch = "else"
}
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            32.8125
        </positionTop>
        <positionLeft>
            602.6171875
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Start_Visdom_Service">
      <description>
        <![CDATA[ Start the Visdom server as a service. ]]>
      </description>
      <variables>
        <variable inherited="false" name="SERVICE_ID" value="Visdom"/>
        <variable inherited="false" name="INSTANCE_NAME" value="$VISDOM_INSTANCE_NAME"/>
        <variable inherited="false" name="ENGINE" value="$CONTAINER_PLATFORM"/>
        <variable inherited="false" name="PROXYFIED" value="$VISDOM_PROXYFIED"/>
        <variable inherited="true" name="NATIVE_SCHEDULER" value=""/>
        <variable inherited="true" name="NATIVE_SCHEDULER_PARAMS" value=""/>
        <variable inherited="true" name="NODE_ACCESS_TOKEN" value=""/>
        <variable inherited="true" name="NODE_SOURCE_NAME" value=""/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/visdom.png"/>
        <info name="task.documentation" value="PML/PMLUserGuide.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw">
            <arguments>
              <argument value="true"/>
              <argument value="false"/>
              <argument value="PROXYFIED"/>
              <argument value="VISDOM_ENABLE_LOGIN"/>
              <argument value="VISDOM_USERNAME"/>
              <argument value="VISDOM_PASSWORD"/>
              <argument value="NATIVE_SCHEDULER"/>
              <argument value="NATIVE_SCHEDULER_PARAMS"/>
              <argument value="NODE_ACCESS_TOKEN"/>
              <argument value="NODE_SOURCE_NAME"/>
              <argument value="ENGINE"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            160.3125
        </positionTop>
        <positionLeft>
            379.375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Nothing1">
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("Visdom disabled")
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            160.3125
        </positionTop>
        <positionLeft>
            533.8671875
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Continuation1">
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_cuda_universal/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
# Wait for Visdom sever to be up and fully running.
import time
time.sleep(10)

VISDOM_ENABLED = variables.get('VISDOM_ENABLED')

if VISDOM_ENABLED is not None and VISDOM_ENABLED == "true":
    import numpy as np
    from visdom import Visdom
    VISDOM_INSTANCE_NAME = variables.get("VISDOM_INSTANCE_NAME")
    VISDOM_ENDPOINT = variables.get("ENDPOINT_" + VISDOM_INSTANCE_NAME)
    #VISDOM_ENDPOINT = variables.get("VISDOM_ENDPOINT") if variables.get("VISDOM_ENDPOINT") else results[0].__str__()
    print("VISDOM_ENDPOINT: ", VISDOM_ENDPOINT)

    if VISDOM_ENDPOINT is not None:
        VISDOM_ENDPOINT = VISDOM_ENDPOINT.replace("http://", "")
        print(VISDOM_ENDPOINT)

    (VISDOM_HOST, VISDOM_PORT) = VISDOM_ENDPOINT.split(":")

    variables.put('VISDOM_HOST', VISDOM_HOST)
    variables.put('VISDOM_PORT', VISDOM_PORT)
    print("VISDOM_HOST: ", VISDOM_HOST)
    print("VISDOM_PORT: ", VISDOM_PORT)
    print("Connecting to %s:%s" % (VISDOM_HOST, VISDOM_PORT))
    vis = Visdom(server="http://"+VISDOM_HOST, port=int(VISDOM_PORT))
    assert vis.check_connection()
    parent_job_id = variables.get("PA_JOB_ID")
    vis.text('A new experiment was created, please see job_id_'+parent_job_id+' environment in Visdom for more info.')
    win_text_loss = vis.text("Loss (objective to optimize):\n", env='job_id_'+parent_job_id)
    win_plot_loss = vis.line(
        Y = np.array([np.nan]),
        X = np.array([np.nan]),
        opts = dict(
              xlabel = 'Job ID',
              ylabel = 'Loss',
              title = 'Model loss',
              ),
        env='job_id_'+parent_job_id
    )
    variables.put('VISDOM_win_text_loss', win_text_loss)
    variables.put('VISDOM_win_plot_loss', win_plot_loss)
    print("win_text_loss: ", win_text_loss)
    print("win_plot_loss: ", win_plot_loss)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            160.3125
        </positionTop>
        <positionLeft>
            671.3671875
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Check_Tensorboard_Support">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("Checking for Tensorboard support")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <if continuation="Continuation2" else="Nothing2" target="Start_Tensorboard">
          <script>
            <code language="groovy">
              <![CDATA[
if ("true".equalsIgnoreCase(variables.get("TENSORBOARD_ENABLED"))) {
    branch = "if"
} else {
    branch = "else"
}
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            32.8125
        </positionTop>
        <positionLeft>
            1033.125
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Nothing2">
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("Tensorboard disabled")
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            160.3125
        </positionTop>
        <positionLeft>
            964.375
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Continuation2">
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// Wait for Tensorboard sever to be up and fully running.
sleep(10000)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            160.3125
        </positionTop>
        <positionLeft>
            1101.89453125
        </positionLeft>
      </metadata>
    </task>
    <task fork="false" name="Start_Tensorboard" onTaskError="cancelJob">
      <description>
        <![CDATA[ Start the Tensorboard server as a service. ]]>
      </description>
      <variables>
        <variable inherited="false" name="SERVICE_ID" value="Tensorboard"/>
        <variable inherited="false" name="INSTANCE_NAME" value="$TENSORBOARD_INSTANCE_NAME"/>
        <variable inherited="false" name="PROXYFIED" value="$TENSORBOARD_PROXYFIED"/>
        <variable inherited="false" name="MOUNT_LOG_PATH" value="$TENSORBOARD_HOST_LOG_PATH"/>
        <variable inherited="false" name="ENGINE" value="$CONTAINER_PLATFORM"/>
        <variable inherited="false" model="PA:Boolean" name="CONTAINER_ROOTLESS_ENABLED" value="False"/>
        <variable inherited="true" name="NATIVE_SCHEDULER" value=""/>
        <variable inherited="true" name="NATIVE_SCHEDULER_PARAMS" value=""/>
        <variable inherited="true" name="NODE_ACCESS_TOKEN" value=""/>
        <variable inherited="true" name="NODE_SOURCE_NAME" value=""/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="task.documentation" value="PSA/PSAUserGuide.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw">
            <arguments>
              <argument value="true"/>
              <argument value="false"/>
              <argument value="PROXYFIED"/>
              <argument value="MOUNT_LOG_PATH"/>
              <argument value="NATIVE_SCHEDULER"/>
              <argument value="NATIVE_SCHEDULER_PARAMS"/>
              <argument value="NODE_ACCESS_TOKEN"/>
              <argument value="NODE_SOURCE_NAME"/>
              <argument value="ENGINE"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
variables.put("HOST_LOG_PATH", variables.get("TENSORBOARD_HOST_LOG_PATH"))
variables.put("CONTAINER_LOG_PATH", variables.get("TENSORBOARD_CONTAINER_LOG_PATH"))
variables.put("CONTAINER_ROOTLESS_ENABLED", variables.get("CONTAINER_ROOTLESS_ENABLED"))
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            160.3125
        </positionTop>
        <positionLeft>
            817.87109375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="wait_for_stop_services">
      <description>
        <![CDATA[ A template task that sends a ready notification for all the signals specified in the variable SIGNALS, then waits until one signal among those specified is received by the job. ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:REGEXP(((\w|-|_)+,?\s?)+)" name="SIGNALS" value="Stop_Services"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/signal-wait.png"/>
      </genericInformation>
      <depends>
        <task ref="Continuation1"/>
        <task ref="Continuation2"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import com.google.common.base.Splitter;

// Check Visdom support
def VISDOM_ENABLED = false
if ("true".equalsIgnoreCase(variables.get("VISDOM_ENABLED"))) {
    VISDOM_ENABLED = true
}

// Check Tensorboard support
def TENSORBOARD_ENABLED = false
if ("true".equalsIgnoreCase(variables.get("TENSORBOARD_ENABLED"))) {
    TENSORBOARD_ENABLED = true
}

if (VISDOM_ENABLED || TENSORBOARD_ENABLED) {
    // Read the variable SIGNALS
    signals = variables.get("SIGNALS")

    // Split the value of the variable SIGNALS and transform it into a list
    Set signalsSet = new HashSet<>(Splitter.on(',').trimResults().omitEmptyStrings().splitToList(signals))

    // Send a ready notification for each signal in the set
    println("Ready for signals "+ signalsSet)
    signalsSet.each { signal ->
        signalapi.readyForSignal(signal)
    }

    // Wait until one signal among those specified is received
    println("Waiting for any signal among "+ signalsSet)
    receivedSignal = signalapi.waitForAny(signalsSet)

    // Remove ready signals
    signalapi.removeManySignals(new HashSet<>(signalsSet.collect { signal -> "ready_"+signal }))

    // Display the received signal and add it to the job result
    println("Received signal: "+ receivedSignal)
    result = receivedSignal
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            287.8125
        </positionTop>
        <positionLeft>
            980.1171875
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Stop_Tensorboard_Service" onTaskError="cancelJob">
      <variables>
        <variable inherited="false" model="PA:LIST(Finish_Tensorboard)" name="ACTION" value="Finish_Tensorboard"/>
        <variable inherited="false" name="INSTANCE_ID" value=""/>
        <variable inherited="false" name="INSTANCE_NAME" value="$TENSORBOARD_INSTANCE_NAME"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="task.documentation" value="PSA/PSAUserGuide.html"/>
      </genericInformation>
      <depends>
        <task ref="wait_for_stop_services"/>
      </depends>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[

]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.CatalogRestApi
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.CloudAutomationWorkflow
import org.ow2.proactive.pca.service.client.model.ServiceDescription
import java.util.concurrent.TimeoutException

println("BEGIN " + variables.get("PA_TASK_NAME"))

// Check Tensorboard support
def TENSORBOARD_ENABLED = false
if ("true".equalsIgnoreCase(variables.get("TENSORBOARD_ENABLED"))) {
    TENSORBOARD_ENABLED = true
}

if (TENSORBOARD_ENABLED) {
    // Get schedulerapi access
    schedulerapi.connect()

    // Acquire session id
    def sessionId = schedulerapi.getSession()

    // Define PCA URL
    def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')

    // Connect to APIs
    def apiClient = new ApiClient()
    apiClient.setBasePath(pcaUrl)
    //apiClient.setDebugging(true)
    def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)
    def instanceName = variables.get("INSTANCE_NAME")
    def instanceId = (!variables.get("INSTANCE_ID") && instanceName)? variables.get("INSTANCE_ID_" + instanceName) : variables.get("INSTANCE_ID")
    if (!instanceId && !instanceName){
        throw new IllegalArgumentException("You have to specify an INSTANCE_NAME or an INSTANCE_ID. Empty value for both is not allowed.");
    }

    println("INSTANCE_ID: " + instanceId)

    def action = variables.get("ACTION")
    if (action.isEmpty()) {
        throw new IllegalArgumentException("You have to provide an ACTION value. Empty value is not allowed.");
    }

    def bucketName
    def isActionExists = false
    def catalogRestApi = new CatalogRestApi(apiClient)
    def actionVariables = new HashMap()

    Map<String, List<CloudAutomationWorkflow>> listExecutableActionsByInstanceId = catalogRestApi.listExecutableActionsByInstanceIdUsingGET(sessionId)
    List<CloudAutomationWorkflow> listExecutableActions = listExecutableActionsByInstanceId.get(instanceId.toString())
    for (CloudAutomationWorkflow actionIterator : listExecutableActions) {
        if (actionIterator.getName().equals(action)){
            bucketName = actionIterator.getBucket()
            //retrieve default action variables
            actionVariables = actionIterator.getVariables().collectEntries {var -> [var.getName(), var.getValue()]}
            isActionExists = true
            break
        }
    }
    if(!isActionExists){
        throw new IllegalArgumentException("The provided ACTION: " + action + " does not belong to the existing possible actions that can be applied to the current state of the service. You have to specify a valid action.")
    }

    // Retrieve and update workflow variables
    if (binding.variables["args"]){
        for (String var: args){
            actionVariables.put(var, variables.get(var))
        }
    }

    // Execute action on service
    ServiceDescription service = new ServiceDescription()
    service.setBucketName(bucketName)
    service.setWorkflowName(action)
    if( !actionVariables.isEmpty() ){
        actionVariables.each{ k, v -> service.putVariablesItem("${k}", "${v}") }
    }
    def serviceInstanceData = serviceInstanceRestApi.launchServiceInstanceActionUsingPUT(sessionId, instanceId as int, service, variables.get("PA_JOB_ID"))

    if (action.toLowerCase().contains("finish")) {
        try {
            schedulerapi.waitForJob(serviceInstanceData.getJobSubmissions().get(0).getJobId().toString(), 180000)
        } catch (TimeoutException toe) {
            println("[Warning] Timeout reached. Disable to wait until the PCA service " + instanceId + " finishes." )
        }
    }
}

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            415.3125
        </positionTop>
        <positionLeft>
            888.8671875
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Stop_Visdom_Service" onTaskError="cancelJob">
      <variables>
        <variable inherited="false" model="PA:LIST(Finish_Visdom)" name="ACTION" value="Finish_Visdom"/>
        <variable inherited="false" name="INSTANCE_ID" value=""/>
        <variable inherited="false" name="INSTANCE_NAME" value="$VISDOM_INSTANCE_NAME"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/visdom.png"/>
        <info name="task.documentation" value="PSA/PSAUserGuide.html"/>
      </genericInformation>
      <depends>
        <task ref="wait_for_stop_services"/>
      </depends>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[

]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.CatalogRestApi
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.CloudAutomationWorkflow
import org.ow2.proactive.pca.service.client.model.ServiceDescription
import java.util.concurrent.TimeoutException

println("BEGIN " + variables.get("PA_TASK_NAME"))

// Check Visdom support
def VISDOM_ENABLED = false
if ("true".equalsIgnoreCase(variables.get("VISDOM_ENABLED"))) {
    VISDOM_ENABLED = true
}

if (VISDOM_ENABLED) {
    // Get schedulerapi access
    schedulerapi.connect()

    // Acquire session id
    def sessionId = schedulerapi.getSession()

    // Define PCA URL
    def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')

    // Connect to APIs
    def apiClient = new ApiClient()
    apiClient.setBasePath(pcaUrl)
    //apiClient.setDebugging(true)
    def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)
    def instanceName = variables.get("INSTANCE_NAME")
    def instanceId = (!variables.get("INSTANCE_ID") && instanceName)? variables.get("INSTANCE_ID_" + instanceName) : variables.get("INSTANCE_ID")
    if (!instanceId && !instanceName){
        throw new IllegalArgumentException("You have to specify an INSTANCE_NAME or an INSTANCE_ID. Empty value for both is not allowed.");
    }

    println("INSTANCE_ID: " + instanceId)

    def action = variables.get("ACTION")
    if (action.isEmpty()) {
        throw new IllegalArgumentException("You have to provide an ACTION value. Empty value is not allowed.");
    }

    def bucketName
    def isActionExists = false
    def catalogRestApi = new CatalogRestApi(apiClient)
    def actionVariables = new HashMap()

    Map<String, List<CloudAutomationWorkflow>> listExecutableActionsByInstanceId = catalogRestApi.listExecutableActionsByInstanceIdUsingGET(sessionId)
    List<CloudAutomationWorkflow> listExecutableActions = listExecutableActionsByInstanceId.get(instanceId.toString())
    for (CloudAutomationWorkflow actionIterator : listExecutableActions) {
        if (actionIterator.getName().equals(action)){
            bucketName = actionIterator.getBucket()
            //retrieve default action variables
            actionVariables = actionIterator.getVariables().collectEntries {var -> [var.getName(), var.getValue()]}
            isActionExists = true
            break
        }
    }
    if(!isActionExists){
        throw new IllegalArgumentException("The provided ACTION: " + action + " does not belong to the existing possible actions that can be applied to the current state of the service. You have to specify a valid action.")
    }

    // Retrieve and update workflow variables
    if (binding.variables["args"]){
        for (String var: args){
            actionVariables.put(var, variables.get(var))
        }
    }

    // Execute action on service
    ServiceDescription service = new ServiceDescription()
    service.setBucketName(bucketName)
    service.setWorkflowName(action)
    if( !actionVariables.isEmpty() ){
        actionVariables.each{ k, v -> service.putVariablesItem("${k}", "${v}") }
    }
    def serviceInstanceData = serviceInstanceRestApi.launchServiceInstanceActionUsingPUT(sessionId, instanceId as int, service, variables.get("PA_JOB_ID"))

    if (action.toLowerCase().contains("finish")) {
        try {
            schedulerapi.waitForJob(serviceInstanceData.getJobSubmissions().get(0).getJobId().toString(), 180000)
        } catch (TimeoutException toe) {
            println("[Warning] Timeout reached. Disable to wait until the PCA service " + instanceId + " finishes." )
        }
    }
}

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            415.3125
        </positionTop>
        <positionLeft>
            1071.3671875
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2907px;
            height:4275px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-27.8125px;left:-191.875px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_688" style="top: 797.828px; left: 481.629px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task defines some input, here strings to be processed."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">Split</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_691" style="top: 925.323px; left: 481.629px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task will be replicated according to the 'runs' value specified in the replication script.
The replication index is used in each task's instance to select the input."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_submit_job_no_wait.png" width="20px">&nbsp;<span class="name">Submit_Job_No_Wait</span></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_694" style="top: 1050.94px; left: 481.629px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="As a merge operation, we simply print the results from previous tasks."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">Merge</span></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_697" style="top: 415.313px; left: 666.375px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png" width="20px">&nbsp;<span class="name">Start</span></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_700" style="top: 797.828px; left: 707.641px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png" width="20px">&nbsp;<span class="name">Loop</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_703" style="top: 160.328px; left: 196.879px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task aims to parse PCA endpoint in order to retrieve a HOST and a PORT number to use them as an input in the data connector tasks."><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Parse_MongoDB_Endpoint</span></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_706" style="top: 32.8168px; left: 196.879px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Start the MongoDB server as a service."><img src="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png" width="20px">&nbsp;<span class="name">Start_MongoDB</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_709" style="top: 287.821px; left: 666.375px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="The simplest task, ran by a Groovy engine."><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Join_Task</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_712" style="top: 925.323px; left: 707.641px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/mongodb.png" width="20px">&nbsp;<span class="name">Finish_MongoDB</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_715" style="top: 542.825px; left: 550.375px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Check_Algorithm_Condition</span></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_718" style="top: 670.317px; left: 304.637px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">If_Bayes</span></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_721" style="top: 670.317px; left: 481.629px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Else</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_724" style="top: 670.317px; left: 619.141px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Finally</span></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_727" style="top: 797.828px; left: 304.637px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="The simplest task, ran by a Python engine."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">Split_and_Submit_Job_No_Wait</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_730" style="top: 32.8168px; left: 602.629px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Check_Visdom_Support</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_733" style="top: 160.328px; left: 379.391px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Start the Visdom server as a service."><img src="/automation-dashboard/styles/patterns/img/wf-icons/visdom.png" width="20px">&nbsp;<span class="name">Start_Visdom_Service</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_736" style="top: 160.328px; left: 533.883px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Nothing1</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_739" style="top: 160.328px; left: 671.375px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/studio/images/Python.png" width="20px">&nbsp;<span class="name">Continuation1</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_742" style="top: 32.8168px; left: 1033.13px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Check_Tensorboard_Support</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_745" style="top: 160.328px; left: 964.383px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Nothing2</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_748" style="top: 160.328px; left: 1101.89px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Continuation2</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_751" style="top: 160.328px; left: 817.887px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Start the Tensorboard server as a service."><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Start_Tensorboard</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_754" style="top: 287.821px; left: 980.133px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A template task that sends a ready notification for all the signals specified in the variable SIGNALS, then waits until one signal among those specified is received by the job."><img src="/automation-dashboard/styles/patterns/img/wf-icons/signal-wait.png" width="20px">&nbsp;<span class="name">wait_for_stop_services</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_757" style="top: 415.313px; left: 888.883px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Stop_Tensorboard_Service</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_760" style="top: 415.313px; left: 1071.38px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/visdom.png" width="20px">&nbsp;<span class="name">Stop_Visdom_Service</span></a></div><svg style="position:absolute;left:515.9817132113825px;top:709.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path></svg><svg style="position:absolute;left:550.5px;top:827.5px" width="47.39999999999998" height="98" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 26.399999999999977 87 C 36.39999999999998 87 -10 -10 0 0 " transform="translate(10.5,10.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#e5db3d" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M26.282920799999978,76.056144 L26.95492214157901,54.87718240607581 L22.079406633936635,62.70210084237524 L13.600878983954246,59.08069657213915 L26.282920799999978,76.056144" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M26.282920799999978,76.056144 L26.95492214157901,54.87718240607581 L22.079406633936635,62.70210084237524 L13.600878983954246,59.08069657213915 L26.282920799999978,76.056144" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_771" style="position: absolute; transform: translate(-50%, -50%); left: 573.7px; top: 877.25px;">replicate</div><svg style="position:absolute;left:520.5px;top:837.5px" width="37.5" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 16.5 87 C 26.5 37 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M17.922576,65.388768 L19.819460110791276,44.284222739079844 L14.499150867375015,51.81378511377463 L6.244477224565911,47.70764787170483 L17.922576,65.388768" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M17.922576,65.388768 L19.819460110791276,44.284222739079844 L14.499150867375015,51.81378511377463 L6.244477224565911,47.70764787170483 L17.922576,65.388768" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:520.5px;top:964.5px" width="37.5" height="87" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 86 C -10 36 26.5 50 16.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.4762343750000004,64.94400000000002 L10.149387068786648,47.22833105847348 L1.9069247519279744,51.358926046506646 L-3.435686884706721,43.8451719315455 L-1.4762343750000004,64.94400000000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.4762343750000004,64.94400000000002 L10.149387068786648,47.22833105847348 L1.9069247519279744,51.358926046506646 L-3.435686884706721,43.8451719315455 L-1.4762343750000004,64.94400000000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:701.0235032915331px;top:327.5px" width="15.47649670846693" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 87 C -10 37 -10 50 0 0 " transform="translate(14.97649670846693,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.331249999999999,65.86284375000001 L-1.2275778407318203,44.90175553569722 L-6.970801092219563,52.1139248822649 L-14.97649670846693,47.54130662791678 L-4.331249999999999,65.86284375000001" class="" stroke="#666" fill="#666" transform="translate(14.97649670846693,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.331249999999999,65.86284375000001 L-1.2275778407318203,44.90175553569722 L-6.970801092219563,52.1139248822649 L-14.97649670846693,47.54130662791678 L-4.331249999999999,65.86284375000001" class="" stroke="#666" fill="#666" transform="translate(14.97649670846693,0.5)"></path></svg><svg style="position:absolute;left:658.5px;top:709.5px" width="110" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 89 88 C 99 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M80.38784375,62.2538125 L68.29767524802567,44.8518635978262 L69.05011953404043,54.04065174406419 L60.084514492089866,56.18958781378577 L80.38784375,62.2538125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M80.38784375,62.2538125 L68.29767524802567,44.8518635978262 L69.05011953404043,54.04065174406419 L60.084514492089866,56.18958781378577 L80.38784375,62.2538125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:755.5px;top:454.5px" width="63" height="344" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 0 C -10 50 52 293 42 343 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.812048000000001,75.11146200000002 L14.706906620576367,93.84890507206312 L6.8928742643634715,88.9559613429714 L0.86240727760498,95.9297313364266 L4.812048000000001,75.11146200000002" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.812048000000001,75.11146200000002 L14.706906620576367,93.84890507206312 L6.8928742643634715,88.9559613429714 L0.86240727760498,95.9297313364266 L4.812048000000001,75.11146200000002" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_789" style="position: absolute; transform: translate(-50%, -50%); left: 786.5px; top: 626px;">loop</div><svg style="position:absolute;left:241.5px;top:72.5px" width="45" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 24 87 C 34 37 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M24.781056,65.388768 L24.73903533797772,44.19918956474171 L20.12995472600991,52.18394854121573 L11.53421587919345,48.8502908387318 L24.781056,65.388768" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M24.781056,65.388768 L24.73903533797772,44.19918956474171 L20.12995472600991,52.18394854121573 L11.53421587919345,48.8502908387318 L24.781056,65.388768" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:265.5px;top:199.5px" width="461" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 440 88 C 450 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M358.49088,57.860352000000006 L339.59166867479615,48.27808654316331 L344.61372813846975,56.0097693317499 L337.741086006546,62.15523840469355 L358.49088,57.860352000000006" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M358.49088,57.860352000000006 L339.59166867479615,48.27808654316331 L344.61372813846975,56.0097693317499 L337.741086006546,62.15523840469355 L358.49088,57.860352000000006" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:705.5px;top:199.5px" width="26" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 88 C -10 38 15 50 5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.40953125,66.78168750000002 L6.41844882380946,47.518594087559144 L-1.1087489198275216,52.84224829573104 L-7.520990380459522,46.21781175738666 L-2.40953125,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.40953125,66.78168750000002 L6.41844882380946,47.518594087559144 L-1.1087489198275216,52.84224829573104 L-7.520990380459522,46.21781175738666 L-2.40953125,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:705.5px;top:199.5px" width="458" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 447 50 437 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M80.93523200000001,57.860352000000006 L101.6888306900212,62.13681565745702 L94.81073550030452,55.99745033511334 L99.82592902513454,48.26131215715252 L80.93523200000001,57.860352000000006" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M80.93523200000001,57.860352000000006 L101.6888306900212,62.13681565745702 L94.81073550030452,55.99745033511334 L99.82592902513454,48.26131215715252 L80.93523200000001,57.860352000000006" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:747.5px;top:837.5px" width="27.5" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 6.5 87 C 16.5 37 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M8.787796875,65.86284375000001 L13.47196229715765,45.1974476904549 L7.1983926531040545,51.95335798598201 L-0.43752346686034826,46.78685191235085 L8.787796875,65.86284375000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M8.787796875,65.86284375000001 L13.47196229715765,45.1974476904549 L7.1983926531040545,51.95335798598201 L-0.43752346686034826,46.78685191235085 L8.787796875,65.86284375000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:619.5px;top:454.5px" width="107" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 96 50 86 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M7.772863999999997,62.682047999999995 L27.9342555973604,56.16144305430014 L18.922463916664423,54.21526456717755 L19.467472164537956,45.011843137635715 L7.772863999999997,62.682047999999995" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M7.772863999999997,62.682047999999995 L27.9342555973604,56.16144305430014 L18.922463916664423,54.21526456717755 L19.467472164537956,45.011843137635715 L7.772863999999997,62.682047999999995" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:294.5px;top:582.5px" width="266" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 87 C -10 37 255 50 245 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M39.75033125000001,58.17771225 L60.83429092227318,60.291156012667535 L53.35974371542965,54.8938285209669 L57.55040719324009,46.68174354723789 L39.75033125000001,58.17771225" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M39.75033125000001,58.17771225 L60.83429092227318,60.291156012667535 L53.35974371542965,54.8938285209669 L57.55040719324009,46.68174354723789 L39.75033125000001,58.17771225" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_809" style="position: absolute; transform: translate(-50%, -50%); left: 427px; top: 626px;">if</div><svg style="position:absolute;left:470.5px;top:582.5px" width="90" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 87 C -10 37 79 50 69 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.964021999999998,62.66801400000001 L24.27845525911671,53.95293121903193 L15.10647901562986,53.01759609785191 L14.628037356968607,43.81047420340207 L4.964021999999998,62.66801400000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.964021999999998,62.66801400000001 L24.27845525911671,53.95293121903193 L15.10647901562986,53.01759609785191 L14.628037356968607,43.81047420340207 L4.964021999999998,62.66801400000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_813" style="position: absolute; transform: translate(-50%, -50%); left: 515px; top: 626px;">else</div><svg style="position:absolute;left:539.5px;top:582.5px" width="90" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 69 87 C 79 37 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M64.035978,62.66801400000001 L54.37196264303139,43.81047420340207 L53.893520984370134,53.01759609785191 L44.72154474088328,53.95293121903193 L64.035978,62.66801400000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M64.035978,62.66801400000001 L54.37196264303139,43.81047420340207 L53.893520984370134,53.01759609785191 L44.72154474088328,53.95293121903193 L64.035978,62.66801400000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_817" style="position: absolute; transform: translate(-50%, -50%); left: 584px; top: 626px;">continuation</div><svg style="position:absolute;left:344.5px;top:709.5px" width="60.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 39.5 88 C 49.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M38.626551000000006,65.364084 L34.76109764770439,44.530018857036985 L31.66872177360101,53.215478629165545 L22.612492276869922,51.487848083435985 L38.626551000000006,65.364084" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M38.626551000000006,65.364084 L34.76109764770439,44.530018857036985 L31.66872177360101,53.215478629165545 L22.612492276869922,51.487848083435985 L38.626551000000006,65.364084" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:369.5px;top:72.5px" width="244" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 87 C -10 37 233 50 223 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M35.93430475,58.17771225 L57.05940948033484,59.82996832348998 L49.468715484289035,54.59724774444182 L53.478944974776674,46.29555758920095 L35.93430475,58.17771225" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M35.93430475,58.17771225 L57.05940948033484,59.82996832348998 L49.468715484289035,54.59724774444182 L53.478944974776674,46.29555758920095 L35.93430475,58.17771225" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_826" style="position: absolute; transform: translate(-50%, -50%); left: 491px; top: 116px;">if</div><svg style="position:absolute;left:523.5px;top:72.5px" width="90" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 87 C -10 37 79 50 69 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.964021999999998,62.66801400000001 L24.27845525911671,53.95293121903193 L15.10647901562986,53.01759609785191 L14.628037356968607,43.81047420340207 L4.964021999999998,62.66801400000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.964021999999998,62.66801400000001 L24.27845525911671,53.95293121903193 L15.10647901562986,53.01759609785191 L14.628037356968607,43.81047420340207 L4.964021999999998,62.66801400000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_830" style="position: absolute; transform: translate(-50%, -50%); left: 568px; top: 116px;">else</div><svg style="position:absolute;left:592.5px;top:72.5px" width="89" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 68 87 C 78 37 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M63.14975600000001,62.66801400000001 L53.61665029542708,43.743957996451535 L53.07441727922457,52.94754334978748 L43.896179645214545,53.81929671722697 L63.14975600000001,62.66801400000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M63.14975600000001,62.66801400000001 L53.61665029542708,43.743957996451535 L53.07441727922457,52.94754334978748 L43.896179645214545,53.81929671722697 L63.14975600000001,62.66801400000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_834" style="position: absolute; transform: translate(-50%, -50%); left: 636.5px; top: 116px;">continuation</div><svg style="position:absolute;left:807.5px;top:72.5px" width="237" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 87 C -10 37 226 50 216 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M33.441408,58.561823999999994 L54.583208381199036,59.98459476211613 L46.9361421679802,54.83460657468822 L50.85599095588726,46.48986059413593 L33.441408,58.561823999999994" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M33.441408,58.561823999999994 L54.583208381199036,59.98459476211613 L46.9361421679802,54.83460657468822 L50.85599095588726,46.48986059413593 L33.441408,58.561823999999994" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_840" style="position: absolute; transform: translate(-50%, -50%); left: 925.5px; top: 116px;">if</div><svg style="position:absolute;left:954.5px;top:72.5px" width="90" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 87 C -10 37 79 50 69 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.964021999999998,62.66801400000001 L24.27845525911671,53.95293121903193 L15.10647901562986,53.01759609785191 L14.628037356968607,43.81047420340207 L4.964021999999998,62.66801400000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.964021999999998,62.66801400000001 L24.27845525911671,53.95293121903193 L15.10647901562986,53.01759609785191 L14.628037356968607,43.81047420340207 L4.964021999999998,62.66801400000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_844" style="position: absolute; transform: translate(-50%, -50%); left: 999px; top: 116px;">else</div><svg style="position:absolute;left:1023.5px;top:72.5px" width="90" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 69 87 C 79 37 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M64.035978,62.66801400000001 L54.37196264303139,43.81047420340207 L53.893520984370134,53.01759609785191 L44.72154474088328,53.95293121903193 L64.035978,62.66801400000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M64.035978,62.66801400000001 L54.37196264303139,43.81047420340207 L53.893520984370134,53.01759609785191 L44.72154474088328,53.95293121903193 L64.035978,62.66801400000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_848" style="position: absolute; transform: translate(-50%, -50%); left: 1068px; top: 116px;">continuation</div><svg style="position:absolute;left:710.5px;top:199.5px" width="330" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 309 88 C 319 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M256.305774,58.618708 L237.99599410206764,47.953251606142665 L242.55977600886618,55.963987821196696 L235.34127392326434,61.69924959727647 L256.305774,58.618708" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M256.305774,58.618708 L237.99599410206764,47.953251606142665 L242.55977600886618,55.963987821196696 L235.34127392326434,61.69924959727647 L256.305774,58.618708" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:1019.5px;top:199.5px" width="144" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 133 50 123 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M15.008256,60.999424000000005 L36.00595923570816,58.15399629486832 L27.481541057673454,54.64197483622212 L29.648510071930275,45.68071123719487 L15.008256,60.999424000000005" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M15.008256,60.999424000000005 L36.00595923570816,58.15399629486832 L27.481541057673454,54.64197483622212 L29.648510071930275,45.68071123719487 L15.008256,60.999424000000005" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:956.5px;top:327.5px" width="84" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 87 C -10 37 73 50 63 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M3.9725617499999983,63.10721925000001 L22.816556493908095,53.416818737556575 L13.60877395061205,52.95126462107539 L12.660601864983475,43.780606536944525 L3.9725617499999983,63.10721925000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M3.9725617499999983,63.10721925000001 L22.816556493908095,53.416818737556575 L13.60877395061205,52.95126462107539 L12.660601864983475,43.780606536944525 L3.9725617499999983,63.10721925000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:1019.5px;top:327.5px" width="129" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 108 87 C 118 37 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M96.35749200000001,60.965058 L82.62281872826343,44.829421969194 L84.27063042515539,53.90051432963141 L75.55827505789485,56.91628354403862 L96.35749200000001,60.965058" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M96.35749200000001,60.965058 L82.62281872826343,44.829421969194 L84.27063042515539,53.90051432963141 L75.55827505789485,56.91628354403862 L96.35749200000001,60.965058" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 521px; top: 828px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 521px; top: 788px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint replicate-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 551px; top: 828px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 537.5px; top: 955px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint replicate-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 577.4px; top: 915px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 537.5px; top: 915px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 521px; top: 1081px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 521px; top: 1041px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 706px; top: 445px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 706px; top: 405px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 756px; top: 445px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 748px; top: 828px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 748px; top: 788px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 798px; top: 788px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 266px; top: 190px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 266px; top: 150px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 242px; top: 63px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 706px; top: 318px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 706px; top: 278px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 754.5px; top: 955px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 754.5px; top: 915px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 620px; top: 573px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 620px; top: 533px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 540px; top: 573px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 345px; top: 700px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 295px; top: 660px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 521px; top: 700px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 471px; top: 660px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 659px; top: 700px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 609px; top: 660px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 384.5px; top: 828px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 384.5px; top: 788px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 664.5px; top: 63px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 593px; top: 63px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 437px; top: 190px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 370px; top: 150px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 574px; top: 190px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 524px; top: 150px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 711px; top: 190px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 661px; top: 150px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 1106.5px; top: 63px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 1024px; top: 63px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 1005px; top: 190px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 955px; top: 150px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1143px; top: 190px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 1093px; top: 150px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 867px; top: 190px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 808px; top: 150px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1020px; top: 318px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1020px; top: 278px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 957px; top: 445px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 957px; top: 405px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 1128px; top: 445px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1128px; top: 405px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
