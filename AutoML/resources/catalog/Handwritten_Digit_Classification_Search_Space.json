[
  {
    "MODEL": "arch1",
    "CONV": {
      "choice": [
        "nn.Conv2d(1, 4, kernel_size=3, stride=1, padding=1)",
        "nn.Conv2d(1, 4, kernel_size=5, stride=1, padding=2)"
      ]
    },
    "ACTIVATION": {
      "choice": [
        "nn.ReLU(inplace=True)",
        "nn.ReLU6(inplace=True)",
        "nn.SELU(inplace=True)"
      ]
    },
    "POOLING": {
      "choice": [
        "nn.MaxPool2d(kernel_size=2, stride=2)",
        "nn.MaxPool2d(2, stride=2)"
      ]
    },
    "NORMALIZATION": {
      "choice": [
        "nn.BatchNorm2d(4)",
        "nn.InstanceNorm2d(100)"
      ]
    },
    "CONV2": {
      "choice": [
        "nn.Conv2d(4, 4, kernel_size=3, stride=1, padding=1)",
        "nn.Conv2d(4, 4, kernel_size=5, stride=1, padding=2)"
      ]
    },
    "ACTIVATION2": {
      "choice": [
        "nn.ReLU(inplace=True)",
        "nn.ReLU6(inplace=True)",
        "nn.SELU(inplace=True)"
      ]
    },
    "POOLING2": {
      "choice": [
        "nn.MaxPool2d(kernel_size=2, stride=2)",
        "nn.MaxPool2d(2, stride=2)"
      ]
    },
    "NORMALIZATION2": {
      "choice": [
        "nn.BatchNorm2d(4)",
        "nn.InstanceNorm2d(100)"
      ]
    },
    "CRITERION": {
      "choice": [
        "nn.CrossEntropyLoss()"
      ]
    },
    "OPTIMIZER": {
      "choice": [
        "torch.optim.Adam(model.parameters(), lr=0.01)",
        "torch.optim.Adadelta(model.parameters(), lr=0.01)",
        "torch.optim.RMSprop(model.parameters(), lr=0.01)"
      ]
    }
  },
  {
    "MODEL": "arch2",
    "CONV": {
      "choice": [
        "nn.Conv2d(1, 4, kernel_size=3, stride=1, padding=1)",
        "nn.Conv2d(1, 4, kernel_size=5, stride=1, padding=2)"
      ]
    },
    "DROPOUT": {
      "choice": [
        "nn.AlphaDropout()",
        "nn.Dropout()"
      ]
    },
    "ACTIVATION": {
      "choice": [
        "nn.ReLU(inplace=True)",
        "nn.ReLU6(inplace=True)",
        "nn.SELU(inplace=True)"
      ]
    },
    "POOLING": {
      "choice": [
        "nn.MaxPool2d(kernel_size=2, stride=2)",
        "nn.MaxPool2d(2, stride=2)"
      ]
    },
    "NORMALIZATION": {
      "choice": [
        "nn.BatchNorm2d(4)",
        "nn.InstanceNorm2d(100)"
      ]
    },
    "CONV2": {
      "choice": [
        "nn.Conv2d(4, 4, kernel_size=3, stride=1, padding=1)",
        "nn.Conv2d(4, 4, kernel_size=5, stride=1, padding=2)"
      ]
    },
    "DROPOUT2": {
      "choice": [
        "nn.AlphaDropout()",
        "nn.Dropout()"
      ]
    },
    "ACTIVATION2": {
      "choice": [
        "nn.ReLU(inplace=True)",
        "nn.ReLU6(inplace=True)",
        "nn.SELU(inplace=True)"
      ]
    },
    "POOLING2": {
      "choice": [
        "nn.MaxPool2d(kernel_size=2, stride=2)",
        "nn.MaxPool2d(2, stride=2)"
      ]
    },
    "NORMALIZATION2": {
      "choice": [
        "nn.BatchNorm2d(4)",
        "nn.InstanceNorm2d(100)"
      ]
    },
    "CRITERION": {
      "choice": [
        "nn.CrossEntropyLoss()"
      ]
    },
    "OPTIMIZER": {
      "choice": [
        "torch.optim.Adam(model.parameters(), lr=0.01)",
        "torch.optim.Adadelta(model.parameters(), lr=0.01)",
        "torch.optim.RMSprop(model.parameters(), lr=0.01)"
      ]
    }
  }
]