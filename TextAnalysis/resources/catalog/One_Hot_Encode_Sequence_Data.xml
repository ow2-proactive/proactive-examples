<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.8"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
	name="One_Hot_Encode_Sequence_Data" projectName="3. Text Analysis"
	priority="normal" onTaskError="continueJobExecution"
	maxNumberOfExecution="2">
	<description>
    <![CDATA[ Example of text analysis with machine learning. This workflow shows an example of One Hot Encode to encode your categorical sequence data in python. A one hot encoding is a representation of categorical variables as binary vectors. ]]>
  </description>
	<genericInformation>
		<info name="bucketName" value="machine-learning-workflows-tmp" />
		<info name="workflow.icon"
			value="/automation-dashboard/styles/patterns/img/wf-icons/text_analysis.png" />
		<info name="Documentation"
			value="https://doc.activeeon.com/latest/MLOS/MLOSUserGuide.html#_machine_learning_workflows_examples" />
		<info name="group" value="public-objects" />
	</genericInformation>
	<taskFlow>
		<task name="OneHotEncode_Task">
			<description>
        <![CDATA[ The simplest task, ran by a python engine. ]]>
      </description>
			<genericInformation>
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/text_analysis.png" />
			</genericInformation>
			<scriptExecutable>
				<script>
					<code language="python">
            <![CDATA[
#
# One Hot Encode Sequence Data in Python
# https://machinelearningmastery.com/how-to-one-hot-encode-sequence-data-in-python/
#

# define input string
data = 'hello world'
print(data)

# define universe of possible input values
alphabet = 'abcdefghijklmnopqrstuvwxyz '

# define a mapping of chars to integers
char_to_int = dict((c, i) for i, c in enumerate(alphabet))
int_to_char = dict((i, c) for i, c in enumerate(alphabet))

# integer encode input data
integer_encoded = [char_to_int[char] for char in data]
print(integer_encoded)

# one hot encode
onehot_encoded = list()
for value in integer_encoded:
  letter = [0 for _ in range(len(alphabet))]
  letter[value] = 1
  onehot_encoded.append(letter)
print(onehot_encoded)
]]>
					</code>
				</script>
			</scriptExecutable>
			<controlFlow block="none"></controlFlow>
		</task>
	</taskFlow>
</job>
