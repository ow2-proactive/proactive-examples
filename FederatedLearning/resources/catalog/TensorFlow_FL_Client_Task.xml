<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.13" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="TensorFlow_FL_Client_Task" onTaskError="continueJobExecution" priority="normal" projectName="2. TensorFlow Federated Learning Tasks" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd">
  <variables>
    <variable name="NATIVE_SCHEDULER" value="" advanced="true" description="Name of the Native Scheduler node source to use when the workflow tasks must be deployed inside a cluster such as SLURM, LSF, etc." group="Resource Management" hidden="false"/>
    <variable name="NATIVE_SCHEDULER_PARAMS" value="" advanced="true" description="Parameters given to the native scheduler (SLURM, LSF, etc) while requesting a ProActive node used to deploy the workflow tasks." group="Resource Management" hidden="false"/>
    <variable name="NODE_SOURCE_NAME" value="" advanced="true" description="If not empty, the workflow tasks will be run only on nodes belonging to the specified node source." group="Resource Management" hidden="false"/>
    <variable name="NODE_ACCESS_TOKEN" value="" advanced="true" description="If not empty, the workflow tasks will be run only on nodes that contains the specified token." group="Resource Management" hidden="false" />
    <variable name="CONTAINER_PLATFORM" value="docker" advanced="true" description="Container platform used for executing the workflow tasks." group="Container Parameters" hidden="false" model="PA:LIST(no-container,docker,podman,singularity)"/>
    <variable name="CONTAINER_GPU_ENABLED" value="False" description="If True, containers will run based on images containing libraries that are compatible with GPU." hidden="false" group="Container Parameters" model="PA:Boolean" advanced="true"/>
    <variable name="CONTAINER_IMAGE" value="docker://activeeon/flower:cpu" description="Name of the container image being used." group="Container Parameters" hidden="false" model="PA:LIST(docker://activeeon/flower:cpu)" advanced="true"/>
  </variables>
  <description>
    <![CDATA[ Simple Federated Learning Client task template using TensorFlow/Keras. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="federated-learning"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorflow.png"/>
<info name="NS" value="$NATIVE_SCHEDULER"/>
<info name="PYTHON_COMMAND" value="python3"/>
<info name="NODE_ACCESS_TOKEN" value="$NODE_ACCESS_TOKEN"/>
<info name="Documentation" value="PML/PMLUserGuide.html#_FL"/>
<info name="NS_BATCH" value="$NATIVE_SCHEDULER_PARAMS"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="TensorFlow_FL_Client_Task">
      <description>
        <![CDATA[ Simple Federated Learning Client task template using TensorFlow/Keras. ]]>
      </description>
      <variables>
        <variable advanced="false" hidden="false" inherited="false" name="TASK_NODE_SOURCE_NAME" value="$NODE_SOURCE_NAME" description="If not empty, the task will be run only on nodes belonging to the specified node source."/>
        <variable advanced="false" hidden="false" inherited="false" name="TASK_NODE_ACCESS_TOKEN" value="$NODE_ACCESS_TOKEN" description="If not empty, the task will be run only on nodes that contains the specified token."/>
        <variable advanced="false" hidden="false" inherited="false" model="PA:Boolean" name="CONTAINER_ROOTLESS_ENABLED" value="false" description="If true, the container will run in rootless mode."/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorflow.png"/>
        <info name="task.documentation" value="PML/PMLUserGuide.html#_FL"/>
        <info name="NODE_ACCESS_TOKEN" value="$TASK_NODE_ACCESS_TOKEN"/>
      </genericInformation>
      <selection>
        <script type="dynamic">
          <code language="groovy">
            <![CDATA[
selected = false
TASK_NAME = variables.get("PA_TASK_NAME")
TASK_NODE_SOURCE_NAME = variables.get("TASK_NODE_SOURCE_NAME")
println "TASK_NAME: " + TASK_NAME
println "TASK_NODE_SOURCE_NAME: " + TASK_NODE_SOURCE_NAME
println "proactive.node.nodesource: " + System.getProperty("proactive.node.nodesource")
if (TASK_NODE_SOURCE_NAME?.trim()) {
    selected = TASK_NODE_SOURCE_NAME.equals(System.getProperty("proactive.node.nodesource"))
} else {
    selected = true
}
println "selected: " + selected
]]>
          </code>
        </script>
      </selection>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")
print("BEGIN " + __file__)

import os
import numpy as np
import flwr as fl
import tensorflow as tf

from keras import backend
from keras.datasets.cifar import load_batch
from keras.utils.data_utils import get_file

# Make TensorFlow log less verbose
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "3"

"""CIFAR10 small images classification dataset."""
def load_data():
    """Loads the CIFAR10 dataset.
    This is a dataset of 50,000 32x32 color training images and 10,000 test
    images, labeled over 10 categories. See more info at the
    [CIFAR homepage](https://www.cs.toronto.edu/~kriz/cifar.html).
    The classes are:
    | Label | Description |
    |:-----:|-------------|
    |   0   | airplane    |
    |   1   | automobile  |
    |   2   | bird        |
    |   3   | cat         |
    |   4   | deer        |
    |   5   | dog         |
    |   6   | frog        |
    |   7   | horse       |
    |   8   | ship        |
    |   9   | truck       |
    Returns:
        Tuple of NumPy arrays: `(x_train, y_train), (x_test, y_test)`.
    **x_train**: uint8 NumPy array of grayscale image data with shapes
        `(50000, 32, 32, 3)`, containing the training data. Pixel values range
        from 0 to 255.
    **y_train**: uint8 NumPy array of labels (integers in range 0-9)
        with shape `(50000, 1)` for the training data.
    **x_test**: uint8 NumPy array of grayscale image data with shapes
        `(10000, 32, 32, 3)`, containing the test data. Pixel values range
        from 0 to 255.
    **y_test**: uint8 NumPy array of labels (integers in range 0-9)
        with shape `(10000, 1)` for the test data.
    Example:
    ```python
    (x_train, y_train), (x_test, y_test) = keras.datasets.cifar10.load_data()
    assert x_train.shape == (50000, 32, 32, 3)
    assert x_test.shape == (10000, 32, 32, 3)
    assert y_train.shape == (50000, 1)
    assert y_test.shape == (10000, 1)
    ```
    """
    # dirname = 'cifar-10-batches-py'
    # origin = 'https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz'
    # path = get_file(
    #     dirname,
    #     origin=origin,
    #     untar=True,
    #     file_hash=
    #     '6d958be074577803d12ecdefd02955f39262c83c16fe9348329d7fe0b5c001ce')
    path = '/tmp/dataset/cifar-10-batches-py'

    num_train_samples = 50000

    x_train = np.empty((num_train_samples, 3, 32, 32), dtype='uint8')
    y_train = np.empty((num_train_samples,), dtype='uint8')

    for i in range(1, 6):
        fpath = os.path.join(path, 'data_batch_' + str(i))
        (x_train[(i - 1) * 10000:i * 10000, :, :, :],
        y_train[(i - 1) * 10000:i * 10000]) = load_batch(fpath)

    fpath = os.path.join(path, 'test_batch')
    x_test, y_test = load_batch(fpath)

    y_train = np.reshape(y_train, (len(y_train), 1))
    y_test = np.reshape(y_test, (len(y_test), 1))

    if backend.image_data_format() == 'channels_last':
        x_train = x_train.transpose(0, 2, 3, 1)
        x_test = x_test.transpose(0, 2, 3, 1)

    x_test = x_test.astype(x_train.dtype)
    y_test = y_test.astype(y_train.dtype)

    return (x_train, y_train), (x_test, y_test)


if __name__ == "__main__":
    # Load and compile Keras model
    model = tf.keras.applications.MobileNetV2((32, 32, 3), classes=10, weights=None)
    model.compile("adam", "sparse_categorical_crossentropy", metrics=["accuracy"])

    # Load CIFAR-10 dataset
    # (x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()
    (x_train, y_train), (x_test, y_test) = load_data()

    # Define Flower client
    class CifarClient(fl.client.NumPyClient):
        def get_parameters(self):  # type: ignore
            return model.get_weights()

        def fit(self, parameters, config):  # type: ignore
            model.set_weights(parameters)
            model.fit(x_train, y_train, epochs=1, batch_size=32)
            return model.get_weights(), len(x_train), {}

        def evaluate(self, parameters, config):  # type: ignore
            model.set_weights(parameters)
            loss, accuracy = model.evaluate(x_test, y_test)
            return loss, len(x_test), {"accuracy": accuracy}

    # Start Flower client
    fl.client.start_numpy_client("0.0.0.0:8080", client=CifarClient())

print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            107
        </positionTop>
        <positionLeft>
            88
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2290px;
            height:3640px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-102px;left:-83px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_64" style="top: 107px; left: 88px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Simple Federated Learning Client task template using TensorFlow/Keras."><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorflow.png" width="20px">&nbsp;<span class="name">TensorFlow_FL_Client_Task</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 158px; top: 137px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
