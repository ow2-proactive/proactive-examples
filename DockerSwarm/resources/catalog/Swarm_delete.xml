<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.8"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
	name="Swarm_delete" projectName="Cloud Automation - Lifecycle"
	priority="normal" onTaskError="continueJobExecution"
	maxNumberOfExecution="2">
	<variables>
		<variable name="instance_name" value="try.activeeon.com" />
	</variables>
	<description>
    	<![CDATA[ . ]]>
    </description>
    <genericInformation>
        <info name="pca.service.id" value="Swarm" />
	<info name="pca.action.fromState" value="RUNNING" />
	<info name="pca.action.toState" value="FINISHED" />
	<info name="workflow.icon"
	      value="/automation-dashboard/styles/patterns/img/wf-icons/swarm.png" />
	<info name="group" value="public-objects" />
    </genericInformation>
	<taskFlow>
		<task name="Delete_Docker_PaaS">
			<genericInformation>
				<info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/swarm.png"/>
			</genericInformation>
			<scriptExecutable>
				<script>
					<code language="bash">
            <![CDATA[
nameMachine=$variables_instance_name

eval "$(docker-machine env ${nameMachine}-swarm-master)"
docker rm -f swarm-agent-master
docker rm -f swarm-agent

for x in `docker-machine ls --filter "name=^.*${nameMachine}-swarm-node-.*$" --format "{{.Name}}"`
do
	eval "$(docker-machine env $x)"
	docker rm -f swarm-agent
done

eval "$(docker-machine env ${nameMachine}-consul-machine)"
docker rm -f ${nameMachine}-swarm-consul

for x in `docker-machine ls --filter "name=^.*${nameMachine}.*$" --format "{{.Name}}"`
do
	docker-machine rm -y -f $x
done
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="end_deployment">
			<depends>
				<task ref="Delete_Docker_PaaS" />
			</depends>
			<scriptExecutable>
				<script>
					<code language="python">
						<![CDATA[
import json

instanceOutput = {}
instanceOutput['instance_status'] = "FINISHED"
instanceOutput['instance_endpoint'] = ""

result = json.dumps(instanceOutput)
print result
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
	</taskFlow>
</job>
