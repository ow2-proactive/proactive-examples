<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.8"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
	name="Swarm_delete" projectName="Cloud Automation - Lifecycle"
	priority="normal" onTaskError="continueJobExecution"
	maxNumberOfExecution="2">
	<variables>
		<variable name="instance_name" value="try.activeeon.com" />
	</variables>
	<description>
    	<![CDATA[ . ]]>
    </description>
    <genericInformation>
      	<info name="pca.service.id" value="HDFS-Spark"/>
		<info name="pca.states" value="(SWARM_DEPLOYED,PA_NODES_RESERVED)"/>
		<info name="Documentation" value="http://activeeon.com/resources/activeeon-deploy-swarm-hdfs-spark.pdf" />
		<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/swarm.png" />
		<info name="group" value="public-objects" />

	</genericInformation>
	<taskFlow>
		<task name="Delete_Docker_PaaS">
			<genericInformation>
				<info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/swarm.png"/>
			</genericInformation>
			<scriptExecutable>
				<script>
					<code language="bash">
            <![CDATA[
nameMachine=$variables_instance_name

eval "$(docker-machine env ${nameMachine}-swarm-master)"
docker rm -f swarm-agent-master
docker rm -f swarm-agent

for x in `docker-machine ls --filter "name=^.*${nameMachine}-swarm-node-.*$" --format "{{.Name}}"`
do
	eval "$(docker-machine env $x)"
	docker rm -f swarm-agent
done

eval "$(docker-machine env ${nameMachine}-consul-machine)"
docker rm -f ${nameMachine}-swarm-consul

for x in `docker-machine ls --filter "name=^.*${nameMachine}.*$" --format "{{.Name}}"`
do
	docker-machine rm -y -f $x
done
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="Update_service_state">
			<depends>
				<task ref="Delete_Docker_PaaS" />
			</depends>
			<inputFiles>
				<files  includes="cloud-automation-service-client-8.1.0.jar" accessMode="transferFromGlobalSpace"/>
				<files  includes="logging-interceptor-2.7.5.jar" accessMode="transferFromGlobalSpace"/>
				<files  includes="okhttp-2.7.5.jar" accessMode="transferFromGlobalSpace"/>
				<files  includes="okio-1.6.0.jar" accessMode="transferFromGlobalSpace"/>
				<files  includes="gson-2.6.2.jar" accessMode="transferFromGlobalSpace"/>
				<files  includes="spring-web-4.2.5.RELEASE.jar" accessMode="transferFromGlobalSpace"/>
			</inputFiles>
			<forkEnvironment >
				<additionalClasspath>
					<pathElement path="cloud-automation-service-client-8.1.0.jar"/>
					<pathElement path="logging-interceptor-2.7.5.jar"/>
					<pathElement path="okhttp-2.7.5.jar"/>
					<pathElement path="okio-1.6.0.jar"/>
					<pathElement path="gson-2.6.2.jar"/>
					<pathElement path="spring-web-4.2.5.RELEASE.jar"/>
				</additionalClasspath>
			</forkEnvironment>
			<scriptExecutable>
				<script>
					<code language="groovy">
						<![CDATA[
import io.swagger.client.ApiClient
import io.swagger.client.api.ServiceInstanceRestApi
import io.swagger.client.model.ServiceInstanceData

// Retrieve variables
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Update the related service instance
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
service_instance_data.setInstanceStatus("PA_NODES_RESERVED")
service_instance_data.getInstanceEndpoints().remove("consul_portal")
service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
	</taskFlow>
</job>
