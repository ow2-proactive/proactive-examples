<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="Test_ELK_Stack" projectName="4. ELK Stack Workflows" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="elasticsearch_instance_name" value="elasticsearch-server-1" />
    <variable name="kibana_instance_name" value="kibana-server-1" />
    <variable name="logstash_instance_name" value="logstash-server-1" />
  </variables>
  <description>
    <![CDATA[ Test the ELK stack as a service. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="elastic-logstash-kibana"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/elk_stack.png"/>
    <info name="Documentation" value="https://www.elastic.co/elk-stack"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Wait_For_Stop_Validation" onTaskError="pauseJob">
      <description>
        <![CDATA[ Task to pause the job and send a validation message to the notification service ]]>
      </description>
      <genericInformation>
        <info name="TASK.ICON" value="/automation-dashboard/styles/patterns/img/wf-icons/web_validation.png"/>
      </genericInformation>
      <depends>
        <task ref="Show_endpoints"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="python">
            <![CDATA[
print("--- BEGIN WaitForStopValidation ---")

# Please fill variables
notification_message = 'Please, validate to stop the ELK Stack services'

# Don't change code below unless you know what you are doing
from org.ow2.proactive.addons.webhook import Webhook

jobid = variables.get("PA_JOB_ID")
userName = variables.get("PA_USER")
schedulerURL = variables.get("PA_SCHEDULER_REST_URL")

# get sessionid
schedulerapi.connect()

# pause job
schedulerapi.pauseJob(jobid)

# send web validation
print "Sending web validation..."
url = schedulerURL.replace("/rest", "") +'/notification-service/notifications'
headers = '{\"Content-Type\" : \"application/json\" }'
notification_content = '{\"description\": \"'+notification_message+'\", \"jobId\": \"'+jobid+'\" , \"validation\": \"true\", \"userName\":  \"'+userName+'\"}'
Webhook.execute('POST', url, headers, notification_content);
print("Web Validation sent")

print("--- END WaitForStopValidation ---")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Start_Elasticsearch_Service" onTaskError="cancelJob">
      <description>
        <![CDATA[ Start the Elasticsearch server as a service. ]]>
      </description>
      <variables>
        <variable name="elasticsearch_service_id" value="Elasticsearch" inherited="false" />
        <variable name="elasticsearch_instance_name" value="elasticsearch-server-1" inherited="true" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.png"/>
        <info name="task.documentation" value="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN Start_Elasticsearch_Service ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription

// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def session_id = schedulerapi.getSession()

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Check existing service instances
def service_id = variables.get("elasticsearch_service_id")
def instance_name = variables.get("elasticsearch_instance_name")
println("*_service_id:    " + service_id)
println("*_instance_name: " + instance_name)

boolean instance_exists = false
List<ServiceInstanceData> service_instances = service_instance_rest_api.getServiceInstancesUsingGET()

for (ServiceInstanceData service_instance_data : service_instances) {
	if ( (service_instance_data.getServiceId() == service_id) && (service_instance_data.getInstanceStatus()  == "RUNNING")){
      if (service_instance_data.getVariables().get("INSTANCE_NAME") == instance_name) {
        instance_exists = true
        instance_id = service_instance_data.getInstanceId()
  		endpoint = service_instance_data.getInstanceEndpoints().entrySet().iterator().next().getValue()
        println("*_instance_id: " + instance_id)
        println("*_endpoint:    " + endpoint)
        variables.put("elasticsearch_instance_id", instance_id)
        variables.put("elasticsearch_endpoint", endpoint)
        break
      }
  	}
}

println("instance_exists: " + instance_exists)

if (!instance_exists){
  // Prepare service description
  ServiceDescription serviceDescription = new ServiceDescription()
  serviceDescription.setBucketName("cloud-automation")
  serviceDescription.setWorkflowName(service_id) 
  serviceDescription.putVariablesItem("INSTANCE_NAME", instance_name)
  
  // Run service
  def service_instance_data = service_instance_rest_api.createRunningServiceInstanceUsingPOST(session_id, serviceDescription)
  
  // Acquire service Instance ID
  def service_instance_id = service_instance_data.getInstanceId()
  println("service_instance_id: " + service_instance_id)
  
  // Create synchro channel
  channel = "Service_Instance_" + service_instance_id
  println("channel: " + channel)
  synchronizationapi.createChannelIfAbsent(channel, false)
  synchronizationapi.waitUntil(channel, "RUNNING", "{k,x -> x == true}")
  
  // Acquire service endpoint
  service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
  instance_name = service_instance_data.getVariables().get("INSTANCE_NAME")
  instance_id = service_instance_data.getInstanceId()
  endpoint = service_instance_data.getInstanceEndpoints().entrySet().iterator().next().getValue()
  
  println("INSTANCE_NAME: " + instance_name)
  println("*_instance_id: " + instance_id)
  println("*_endpoint: " + endpoint)
  
  variables.put("elasticsearch_instance_id", instance_id)
  variables.put("elasticsearch_endpoint", endpoint)
  
  result = '<meta http-equiv="refresh" content="1; url=' + variables.get("elasticsearch_endpoint") + '" />'
  result+= '<h2><span style="color:black">Please wait while redirecting...</span></h2>'
  resultMetadata.put("content.type", "text/html")
}

println("--- END Start_Elasticsearch_Service ---")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
    </task>
    <task name="Start_Logstash_Service" onTaskError="cancelJob">
      <description>
        <![CDATA[ Start the Logstash server as a service. ]]>
      </description>
      <variables>
        <variable name="logstash_service_id" value="Logstash" inherited="false" />
        <variable name="logstash_instance_name" value="logstash-server-1" inherited="true" />
        <variable name="elasticsearch_endpoint" value="" inherited="true" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/logstash.png"/>
        <info name="task.documentation" value="https://www.elastic.co/guide/en/logstash/6.2/index.html"/>
      </genericInformation>
      <depends>
        <task ref="Start_Elasticsearch_Service"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN Start_Logstash_Service ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription

// Check elasticsearch endpoint
def elasticsearch_endpoint = variables.get("elasticsearch_endpoint")
println("elasticsearch_endpoint: " + elasticsearch_endpoint)
assert (elasticsearch_endpoint != null) : "endpoint must not be null"
assert (elasticsearch_endpoint.trim() != '') : "endpoint must not be empty"

// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def session_id = schedulerapi.getSession()

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Check existing service instances
def service_id = variables.get("logstash_service_id")
def instance_name = variables.get("logstash_instance_name")
println("*_service_id:    " + service_id)
println("*_instance_name: " + instance_name)

boolean instance_exists = false
List<ServiceInstanceData> service_instances = service_instance_rest_api.getServiceInstancesUsingGET()

for (ServiceInstanceData service_instance_data : service_instances)
{
  if ( (service_instance_data.getServiceId() == service_id) && (service_instance_data.getInstanceStatus()  == "RUNNING") )
  {
    if (service_instance_data.getVariables().get("INSTANCE_NAME") == instance_name)
    {
      instance_exists = true
      instance_id = service_instance_data.getInstanceId()
      endpoint = service_instance_data.getInstanceEndpoints().entrySet().iterator().next().getValue()
      println("*_instance_id: " + instance_id)
      println("*_endpoint:    " + endpoint)
      variables.put("logstash_instance_id", instance_id)
      variables.put("logstash_endpoint", endpoint)
      break
    }
  }
}

println("instance_exists: " + instance_exists)

if (!instance_exists)
{
  // Prepare service description
  ServiceDescription serviceDescription = new ServiceDescription()
  serviceDescription.setBucketName("cloud-automation")
  serviceDescription.setWorkflowName(service_id)
  serviceDescription.putVariablesItem("elasticsearch_endpoint", elasticsearch_endpoint)
  serviceDescription.putVariablesItem("INSTANCE_NAME", instance_name)
  
  // Run service
  def service_instance_data = service_instance_rest_api.createRunningServiceInstanceUsingPOST(session_id, serviceDescription)
  
  // Acquire service Instance ID
  def service_instance_id = service_instance_data.getInstanceId()
  println("service_instance_id: " + service_instance_id)
  
  // Create synchro channel
  channel = "Service_Instance_" + service_instance_id
  println("channel: " + channel)
  synchronizationapi.createChannelIfAbsent(channel, false)
  synchronizationapi.waitUntil(channel, "RUNNING", "{k,x -> x == true}")
  
  // Acquire service endpoint
  service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
  instance_name = service_instance_data.getVariables().get("INSTANCE_NAME")
  instance_id = service_instance_data.getInstanceId()
  endpoint = service_instance_data.getInstanceEndpoints().entrySet().iterator().next().getValue()
  
  println("INSTANCE_NAME: " + instance_name)
  println("*_instance_id: " + instance_id)
  println("*_endpoint: " + endpoint)
  
  variables.put("logstash_instance_id", instance_id)
  variables.put("logstash_endpoint", endpoint)
  
  result = '<meta http-equiv="refresh" content="1; url=' + endpoint + '" />'
  result+= '<h2><span style="color:black">Please wait while redirecting...</span></h2>'
  resultMetadata.put("content.type", "text/html")
}

println("--- END Start_Logstash_Service ---")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
    </task>
    <task name="Start_Kibana_Service" onTaskError="cancelJob">
      <description>
        <![CDATA[ Start the Kibana server as a service. ]]>
      </description>
      <variables>
        <variable name="kibana_service_id" value="Kibana" inherited="false" />
        <variable name="kibana_instance_name" value="kibana-server-1" inherited="true" />
        <variable name="elasticsearch_endpoint" value="" inherited="true" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/kibana.png"/>
        <info name="task.documentation" value="https://www.elastic.co/guide/en/kibana/current/introduction.html"/>
      </genericInformation>
      <depends>
        <task ref="Start_Elasticsearch_Service"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN Start_Kibana_Service ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription

// Check elasticsearch endpoint
def elasticsearch_endpoint = variables.get("elasticsearch_endpoint")
println("elasticsearch_endpoint: " + elasticsearch_endpoint)
assert (elasticsearch_endpoint != null) : "endpoint must not be null"
assert (elasticsearch_endpoint.trim() != '') : "endpoint must not be empty"

// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def session_id = schedulerapi.getSession()

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Check existing service instances
def service_id = variables.get("kibana_service_id")
def instance_name = variables.get("kibana_instance_name")
println("*_service_id:    " + service_id)
println("*_instance_name: " + instance_name)

boolean instance_exists = false
List<ServiceInstanceData> service_instances = service_instance_rest_api.getServiceInstancesUsingGET()

for (ServiceInstanceData service_instance_data : service_instances)
{
  if ( (service_instance_data.getServiceId() == service_id) && (service_instance_data.getInstanceStatus()  == "RUNNING") )
  {
    if (service_instance_data.getVariables().get("INSTANCE_NAME") == instance_name)
    {
      instance_exists = true
      instance_id = service_instance_data.getInstanceId()
      endpoint = service_instance_data.getInstanceEndpoints().entrySet().iterator().next().getValue()
      println("*_instance_id: " + instance_id)
      println("*_endpoint:    " + endpoint)
      variables.put("kibana_instance_id", instance_id)
      variables.put("kibana_endpoint", endpoint)
      break
    }
  }
}

println("instance_exists: " + instance_exists)

if (!instance_exists)
{
  // Prepare service description
  ServiceDescription serviceDescription = new ServiceDescription()
  serviceDescription.setBucketName("cloud-automation")
  serviceDescription.setWorkflowName(service_id)
  serviceDescription.putVariablesItem("elasticsearch_endpoint", elasticsearch_endpoint)
  serviceDescription.putVariablesItem("INSTANCE_NAME", instance_name)
  
  // Run service
  def service_instance_data = service_instance_rest_api.createRunningServiceInstanceUsingPOST(session_id, serviceDescription)
  
  // Acquire service Instance ID
  def service_instance_id = service_instance_data.getInstanceId()
  println("service_instance_id: " + service_instance_id)
  
  // Create synchro channel
  channel = "Service_Instance_" + service_instance_id
  println("channel: " + channel)
  synchronizationapi.createChannelIfAbsent(channel, false)
  synchronizationapi.waitUntil(channel, "RUNNING", "{k,x -> x == true}")
  
  // Acquire service endpoint
  service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
  instance_name = service_instance_data.getVariables().get("INSTANCE_NAME")
  instance_id = service_instance_data.getInstanceId()
  endpoint = service_instance_data.getInstanceEndpoints().entrySet().iterator().next().getValue()
  
  println("INSTANCE_NAME: " + instance_name)
  println("*_instance_id: " + instance_id)
  println("*_endpoint: " + endpoint)
  
  variables.put("kibana_instance_id", instance_id)
  variables.put("kibana_endpoint", endpoint)
  
  result = '<meta http-equiv="refresh" content="1; url=' + endpoint + '" />'
  result+= '<h2><span style="color:black">Please wait while redirecting...</span></h2>'
  resultMetadata.put("content.type", "text/html")
}

println("--- END Start_Kibana_Service ---")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
    </task>
    <task name="Show_endpoints" >
      <description>
        <![CDATA[ The simplest task, ran by a python engine. ]]>
      </description>
      <depends>
        <task ref="Start_Kibana_Service"/>
        <task ref="Start_Logstash_Service"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
print("--- BEGIN Show_endpoints ---")

print("elasticsearch_endpoint (from python): " + variables.get("elasticsearch_endpoint"))
print("logstash_endpoint (from python):      " + variables.get("logstash_endpoint"))
print("kibana_endpoint (from python):        " + variables.get("kibana_endpoint"))

print("--- END Show_endpoints ---")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Finish_Kibana_Service" onTaskError="cancelJob">
      <description>
        <![CDATA[ Finish the Kibana service. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/kibana.png"/>
        <info name="task.documentation" value="https://www.elastic.co/guide/en/kibana/current/introduction.html"/>
      </genericInformation>
      <depends>
        <task ref="Wait_For_Stop_Validation"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN Finish_Kibana_Service ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription

// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def session_id = schedulerapi.getSession()

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

instance_id = variables.get("kibana_instance_id")
println("*_instance_id: " + instance_id)
assert instance_id != null

// Finish service
ServiceDescription service = new ServiceDescription()
service.setBucketName("cloud-automation") 
service.setWorkflowName("Finish_Kibana")
service_instance_rest_api.launchServiceInstanceActionUsingPUT(session_id, instance_id, service)

println("--- END Finish_Kibana_Service ---")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
    </task>
    <task name="Finish_Logstash_Service" onTaskError="cancelJob">
      <description>
        <![CDATA[ Finish the Logstash service. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/logstash.png"/>
        <info name="task.documentation" value="https://www.elastic.co/guide/en/logstash/6.2/index.html"/>
      </genericInformation>
      <depends>
        <task ref="Wait_For_Stop_Validation"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN Finish_Logstash_Service ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription

// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def session_id = schedulerapi.getSession()

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

instance_id = variables.get("logstash_instance_id")
println("*_instance_id: " + instance_id)
assert instance_id != null

// Finish service
ServiceDescription service = new ServiceDescription()
service.setBucketName("cloud-automation") 
service.setWorkflowName("Finish_Logstash")
service_instance_rest_api.launchServiceInstanceActionUsingPUT(session_id, instance_id, service)

println("--- END Finish_Logstash_Service ---")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
    </task>
    <task name="Finish_Elasticsearch_Service" onTaskError="cancelJob">
      <description>
        <![CDATA[ Finish the Elasticsearch service. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.png"/>
        <info name="task.documentation" value="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html"/>
      </genericInformation>
      <depends>
        <task ref="Finish_Logstash_Service"/>
        <task ref="Finish_Kibana_Service"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("--- BEGIN Finish_Elasticsearch_Service ---")

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription

// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def session_id = schedulerapi.getSession()

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

instance_id = variables.get("elasticsearch_instance_id")
println("*_instance_id: " + instance_id)
assert instance_id != null

// Finish service
ServiceDescription service = new ServiceDescription()
service.setBucketName("cloud-automation") 
service.setWorkflowName("Finish_Elasticsearch")
service_instance_rest_api.launchServiceInstanceActionUsingPUT(session_id, instance_id, service)

println("--- END Finish_Elasticsearch_Service ---")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1122px;
            height:803px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-108px;left:-351px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_3417" style="top: 497px; left: 446px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/web_validation.png" width="20px">&nbsp;<span class="name">Wait_For_Stop_Validation</span></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_3420" style="top: 113px; left: 446px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.png" width="20px">&nbsp;<span class="name">Start_Elasticsearch_Service</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_3423" style="top: 241px; left: 358.75px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/logstash.png" width="20px">&nbsp;<span class="name">Start_Logstash_Service</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_3426" style="top: 241px; left: 533.25px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/kibana.png" width="20px">&nbsp;<span class="name">Start_Kibana_Service</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_3429" style="top: 369px; left: 446px;"><a class="task-name"><img src="/studio/images/Python.png" width="20px">&nbsp;<span class="name">Show_endpoints</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_3432" style="top: 625px; left: 356px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/kibana.png" width="20px">&nbsp;<span class="name">Finish_Kibana_Service</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_3435" style="top: 625px; left: 536px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/logstash.png" width="20px">&nbsp;<span class="name">Finish_Logstash_Service</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_3438" style="top: 753px; left: 446px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.png" width="20px">&nbsp;<span class="name">Finish_Elasticsearch_Service</span></a></div><svg style="position:absolute;left:490px;top:408.5px" width="41.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 20.5 88 C 30.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M21.580432,66.303232 L22.50875633562492,45.13395676611712 L17.538877080299457,52.899283558177174 L9.1048078938021,49.17551168581767 L21.580432,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M21.580432,66.303232 L22.50875633562492,45.13395676611712 L17.538877080299457,52.899283558177174 L9.1048078938021,49.17551168581767 L21.580432,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:418px;top:152.5px" width="118.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 107.5 50 97.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M9.709453124999998,62.2538125 L30.2437526797219,57.02480286174654 L21.37350865010756,54.51108631943493 L22.50102649915683,45.36074733663898 L9.709453124999998,62.2538125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M9.709453124999998,62.2538125 L30.2437526797219,57.02480286174654 L21.37350865010756,54.51108631943493 L22.50102649915683,45.36074733663898 L9.709453124999998,62.2538125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:515.5px;top:152.5px" width="94.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 73.5 88 C 83.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M67.654381125,63.115491500000005 L57.42216239766397,44.56012300686698 L57.22354068851642,53.77752770757614 L48.084198605240104,54.99096344335056 L67.654381125,63.115491500000005" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M67.654381125,63.115491500000005 L57.42216239766397,44.56012300686698 L57.22354068851642,53.77752770757614 L48.084198605240104,54.99096344335056 L67.654381125,63.115491500000005" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:490px;top:280.5px" width="120" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 109 50 99 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M10.433213999999998,61.830692 L31.034253057193034,56.87113660016756 L22.197700652183677,54.24143289185301 L23.444993949046044,45.10664994798388 L10.433213999999998,61.830692" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M10.433213999999998,61.830692 L31.034253057193034,56.87113660016756 L22.197700652183677,54.24143289185301 L23.444993949046044,45.10664994798388 L10.433213999999998,61.830692" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:418px;top:280.5px" width="93" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 72 88 C 82 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M66.69464400000001,63.55423600000001 L56.78563746355707,44.82427098506388 L56.427253350405884,54.03684721690267 L47.26824868045973,55.09166163465802 L66.69464400000001,63.55423600000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M66.69464400000001,63.55423600000001 L56.78563746355707,44.82427098506388 L56.427253350405884,54.03684721690267 L47.26824868045973,55.09166163465802 L66.69464400000001,63.55423600000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:414.5px;top:536.5px" width="117" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 106 50 96 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M9.515812499999996,62.2538125 L30.013691577863277,56.88380753638082 L21.126381888345296,54.43110973954572 L22.190988817409,45.273238148035524 L9.515812499999996,62.2538125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M9.515812499999996,62.2538125 L30.013691577863277,56.88380753638082 L21.126381888345296,54.43110973954572 L22.190988817409,45.273238148035524 L9.515812499999996,62.2538125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:510.5px;top:536.5px" width="109" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 88 88 C 98 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M79.979328,62.682047999999995 L68.09876300058585,45.13633127782829 L68.74093504096038,54.33348383014367 L59.75019883072952,56.374724236867905 L79.979328,62.682047999999995" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M79.979328,62.682047999999995 L68.09876300058585,45.13633127782829 L68.74093504096038,54.33348383014367 L59.75019883072952,56.374724236867905 L79.979328,62.682047999999995" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:518.5px;top:664.5px" width="101" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 90 50 80 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M6.617807499999998,63.115491500000005 L26.49664200533075,55.778466305163086 L17.413008373938954,54.20125355773553 L17.58240406306627,44.98326543122413 L6.617807499999998,63.115491500000005" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M6.617807499999998,63.115491500000005 L26.49664200533075,55.778466305163086 L17.413008373938954,54.20125355773553 L17.58240406306627,44.98326543122413 L6.617807499999998,63.115491500000005" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:414.5px;top:664.5px" width="125" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 104 88 C 114 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M92.894956,61.830692 L79.5295735890036,45.38786520507729 L80.97133884859372,54.493979246546296 L72.19286083554991,57.31148235648355 L92.894956,61.830692" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M92.894956,61.830692 L79.5295735890036,45.38786520507729 L80.97133884859372,54.493979246546296 L72.19286083554991,57.31148235648355 L92.894956,61.830692" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 511px; top: 527px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 511px; top: 487px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 516px; top: 143px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 418.5px; top: 271px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 418.5px; top: 231px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 589.5px; top: 271px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 589.5px; top: 231px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 490.5px; top: 399px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 490.5px; top: 359px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 415px; top: 655px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 415px; top: 615px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 599px; top: 655px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 599px; top: 615px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 519px; top: 783px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 519px; top: 743px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>