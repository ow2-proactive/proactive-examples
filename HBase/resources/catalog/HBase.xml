<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="HBase" tags="Big Data,Service Automation,Analytics,HBase" projectName="2. Big Data" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
    <variables>
        <variable name="INSTANCE_NAME" value="HBase-$PA_JOB_ID" model="PA:NOT_EMPTY_STRING"    />
        <variable name="swarm_service_instance_id" value="xx" model="PA:NOT_EMPTY_STRING" description="This variable must be set to the targeted Docker_Swarm service instance id."  advanced="false" hidden="false"/>
        <variable name="hdfs_service_instance_id" value="xx" model="PA:NOT_EMPTY_STRING"   advanced="false" hidden="false"/>
        <variable name="ZOOKEEPER_INSTANCE_ID" value="xx" model="PA:NOT_EMPTY_STRING"   advanced="false" hidden="false"/>
        <variable name="nb_hbase_region_servers" value="3"    advanced="false" hidden="false"/>
    </variables>
    <description>
        <![CDATA[ Deploy a HBase platform on an existing HDFS and Zookeeper ensemble with a master server, multiple Regions servers, a Backup master, a Thrift server and a Rest server.
Before running the service you need to start those service in the order shown below :
1- Docker Swarm
2- HDFS
3- Zookeeper ]]>
    </description>
    <genericInformation>
        <info name="bucketName" value="service-automation"/>
        <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png"/>
        <info name="pca.states" value="(VOID,RUNNING)"/>
        <info name="Documentation" value="https://hbase.apache.org/book.html"/>
        <info name="pca.service.id" value="HBase"/>
        <info name="group" value="public-objects"/>
    </genericInformation>
    <taskFlow>
        <task name="retrieve_services_variables"




              fork="true">
            <genericInformation>
                <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png"/>
            </genericInformation>
            <pre>
                <script>
                    <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Retrieve_variables_from_service_instance_id/raw" language="groovy">
                        <arguments>
                            <argument value="$swarm_service_instance_id"/>
                            <argument value="swarm_token_name"/>
                            <argument value="PSA_%{INSTANCE_NAME}"/>
                            <argument value="swarm_manager_and_workers_pa_node_names"/>
                            <argument value="swarm_manager_and_workers_pa_node_names"/>
                        </arguments>
                    </file>
                </script>
            </pre>
            <scriptExecutable>
                <script>
                    <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Retrieve_variables_from_service_instance_id/raw" language="groovy">
                        <arguments>
                            <argument value="$hdfs_service_instance_id"/>
                            <argument value="hdfs_network_name"/>
                            <argument value="hdfs_network_name"/>
                            <argument value="hdfs_namenode_host_port"/>
                            <argument value="hdfs_namenode_host_port"/>
                        </arguments>
                    </file>
                </script>
            </scriptExecutable>
            <post>
                <script>
                    <code language="groovy">
                        <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription


println("BEGIN " + variables.get("PA_TASK_NAME"))

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()
println "session id : " + sessionId

// Define PCA URL
def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')

// Connect to APIs
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

def serviceId = "Zookeeper"
def instanceID = variables.get("ZOOKEEPER_INSTANCE_ID") as Integer
println("ZOOKEEPER_SERVICE_ID:    " + serviceId)
println("ZOOKEEPER_INSTANCE_NAME: " + instanceID)

/*********************************************************************************
*                     Using existing instance (if it exists)                     *
/********************************************************************************/
boolean instance_exists = false
List<ServiceInstanceData> service_instances = serviceInstanceRestApi.getServiceInstances(sessionId, null)

for (ServiceInstanceData serviceInstanceData : service_instances) {
    if ( (serviceInstanceData.getServiceId() == serviceId) && (serviceInstanceData.getInstanceStatus()  == "RUNNING")){
         println("instance id = " +  serviceInstanceData.getInstanceId() )
        if (serviceInstanceData.getInstanceId() == instanceID) {

            println("instance id = " +  serviceInstanceData.getInstanceId() )

            instance_exists = true
            def instanceId = serviceInstanceData.getInstanceId()
            endpoint = serviceInstanceData.getDeployments().iterator().next().getEndpoint().getUrl()
            println("ZOOKEEPER_INSTANCE_ID: " + instanceId)
            println("ZOOKEEPER_ENDPOINT:    " + endpoint)
            endpoint = endpoint.replace("zookeeper://", "")
            variables.put("ZOOKEEPER_INSTANCE_ID", instanceId)
            variables.put("ZOOKEEPER_ENDPOINT", endpoint)
            break
        }
      }
}

if (instance_exists == false){
    println("########### Zookeeper instance doesn't exist ############")
    throw new IllegalStateException("Zookeeper instance doesn't exist")
}
]]>
                    </code>
                </script>
            </post>
            <metadata>
                <positionTop>
                    60.78125
                </positionTop>
                <positionLeft>
                    539.25
                </positionLeft>
            </metadata>
        </task>
        <task name="start_hbase_master"




              fork="true"
              runAsMe="true" >
            <genericInformation>
                <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png"/>
                <info name="NODE_ACCESS_TOKEN" value="$swarm_token_name"/>
            </genericInformation>
            <depends>
                <task ref="retrieve_services_variables"/>
            </depends>
            <selection>
                <script type="dynamic">
                    <code language="groovy">
                        <![CDATA[
// The overlay network must be created on the swarm manager host
def swarm_manager_pa_node_name = variables.get("swarm_manager_and_workers_pa_node_names").split(",")[3]

selected = (nodename == swarm_manager_pa_node_name)
]]>
                    </code>
                </script>
            </selection>
            <scriptExecutable>
                <script>
                    <code language="groovy">
                        <![CDATA[
// Retrieve variables
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long
def instance_name = variables.get("INSTANCE_NAME")
def job_id = variables.get("PA_JOB_ID")
def pa_node_name = variables.get("PA_NODE_NAME")
def pa_node_host = variables.get("PA_NODE_HOST")
def zookeeper_endpoint = variables.get("ZOOKEEPER_ENDPOINT")
def targeted_network_name = variables.get("hdfs_network_name")
def hdfs_path = variables.get("hdfs_namenode_host_port")
def task_replication_id = variables.get("PA_TASK_REPLICATION") as Integer
def hbase_docker_image_name = "activeeon/hadoop-hbase-phoenix:latest"
def hbase_master_container_name = instance_name + "-hbase-master-"

// Find a free port
def hbase_gui_port = null
try {
  def server = new ServerSocket(0)
  hbase_gui_port = server.getLocalPort()
  server.close()
} catch (IOException e) {
  throw new RuntimeException( "Failed to find free local port to bind the agent to", e);
}

cmd = ["docker", "run", "--rm","-v", localspace + ":" + localspace, "-dit", "--publish", hbase_gui_port + ":" + 16010, "--name", hbase_master_container_name, "--net", targeted_network_name, hbase_docker_image_name]
println cmd
def hbase_container_id = new StringBuilder()
cmd.execute().waitForProcessOutput(hbase_container_id, System.err)

//Commande inspect
cmd = ["docker", "inspect", hbase_master_container_name, "--format", "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}"]
println cmd
def hbase_container_ip = new StringBuilder()
cmd.execute().waitForProcessOutput(hbase_container_ip, System.err)

// hbase configuration
def hbase_site_config_command = "sed -i 's/HDFS-replacement/" + hdfs_path + "/g' \$HBASE_HOME/conf/hbase-site.xml"
def hbase_site_config_command2 = "sed -i 's/ZOOKEEPER-replacement/" + zookeeper_endpoint + "/g' \$HBASE_HOME/conf/hbase-site.xml"
def hbase_hdfs_site_config = "sed -i 's/HDFS-replacement/" + hdfs_path + "/g' \$HBASE_HOME/conf/hdfs-site.xml"
def hbase_core_site_config = "sed -i 's/HDFS-replacement/" + hdfs_path + "/g' \$HBASE_HOME/conf/core-site.xml"
def hdfs_core_site_config = "cp -fr \$HBASE_HOME/conf/core-site.xml \$HADOOP_HOME/etc/hadoop/"
def hdfs_hdfs_site_config = "cp -fr \$HBASE_HOME/conf/hdfs-site.xml \$HADOOP_HOME/etc/hadoop/"

def command_in_container = hbase_site_config_command + ";" + hbase_site_config_command2 + ";"  + hbase_hdfs_site_config + ";" + hbase_core_site_config + ";" + hdfs_core_site_config + ";" + hdfs_hdfs_site_config
cmd = ["docker", "exec", hbase_master_container_name, "/bin/sh", "-c", command_in_container]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

//starting hbase master
def start_hbase_master = "bin/hbase-daemon.sh start master"
cmd = ["docker", "exec", hbase_master_container_name, "/bin/sh", "-c", start_hbase_master]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

// Propagate variables
variables.put("hbase_gui_port", hbase_gui_port)
variables.put("hbase_pa_node_name", pa_node_name)
variables.put("hbase_docker_image_name", hbase_docker_image_name)
variables.put("hbase_master_container_name", hbase_master_container_name)
variables.put("hbase_deployements_pa_node_names", pa_node_name)
//for the workflow examples
variables.put("zookeeper_endpoint", zookeeper_endpoint)
variables.put("hdfs_path", hdfs_path)
variables.put("targeted_network_name", targeted_network_name)
//resultMap
resultMap.put("hbaseservice_instance_id", service_instance_id)

// Propagate variables to the current post script
new File(localspace, "hbase_container_id").text = hbase_container_id.toString()
new File(localspace, "hbase_container_name").text = hbase_master_container_name
]]>
                    </code>
                </script>
            </scriptExecutable>
            <controlFlow >
                <replicate>
                    <script>
                        <code language="groovy">
                            <![CDATA[
runs = variables.get("nb_hbase_region_servers")
]]>
                        </code>
                    </script>
                </replicate>
            </controlFlow>
            <post>
                <script>
                    <code language="groovy">
                        <![CDATA[
import groovy.json.JsonOutput

// Retrieve the script arguments
def hbase_container_id = new File(localspace, "hbase_container_id").text
def hbase_container_name = new File(localspace, "hbase_container_name").text

// Retrieve variables
def instance_name = variables.get("INSTANCE_NAME")
def pa_node_name = variables.get("PA_NODE_NAME")
def pa_node_host = variables.get("PA_NODE_HOST")
def pa_node_source_name = variables.get("PA_NODE_SOURCE")
def pa_node_url = variables.get("PA_NODE_URL")
def job_id = variables.get("PA_JOB_ID")
def pca_public_rest_url = variables.get('PA_CLOUD_AUTOMATION_REST_PUBLIC_URL')
def instance_id = variables.get("PCA_INSTANCE_ID")
def hbase_gui_port = variables.get("hbase_gui_port")
def hbase_endpoint_url = "http://" + pa_node_host + ":" + hbase_gui_port

// Build the proxified url
def endpoint_id = "hbase-master-" + job_id
def proxyfied_url = pca_public_rest_url + "/services/" + instance_id + "/endpoints/" + endpoint_id + "/"

// Create the deployment map and json
def deployment_map = ["endpoint":["id":endpoint_id,"url":hbase_endpoint_url,"proxyfied_url":proxyfied_url],"node":["name":pa_node_name,"host":pa_node_host,"node_source_name":pa_node_source_name,"url":pa_node_url],"container":["id":hbase_container_id,"name":hbase_container_name]]
def deployment_json = JsonOutput.toJson(deployment_map)

// Propagate the deployment map
variables.put("hbase_deployment_json_0", deployment_json)
println "master = hbase_deployment_json_0"

// Add token to the current node (RM API)
rmapi.connect()
nodeUrl = variables.get("PA_NODE_URL")
println "Adding token PSA_" + instance_name + " to node " + nodeUrl
rmapi.addNodeToken(nodeUrl, "PSA_" + instance_name)
]]>
                    </code>
                </script>
            </post>
            <metadata>
                <positionTop>
                    188.78125
                </positionTop>
                <positionLeft>
                    539.25
                </positionLeft>
            </metadata>
        </task>
        <task name="propagate_variables_and_update_deployments_with_service"




              fork="true"
              runAsMe="true" >
            <genericInformation>
                <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png"/>
                <info name="NODE_ACCESS_TOKEN" value="PSA_$INSTANCE_NAME"/>
            </genericInformation>
            <depends>
                <task ref="merge_json_deployments_and_propagate"/>
            </depends>
            <pre>
                <script>
                    <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Propagate_variables_to_current_service/raw" language="groovy">
                        <arguments>
                            <argument value="hbase_pa_node_name"/>
                            <argument value="VARIABLE_VALUE"/>
                            <argument value="nb_deployments"/>
                            <argument value="VARIABLE_VALUE"/>
                            <argument value="hbase_deployements_pa_node_names"/>
                            <argument value="VARIABLE_VALUE"/>
                            <argument value="zookeeper_endpoint"/>
                            <argument value="VARIABLE_VALUE"/>
                            <argument value="hdfs_path"/>
                            <argument value="VARIABLE_VALUE"/>
                            <argument value="targeted_network_name"/>
                            <argument value="VARIABLE_VALUE"/>
                        </arguments>
                    </file>
                </script>
            </pre>
            <scriptExecutable>
                <script>
                    <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Add_deployments_and_update_service/raw" language="groovy">
                        <arguments>
                            <argument value="hbase_deployment_json_"/>
                            <argument value="$nb_deployments_total"/>
                        </arguments>
                    </file>
                </script>
            </scriptExecutable>
            <cleaning>
                <script>
                    <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Clean_Start_Service/raw" language="groovy"></file>
                </script>
            </cleaning>
            <metadata>
                <positionTop>
                    700.78125
                </positionTop>
                <positionLeft>
                    539.25
                </positionLeft>
            </metadata>
        </task>
        <task name="loop_over_hbase_status"




              fork="true">
            <genericInformation>
                <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png"/>
                <info name="NODE_ACCESS_TOKEN" value="PSA_$INSTANCE_NAME"/>
            </genericInformation>
            <depends>
                <task ref="propagate_variables_and_update_deployments_with_service"/>
            </depends>
            <selection>
                <script type="dynamic">
                    <code language="groovy">
                        <![CDATA[
def targeted_pa_node_name = variables.get("hbase_deployements_pa_node_names").split(",")[0]

selected = (nodename == targeted_pa_node_name)
]]>
                    </code>
                </script>
            </selection>
            <pre>
                <script>
                    <code language="groovy">
                        <![CDATA[
// Retrieve variables
def hbase_master_container_name = variables.get("hbase_master_container_name")
def hbase_master_backup_container_name = variables.get("hbase_master_backup_container_name")
def instance_name = variables.get("INSTANCE_NAME")

// Ensure hbase  is running
def cmd = ["docker", "exec", hbase_master_container_name, "jps"]
println cmd
def docker_exec_jps_output = new StringBuilder()
cmd.execute().waitForProcessOutput(docker_exec_jps_output, System.err)
def is_hbase_master_ok = docker_exec_jps_output.toString().contains("Master")
println "###### DEBUG is_hbase_master_ok  ##### " + is_hbase_master_ok + " value = " + docker_exec_jps_output

 cmd = ["docker", "exec", hbase_master_backup_container_name, "jps"]
println cmd
docker_exec_jps_output = new StringBuilder()
cmd.execute().waitForProcessOutput(docker_exec_jps_output, System.err)
def is_hbase_backup_master_ok = docker_exec_jps_output.toString().contains("Master")
println "###### DEBUG is_hbase_backup_master_ok  ##### " + is_hbase_backup_master_ok + " value = " + docker_exec_jps_output

if (!is_hbase_master_ok) {
    if (is_hbase_backup_master_ok) {
        println "##### Running on Backup !! #####"
    }
    else println "#### No Master Is Running !! ####"
}

def is_hbase_ok = is_hbase_master_ok || is_hbase_backup_master_ok
println "DEBUG is_hbase_ok " + is_hbase_ok
def is_docker_based_service = true
def token_to_remove = "PSA_" + instance_name
def main_container_name = hbase_master_container_name

// Propagate to the current task script
new File(localspace, "arguments.txt").text = String.valueOf(is_hbase_ok) + "," + String.valueOf(is_docker_based_service) + "," + token_to_remove + "," + main_container_name
]]>
                    </code>
                </script>
            </pre>
            <scriptExecutable>
                <script>
                    <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Loop_over_service_instance_status/raw" language="groovy"></file>
                </script>
            </scriptExecutable>
            <controlFlow >
                <loop target="loop_over_hbase_status">
                    <script>
                        <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Fetch_Logs/raw" language="groovy"></file>
                    </script>
                </loop>
            </controlFlow>
            <metadata>
                <positionTop>
                    828.78125
                </positionTop>
                <positionLeft>
                    539.25
                </positionLeft>
            </metadata>
        </task>
        <task name="start_hbase_region_servers"




              fork="true">
            <genericInformation>
                <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png"/>
                <info name="NODE_ACCESS_TOKEN" value="$swarm_token_name"/>
            </genericInformation>
            <depends>
                <task ref="start_hbase_master"/>
            </depends>
            <selection>
                <script type="dynamic">
                    <code language="groovy">
                        <![CDATA[
def task_replication_id = variables.get("PA_TASK_REPLICATION") as Integer
def swarm_manager_and_workers_pa_node_names = variables.get("swarm_manager_and_workers_pa_node_names")

def targeted_pa_node_name = swarm_manager_and_workers_pa_node_names.split(",")[task_replication_id + 3]

selected = (nodename == targeted_pa_node_name)
]]>
                    </code>
                </script>
            </selection>
            <scriptExecutable>
                <script>
                    <code language="groovy">
                        <![CDATA[
// Retrieve variables
def instance_name = variables.get("INSTANCE_NAME")
def pa_node_name = variables.get("PA_NODE_NAME")
def zookeeper_endpoint = variables.get("ZOOKEEPER_ENDPOINT")
def targeted_network_name = variables.get("hdfs_network_name")
def hdfs_path = variables.get("hdfs_namenode_host_port")
def task_replication_id = variables.get("PA_TASK_REPLICATION")
def hbase_docker_image_name = variables.get("hbase_docker_image_name")
def hbase_exposed_regionserver_gui_port = 16030
def hbase_regionserver_container_name = instance_name + "-hbase-regionserver-" + task_replication_id

// Find a free port
def hbase_regionServer_gui_port = null
try {
  def server = new ServerSocket(0)
  hbase_regionServer_gui_port = server.getLocalPort()
  server.close()
} catch (IOException e) {
  throw new RuntimeException( "Failed to find free local port to bind the agent to", e);
}

// Start  hbase  container
cmd = ["docker", "run", "--rm", "-dit", "--publish", hbase_regionServer_gui_port + ":" + hbase_exposed_regionserver_gui_port, "--name", hbase_regionserver_container_name, "--net", targeted_network_name, hbase_docker_image_name]
println cmd
def hbase_regionserver_container_id = new StringBuilder()
cmd.execute().waitForProcessOutput(hbase_regionserver_container_id, System.err)

//Commande inspect
cmd = ["docker", "inspect", hbase_regionserver_container_name, "--format", "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}"]
println cmd
def hbase_regionserver_container_ip = new StringBuilder()
cmd.execute().waitForProcessOutput(hbase_regionserver_container_ip, System.err)

// hbase configuration
def hbase_site_config_command = "sed -i 's/HDFS-replacement/" + hdfs_path + "/g' \$HBASE_HOME/conf/hbase-site.xml"
def hbase_site_config_command2 = "sed -i 's/ZOOKEEPER-replacement/" + zookeeper_endpoint + "/g' \$HBASE_HOME/conf/hbase-site.xml"
def hbase_hdfs_site_config = "sed -i 's/HDFS-replacement/" + hdfs_path + "/g' \$HBASE_HOME/conf/hdfs-site.xml"
def hbase_core_site_config = "sed -i 's/HDFS-replacement/" + hdfs_path + "/g' \$HBASE_HOME/conf/core-site.xml"

def command_in_container = hbase_site_config_command + ";" + hbase_site_config_command2 + ";"  + hbase_hdfs_site_config + ";" + hbase_core_site_config
cmd = ["docker", "exec", hbase_regionserver_container_name, "/bin/sh", "-c", command_in_container]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

//starting hbase region server
def start_hbase_regionserver = "bin/hbase-daemon.sh start regionserver"
cmd = ["docker", "exec", hbase_regionserver_container_name, "/bin/sh", "-c", start_hbase_regionserver]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

// Propagate variables
variables.put("hbase_server" + task_replication_id + "_pa_node_name", pa_node_name)
variables.put("hbase_regionServer_gui_port" , hbase_regionServer_gui_port)
variables.put("hbase_docker_image_name", hbase_docker_image_name)
variables.put("hbase_server_" + task_replication_id + "_pa_node_name", pa_node_name)

// Propagate variables to the current post script
new File(localspace, "hbase_regionserver_container_id").text = hbase_regionserver_container_id.toString()
new File(localspace, "hbase_regionserver_container_name").text = hbase_regionserver_container_name
]]>
                    </code>
                </script>
            </scriptExecutable>
            <controlFlow block="none"></controlFlow>
            <post>
                <script>
                    <code language="groovy">
                        <![CDATA[
import groovy.json.JsonOutput

// Retrieve the script arguments
def hbase_container_id = new File(localspace, "hbase_regionserver_container_id").text
def hbase_container_name = new File(localspace, "hbase_regionserver_container_name").text

// Retrieve variables
def task_replication_id = variables.get("PA_TASK_REPLICATION")
def instance_name = variables.get("INSTANCE_NAME")
def pa_node_name = variables.get("PA_NODE_NAME")
def pa_node_host = variables.get("PA_NODE_HOST")
def pa_node_source_name = variables.get("PA_NODE_SOURCE")
def pa_node_url = variables.get("PA_NODE_URL")
def job_id = variables.get("PA_JOB_ID")
def pca_public_rest_url = variables.get('PA_CLOUD_AUTOMATION_REST_PUBLIC_URL')
def instance_id = variables.get("PCA_INSTANCE_ID")
def hbase_regionserver_gui_port = variables.get("hbase_regionServer_gui_port")
def hbase_endpoint_url = "http://" + pa_node_host + ":" + hbase_regionserver_gui_port

// Build the proxified url
def endpoint_id = "hbase-region_server-" + job_id + "-" + task_replication_id
def proxyfied_url = pca_public_rest_url + "/services/" + instance_id + "/endpoints/" + endpoint_id + "/"

// Create the deployment map and json
def deployment_map = ["endpoint":["id":endpoint_id,"url":hbase_endpoint_url,"proxyfied_url":proxyfied_url],"node":["name":pa_node_name,"host":pa_node_host,"node_source_name":pa_node_source_name,"url":pa_node_url],"container":["id":hbase_container_id,"name":hbase_container_name]]
def deployment_json = JsonOutput.toJson(deployment_map)

// Propagate the deployment map
variables.put("hbase_deployment_json_" + ((task_replication_id as Integer) + 1 ), deployment_json)
println "replication = hbase_deployment_json_" + ((task_replication_id as Integer) + 1 )

// Add token to the current node (RM API)
rmapi.connect()
println "Adding token PSA_" + instance_name + " to node " + pa_node_url
rmapi.addNodeToken(pa_node_url, "PSA_" + instance_name)
]]>
                    </code>
                </script>
            </post>
            <metadata>
                <positionTop>
                    316.78125
                </positionTop>
                <positionLeft>
                    539.25
                </positionLeft>
            </metadata>
        </task>
        <task name="start_hbase_thrift_server"




              fork="true">
            <genericInformation>
                <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png"/>
                <info name="NODE_ACCESS_TOKEN" value="$swarm_token_name"/>
            </genericInformation>
            <depends>
                <task ref="start_hbase_region_servers"/>
            </depends>
            <selection>
                <script type="dynamic">
                    <code language="groovy">
                        <![CDATA[
// The overlay network must be created on the swarm manager host
def swarm_manager_pa_node_name = variables.get("swarm_manager_and_workers_pa_node_names").split(",")[0]

selected = (nodename == swarm_manager_pa_node_name)
]]>
                    </code>
                </script>
            </selection>
            <scriptExecutable>
                <script>
                    <code language="groovy">
                        <![CDATA[
// Retrieve variables
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long
def instance_name = variables.get("INSTANCE_NAME")
def job_id = variables.get("PA_JOB_ID")
def pa_node_name = variables.get("PA_NODE_NAME")
def pa_node_host = variables.get("PA_NODE_HOST")
def zookeeper_endpoint = variables.get("ZOOKEEPER_ENDPOINT")
def targeted_network_name = variables.get("hdfs_network_name")
def hdfs_path = variables.get("hdfs_namenode_host_port")
def task_replication_id = variables.get("PA_TASK_REPLICATION") as Integer
def nb_rep = variables.get("nb_hbase_region_servers")
def hbase_docker_image_name = variables.get("hbase_docker_image_name")
def hbase_thrift_server_container_name = instance_name + "-hbase-thrift-server"
def hbase_thrift_server_gui_internal_port = 9095

// Find a free port
def hbase_thrift_server_gui_port = null
try {
  def server = new ServerSocket(0)
  hbase_thrift_server_gui_port = server.getLocalPort()
  server.close()
} catch (IOException e) {
  throw new RuntimeException( "Failed to find free local port to bind the agent to", e);
}

cmd = ["docker", "run", "--rm","-v", localspace + ":" + localspace, "-dit", "--publish", hbase_thrift_server_gui_port + ":" + hbase_thrift_server_gui_internal_port, "--name", hbase_thrift_server_container_name, "--net", targeted_network_name, hbase_docker_image_name]
println cmd
def hbase_container_id = new StringBuilder()
cmd.execute().waitForProcessOutput(hbase_container_id, System.err)

//Commande inspect
cmd = ["docker", "inspect", hbase_thrift_server_container_name, "--format", "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}"]
println cmd
def hbase_container_ip = new StringBuilder()
cmd.execute().waitForProcessOutput(hbase_container_ip, System.err)

// hbase configuration + Start
def hbase_site_config_command = "sed -i 's/HDFS-replacement/" + hdfs_path + "/g' \$HBASE_HOME/conf/hbase-site.xml"
def hbase_site_config_command2 = "sed -i 's/ZOOKEEPER-replacement/" + zookeeper_endpoint + "/g' \$HBASE_HOME/conf/hbase-site.xml"
def hbase_hdfs_site_config = "sed -i 's/HDFS-replacement/" + hdfs_path + "/g' \$HBASE_HOME/conf/hdfs-site.xml"
def hbase_core_site_config = "sed -i 's/HDFS-replacement/" + hdfs_path + "/g' \$HBASE_HOME/conf/core-site.xml"
def hdfs_core_site_config = "cp -fr \$HBASE_HOME/conf/core-site.xml \$HADOOP_HOME/etc/hadoop/"
def hdfs_hdfs_site_config = "cp -fr \$HBASE_HOME/conf/hdfs-site.xml \$HADOOP_HOME/etc/hadoop/"

def command_in_container = hbase_site_config_command + ";" + hbase_site_config_command2 + ";"  + hbase_hdfs_site_config + ";" + hbase_core_site_config + ";" + hdfs_core_site_config + ";" + hdfs_hdfs_site_config
cmd = ["docker", "exec", hbase_thrift_server_container_name, "/bin/sh", "-c", command_in_container]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

//starting hbase thrift server
def start_hbase_thrift_server = "bin/hbase-daemon.sh start thrift"
cmd = ["docker", "exec", hbase_thrift_server_container_name, "/bin/sh", "-c", start_hbase_thrift_server]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

// Propagate variables
variables.put("hbase_thrift_server_gui_port", hbase_thrift_server_gui_port)
variables.put("hbase_pa_node_name", pa_node_name)
variables.put("hbase_docker_image_name", hbase_docker_image_name)
variables.put("hbase_server_" + ((nb_rep as Integer)) + "_pa_node_name", pa_node_name)

// Propagate variables to the current post script
new File(localspace, "hbase_container_id").text = hbase_container_id.toString()
new File(localspace, "hbase_container_name").text = hbase_thrift_server_container_name
]]>
                    </code>
                </script>
            </scriptExecutable>
            <controlFlow block="none"></controlFlow>
            <post>
                <script>
                    <code language="groovy">
                        <![CDATA[
import groovy.json.JsonOutput

// Retrieve the script arguments
def hbase_container_id = new File(localspace, "hbase_container_id").text
def hbase_container_name = new File(localspace, "hbase_container_name").text

// Retrieve variables
def instance_name = variables.get("INSTANCE_NAME")
def pa_node_name = variables.get("PA_NODE_NAME")
def pa_node_host = variables.get("PA_NODE_HOST")
def pa_node_source_name = variables.get("PA_NODE_SOURCE")
def pa_node_url = variables.get("PA_NODE_URL")
def job_id = variables.get("PA_JOB_ID")
def pca_public_rest_url = variables.get('PA_CLOUD_AUTOMATION_REST_PUBLIC_URL')
def instance_id = variables.get("PCA_INSTANCE_ID")
def hbase_gui_port = variables.get("hbase_thrift_server_gui_port")
def hbase_endpoint_url = "http://" + pa_node_host + ":" + hbase_gui_port

// Build the proxified url
def endpoint_id = "hbase-thrift-server-gui-" + job_id
def proxyfied_url = pca_public_rest_url + "/services/" + instance_id + "/endpoints/" + endpoint_id + "/"

// Create the deployment map and json
def deployment_map = ["endpoint":["id":endpoint_id,"url":hbase_endpoint_url,"proxyfied_url":proxyfied_url],"node":["name":pa_node_name,"host":pa_node_host,"node_source_name":pa_node_source_name,"url":pa_node_url],"container":["id":hbase_container_id,"name":hbase_container_name]]
def deployment_json = JsonOutput.toJson(deployment_map)

// Propagate the deployment map
def nb_rep = variables.get("nb_hbase_region_servers")
variables.put("hbase_deployment_json_" + ((nb_rep as Integer) + 1) , deployment_json)

// Add token to the current node (RM API)
rmapi.connect()
nodeUrl = variables.get("PA_NODE_URL")
println "Adding token PSA_" + instance_name + " to node " + nodeUrl
rmapi.addNodeToken(nodeUrl, "PSA_" + instance_name)
]]>
                    </code>
                </script>
            </post>
            <metadata>
                <positionTop>
                    444.78125
                </positionTop>
                <positionLeft>
                    348.25
                </positionLeft>
            </metadata>
        </task>
        <task name="start_hbase_master_backup"




              fork="true">
            <genericInformation>
                <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png"/>
                <info name="NODE_ACCESS_TOKEN" value="$swarm_token_name"/>
            </genericInformation>
            <depends>
                <task ref="start_hbase_region_servers"/>
            </depends>
            <selection>
                <script type="dynamic">
                    <code language="groovy">
                        <![CDATA[
// The overlay network must be created on the swarm manager host
def swarm_manager_pa_node_name = variables.get("swarm_manager_and_workers_pa_node_names").split(",")[1]

selected = (nodename == swarm_manager_pa_node_name)
]]>
                    </code>
                </script>
            </selection>
            <scriptExecutable>
                <script>
                    <code language="groovy">
                        <![CDATA[
// Retrieve variables
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long
def instance_name = variables.get("INSTANCE_NAME")
def job_id = variables.get("PA_JOB_ID")
def pa_node_name = variables.get("PA_NODE_NAME")
def pa_node_host = variables.get("PA_NODE_HOST")
def zookeeper_endpoint = variables.get("ZOOKEEPER_ENDPOINT")
def targeted_network_name = variables.get("hdfs_network_name")
def hdfs_path = variables.get("hdfs_namenode_host_port")
def task_replication_id = variables.get("PA_TASK_REPLICATION") as Integer
def nb_rep = variables.get("nb_hbase_region_servers")
def hbase_docker_image_name = variables.get("hbase_docker_image_name")

// Find a free port
def hbase_master_backup_gui_port = null
try {
  def server = new ServerSocket(0)
  hbase_master_backup_gui_port = server.getLocalPort()
  server.close()
} catch (IOException e) {
  throw new RuntimeException( "Failed to find free local port to bind the agent to", e);
}

def hbase_master_backup_container_name = instance_name + "-hbase-master-backup"

cmd = ["docker", "run", "--rm","-v", localspace + ":" + localspace, "-dit", "--publish", hbase_master_backup_gui_port + ":" + 16010, "--name", hbase_master_backup_container_name, "--net", targeted_network_name, hbase_docker_image_name]
println cmd
def hbase_container_id = new StringBuilder()
cmd.execute().waitForProcessOutput(hbase_container_id, System.err)

//Commande inspect
cmd = ["docker", "inspect", hbase_master_backup_container_name, "--format", "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}"]
println cmd
def hbase_container_ip = new StringBuilder()
cmd.execute().waitForProcessOutput(hbase_container_ip, System.err)

// hbase configuration
def hbase_site_config_command = "sed -i 's/HDFS-replacement/" + hdfs_path + "/g' \$HBASE_HOME/conf/hbase-site.xml"
def hbase_site_config_command2 = "sed -i 's/ZOOKEEPER-replacement/" + zookeeper_endpoint + "/g' \$HBASE_HOME/conf/hbase-site.xml"
def hbase_hdfs_site_config = "sed -i 's/HDFS-replacement/" + hdfs_path + "/g' \$HBASE_HOME/conf/hdfs-site.xml"
def hbase_core_site_config = "sed -i 's/HDFS-replacement/" + hdfs_path + "/g' \$HBASE_HOME/conf/core-site.xml"
def hdfs_core_site_config = "cp -fr \$HBASE_HOME/conf/core-site.xml \$HADOOP_HOME/etc/hadoop/"
def hdfs_hdfs_site_config = "cp -fr \$HBASE_HOME/conf/hdfs-site.xml \$HADOOP_HOME/etc/hadoop/"

def command_in_container = hbase_site_config_command + ";" + hbase_site_config_command2 + ";"  + hbase_hdfs_site_config + ";" + hbase_core_site_config + ";" + hdfs_core_site_config + ";" + hdfs_hdfs_site_config
cmd = ["docker", "exec", hbase_master_backup_container_name, "/bin/sh", "-c", command_in_container]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

//starting hbase backup master
def start_hbase_master = "bin/hbase-daemon.sh start master"
cmd = ["docker", "exec", hbase_master_backup_container_name, "/bin/sh", "-c", start_hbase_master]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

// Propagate variables
variables.put("hbase_master_backup_gui_port", hbase_master_backup_gui_port)
variables.put("hbase_pa_node_name", pa_node_name)
variables.put("hbase_docker_image_name", hbase_docker_image_name)
variables.put("hbase_master_backup_container_name", hbase_master_backup_container_name)
variables.put("hbase_server_" + ((nb_rep as Integer) + 1) + "_pa_node_name", pa_node_name)

// Propagate variables to the current post script
new File(localspace, "hbase_container_id").text = hbase_container_id.toString()
new File(localspace, "hbase_container_name").text = hbase_master_backup_container_name
]]>
                    </code>
                </script>
            </scriptExecutable>
            <controlFlow block="none"></controlFlow>
            <post>
                <script>
                    <code language="groovy">
                        <![CDATA[
import groovy.json.JsonOutput

// Retrieve the script arguments
def hbase_container_id = new File(localspace, "hbase_container_id").text
def hbase_container_name = new File(localspace, "hbase_container_name").text

// Retrieve variables
def instance_name = variables.get("INSTANCE_NAME")
def pa_node_name = variables.get("PA_NODE_NAME")
def pa_node_host = variables.get("PA_NODE_HOST")
def pa_node_source_name = variables.get("PA_NODE_SOURCE")
def pa_node_url = variables.get("PA_NODE_URL")
def job_id = variables.get("PA_JOB_ID")
def pca_public_rest_url = variables.get('PA_CLOUD_AUTOMATION_REST_PUBLIC_URL')
def instance_id = variables.get("PCA_INSTANCE_ID")
def hbase_gui_port = variables.get("hbase_master_backup_gui_port")
def hbase_endpoint_url = "http://" + pa_node_host + ":" + hbase_gui_port

// Build the proxified url
def endpoint_id = "hbase-backup-master-gui-" + job_id
def proxyfied_url = pca_public_rest_url + "/services/" + instance_id + "/endpoints/" + endpoint_id + "/"

// Create the deployment map and json
def deployment_map = ["endpoint":["id":endpoint_id,"url":hbase_endpoint_url,"proxyfied_url":proxyfied_url],"node":["name":pa_node_name,"host":pa_node_host,"node_source_name":pa_node_source_name,"url":pa_node_url],"container":["id":hbase_container_id,"name":hbase_container_name]]
def deployment_json = JsonOutput.toJson(deployment_map)

// Propagate the deployment map
def nb_rep = variables.get("nb_hbase_region_servers")
variables.put("hbase_deployment_json_" + ((nb_rep as Integer) + 2) , deployment_json)

// Add token to the current node (RM API)
rmapi.connect()
nodeUrl = variables.get("PA_NODE_URL")
println "Adding token PSA_" + instance_name + " to node " + nodeUrl
rmapi.addNodeToken(nodeUrl, "PSA_" + instance_name)
]]>
                    </code>
                </script>
            </post>
            <metadata>
                <positionTop>
                    444.78125
                </positionTop>
                <positionLeft>
                    539.25
                </positionLeft>
            </metadata>
        </task>
        <task name="start_hbase_rest_server"




              fork="true">
            <genericInformation>
                <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png"/>
                <info name="NODE_ACCESS_TOKEN" value="$swarm_token_name"/>
            </genericInformation>
            <depends>
                <task ref="start_hbase_region_servers"/>
            </depends>
            <selection>
                <script type="dynamic">
                    <code language="groovy">
                        <![CDATA[
// The overlay network must be created on the swarm manager host
def swarm_manager_pa_node_name = variables.get("swarm_manager_and_workers_pa_node_names").split(",")[2]

selected = (nodename == swarm_manager_pa_node_name)
]]>
                    </code>
                </script>
            </selection>
            <scriptExecutable>
                <script>
                    <code language="groovy">
                        <![CDATA[
// Retrieve variables
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long
def instance_name = variables.get("INSTANCE_NAME")
def job_id = variables.get("PA_JOB_ID")
def pa_node_name = variables.get("PA_NODE_NAME")
def pa_node_host = variables.get("PA_NODE_HOST")
def zookeeper_endpoint = variables.get("ZOOKEEPER_ENDPOINT")
def targeted_network_name = variables.get("hdfs_network_name")
def hdfs_path = variables.get("hdfs_namenode_host_port")
def nb_rep = variables.get("nb_hbase_region_servers")
def hbase_docker_image_name = variables.get("hbase_docker_image_name")
def hbase_rest_server_container_name = instance_name + "-hbase-rest-server"
def hbase_rest_server_gui_internal_port = 8085

// Find a free port
def hbase_rest_server_gui_port = null
try {
  def server = new ServerSocket(0)
  hbase_rest_server_gui_port = server.getLocalPort()
  server.close()
} catch (IOException e) {
  throw new RuntimeException( "Failed to find free local port to bind the agent to", e);
}

cmd = ["docker", "run", "--rm","-v", localspace + ":" + localspace, "-dit", "--publish", hbase_rest_server_gui_port + ":" + hbase_rest_server_gui_internal_port, "--name", hbase_rest_server_container_name, "--net", targeted_network_name, hbase_docker_image_name]
println cmd
def hbase_container_id = new StringBuilder()
cmd.execute().waitForProcessOutput(hbase_container_id, System.err)

//Commande inspect
cmd = ["docker", "inspect", hbase_rest_server_container_name, "--format", "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}"]
println cmd
def hbase_container_ip = new StringBuilder()
cmd.execute().waitForProcessOutput(hbase_container_ip, System.err)

// hbase configuration + Start
def hbase_site_config_command = "sed -i 's/HDFS-replacement/" + hdfs_path + "/g' \$HBASE_HOME/conf/hbase-site.xml"
def hbase_site_config_command2 = "sed -i 's/ZOOKEEPER-replacement/" + zookeeper_endpoint + "/g' \$HBASE_HOME/conf/hbase-site.xml"
def hbase_hdfs_site_config = "sed -i 's/HDFS-replacement/" + hdfs_path + "/g' \$HBASE_HOME/conf/hdfs-site.xml"
def hbase_core_site_config = "sed -i 's/HDFS-replacement/" + hdfs_path + "/g' \$HBASE_HOME/conf/core-site.xml"
def hdfs_core_site_config = "cp -fr \$HBASE_HOME/conf/core-site.xml \$HADOOP_HOME/etc/hadoop/"
def hdfs_hdfs_site_config = "cp -fr \$HBASE_HOME/conf/hdfs-site.xml \$HADOOP_HOME/etc/hadoop/"

def command_in_container = hbase_site_config_command + ";" + hbase_site_config_command2 + ";"  + hbase_hdfs_site_config + ";" + hbase_core_site_config + ";" + hdfs_core_site_config + ";" + hdfs_hdfs_site_config
cmd = ["docker", "exec", hbase_rest_server_container_name, "/bin/sh", "-c", command_in_container]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

//starting hbase rest server
def start_hbase_rest_server = "bin/hbase-daemon.sh start rest"
cmd = ["docker", "exec", hbase_rest_server_container_name, "/bin/sh", "-c", start_hbase_rest_server]
println cmd
cmd.execute().waitForProcessOutput(System.out, System.err)

// Propagate variables
variables.put("hbase_rest_server_gui_port", hbase_rest_server_gui_port)
variables.put("hbase_pa_node_name", pa_node_name)
variables.put("hbase_docker_image_name", hbase_docker_image_name)
variables.put("hbase_server_" + ((nb_rep as Integer) + 2) + "_pa_node_name", pa_node_name)

// Propagate variables to the current post script
new File(localspace, "hbase_container_id").text = hbase_container_id.toString()
new File(localspace, "hbase_container_name").text = hbase_rest_server_container_name
]]>
                    </code>
                </script>
            </scriptExecutable>
            <controlFlow block="none"></controlFlow>
            <post>
                <script>
                    <code language="groovy">
                        <![CDATA[
import groovy.json.JsonOutput

// Retrieve the script arguments
def hbase_container_id = new File(localspace, "hbase_container_id").text
def hbase_container_name = new File(localspace, "hbase_container_name").text

// Retrieve variables
def instance_name = variables.get("INSTANCE_NAME")
def pa_node_name = variables.get("PA_NODE_NAME")
def pa_node_host = variables.get("PA_NODE_HOST")
def pa_node_source_name = variables.get("PA_NODE_SOURCE")
def pa_node_url = variables.get("PA_NODE_URL")
def job_id = variables.get("PA_JOB_ID")
def pca_public_rest_url = variables.get('PA_CLOUD_AUTOMATION_REST_PUBLIC_URL')
def instance_id = variables.get("PCA_INSTANCE_ID")
def hbase_gui_port = variables.get("hbase_rest_server_gui_port")
def hbase_endpoint_url = "http://" + pa_node_host + ":" + hbase_gui_port

// Build the proxified url
def endpoint_id = "hbase-rest-server-gui-" + job_id
def proxyfied_url = pca_public_rest_url + "/services/" + instance_id + "/endpoints/" + endpoint_id + "/"

// Create the deployment map and json
def deployment_map = ["endpoint":["id":endpoint_id,"url":hbase_endpoint_url,"proxyfied_url":proxyfied_url],"node":["name":pa_node_name,"host":pa_node_host,"node_source_name":pa_node_source_name,"url":pa_node_url],"container":["id":hbase_container_id,"name":hbase_container_name]]
def deployment_json = JsonOutput.toJson(deployment_map)

// Propagate the deployment map
def nb_rep = variables.get("nb_hbase_region_servers")
variables.put("hbase_deployment_json_" + ((nb_rep as Integer) + 3) , deployment_json)

// Add token to the current node (RM API)
rmapi.connect()
nodeUrl = variables.get("PA_NODE_URL")
println "Adding token PSA_" + instance_name + " to node " + nodeUrl
rmapi.addNodeToken(nodeUrl, "PSA_" + instance_name)
]]>
                    </code>
                </script>
            </post>
            <metadata>
                <positionTop>
                    444.78125
                </positionTop>
                <positionLeft>
                    729.25
                </positionLeft>
            </metadata>
        </task>
        <task name="merge_json_deployments_and_propagate"




              fork="true">
            <genericInformation>
                <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png"/>
            </genericInformation>
            <depends>
                <task ref="start_hbase_master_backup"/>
                <task ref="start_hbase_rest_server"/>
                <task ref="start_hbase_thrift_server"/>
            </depends>
            <scriptExecutable>
                <script>
                    <code language="groovy">
                        <![CDATA[
//nb_deployments without counting the host node (+3 counting : RestServer ,ThriftServer and BackupServer)
def nb_deployments = (variables.get("nb_hbase_region_servers") as Integer) + 3
def hbase_deployements_pa_node_names = variables.get("hbase_deployements_pa_node_names")

for (i = 0; i < nb_deployments; i++) {
    hbase_deployements_pa_node_names += "," + variables.get("hbase_server_" + i + "_pa_node_name")
}

nb_deployments = "" + nb_deployments
variables.put("hbase_deployements_pa_node_names", hbase_deployements_pa_node_names)
variables.put("nb_deployments", nb_deployments)

//(+4 counting : Master, RestServer ,ThriftServer and BackupServer)
def nb_deployments_total = (variables.get("nb_hbase_region_servers") as Integer) + 4
variables.put("nb_deployments_total", nb_deployments_total)
]]>
                    </code>
                </script>
            </scriptExecutable>
            <metadata>
                <positionTop>
                    572.78125
                </positionTop>
                <positionLeft>
                    539.25
                </positionLeft>
            </metadata>
        </task>
    </taskFlow>
    <metadata>
        <visualization>
            <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2832px;
            height:3280px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-55.78125px;left:-343.25px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_1" style="top: 60.7966px; left: 539.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png" width="20px">&nbsp;<span class="name">retrieve_services_variables</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_4" style="top: 188.797px; left: 539.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png" width="20px">&nbsp;<span class="name">start_hbase_master</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_7" style="top: 700.797px; left: 539.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png" width="20px">&nbsp;<span class="name">propagate_variables_and_update_deployments_with_service</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_ active-task" id="jsPlumb_1_10" style="top: 828.796px; left: 539.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title=""><img src="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png" width="20px">&nbsp;<span class="name">loop_over_hbase_status</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_13" style="top: 316.797px; left: 539.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png" width="20px">&nbsp;<span class="name">start_hbase_region_servers</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_16" style="top: 444.797px; left: 348.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png" width="20px">&nbsp;<span class="name">start_hbase_thrift_server</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_19" style="top: 444.797px; left: 539.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png" width="20px">&nbsp;<span class="name">start_hbase_master_backup</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_22" style="top: 444.797px; left: 729.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png" width="20px">&nbsp;<span class="name">start_hbase_rest_server</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_25" style="top: 572.797px; left: 539.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png" width="20px">&nbsp;<span class="name">merge_json_deployments_and_propagate</span></a></div><svg style="position:absolute;left:590px;top:100.5px" width="37.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 26.5 50 16.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.4225760000000007,66.303232 L10.200238136178823,48.58572112640825 L1.9584304421338072,52.71762213373894 L-3.385371730082231,45.20471468427444 L-1.4225760000000007,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.4225760000000007,66.303232 L10.200238136178823,48.58572112640825 L1.9584304421338072,52.71762213373894 L-3.385371730082231,45.20471468427444 L-1.4225760000000007,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:626.9px;top:218.5px" width="49.80000000000007" height="99" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 28.800000000000068 88 C 38.80000000000007 88 -10 -10 0 0 " transform="translate(10.5,10.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#e5db3d" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M28.409853600000062,76.942366 L28.666971643619434,55.75430591155289 L23.945629019923466,63.67320254111384 L15.397808184733265,60.218530491629494 L28.409853600000062,76.942366" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M28.409853600000062,76.942366 L28.666971643619434,55.75430591155289 L23.945629019923466,63.67320254111384 L15.397808184733265,60.218530491629494 L28.409853600000062,76.942366" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_36" style="position: absolute; transform: translate(-50%, -50%); left: 651.3px; top: 268.75px;">replicate</div><svg style="position:absolute;left:639.5px;top:612.5px" width="63.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 42.5 88 C 52.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M41.154719375000006,64.9032055 L36.49908598088989,44.23136287047984 L33.73953468002493,53.028230302577164 L24.624110783467057,51.64654756545491 L41.154719375000006,64.9032055" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M41.154719375000006,64.9032055 L36.49908598088989,44.23136287047984 L33.73953468002493,53.028230302577164 L24.624110783467057,51.64654756545491 L41.154719375000006,64.9032055" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:600.5px;top:740.5px" width="102.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 88 C -10 38 91.5 50 81.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M7.215295999999998,62.682047999999995 L27.208213679123375,55.661845533133686 L18.150790673500328,53.94048313746846 L18.466648816591842,44.72635085963336 L7.215295999999998,62.682047999999995" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M7.215295999999998,62.682047999999995 L27.208213679123375,55.661845533133686 L18.150790673500328,53.94048313746846 L18.466648816591842,44.72635085963336 L7.215295999999998,62.682047999999995" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:663.0266769263776px;top:778.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_48" style="position: absolute; transform: translate(-50%, -50%); left: 675px; top: 848.5px;">loop</div><svg style="position:absolute;left:590px;top:228.5px" width="39" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 18 88 C 28 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M19.294272,66.303232 L20.866314289298487,45.1720066914511 L15.662449640903752,52.782512109699454 L7.3455943989979495,48.80382905054735 L19.294272,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M19.294272,66.303232 L20.866314289298487,45.1720066914511 L15.662449640903752,52.782512109699454 L7.3455943989979495,48.80382905054735 L19.294272,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:410px;top:356.5px" width="219" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 88 C -10 38 208 50 198 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M30.423743999999996,59.394175999999995 L51.59633048565586,60.24363553842575 L43.81254411302754,55.30271763733838 L47.50487212299425,46.85483542539821 L30.423743999999996,59.394175999999995" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M30.423743999999996,59.394175999999995 L51.59633048565586,60.24363553842575 L43.81254411302754,55.30271763733838 L47.50487212299425,46.85483542539821 L30.423743999999996,59.394175999999995" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:608px;top:356.5px" width="22" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 1 88 C 11 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M3.7341562499999994,66.78168750000002 L9.900828592736769,46.50923939383077 L3.155021153255475,52.793671109542124 L-4.087187797721125,47.08837449057529 L3.7341562499999994,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M3.7341562499999994,66.78168750000002 L9.900828592736769,46.50923939383077 L3.155021153255475,52.793671109542124 L-4.087187797721125,47.08837449057529 L3.7341562499999994,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:608px;top:356.5px" width="203" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 182 88 C 192 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M155.324603,59.788559500000005 L138.59264620162125,46.78695876404492 L142.05265472456648,55.33262088123317 L134.13670758285443,60.05890703947842 L155.324603,59.788559500000005" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M155.324603,59.788559500000005 L138.59264620162125,46.78695876404492 L142.05265472456648,55.33262088123317 L134.13670758285443,60.05890703947842 L155.324603,59.788559500000005" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:609px;top:484.5px" width="51.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 30.5 88 C 40.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M30.604289125,65.8307285 L28.92065780914319,44.70810116360394 L24.944079219862537,53.025962831320875 L16.11589214046406,50.368311068741406 L30.604289125,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M30.604289125,65.8307285 L28.92065780914319,44.70810116360394 L24.944079219862537,53.025962831320875 L16.11589214046406,50.368311068741406 L30.604289125,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:639.5px;top:484.5px" width="171.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 160.5 50 150.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M20.703125,60.1875 L41.86478175940966,59.099252235503464 L33.662179814507894,54.89005737977466 L36.56733913918432,46.14019742099557 L20.703125,60.1875" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M20.703125,60.1875 L41.86478175940966,59.099252235503464 L33.662179814507894,54.89005737977466 L36.56733913918432,46.14019742099557 L20.703125,60.1875" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:410px;top:484.5px" width="250.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 229.5 88 C 239.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M192.43823287499998,59.00425649999999 L174.8596107136152,47.17243318711742 L178.89361619381907,55.462596019395505 L171.31795023301072,60.71704986829833 L192.43823287499998,59.00425649999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M192.43823287499998,59.00425649999999 L174.8596107136152,47.17243318711742 L178.89361619381907,55.462596019395505 L171.31795023301072,60.71704986829833 L192.43823287499998,59.00425649999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 607px; top: 91px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 590.5px; top: 219px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 590.5px; top: 179px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint replicate-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 627.4px; top: 219px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 682.5px; top: 731px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 682.5px; top: 691px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 601px; top: 859px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 601px; top: 819px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 673px; top: 819px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 673px; top: 859px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 608.5px; top: 347px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint replicate-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 656.2px; top: 307px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 608.5px; top: 307px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 410.5px; top: 475px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 410.5px; top: 435px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 609.5px; top: 475px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 609.5px; top: 435px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 790.5px; top: 475px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 790.5px; top: 435px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 640px; top: 603px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 640px; top: 563px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
        </visualization>
    </metadata>
</job>