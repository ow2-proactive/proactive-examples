<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="HDFS" projectName="Cloud Automation - Deployment" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="HDFS_UI_port" value="6500" />
    <variable name="datanode_starting_port" value="50010" />
    <variable name="fs_name" value="25.25.25.2" />
    <variable name="instance_name" value="my-instance" />
    <variable name="network_name" value="my-net" />
  </variables>
  <description>
    <![CDATA[ Deployment of HDFS. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="cloud-automation"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hdfs.png"/>
    <info name="pca.states" value="(SWARM_DEPLOYED,HDFS_DEPLOYED)"/>
    <info name="Documentation" value="https://ow2-proactive.github.io/proactive-examples/DockerSwarm/resources/doc/V1/activeeon-deploy-swarm-hdfs-spark.pdf"/>
    <info name="pca.service.id" value="HDFS-Spark"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="get_resources_from_service_instance" >
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Retrieve variables
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Get the targeted resources the PCA service instance
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
def node_source_name = service_instance_data.getVariables().get("node_source_name")
def nb_nodes = service_instance_data.getVariables().get("nb_nodes")
variables.put("node_source_name", node_source_name)
variables.put("nb_nodes", nb_nodes)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
          194.13333129882812
        </positionTop>
        <positionLeft>
          596
        </positionLeft>
      </metadata>
    </task>
    <task name="start_namenode" >
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hdfs.png"/>
      </genericInformation>
      <depends>
        <task ref="get_resources_from_service_instance"/>
      </depends>
      <selection>
        <script>
          <code language="groovy">
            <![CDATA[
if (variables.get("node_source_name").equals(System.getProperty("proactive.node.nodesource"))) {
    selected = true
} else {
   selected = false
}
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.objectweb.proactive.core.util.ProActiveInet

println "run_namenode_in_container ..."

// Retrieve variables
def HDFS_UI_port = variables.get("HDFS_UI_port")
def instance_name = variables.get("instance_name")
def network_name = variables.get("network_name")
def fs_name = variables.get("fs_name")

def namenode_container_name = instance_name + "-namenode"

// Get the current IP address and store it
def HDFS_UI_IP_address = ProActiveInet.getInstance().getInetAddress().getHostAddress()
variables.put("HDFS_UI_IP_address", HDFS_UI_IP_address)

// Start the namenode docker container
def cmd = ["docker", "run", "--rm", "-dit", "--publish", HDFS_UI_port + ":9870", "--name", namenode_container_name, "--net", network_name, "activeeon/hdfs-spark:2.0"]
cmd.execute().waitForProcessOutput(System.out, System.err)

// Namenode configuration
def docker_config_command = "sed s/IP:PORT/" + fs_name + ":9000/ \$HADOOP_HOME/etc/hadoop/core-site.xml.template > \$HADOOP_HOME/etc/hadoop/core-site.xml; rm -r /tmp; hdfs namenode -format -force"
cmd = ["docker", "exec", namenode_container_name, "/bin/sh", "-c", docker_config_command]
cmd.execute().waitForProcessOutput(System.out, System.err)

// Start namenode
def docker_start_command = "\$HADOOP_HOME/sbin/hadoop-daemon.sh start namenode"
cmd = ["docker", "exec", namenode_container_name, "/bin/sh", "-c", docker_start_command]
cmd.execute().waitForProcessOutput(System.out, System.err)

println "... run_namenode_in_container"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
runs=variables.get("nb_nodes")
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.JsonSlurper

def namenode_container_name = variables.get("instance_name") + "-namenode"
def network_name = variables.get("network_name")

// Retrieve the namenode IP address in the overlay network
def jsonToParse = new StringBuilder()
["docker","inspect", namenode_container_name].execute().waitForProcessOutput(jsonToParse , System.err)
def jsonSlurper = new JsonSlurper()
def object = jsonSlurper.parseText(jsonToParse+"")
def namenode_IP_address = object.get(0).get("NetworkSettings").get("Networks").get(network_name).get("IPAddress")

// And store it
variables.put("namenode_IP_address", namenode_IP_address)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
          322.1333312988281
        </positionTop>
        <positionLeft>
          596
        </positionLeft>
      </metadata>
    </task>
    <task name="start_datanode" >
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hdfs.png"/>
      </genericInformation>
      <depends>
        <task ref="start_namenode"/>
      </depends>
      <selection>
        <script>
          <code language="groovy">
            <![CDATA[
if (variables.get("node_source_name").equals(System.getProperty("proactive.node.nodesource"))) {
    selected = true
} else {
   selected = false
}
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println "start_datanode ..."

// Retrieve variables
def fs_name = variables.get("fs_name")
def task_id = variables.get("PA_TASK_REPLICATION") as Integer
def datanode_starting_port = variables.get("datanode_starting_port") as Integer
def network_name = variables.get("network_name")

def datanode_container_name = variables.get("instance_name") + "-datanode-" + task_id
def datanode_port = datanode_starting_port + task_id

// Start the datanode docker container
def cmd = ["docker", "run", "--rm", "-dit", "--name", datanode_container_name, "--net", network_name, "activeeon/hdfs-spark:2.0"]
cmd.execute().waitForProcessOutput(System.out, System.err)

// Datanode configuration + Start
def docker_config_command = "sed s/IP:PORT/" + fs_name + ":9000/ \$HADOOP_HOME/etc/hadoop/core-site.xml.template > \$HADOOP_HOME/etc/hadoop/core-site.xml; sed s/PORT/" + datanode_port + "/ \$HADOOP_HOME/etc/hadoop/hdfs-site.xml.template > \$HADOOP_HOME/etc/hadoop/hdfs-site.xml; rm -r /tmp; \$HADOOP_HOME/sbin/hadoop-daemon.sh start datanode"
cmd = ["docker", "exec", datanode_container_name, "/bin/sh", "-c", docker_config_command]
cmd.execute().waitForProcessOutput(System.out, System.err)

println "... start_datanode"
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
          450.1333312988281
        </positionTop>
        <positionLeft>
          596
        </positionLeft>
      </metadata>
    </task>
    <task name="update_service_instance" >
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hdfs.png"/>
      </genericInformation>
      <depends>
        <task ref="start_datanode"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Retrieve variables
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long
def namenode_IP_address = variables.get("namenode_IP_address")
def HDFS_UI_IP_address = variables.get("HDFS_UI_IP_address")
def HDFS_UI_port = variables.get("HDFS_UI_port")

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

//Update endpoints
def endpointsMap = [:]
endpointsMap.put("HDFS_UI", "http://" + HDFS_UI_IP_address + ":" + HDFS_UI_port)
service_instance_rest_api.createNewInstanceEndpointsUsingPUT(service_instance_id, endpointsMap)

// Update the related service instance
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
service_instance_data.setInstanceStatus("HDFS_DEPLOYED")
service_instance_data.getVariables().put("namenode_IP_address", namenode_IP_address)
service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
          578.1333312988281
        </positionTop>
        <positionLeft>
          596
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2735px;
            height:2924px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-189.13333129882812px;left:-591px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" style="top: 194.133px; left: 596px;" id="jsPlumb_1_37"><a class="task-name"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">get_resources_from_service_instance</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" style="top: 322.133px; left: 596px;" id="jsPlumb_1_40"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/hdfs.png" width="20px">&nbsp;<span class="name">start_namenode</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" style="top: 450.133px; left: 596px;" id="jsPlumb_1_43"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/hdfs.png" width="20px">&nbsp;<span class="name">start_datanode</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" style="top: 578.133px; left: 596px;" id="jsPlumb_1_46"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/hdfs.png" width="20px">&nbsp;<span class="name">update_service_instance</span></a></div><svg style="position:absolute;left:643px;top:233.5px" width="75.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 64.5 50 54.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M2.7879999999999985,64.44800000000001 L20.764285697995007,53.229570853989415 L11.549590064876533,53.5285430750858 L9.844828773080803,44.46798078911287 L2.7879999999999985,64.44800000000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M2.7879999999999985,64.44800000000001 L20.764285697995007,53.229570853989415 L11.549590064876533,53.5285430750858 L9.844828773080803,44.46798078911287 L2.7879999999999985,64.44800000000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:673.5px;top:351.5px" width="25" height="99" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 88 14 -10 4 0 " transform="translate(10.5,10.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#e5db3d" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.4492785,77.41936575 L6.063350403498591,58.01485212168866 L-1.3760184612358701,63.46056519661462 L-7.895450149886791,56.94159208292453 L-2.4492785,77.41936575" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.4492785,77.41936575 L6.063350403498591,58.01485212168866 L-1.3760184612358701,63.46056519661462 L-7.895450149886791,56.94159208292453 L-2.4492785,77.41936575" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path></svg><div style="position: absolute; transform: translate(-50%, -50%); left: 685.5px; top: 401.75px;" class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_57">replicate</div><svg style="position:absolute;left:640.5px;top:361.5px" width="23.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 12.5 50 2.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.612421875,66.78168750000002 L5.589799912231152,47.243940502122534 L-1.7618140918536094,52.80755187738454 L-8.384335710384322,46.39333271897615 L-2.612421875,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.612421875,66.78168750000002 L5.589799912231152,47.243940502122534 L-1.7618140918536094,52.80755187738454 L-8.384335710384322,46.39333271897615 L-2.612421875,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:640.5px;top:489.5px" width="45" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 24 88 C 34 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M24.6893655,65.8307285 L24.589910726622772,44.64134179938849 L20.002489702214802,52.63856433879676 L11.397746565419528,49.32821759717368 L24.6893655,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M24.6893655,65.8307285 L24.589910726622772,44.64134179938849 L20.002489702214802,52.63856433879676 L11.397746565419528,49.32821759717368 L24.6893655,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div style="position: absolute; height: 20px; width: 20px; left: 698px; top: 224px;" class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div style="position: absolute; height: 20px; width: 20px; left: 643.5px; top: 352px;" class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div style="position: absolute; height: 20px; width: 20px; left: 643.5px; top: 312px;" class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div style="position: absolute; height: 20px; width: 20px; left: 678px; top: 352px;" class="_jsPlumb_endpoint source-endpoint replicate-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div style="position: absolute; height: 20px; width: 20px; left: 641px; top: 480px;" class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div style="position: absolute; height: 20px; width: 20px; left: 674px; top: 440px;" class="_jsPlumb_endpoint target-endpoint replicate-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div style="position: absolute; height: 20px; width: 20px; left: 641px; top: 440px;" class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div style="position: absolute; height: 20px; width: 20px; left: 665px; top: 608px;" class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div style="position: absolute; height: 20px; width: 20px; left: 665px; top: 568px;" class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>