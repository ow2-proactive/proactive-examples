<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.12" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd"  name="Finish_HDFS" projectName="Service Automation - Lifecycle" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="1"  >
  <description>
    <![CDATA[ Delete a HDFS installation. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="service-automation"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hdfs.png"/>
    <info name="pca.states" value="(RUNNING,FINISHED)(ERROR,FINISHED)"/>
    <info name="Documentation" value="https://hadoop.apache.org/docs/r2.8.2/hadoop-project-dist/hadoop-common/ClusterSetup.html"/>
    <info name="pca.service.id" value="HDFS"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="retrieve_service_variables"




          fork="true">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hdfs.png"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Retrieve_variables_from_service_instance_id/raw" language="groovy">
            <arguments>
              <argument value="$PCA_INSTANCE_ID"/>
              <argument value="hdfs_namenode_node_name"/>
              <argument value="hdfs_namenode_node_name"/>
              <argument value="hdfs_network_name"/>
              <argument value="hdfs_network_name"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow >
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
runs = variables.get("nb_hdfs_datanodes")
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
      <metadata>
        <positionTop>
          354.5
        </positionTop>
        <positionLeft>
          605.5
        </positionLeft>
      </metadata>
    </task>
    <task name="docker_rm_hdfs_containers"




          fork="true">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hdfs.png"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="retrieve_service_variables"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// Retrieve variables
def instance_name = variables.get("INSTANCE_NAME")

// List the hdfs docker containers to remove
def container_ids = new StringBuilder()
def cmd = ["docker", "ps", "-aqf", "name=^" + instance_name]
println cmd
cmd.execute().waitForProcessOutput(container_ids, System.err)
println "DEBUG container ids to remove " + container_ids

// Remove them
cmd = ["docker", "rm", "-fv"] + container_ids.toString().split("\n").toList()
cmd.execute().waitForProcessOutput(System.out, System.err)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
          482.5
        </positionTop>
        <positionLeft>
          605.5
        </positionLeft>
      </metadata>
    </task>
    <task name="docker_network_rm"




          fork="true">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hdfs.png"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="docker_rm_hdfs_containers"/>
      </depends>
      <selection>
        <script type="static">
          <code language="groovy">
            <![CDATA[
// To select the hdfs namenode/docker network pa node
selected = nodename.equals(variables.get("hdfs_namenode_node_name"))
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// Retrieve variables
def hdfs_network_name = variables.get("hdfs_network_name")

// Remove the docker network
def cmd = ["docker", "network", "rm", hdfs_network_name]
cmd.execute().waitForProcessOutput(System.out, System.err)
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Update_service_instance_and_remove_tokens/raw" language="groovy">
            <arguments>
              <argument value="FINISHED"/>
              <argument value="$INSTANCE_NAME"/>
            </arguments>
          </file>
        </script>
      </post>
      <metadata>
        <positionTop>
          610.5
        </positionTop>
        <positionLeft>
          605.5
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
</job>