<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.8"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
	name="Openstack" projectName="Cloud Automation - Deployment" priority="normal"
	onTaskError="continueJobExecution" maxNumberOfExecution="2">
	<variables>
		<variable name="infrastructure_name" value="PrivateCloud" model="PA:LIST(PrivateCloud)" />
		<variable name="instance_name" value="instance_name" />
		<variable name="instance_image" value="5126265f-e10a-451f-b38c-eebe54b637eb" model="PA:LIST(5126265f-e10a-451f-b38c-eebe54b637eb,76355549-f36b-4052-a10d-d92addf72ee1)" />
		<variable name="instance_flavor" value="1" />
		<variable name="instance_key" value="activeeon" model="PA:LIST(activeeon)" />
	</variables>
	<description>
    <![CDATA[ A workflow that creates an openstack instance ]]>
  </description>
	<genericInformation>
		<info name="group" value="public-objects"/>
		<info name="pca.service.id" value="Openstack"/>
		<info name="pca.states" value="(VOID,RUNNING)"/>
		<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/openstack.png"/>
	</genericInformation>
	<taskFlow>
		<task name="create_instance">
			<scriptExecutable>
				<script>
					<code language="python">
            <![CDATA[
import subprocess
import json

  
  
url = "http://localhost:8080/connector-iaas/infrastructures/" + variables.get('infrastructure_name') + "/instances"

instanceData = {}
instanceData['tag'] = variables.get('instance_name')
instanceData['image'] = variables.get('instance_image')
instanceData['number'] = '1'
instanceData['hardware'] = {}
instanceData['hardware']['type'] = variables.get('instance_flavor')
instanceData['credentials'] = {}
instanceData['credentials']['publicKeyName'] = variables.get('instance_key')



instanceDataRequest = json.dumps(instanceData)


instanceResponse = subprocess.check_output(['curl -H "Accept: application/json"  -H "Content-Type: application/json" -X POST -d \'' + instanceDataRequest + '\' ' + url], shell=True)


instances = json.loads(instanceResponse)

print instances

status = instances[0]['status']

variables.put('STATUS', status)

variables.put('INSTANCE_JSON', json.dumps(instances[0]))
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="check_status">
			<description>
        <![CDATA[ Cron task running every minute ]]>
      </description>
			<depends>
				<task ref="create_instance" />
			</depends>
			<scriptExecutable>
				<script>
					<code language="python">
            <![CDATA[
import subprocess
import json

print variables.get('INSTANCE_JSON')

instance =  json.loads(variables.get('INSTANCE_JSON'))   

url = "http://localhost:8080/connector-iaas/infrastructures/" + variables.get('infrastructure_name') + "/instances?instanceId=RegionOne/" + instance['id']

instanceResponse = subprocess.check_output(['curl -H "Accept: application/json"  -H "Content-Type: application/json" -X GET ' + url], shell=True)

instanceJson = json.loads(instanceResponse)

status = instanceJson['status']

variables.put('STATUS', status)

variables.put('INSTANCE_JSON', json.dumps(instanceJson))
]]>
					</code>
				</script>
			</scriptExecutable>
			<controlFlow>
				<loop target="check_status">
					<script>
						<code language="javascript">
              <![CDATA[
if(variables.get("STATUS") == 'BUILD'){
    loop = '* * * * *';
} else {
    loop = false;
}
]]>
						</code>
					</script>
				</loop>
			</controlFlow>
		</task>
		<task name="get_openstack_instance_infos">
			<depends>
				<task ref="check_status" />
			</depends>
			<scriptExecutable>
				<script>
					<code language="python">
            <![CDATA[
import json
import subprocess
import sys
  
instance =  json.loads(variables.get('INSTANCE_JSON'))
variables.put('openstack_instance_id', instance['id'])
variables.put('openstack_instance_status', instance['status'])
variables.put('openstack_instance_endpoint', instance['network']['privateAddresses'][0])
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="update_service_instance">
			<depends>
				<task ref="get_openstack_instance_infos" />
			</depends>
			<inputFiles>
				<files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
			</inputFiles>
			<forkEnvironment >
				<additionalClasspath>
					<pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
				</additionalClasspath>
			</forkEnvironment>
			<scriptExecutable>
				<script>
					<code language="groovy">
						<![CDATA[
org.ow2.proactive.pca.service.client.ApiClient
org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Retrieve variables
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long
def openstack_instance_id = variables.get("openstack_instance_id")
def openstack_instance_status = variables.get("openstack_instance_status")
def openstack_instance_endpoint = variables.get("openstack_instance_endpoint")

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Update the related service infos
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
service_instance_data.setInstanceStatus("RUNNING")
service_instance_data.getVariables().put("openstack_instance_id", openstack_instance_id)
service_instance_data.getVariables().put("openstack_instance_status", openstack_instance_status)
service_instance_data.getInstanceEndpoints().put("openstack_instance_endpoint", openstack_instance_endpoint)
service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
	</taskFlow>
</job>
