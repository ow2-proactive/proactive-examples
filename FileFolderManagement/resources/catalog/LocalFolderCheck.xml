<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.13" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd"  name="Local_Folder_Check" projectName="BuildingBlock" priority="normal" onTaskError="suspendTask"  maxNumberOfExecution="2" >
  <variables>
    <variable name="FOLDER_TO_MONITOR" value="/home" />
    <variable name="THRESHOLD" value="30" />
    <variable name="INTERVAL_BETWEEN_CHECKS" value="3" />
    <variable name="DATE" value="null" />
  </variables>
  <genericInformation>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/proactive.png"/>
  </genericInformation>
  <taskFlow>
    <task name="folder_monitor" >
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <variables>
        <variable name="FOLDER_TO_MONITOR" value="/tmp" inherited="true" />
        <variable name="WORKFLOW_URL" value="https://try.activeeon.com/catalog/buckets/basic-examples/resources/some-workflow" inherited="true" model="PA:URL"/>
      </variables>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import java.text.SimpleDateFormat;

//%%%%%%%%%%%% Input %%%%%%%%%%%%%%%%%%%%%%%%%%%%%

long intervalsBetweenChecks = variables.get("INTERVAL_BETWEEN_CHECKS").toInteger(); // Time in seconds
int threshold               = variables.get("THRESHOLD").toInteger();
String folderToMonitor      = variables.get("FOLDER_TO_MONITOR");
File inputFilesFolder       = new File(folderToMonitor);
Date selectedDate = variables.get("DATE") == "null" ? new Date() : new Date().parse("d/M/yyyy H:m:s", variables.get("DATE"));
String selectedDateToString = new SimpleDateFormat("yyyy-M-d").format(selectedDate);

println("Inputs | intervalsBetweenChecks: ["+(String) intervalsBetweenChecks+"]");
println("Inputs | threshold: ["+(String) threshold+"]");
println("Inputs | selectedDate: ["+selectedDateToString+"]");
println("Inputs | folderToMonitor: ["+folderToMonitor+"]");

// Uncomment one of these functions to get started

//endTaskWhenFileCountAboveThreshold(inputFilesFolder, threshold, intervalsBetweenChecks);
endTaskWhenOverallFolderSizeAboveThreshold(inputFilesFolder, threshold, intervalsBetweenChecks);
//endTaskIfFileEditedAfterDate(inputFilesFolder, selectedDate, intervalsBetweenChecks);


//%%%%%%%%%%%% Code %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%% Check number of files does not exceed value %%

public endTaskWhenFileCountAboveThreshold(File inputFilesFolder, int threshold, intervalsBetweenChecks) {
    while(getFileCount(inputFilesFolder) <= threshold) {
        sleep(intervalsBetweenChecks * 1000);
    }
    return;
}

public getFileCount(File inputFilesFolder) {
    if (inputFilesFolder.listFiles() == null) {
      return 0;
    }
    int totalNumberOfFilesInTheFolder=inputFilesFolder.listFiles().length;
  	println("File count in selected folder: ["+totalNumberOfFilesInTheFolder+"]");
    return totalNumberOfFilesInTheFolder;
}


//%%%%%%%%%%%% Code %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%% Check overall folder size                   %%

public endTaskWhenOverallFolderSizeAboveThreshold(File inputFilesFolder, int threshold, intervalsBetweenChecks) {
    while(getFolderSize(inputFilesFolder) <= threshold) {
        sleep(intervalsBetweenChecks * 1000);
    }
    return;
}

public getFolderSize(File inputFilesFolder) {
    long totalSizeOfFolder = inputFilesFolder.directorySize();
   	println("Selected folder size: ["+totalSizeOfFolder+"]");
    return totalSizeOfFolder; // Size in bytes
}

//%%%%%%%%%%%% Code %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%% Check for file edited after selectedDate    %%

public endTaskIfFileEditedAfterDate(File inputFilesFolder, Date selectedDate, intervalsBetweenChecks) {
    while(!isFileEditedAfterDate(inputFilesFolder, selectedDate)) {
        println("No file edited after selectedDate.");
        sleep(intervalsBetweenChecks * 1000);
    }
    return;
}

public isFileEditedAfterDate(File inputFilesFolder, Date selectedDate) {
    inputFilesFolder.eachFileRecurse { file ->
        Date lastModified = new Date(file.lastModified());
        if (selectedDate < lastModified) {
            return true;
        }
    }
    return false;
}
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="dummy_task" >
      <depends>
        <task ref="folder_monitor"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="javascript">
            <![CDATA[
print("Dummy task triggered!");
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1139px;
            height:566px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-269.9875030517578px;left:-497.5px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_3785" style="top: 275px; left: 502.5px;"><a class="task-name"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">folder_monitor</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_3788" style="top: 403px; left: 502.5px;"><a class="task-name"><img src="/studio/images/Javascript.png" width="20px">&nbsp;<span class="name">dummy_task</span></a></div><svg style="position:absolute;left:536.9817132113825px;top:314.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 542px; top: 305px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 542px; top: 433px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 542px; top: 393px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>