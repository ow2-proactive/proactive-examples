<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.8"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
	name="LocalFolderCheck" projectName="BuildingBlock" priority="normal"
	onTaskError="suspendTask" maxNumberOfExecution="2">
	<variables>
		<variable name="FOLDER_TO_MONITOR" value="/home" />
		<variable name="THRESHOLD" value="30" />
		<variable name="INTERVAL_BETWEEN_CHECKS" value="3" />
		<variable name="DATE" value="null" />
	</variables>
	<genericInformation>
		<info name="pca.action.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/proactive.png" />
	</genericInformation>
	<taskFlow>
		<task name="folder_monitor">
			<description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
			<variables>
				<variable name="FOLDER_TO_MONITOR" value="/tmp" inherited="true" />
				<variable name="WORKFLOW_URL"
					value="https://try.activeeon.com/catalog/buckets/basic-examples/resources/some-workflow"
					inherited="true" model="PA:URL" />
			</variables>
			<scriptExecutable>
				<script>
					<code language="groovy">
            <![CDATA[
import java.text.SimpleDateFormat;

//%%%%%%%%%%%% Input %%%%%%%%%%%%%%%%%%%%%%%%%%%%%

long intervalsBetweenChecks = variables.get("INTERVAL_BETWEEN_CHECKS").toInteger(); // Time in seconds
int threshold               = variables.get("THRESHOLD").toInteger();
String folderToMonitor      = variables.get("FOLDER_TO_MONITOR");
File inputFilesFolder       = new File(folderToMonitor);
Date selectedDate = variables.get("DATE") == "null" ? new Date() : new Date().parse("d/M/yyyy H:m:s", variables.get("DATE"));
String selectedDateToString = new SimpleDateFormat("yyyy-M-d").format(selectedDate);

println("Inputs | intervalsBetweenChecks: ["+(String) intervalsBetweenChecks+"]");
println("Inputs | threshold: ["+(String) threshold+"]");
println("Inputs | selectedDate: ["+selectedDateToString+"]");
println("Inputs | folderToMonitor: ["+folderToMonitor+"]");

// Uncomment one of these functions to get started

//endTaskWhenFileCountAboveThreshold(inputFilesFolder, threshold, intervalsBetweenChecks);
endTaskWhenOverallFolderSizeAboveThreshold(inputFilesFolder, threshold, intervalsBetweenChecks);
//endTaskIfFileEditedAfterDate(inputFilesFolder, selectedDate, intervalsBetweenChecks);


//%%%%%%%%%%%% Code %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%% Check number of files does not exceed value %%

public endTaskWhenFileCountAboveThreshold(File inputFilesFolder, int threshold, intervalsBetweenChecks) {
    while(getFileCount(inputFilesFolder) <= threshold) {
        sleep(intervalsBetweenChecks * 1000);
    }
    return;
}

public getFileCount(File inputFilesFolder) {
    if (inputFilesFolder.listFiles() == null) {
      return 0;
    }
    int totalNumberOfFilesInTheFolder=inputFilesFolder.listFiles().length;
  	println("File count in selected folder: ["+totalNumberOfFilesInTheFolder+"]");
    return totalNumberOfFilesInTheFolder;
}


//%%%%%%%%%%%% Code %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%% Check overall folder size                   %%

public endTaskWhenOverallFolderSizeAboveThreshold(File inputFilesFolder, int threshold, intervalsBetweenChecks) {
    while(getFolderSize(inputFilesFolder) <= threshold) {
        sleep(intervalsBetweenChecks * 1000);
    }
    return;
}

public getFolderSize(File inputFilesFolder) {
    long totalSizeOfFolder = inputFilesFolder.directorySize();
   	println("Selected folder size: ["+totalSizeOfFolder+"]");
    return totalSizeOfFolder; // Size in bytes
}

//%%%%%%%%%%%% Code %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%% Check for file edited after selectedDate    %%

public endTaskIfFileEditedAfterDate(File inputFilesFolder, Date selectedDate, intervalsBetweenChecks) {
    while(!isFileEditedAfterDate(inputFilesFolder, selectedDate)) {
        println("No file edited after selectedDate.");
        sleep(intervalsBetweenChecks * 1000);
    }
    return;
}

public isFileEditedAfterDate(File inputFilesFolder, Date selectedDate) {
    inputFilesFolder.eachFileRecurse { file ->
        Date lastModified = new Date(file.lastModified());
        if (selectedDate < lastModified) {
            return true;
        }
    }
    return false;
}
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="dummy_task">
			<depends>
				<task ref="folder_monitor" />
			</depends>
			<scriptExecutable>
				<script>
					<code language="javascript">
            <![CDATA[
print("Dummy task triggered!");
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
	</taskFlow>
</job>