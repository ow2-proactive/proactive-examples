<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.10"
        xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
        name="replicated_sleeps"
        priority="normal"
>
  <variables>
    <variable name="node_source_name" value=""/>
    <variable name="nb_nodes" value=""/>
    <variable name="sleep_duration_in_seconds" value="5"/>
    <variable name="service_instance_id" value=""/>
  </variables>
  <taskFlow>
    <task name="split">
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println ""
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
runs = variables.get("nb_nodes")
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
    </task>
    <task name="sleep">
      <depends>
        <task ref="split"/>
      </depends>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.1.0.jar" accessMode="transferFromGlobalSpace"/>
        <files  includes="logging-interceptor-2.7.5.jar" accessMode="transferFromGlobalSpace"/>
        <files  includes="okhttp-2.7.5.jar" accessMode="transferFromGlobalSpace"/>
        <files  includes="okio-1.6.0.jar" accessMode="transferFromGlobalSpace"/>
        <files  includes="gson-2.6.2.jar" accessMode="transferFromGlobalSpace"/>
        <files  includes="spring-web-4.2.5.RELEASE.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <selection>
        <script
                type="dynamic" >
          <code language="groovy">
            <![CDATA[
// Node selection according to its node source name
if (variables.get("node_source_name").equals(System.getProperty("proactive.node.nodesource"))) {
    selected = true
} else {
   selected = false
}
]]>
          </code>
        </script>
      </selection>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.1.0.jar"/>
          <pathElement path="logging-interceptor-2.7.5.jar"/>
          <pathElement path="okhttp-2.7.5.jar"/>
          <pathElement path="okio-1.6.0.jar"/>
          <pathElement path="gson-2.6.2.jar"/>
          <pathElement path="spring-web-4.2.5.RELEASE.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import io.swagger.client.ApiClient
import io.swagger.client.api.ServiceInstanceRestApi
import io.swagger.client.model.ServiceInstanceData
import java.net.InetAddress

// Retrieve variables
def sleep_duration_in_seconds = variables.get("sleep_duration_in_seconds") as Integer
def service_instance_id = variables.get("service_instance_id") as Long
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def task_id = variables.get("PA_TASK_REPLICATION")

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")
def current_IP_address =  InetAddress.getLocalHost().getHostAddress()

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Store the node IP address into the PCA service instance
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
service_instance_data.getInstanceEndpoints().put("node_" + task_id + "_IP_address", current_IP_address)
service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)

// Sleep while related servince instance state does not change to VOID
while(true) {
  sleep(sleep_duration_in_seconds * 1000)

  def current_service_instance_status = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id).getInstanceStatus()
  println "current_service_instance_status " + current_service_instance_status

  if (current_service_instance_status == "VOID")
    break
}
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>

    <task name="merge">
      <depends>
        <task ref="sleep"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println ""
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>

  </taskFlow>
</job>