<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.10"
        xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
        name="Untitled Workflow 1"
        priority="normal"
        onTaskError="continueJobExecution"
        maxNumberOfExecution="2"
>
  <variables>
    <variable name="node_source_name" value="" />
    <variable name="nb_nodes" value="" />
    <variable name="sleep_duration_in_seconds" value="" />
    <variable name="service_instance_id" value="" />
  </variables>
  <taskFlow>
    <task name="useless_0">
      <genericInformation>
        <info name="TASK.ICON" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println ""
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
runs=variables.get("nb_nodes")
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
    </task>
    <task name="sleep">
      <genericInformation>
        <info name="TASK.ICON" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="useless_0"/>
      </depends>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <selection>
        <script
                type="dynamic" >
          <code language="groovy">
            <![CDATA[
if (variables.get("node_source_name").equals(System.getProperty("proactive.node.nodesource"))) {
    selected = true
} else {
   selected = false
}
]]>
          </code>
        </script>
      </selection>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
import org.objectweb.proactive.api.PAActiveObject

def node_url = PAActiveObject.getNode().getNodeInformation().getURL()
new File(localspace, "node_url.txt").text = node_url
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
org.ow2.proactive.pca.service.client.ApiClient
org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Retrieve variables
def sleep_duration_in_seconds = variables.get("sleep_duration_in_seconds") as Integer
def service_instance_id = variables.get("service_instance_id") as Long
def task_id = variables.get("PA_TASK_REPLICATION")
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")
def node_url = new File(localspace, "node_url.txt").text
def node_name = "node_url_" + task_id

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Store the node url into the pca service instance endpoints
service_instance_rest_api.createNewInstanceVariablesUsingPUT(service_instance_id, [node_name : node_url])

// Sleep while related servince instance state does not change to VOID
while(true) {
  def current_service_instance_status = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id).getInstanceStatus()
  if (current_service_instance_status == "FINISHED")
    break
  sleep(sleep_duration_in_seconds * 1000)
}
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="useless_1">
      <genericInformation>
        <info name="TASK.ICON" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="sleep"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println ""
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>