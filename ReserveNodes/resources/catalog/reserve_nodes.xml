<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.10"
        xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
        name="reserve_nodes" projectName="Cloud Automation - Deployment" priority="normal"
        onTaskError="continueJobExecution" maxNumberOfExecution="2"
>
  <variables>
    <variable name="node_source_name" value="local"/>
    <variable name="nb_nodes" value="2"/>
  </variables>
  <description>
    <![CDATA[ Reserve ProActive nodes. ]]>
  </description>
  <genericInformation>
    <info name="pca.service.id" value="HDFS-Spark"/>
    <info name="pca.states" value="(VOID,PA_NODES_RESERVED)"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
    <info name="group" value="public-objects" />
  </genericInformation>
  <taskFlow>
    <task name="reserve_nodes">
      <variables>
        <variable name="sleep_duration_in_seconds" value="5" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
      </genericInformation>
      <inputFiles>
        <files  includes="replicated_sleeps.xml" accessMode="transferFromGlobalSpace"/>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.scheduler.common.job.*
import org.ow2.proactive.scheduler.common.task.*
import org.ow2.proactive.scripting.*
org.ow2.proactive.pca.service.client.ApiClient
org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Retrieve variables
def node_source_name = variables.get("node_source_name")
def nb_nodes = variables.get("nb_nodes") as Integer
def sleep_duration_in_seconds = variables.get("sleep_duration_in_seconds")
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Get schedulerapi access
schedulerapi.connect()

// Reserve required proactive nodes by submitting replicated_sleeps.xml
def parameters = new HashMap()
parameters.put("node_source_name", node_source_name)
parameters.put("nb_nodes", nb_nodes)
parameters.put("sleep_duration_in_seconds", sleep_duration_in_seconds)
parameters.put("service_instance_id", service_instance_id)
def job_id = schedulerapi.submit(new File(localspace, "replicated_sleeps.xml"), parameters)

// Ensure resources are blocked (sleeps run fine)
while (true) {
  def running_sleep_tasks = schedulerapi.getJobState(job_id).getTasks().findAll { it.getName().substring(0,5) == "sleep" && it.getStatus() == TaskStatus.RUNNING }
  if (running_sleep_tasks.size() == nb_nodes)
    break
}

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Update the related service instance status
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
service_instance_data.setInstanceStatus("PA_NODES_RESERVED")
service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>