<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.10"
        xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
        name="free_nodes" projectName="Cloud Automation - Lifecycle" priority="normal"
        onTaskError="continueJobExecution" maxNumberOfExecution="2"
>
  <description>
    <![CDATA[ Reserve some ProActive nodes. ]]>
  </description>
  <genericInformation>
    <info name="pca.service.id" value="HDFS-Spark"/>
    <info name="pca.states" value="(PA_NODES_RESERVED,FINISHED)"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
    <info name="group" value="public-objects" />
  </genericInformation>
  <taskFlow>
    <task name="free_nodes">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
      </genericInformation>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
org.ow2.proactive.pca.service.client.ApiClient
org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Retrieve variables
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long

println "service_instance_id " + service_instance_id

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Get schedulerapi access
schedulerapi.connect()

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)

def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Update the related service instance status
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
service_instance_data.setInstanceStatus("FINISHED")
service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>