<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.14" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="VCENTER_Restart_VM_${VCENTER_VM_NAME}" onTaskError="continueJobExecution" priority="normal" tags="VMware,Vsphere,VM,Container,VM,PowerCLI" projectName="3. Rest Advanced Workflows" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd">
  <variables>
    <variable model="PA:URL" name="VCENTER_ENDPOINT" value="https://xxx-vcenter/rest"  description="VMware vCenter server base URL" group="VMware vCenter Connection"/>
    <variable model="" name="VCENTER_USER" value="" description="Basic authentication user" group="VMware vCenter Connection"/>
    <variable model="PA:HIDDEN" name="VCENTER_PASSWORD" value="" description="Basic authentication password" group="VMware vCenter Connection"/>
    <variable model="" name="VCENTER_VM_NAME" value="" description="Name of the VM to restart" group="VMware vCenter parameters"/>
    <variable model="" name="SERVICE_NAME" value="" description="The name of the service to check at the VM startup" group="VMware vCenter parameters"/>
    <variable model="PA:URL" name="CENTREON_ENDPOINT" value="https://centreon.xxx/centreon/api"  description="Centreon server base URL" group="Centreon Connection"/>
    <variable model="" name="CENTREON_USER" value="" description="User login needed to connect to Centreon server"  group="Centreon Connection"/>
    <variable model="" name="CENTREON_PASSWORD" value="" description="User password needed to connect to Centreon server"  group="Centreon Connection"/>
    <variable model="" name="CENTREON_NOTIF_HOST" value=""  description="The host from which the notification is sent to Centreon" group="Centreon Parameters"/>
    <variable model="" name="CENTREON_NOTIF_SERVICE" value="" description="Name of the Centreon service that will receive the notification" group="Centreon Parameters"/>
  </variables>
  <genericInformation>
<info name="bucketName" value="vmware"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="authentication">
      <description>
        <![CDATA[ A task performing a rest POST request using a json request body.

This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be "application/json" with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name> ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${VCENTER_ENDPOINT}" description="Base url of the request (inherited from job variable)"/>
        <variable inherited="false" name="USER" value="${VCENTER_USER}" description="Basic auth user (if required, inherited from job variable)"/>
        <variable inherited="false" name="PASSWORD" value="${VCENTER_PASSWORD}" description="Basic auth password default value is empty (Inherited from the WF variables)"/>
        <variable inherited="false" name="PATH" value="/com/vmware/cis/session" description="Path of the request (relative to the base url)"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true" description="If true, disable SSL certificate verification"/>
        <variable inherited="false" name="CONTENT_TYPE" value="application/json;charset = UTF-8" description="Content-Type of the request"/>
        <variable inherited="false" model="PA:JSON" name="REQUEST_BODY" value="{ }" description="A JSON parameter containing the request body."/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true" description="If true, print the full request and response content in the task output."/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="json" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"/>
        <variable inherited="false" name="RESPONSE_PATH" value="value" description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png"/>
      </genericInformation>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <selection>
        <script type="static">
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_host_name/raw">
            <arguments>
              <argument value="srv-scheduler"/>
            </arguments>
          </file>
        </script>
      </selection>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
println "vSphere 6.7 Authentication"
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
variables.put("VCENTER_SESSIONID", result)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            83.484375
        </positionTop>
        <positionLeft>
            412.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="shutdown_vm">
      <description>
        <![CDATA[ A task performing a rest POST request using a json request body.

This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be "application/json" with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name> ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${VCENTER_ENDPOINT}" description="Base url of the request (inherited from job variable)"/>
        <variable inherited="false" name="PATH" value="/vcenter/vm/${VCENTER_VM_ID}/guest/power" description="Path of the request (relative to the base url)"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true" description="If true, disable SSL certificate verification"/>
        <variable inherited="false" name="CONTENT_TYPE" value="application/json;charset = UTF-8" description="Content-Type of the request"/>
        <variable inherited="false" model="PA:JSON" name="REQUEST_BODY" value="{ }" description="A JSON parameter containing the request body."/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true" description="If true, print the full request and response content in the task output."/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="string" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"/>
        <variable inherited="false" name="RESPONSE_PATH" value="." description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"/>
        <variable inherited="false" name="HEADER_vmware-api-session-id" value="${VCENTER_SESSIONID}"/>
        <variable inherited="false" name="QUERY_PARAM_action" value="shutdown"/>
        <variable inherited="false" name="USER" value="" description="Basic auth user (if required, inherited from job variable)"/>
        <variable inherited="false" name="PASSWORD" value="" description="Basic auth password default value is empty (Inherited from the WF variables)"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png"/>
      </genericInformation>
      <depends>
        <task ref="If"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <selection>
        <script type="static">
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_host_name/raw">
            <arguments>
              <argument value="srv-scheduler"/>
            </arguments>
          </file>
        </script>
      </selection>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/propagate_error/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            723.484375
        </positionTop>
        <positionLeft>
            274.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="wait_vm_shutdown">
      <description>
        <![CDATA[ A task performing a rest GET request.
This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
PARAM_<param_name> ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${VCENTER_ENDPOINT}" description="Base url of the request (inherited from job variable)"/>
        <variable inherited="false" name="PATH" value="/vcenter/vm/${VCENTER_VM_ID}/power" description="Path of the request (relative to the base url)"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true" description="If true, disable SSL certificate verification"/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true" description="If true, print the full request and response content in the task output."/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="json" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"/>
        <variable inherited="false" name="RESPONSE_PATH" value="value.state" description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"/>
        <variable inherited="false" name="HEADER_vmware-api-session-id" value="${VCENTER_SESSIONID}"/>
        <variable inherited="false" name="USER" value="" description="Basic auth user (if required, inherited from job variable)"/>
        <variable inherited="false" name="PASSWORD" value="" description="Basic auth password default value is empty (Inherited from the WF variables)"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png"/>
      </genericInformation>
      <depends>
        <task ref="shutdown_vm"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <selection>
        <script type="static">
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_host_name/raw">
            <arguments>
              <argument value="srv-scheduler"/>
            </arguments>
          </file>
        </script>
      </selection>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/propagate_error/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given()

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("PARAM_")}).forEach({entry -> restCall = restCall.param(entry.getKey().replace("PARAM_",""), entry.getValue()) });

if (debug) {
    println "-------------- REQUEST ------------------"
	restCall = restCall.log().all()
}

response = restCall.get(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(HttpStatus.SC_OK)
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <loop target="wait_vm_shutdown">
          <script>
            <code language="groovy">
              <![CDATA[
loop=!(result.equals("POWERED_OFF") || result instanceof Exception)
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            851.484375
        </positionTop>
        <positionLeft>
            274.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="session_logout">
      <description>
        <![CDATA[ A task performing a rest DELETE request using a json request body.

This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be "application/json" with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name> ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${VCENTER_ENDPOINT}" description="Base url of the request (inherited from job variable)"/>
        <variable inherited="true" name="USER" value="" description="Basic auth user (if required, inherited from job variable)"/>
        <variable inherited="true" model="PA:HIDDEN" name="PASSWORD" value="" description="Basic auth password default value is empty (Inherited from the WF variables)"/>
        <variable inherited="false" name="PATH" value="/com/vmware/cis/session" description="Path of the request (relative to the base url)"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true" description="If true, disable SSL certificate verification"/>
        <variable inherited="false" name="CONTENT_TYPE" value="application/json;charset = UTF-8" description="Content-Type of the request"/>
        <variable inherited="false" model="PA:JSON" name="REQUEST_BODY" value="{ }" description="A JSON parameter containing the request body."/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true" description="If true, print the full request and response content in the task output."/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="string" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"/>
        <variable inherited="false" name="RESPONSE_PATH" value="." description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"/>
        <variable inherited="false" name="HEADER_vmware-api-session-id" value="${VCENTER_SESSIONID}"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png"/>
      </genericInformation>
      <depends>
        <task ref="Continuation"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <selection>
        <script type="static">
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_host_name/raw">
            <arguments>
              <argument value="srv-scheduler"/>
            </arguments>
          </file>
        </script>
      </selection>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.delete(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            723.484375
        </positionTop>
        <positionLeft>
            550.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="get_vm_id_by_name">
      <description>
        <![CDATA[ A task performing a rest GET request.
This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
PARAM_<param_name> ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${VCENTER_ENDPOINT}" description="Base url of the request (inherited from job variable)"/>
        <variable inherited="false" name="USER" value="" description="Basic auth user (if required, inherited from job variable)"/>
        <variable inherited="false" model="PA:HIDDEN" name="PASSWORD" value="" description="Basic auth password default value is empty (Inherited from the WF variables)"/>
        <variable inherited="false" name="PATH" value="/vcenter/vm" description="Path of the request (relative to the base url)"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true" description="If true, disable SSL certificate verification"/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true" description="If true, print the full request and response content in the task output."/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="json" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"/>
        <variable inherited="false" name="RESPONSE_PATH" value="value.vm[0]" description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"/>
        <variable inherited="false" name="HEADER_vmware-api-session-id" value="${VCENTER_SESSIONID}"/>
        <variable inherited="false" name="PARAM_filter.names.1" value="${VCENTER_VM_NAME}"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png"/>
      </genericInformation>
      <depends>
        <task ref="authentication"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <selection>
        <script type="static">
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_host_name/raw">
            <arguments>
              <argument value="srv-scheduler"/>
            </arguments>
          </file>
        </script>
      </selection>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/propagate_error/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given()

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("PARAM_")}).forEach({entry -> restCall = restCall.param(entry.getKey().replace("PARAM_",""), entry.getValue()) });

if (debug) {
    println "-------------- REQUEST ------------------"
	restCall = restCall.log().all()
}

response = restCall.get(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(HttpStatus.SC_OK)
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
if (result!=null){
   variables.put("VCENTER_VM_ID",result)
   println("Fetched VM ID: " + variables.get("VCENTER_VM_ID"))
} else {
    throw new RuntimeException("VM '"+variables.get("VCENTER_VM_NAME")+"' does not exist")
}
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            211.484375
        </positionTop>
        <positionLeft>
            412.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="get_vm_state">
      <description>
        <![CDATA[ A task performing a rest GET request.
This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
PARAM_<param_name> ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${VCENTER_ENDPOINT}" description="Base url of the request (inherited from job variable)"/>
        <variable inherited="false" name="PATH" value="/vcenter/vm/${VCENTER_VM_ID}/power" description="Path of the request (relative to the base url)"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true" description="If true, disable SSL certificate verification"/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true" description="If true, print the full request and response content in the task output."/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="json" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"/>
        <variable inherited="false" name="RESPONSE_PATH" value="value.state" description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"/>
        <variable inherited="false" name="HEADER_vmware-api-session-id" value="${VCENTER_SESSIONID}"/>
        <variable inherited="false" name="USER" value="" description="Basic auth user (if required, inherited from job variable)"/>
        <variable inherited="false" name="PASSWORD" value="" description="Basic auth password default value is empty (Inherited from the WF variables)"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png"/>
      </genericInformation>
      <depends>
        <task ref="get_vm_id_by_name"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <selection>
        <script type="static">
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_host_name/raw">
            <arguments>
              <argument value="srv-scheduler"/>
            </arguments>
          </file>
        </script>
      </selection>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/propagate_error/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given()

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("PARAM_")}).forEach({entry -> restCall = restCall.param(entry.getKey().replace("PARAM_",""), entry.getValue()) });

if (debug) {
    println "-------------- REQUEST ------------------"
	restCall = restCall.log().all()
}

response = restCall.get(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(HttpStatus.SC_OK)
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
variables.put("VCENTER_VM_STATE", result)
println("Fetched VM state: " + variables.get("VCENTER_VM_STATE"))
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            339.484375
        </positionTop>
        <positionLeft>
            412.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Condition">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
        <info name="Documentation" value="user/ProActiveUserGuide.html#_branch"/>
      </genericInformation>
      <depends>
        <task ref="get_vm_state"/>
      </depends>
      <selection>
        <script type="static">
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_host_name/raw">
            <arguments>
              <argument value="srv-scheduler"/>
            </arguments>
          </file>
        </script>
      </selection>
      <pre>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/propagate_error/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <if continuation="Continuation" else="Else" target="If">
          <script>
            <code language="groovy">
              <![CDATA[
if(!variables.get("VCENTER_VM_STATE").equals("POWERED_OFF")){
    branch = "if";
} else {
    branch = "else";
}
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            467.484375
        </positionTop>
        <positionLeft>
            412.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="If">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <selection>
        <script type="static">
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_host_name/raw">
            <arguments>
              <argument value="srv-scheduler"/>
            </arguments>
          </file>
        </script>
      </selection>
      <pre>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/propagate_error/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("Shutting down the VM: "+ variables.get("VM_NAME") +"...")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="start"/>
      <metadata>
        <positionTop>
            595.484375
        </positionTop>
        <positionLeft>
            274.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Else">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def message = ""

variables.put("CENTREON_NOTIF_TIMESTAMP","" + (long)(System.currentTimeMillis()/1000))

if (results[0].hadException()){
    message = "An error occurred while restarting VM "+ variables.get("VCENTER_VM_NAME")
    variables.put("CENTREON_NOTIF_STATUS",2)
    variables.put("CENTREON_NOTIF_MESSAGE", message)
} else {
    message = "VM "+ variables.get("VCENTER_VM_NAME") +" is already started."
    variables.put("CENTREON_NOTIF_STATUS",0)
    variables.put("CENTREON_NOTIF_MESSAGE", message)
}

println("Message to be sent to Centreon: "+message)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            595.484375
        </positionTop>
        <positionLeft>
            412.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Continuation">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println("Subbmitting execution results to Centreon")
println("Status: "+variables.get("workflowStatus")+":  "+variables.get("workflowStatusMessage"))
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            595.484375
        </positionTop>
        <positionLeft>
            550.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="prepare_centreon_info">
      <depends>
        <task ref="wait_windows_service_running"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def message = ""

variables.put("CENTREON_NOTIF_TIMESTAMP","" + (long)(System.currentTimeMillis()/1000))

if (results[0].hadException()){
    message = "An error occurred while restarting VM "+ variables.get("VCENTER_VM_NAME")
    variables.put("CENTREON_NOTIF_STATUS",2)
    variables.put("CENTREON_NOTIF_MESSAGE", message)
} else {
    message = "VM "+ variables.get("VCENTER_VM_NAME") +" restarted successfully."
    variables.put("CENTREON_NOTIF_STATUS",0)
    variables.put("CENTREON_NOTIF_MESSAGE", message)
}

println("Message to be sent to Centreon: "+message)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="end"/>
      <metadata>
        <positionTop>
            1361.484375
        </positionTop>
        <positionLeft>
            274.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="centreon_authentication">
      <description>
        <![CDATA[ A task performing a rest POST request using form data.

This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header, form or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
PARAM_<param_name>
QUERY_PARAM_<param_name> ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${CENTREON_ENDPOINT}" description="Base url of the request (inherited from job variable)"/>
        <variable inherited="false" name="PATH" value="/index.php" description="Path of the request (relative to the base url)"/>
        <variable inherited="false" model="PA:LIST(application/x-www-form-urlencoded,multipart/form-data)" name="CONTENT_TYPE" value="application/x-www-form-urlencoded" description="Content-Type of the request"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true" description="If true, disable SSL certificate verification"/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true" description="If true, print the full request and response content in the task output."/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="json" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"/>
        <variable inherited="false" name="RESPONSE_PATH" value="authToken" description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"/>
        <variable inherited="false" name="PARAM_username" value="${CENTREON_USER}"/>
        <variable inherited="false" name="QUERY_PARAM_action" value="authenticate"/>
        <variable inherited="false" name="PARAM_password" value="${CENTREON_PASSWORD}"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/centreon.png"/>
      </genericInformation>
      <depends>
        <task ref="session_logout"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <selection>
        <script type="static">
          <code language="groovy">
            <![CDATA[
/**
 * Script which verifies that the current node runs on the given machine (defined by its hostname)
 *
 * Arguments:
 * machine host name
 */

import com.google.common.base.Strings;

if (args.length != 1) {
    println "Incorrect number of arguments, expected 1, received " + args.length;
    selected = false;
    return;
}

machineName = args[0]

if (Strings.isNullOrEmpty(machineName)) {
    println "Given host name was empty";
    selected = false;
    return;
}

machineName = machineName.trim().toLowerCase()

println "Hostname " + nodehost.toLowerCase() + " (expected :  " + machineName + ")";

selected = (nodehost.toLowerCase() == machineName)
]]>
          </code>
          <arguments>
            <argument value="srv-scheduler"/>
          </arguments>
        </script>
      </selection>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))
contentType = variables.get("CONTENT_TYPE")
isMultiPart = contentType.equals("multipart/form-data")

restCall = given().contentType(contentType + ";charset = UTF-8")

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("PARAM_")}).forEach({entry -> restCall = (isMultiPart ? restCall.multiPart(entry.getKey().replace("PARAM_",""), entry.getValue()) : restCall.formParam(entry.getKey().replace("PARAM_",""), entry.getValue()) )});

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}

response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
variables.put("AUTH_TOKEN", result)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            851.484375
        </positionTop>
        <positionLeft>
            550.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="submit_results">
      <description>
        <![CDATA[ A task performing a rest POST request using a json request body.

This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be "application/json" with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name> ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${CENTREON_ENDPOINT}" description="Base url of the request (inherited from job variable)"/>
        <variable inherited="false" name="PATH" value="/index.php" description="Path of the request (relative to the base url)"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true" description="If true, disable SSL certificate verification"/>
        <variable inherited="false" name="CONTENT_TYPE" value="application/json;charset = UTF-8" description="Content-Type of the request"/>
        <variable inherited="false" model="PA:JSON" name="REQUEST_BODY" value="{   &quot;results&quot;: [     {      &quot;updatetime&quot;: &quot;${CENTREON_NOTIF_TIMESTAMP}&quot;,         &quot;host&quot;: &quot;${CENTREON_NOTIF_HOST}&quot;,     &quot;service&quot;: &quot;${CENTREON_NOTIF_SERVICE}&quot;,        &quot;status&quot;: &quot;${CENTREON_NOTIF_STATUS}&quot;,        &quot;output&quot;: &quot;${CENTREON_NOTIF_MESSAGE}&quot;     }  ]  }" description="A JSON parameter containing the request body."/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true" description="If true, print the full request and response content in the task output."/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="json" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"/>
        <variable inherited="false" name="RESPONSE_PATH" value="." description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"/>
        <variable inherited="false" name="HEADER_centreon-auth-token" value="${AUTH_TOKEN}"/>
        <variable inherited="false" name="QUERY_PARAM_action" value="submit"/>
        <variable inherited="false" name="QUERY_PARAM_object" value="centreon_submit_results"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/centreon.png"/>
      </genericInformation>
      <depends>
        <task ref="centreon_authentication"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <selection>
        <script type="static">
          <code language="groovy">
            <![CDATA[
/**
 * Script which verifies that the current node runs on the given machine (defined by its hostname)
 *
 * Arguments:
 * machine host name
 */

import com.google.common.base.Strings;

if (args.length != 1) {
    println "Incorrect number of arguments, expected 1, received " + args.length;
    selected = false;
    return;
}

machineName = args[0]

if (Strings.isNullOrEmpty(machineName)) {
    println "Given host name was empty";
    selected = false;
    return;
}

machineName = machineName.trim().toLowerCase()

println "Hostname " + nodehost.toLowerCase() + " (expected :  " + machineName + ")";

selected = (nodehost.toLowerCase() == machineName)
]]>
          </code>
          <arguments>
            <argument value="srv-scheduler"/>
          </arguments>
        </script>
      </selection>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            979.484375
        </positionTop>
        <positionLeft>
            550.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="start_vm">
      <description>
        <![CDATA[ A task performing a rest POST request using a json request body.

This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be "application/json" with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name> ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${VCENTER_ENDPOINT}" description="Base url of the request (inherited from job variable)"/>
        <variable inherited="false" name="PATH" value="/vcenter/vm/${VCENTER_VM_ID}/power/start" description="Path of the request (relative to the base url)"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true" description="If true, disable SSL certificate verification"/>
        <variable inherited="false" name="CONTENT_TYPE" value="application/json;charset = UTF-8" description="Content-Type of the request"/>
        <variable inherited="false" model="PA:JSON" name="REQUEST_BODY" value="{ }" description="A JSON parameter containing the request body."/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true" description="If true, print the full request and response content in the task output."/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="string" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"/>
        <variable inherited="false" name="RESPONSE_PATH" value="." description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"/>
        <variable inherited="false" name="HEADER_vmware-api-session-id" value="${VCENTER_SESSIONID}"/>
        <variable inherited="false" name="USER" value="" description="Basic auth user (if required, inherited from job variable)"/>
        <variable inherited="false" name="PASSWORD" value="" description="Basic auth password default value is empty (Inherited from the WF variables)"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png"/>
      </genericInformation>
      <depends>
        <task ref="wait_vm_shutdown"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <selection>
        <script type="static">
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_host_name/raw">
            <arguments>
              <argument value="srv-scheduler"/>
            </arguments>
          </file>
        </script>
      </selection>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/propagate_error/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            979.484375
        </positionTop>
        <positionLeft>
            274.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="wait_vm_is_running">
      <description>
        <![CDATA[ A task performing a rest GET request.
This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
PARAM_<param_name> ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${VCENTER_ENDPOINT}" description="Base url of the request (inherited from job variable)"/>
        <variable inherited="false" name="PATH" value="/vcenter/vm/${VCENTER_VM_ID}/guest/power" description="Path of the request (relative to the base url)"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true" description="If true, disable SSL certificate verification"/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true" description="If true, print the full request and response content in the task output."/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="json" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"/>
        <variable inherited="false" name="RESPONSE_PATH" value="value.state" description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"/>
        <variable inherited="false" name="HEADER_vmware-api-session-id" value="${VCENTER_SESSIONID}"/>
        <variable inherited="false" name="USER" value="" description="Basic auth user (if required, inherited from job variable)"/>
        <variable inherited="false" name="PASSWORD" value="" description="Basic auth password default value is empty (Inherited from the WF variables)"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png"/>
      </genericInformation>
      <depends>
        <task ref="start_vm"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <selection>
        <script type="static">
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_host_name/raw">
            <arguments>
              <argument value="srv-scheduler"/>
            </arguments>
          </file>
        </script>
      </selection>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/propagate_error/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given()

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("PARAM_")}).forEach({entry -> restCall = restCall.param(entry.getKey().replace("PARAM_",""), entry.getValue()) });

if (debug) {
    println "-------------- REQUEST ------------------"
	restCall = restCall.log().all()
}

response = restCall.get(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(HttpStatus.SC_OK)
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <loop target="wait_vm_is_running">
          <script>
            <code language="groovy">
              <![CDATA[
loop=!(result.equals("RUNNING")  || result instanceof Exception)
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            1107.484375
        </positionTop>
        <positionLeft>
            274.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="wait_windows_service_running" onTaskError="continueJobExecution">
      <description>
        <![CDATA[ The simplest task, ran by a cmd engine. ]]>
      </description>
      <variables>
        <variable inherited="true" name="SERVICE_NAME" value=""/>
        <variable inherited="false" name="SERVICE_TARGET_HOST" value=""/>
      </variables>
      <genericInformation>
        <info name="PRE_SCRIPT_AS_FILE" value="check_service.ps1"/>
      </genericInformation>
      <depends>
        <task ref="wait_vm_is_running"/>
      </depends>
      <selection>
        <script type="static">
          <code language="groovy">
            <![CDATA[
/**
 * Script which verifies that the current node runs on the given machine (defined by its hostname)
 *
 * Arguments:
 * machine host name
 */

import com.google.common.base.Strings;

if (args.length != 1) {
    println "Incorrect number of arguments, expected 1, received " + args.length;
    selected = false;
    return;
}

machineName = args[0]

if (Strings.isNullOrEmpty(machineName)) {
    println "Given host name was empty";
    selected = false;
    return;
}

machineName = machineName.trim().toLowerCase()

println "Hostname " + nodehost.toLowerCase() + " (expected :  " + machineName + ")";

selected = (nodehost.toLowerCase() == machineName)
]]>
          </code>
          <arguments>
            <argument value="${SERVICE_TARGET_HOST}"/>
          </arguments>
        </script>
      </selection>
      <pre>
        <script>
          <code language="powershell">
            <![CDATA[
get-service -computername "$Env:variables_VCENTER_VM_NAME" "$Env:variables_SERVICE_NAME" | fl Status | Out-File ".variables"
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cmd">
            <![CDATA[
if "%variables_SERVICE_NAME%"=="" (
  echo "no services to check" > .variables
) else (
   powershell -File "check_service.ps1"
)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <loop target="wait_windows_service_running">
          <script>
            <code language="groovy">
              <![CDATA[
def serviceName = variables.get("SERVICE_NAME")
if (serviceName) { 
    if (variables.get("Status") != "Running"){
        loop = "* * * * *"
        if (variables.get("PA_TASK_ITERATION") >= 30) {
            throw new RuntimeException("Checking service '"+ serviceName +"' failed because of a timeout.")
        }
    } else {
        loop = false
    }
    println("Service '"+ serviceName +"' status:  "+ variables.get("Status"))
} else {	
    loop = false
    println("No services to check")
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
/**
 * Post script which reads the contents of the localspace/.variables file and use it to update the variables map
 * This post script can be used when someone wants to modify variables from shell tasks (bash or cmd).
 *
 * Simply create the file in the main bash script, e.g.:
 *
 * echo "VAR1=example1" > "$localspace/.variables"
 * echo "VAR2=example2" >> "$localspace/.variables"
 *
 * Then add this post script to automatically propagate the changes in the workflow
 *
 */

new File(localspace, ".variables").eachLine { line ->
    keyvalue = line.split("\\s*:\\s*")
    if (keyvalue.length == 2) {
        variables.put(keyvalue[0], keyvalue[1])
    }
}
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            1235.484375
        </positionTop>
        <positionLeft>
            274.25
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2136px;
            height:2780px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-78.484375px;left:-269.25px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_398" style="top: 83.4996px; left: 412.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest POST request using a json request body.

This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be &quot;application/json&quot; with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name>"><img src="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png" width="20px">&nbsp;<span class="name">authentication</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_401" style="top: 723.5px; left: 274.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest POST request using a json request body.

This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be &quot;application/json&quot; with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name>"><img src="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png" width="20px">&nbsp;<span class="name">shutdown_vm</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_404" style="top: 851.5px; left: 274.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest GET request.
This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
PARAM_<param_name>"><img src="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png" width="20px">&nbsp;<span class="name">wait_vm_shutdown</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_407" style="top: 723.5px; left: 550.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest DELETE request using a json request body.

This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be &quot;application/json&quot; with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name>"><img src="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png" width="20px">&nbsp;<span class="name">session_logout</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_410" style="top: 211.5px; left: 412.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest GET request.
This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
PARAM_<param_name>"><img src="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png" width="20px">&nbsp;<span class="name">get_vm_id_by_name</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_413" style="top: 339.5px; left: 412.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest GET request.
This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
PARAM_<param_name>"><img src="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png" width="20px">&nbsp;<span class="name">get_vm_state</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_416" style="top: 467.5px; left: 412.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Condition</span></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_419" style="top: 595.5px; left: 274.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">If</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_422" style="top: 595.5px; left: 412.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Else</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_425" style="top: 595.5px; left: 550.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Continuation</span></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_428" style="top: 1361.5px; left: 274.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">prepare_centreon_info</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_431" style="top: 851.5px; left: 550.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest POST request using form data.

This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header, form or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
PARAM_<param_name>
QUERY_PARAM_<param_name>"><img src="/automation-dashboard/styles/patterns/img/wf-icons/centreon.png" width="20px">&nbsp;<span class="name">centreon_authentication</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_434" style="top: 979.5px; left: 550.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest POST request using a json request body.

This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be &quot;application/json&quot; with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name>"><img src="/automation-dashboard/styles/patterns/img/wf-icons/centreon.png" width="20px">&nbsp;<span class="name">submit_results</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_437" style="top: 979.5px; left: 274.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest POST request using a json request body.

This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be &quot;application/json&quot; with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name>"><img src="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png" width="20px">&nbsp;<span class="name">start_vm</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_440" style="top: 1107.5px; left: 274.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest GET request.
This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
PARAM_<param_name>"><img src="/automation-dashboard/styles/patterns/img/wf-icons/vsphere.png" width="20px">&nbsp;<span class="name">wait_vm_is_running</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_443" style="top: 1235.5px; left: 274.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="The simplest task, ran by a cmd engine."><img src="/studio/images/WindowsCmd.png" width="20px">&nbsp;<span class="name">wait_windows_service_running</span></a></div><svg style="position:absolute;left:308.98171321138256px;top:634.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path></svg><svg style="position:absolute;left:313.5px;top:762.5px" width="31" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 10 88 C 20 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M11.97856,66.303232 L15.663632585537552,45.43650633353954 L9.722170709660112,52.486260285096634 L1.846660870634195,47.69289562387942 L11.97856,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M11.97856,66.303232 L15.663632585537552,45.43650633353954 L9.722170709660112,52.486260285096634 L1.846660870634195,47.69289562387942 L11.97856,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:374.0266769263776px;top:800.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_457" style="position: absolute; transform: translate(-50%, -50%); left: 386px; top: 870.5px;">loop</div><svg style="position:absolute;left:589.5px;top:634.5px" width="22" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 1 88 C 11 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M3.7341562499999994,66.78168750000002 L9.900828592736769,46.50923939383077 L3.155021153255475,52.793671109542124 L-4.087187797721125,47.08837449057529 L3.7341562499999994,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M3.7341562499999994,66.78168750000002 L9.900828592736769,46.50923939383077 L3.155021153255475,52.793671109542124 L-4.087187797721125,47.08837449057529 L3.7341562499999994,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:452.5px;top:122.5px" width="34" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 13 88 C 23 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M14.721952,66.303232 L17.607310728060902,45.310978547585634 L11.939456689355112,52.582527942035654 L3.88660667009656,48.093473858230524 L14.721952,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M14.721952,66.303232 L17.607310728060902,45.310978547585634 L11.939456689355112,52.582527942035654 L3.88660667009656,48.093473858230524 L14.721952,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:451.5px;top:250.5px" width="35" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 24 50 14 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.6364160000000005,66.303232 L9.427691845501416,48.23155477891412 L1.3188753787839218,52.61870596266551 L-4.256834191833068,45.2762634001302 L-1.6364160000000005,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.6364160000000005,66.303232 L9.427691845501416,48.23155477891412 L1.3188753787839218,52.61870596266551 L-4.256834191833068,45.2762634001302 L-1.6364160000000005,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:446.98171321138256px;top:378.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path></svg><svg style="position:absolute;left:263.5px;top:506.5px" width="159" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 148 50 138 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M17.961342,60.59109050000001 L39.07198391220434,58.76330548674452 L30.72717007153269,54.843601165684724 L33.32449457788905,45.997477415211826 L17.961342,60.59109050000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M17.961342,60.59109050000001 L39.07198391220434,58.76330548674452 L30.72717007153269,54.843601165684724 L33.32449457788905,45.997477415211826 L17.961342,60.59109050000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_475" style="position: absolute; transform: translate(-50%, -50%); left: 342.5px; top: 550.5px;">if</div><svg style="position:absolute;left:396.98171321138256px;top:506.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#00f" fill="#00f" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#00f" fill="#00f" transform="translate(15.018286788617468,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_479" style="position: absolute; transform: translate(-50%, -50%); left: 404px; top: 550.5px;">else</div><svg style="position:absolute;left:401.5px;top:506.5px" width="159" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 138 88 C 148 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M120.038658,60.59109050000001 L104.67550542211094,45.997477415211826 L107.2728299284673,54.843601165684724 L98.92801608779567,58.76330548674452 L120.038658,60.59109050000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M120.038658,60.59109050000001 L104.67550542211094,45.997477415211826 L107.2728299284673,54.843601165684724 L98.92801608779567,58.76330548674452 L120.038658,60.59109050000001" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_483" style="position: absolute; transform: translate(-50%, -50%); left: 480.5px; top: 550.5px;">continuation</div><svg style="position:absolute;left:331.5px;top:1274.5px" width="39.5" height="87" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 86 C -10 36 28.5 50 18.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.2515040000000008,64.474304 L10.924208269199507,47.13210025486817 L2.5562097379798256,51.002061570114776 L-2.5480341606857175,43.324386516888346 L-1.2515040000000008,64.474304" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.2515040000000008,64.474304 L10.924208269199507,47.13210025486817 L2.5562097379798256,51.002061570114776 L-2.5480341606857175,43.324386516888346 L-1.2515040000000008,64.474304" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:590.5px;top:762.5px" width="43.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 22.5 88 C 32.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M23.40936,66.303232 L23.83038624209553,45.1177950938735 L19.047922429813696,52.999929315276646 L10.52708355737218,49.47923266405979 L23.40936,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M23.40936,66.303232 L23.83038624209553,45.1177950938735 L19.047922429813696,52.999929315276646 L10.52708355737218,49.47923266405979 L23.40936,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:589.5px;top:890.5px" width="44.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 33.5 50 23.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-0.7343713750000016,65.8307285 L12.45901450614404,49.2495774847288 L3.874081291422615,52.610964356062254 L-0.7607496377937126,44.641124818306196 L-0.7343713750000016,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-0.7343713750000016,65.8307285 L12.45901450614404,49.2495774847288 L3.874081291422615,52.610964356062254 L-0.7607496377937126,44.641124818306196 L-0.7343713750000016,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:313.5px;top:890.5px" width="31" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 20 50 10 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.97856,66.303232 L8.153339129365806,47.69289562387942 L0.27782929033988846,52.486260285096634 L-5.663632585537553,45.43650633353954 L-1.97856,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.97856,66.303232 L8.153339129365806,47.69289562387942 L0.27782929033988846,52.486260285096634 L-5.663632585537553,45.43650633353954 L-1.97856,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:313.5px;top:1018.5px" width="32.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 11.5 88 C 21.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.350256,66.303232 L16.634673049421526,45.369703758313904 L10.829434187422695,52.532049865221786 L2.863490914643318,47.890525570891214 L13.350256,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.350256,66.303232 L16.634673049421526,45.369703758313904 L10.829434187422695,52.532049865221786 L2.863490914643318,47.890525570891214 L13.350256,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:377.0266769263776px;top:1056.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_504" style="position: absolute; transform: translate(-50%, -50%); left: 389px; top: 1126.5px;">loop</div><svg style="position:absolute;left:325px;top:1146.5px" width="46" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 25 88 C 35 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M25.59935375,65.8307285 L25.249839212925558,44.64399114880849 L20.757116933078812,52.69479524008836 L12.113905953013912,49.486227965729675 L25.59935375,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M25.59935375,65.8307285 L25.249839212925558,44.64399114880849 L20.757116933078812,52.69479524008836 L12.113905953013912,49.486227965729675 L25.59935375,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:427.0266769263776px;top:1184.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_513" style="position: absolute; transform: translate(-50%, -50%); left: 439px; top: 1254.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 453px; top: 113px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 314px; top: 753px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 314px; top: 713px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 324px; top: 881px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 324px; top: 841px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 384px; top: 841px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 384px; top: 881px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 591px; top: 753px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 591px; top: 713px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 466px; top: 241px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 466px; top: 201px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 452px; top: 369px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 452px; top: 329px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 452px; top: 497px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 452px; top: 457px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 402px; top: 497px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 314px; top: 625px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 264px; top: 585px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 452px; top: 625px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 402px; top: 585px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 590px; top: 625px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 540px; top: 585px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 332px; top: 1391px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 332px; top: 1351px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 613.5px; top: 881px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 613.5px; top: 841px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 590px; top: 1009px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 590px; top: 969px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 314px; top: 1009px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 314px; top: 969px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 325.5px; top: 1137px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 325.5px; top: 1097px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 387px; top: 1097px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 387px; top: 1137px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 350.5px; top: 1265px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 350.5px; top: 1225px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 437px; top: 1225px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 437px; top: 1265px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
