<?xml version="1.0" encoding="UTF-8"?>
<job
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns="urn:proactive:jobdescriptor:3.10"
		xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
		name="Clearwater" projectName="Cloud Automation - Deployment"
		priority="normal"
		onTaskError="continueJobExecution"
		maxNumberOfExecution="2"
>
	<variables>
		<variable name="dashboard_port" value="9000" />
		<variable name="instance_name" value="Clearwater" />
	</variables>
	<description>
		<![CDATA[ A workflow that creates a Clearwater instance on Docker ]]>
	</description>
	<genericInformation>
		<info name="bucketName" value="cloud-automation"/>
		<info name="group" value="public-objects"/>
		<info name="pca.service.id" value="Clearwater"/>
		<info name="pca.states" value="(VOID,RUNNING)"/>
		<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/clearwater.png"/>
	</genericInformation>
	<taskFlow>
		<task name="clean_first">
			<scriptExecutable>
				<script>
					<code language="bash">
						<![CDATA[
docker ps -a | awk '{ print $1,$2 }' | grep martinacti | awk '{print $1 }' | xargs -I {} docker rm -f {}
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="ssshtask">
			<depends>
				<task ref="clean_first"/>
			</depends>
			<scriptExecutable>
				<script>
					<code language="bash">
						<![CDATA[
name_Containers=$variables_instance_name
echo -e "version: '2'
services:
  "${name_Containers}etcd":
    image: quay.io/coreos/etcd:v2.2.5
    command: >
      -name etcd0
      -advertise-client-urls http://etcd:2379,http://etcd:4001
      -listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001
      -initial-advertise-peer-urls http://etcd:2380
      -listen-peer-urls http://0.0.0.0:2380
      -initial-cluster etcd0=http://etcd:2380
      -initial-cluster-state new
  "${name_Containers}bono":
    image: martinacti/bono
    links:
      - "${name_Containers}sprout"
    ports:
      - 22
      - "3478:3478"
      - "3478:3478/udp"
      - "5060:5060"
      - "5060:5060/udp"
      - "5062:5062"
  "${name_Containers}sprout":
    image: martinacti/sprout
    links:
      - "${name_Containers}homestead"
      - "${name_Containers}homer"
      - "${name_Containers}ralf"
    networks:
      default:
        aliases:
          - scscf.sprout
          - icscf.sprout
    ports:
      - 22
  "${name_Containers}homestead":
    image: martinacti/homestead
    ports:
      - 22
  "${name_Containers}homer":
    image: martinacti/homer
    ports:
      - 22
  "${name_Containers}ralf":
    image: martinacti/ralf
    ports:
      - 22
  "${name_Containers}ellis":
    image: martinacti/ellis
    links:
      - "${name_Containers}homestead"
      - "${name_Containers}homer"
    ports:
      - 22
      - "$variables_dashboard_port:80""> "docker-compose.yml"

docker-compose up -d
]]>
					</code>
				</script>
			</scriptExecutable>
			<controlFlow block="none"></controlFlow>
			<post>
				<script>
					<code language="groovy">
						<![CDATA[
import org.objectweb.proactive.core.util.ProActiveInet

// Get the current IP address and store it
def clearwater_UI_IP_address = ProActiveInet.getInstance().getInetAddress().getHostAddress()
variables.put("clearwater_UI_IP_address", clearwater_UI_IP_address)
]]>
					</code>
				</script>
			</post>
			<outputFiles>
				<files  includes="docker-compose.yml" accessMode="transferToOutputSpace"/>
			</outputFiles>
		</task>
		<task name="end_deployment">
			<depends>
				<task ref="ssshtask"/>
			</depends>
			<inputFiles>
				<files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
			</inputFiles>
			<forkEnvironment >
				<additionalClasspath>
					<pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
				</additionalClasspath>
			</forkEnvironment>
			<scriptExecutable>
				<script>
					<code language="groovy">
						<![CDATA[
org.ow2.proactive.pca.service.client.ApiClient
org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Retrieve variables
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long
def clearwater_UI_IP_address = variables.get("clearwater_UI_IP_address")
def dashboard_port = variables.get("dashboard_port")

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Update the related service infos
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
service_instance_data.setInstanceStatus("RUNNING")
service_instance_data.getInstanceEndpoints().put("clearwater_endpoint", "http://" + clearwater_UI_IP_address + ":"  + dashboard_port)
service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
	</taskFlow>
</job>