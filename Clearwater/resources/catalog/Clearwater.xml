<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.8"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
	name="Clearwater" projectName="Cloud Automation - Deployment" priority="normal"
	onTaskError="continueJobExecution" maxNumberOfExecution="2">
	<variables>
		<variable name="instance_name" value="Clearwater" />
		<variable name="host_name" value="try.activeeon.com" />
		<variable name="dashboard_port" value="9000" />
	</variables>
	<description>
    <![CDATA[ A workflow that creates a Clearwater instance on Docker ]]>
  </description>
	<genericInformation>
		<info name="pca.service.model" value="8" />
		<info name="pca.service.type" value="platform" />
		<info name="pca.service.name" value="clearwater" />
		<info name="pca.service.description" value="clearwater" />
		<info name="pca.action.type" value="create" />
		<info name="pca.action.name" value="create" />
		<info name="pca.action.origin_state" value="null" />
		<info name="pca.action.icon"
			value="/automation-dashboard/styles/patterns/img/wf-icons/clearwater.png" />
	</genericInformation>
	<taskFlow>
		<task name="ssshtask">
			<description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
			<depends>
				<task ref="clean_first" />
			</depends>
			<scriptExecutable>
				<script>
					<code language="bash">
            <![CDATA[
name_Containers=$variables_instance_name
echo -e "version: '2'
services:
  "${name_Containers}etcd":
    image: quay.io/coreos/etcd:v2.2.5
    command: >
      -name etcd0
      -advertise-client-urls http://etcd:2379,http://etcd:4001
      -listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001
      -initial-advertise-peer-urls http://etcd:2380
      -listen-peer-urls http://0.0.0.0:2380
      -initial-cluster etcd0=http://etcd:2380
      -initial-cluster-state new
  "${name_Containers}bono":
    image: martinacti/bono
    links:
      - "${name_Containers}sprout"
    ports:
      - 22
      - "3478:3478"
      - "3478:3478/udp"
      - "5060:5060"
      - "5060:5060/udp"
      - "5062:5062"
  "${name_Containers}sprout":
    image: martinacti/sprout
    links:
      - "${name_Containers}homestead"
      - "${name_Containers}homer"
      - "${name_Containers}ralf"
    networks:
      default:
        aliases:
          - scscf.sprout
          - icscf.sprout
    ports:
      - 22
  "${name_Containers}homestead":
    image: martinacti/homestead
    ports:
      - 22
  "${name_Containers}homer":
    image: martinacti/homer
    ports:
      - 22
  "${name_Containers}ralf":
    image: martinacti/ralf
    ports:
      - 22
  "${name_Containers}ellis":
    image: martinacti/ellis
    links:
      - "${name_Containers}homestead"
      - "${name_Containers}homer"
    ports:
      - 22
      - "$variables_dashboard_port:80""> "docker-compose.yml"
	  
docker-compose up -d
]]>
					</code>
				</script>
			</scriptExecutable>
			<controlFlow block="none"></controlFlow>
			<outputFiles>
				<files includes="docker-compose.yml" accessMode="transferToOutputSpace" />
			</outputFiles>
		</task>
		<task name="end_deployment">
			<description>
        <![CDATA[ The simplest task, ran by a javascript engine. ]]>
      </description>
			<depends>
				<task ref="ssshtask" />
			</depends>
			<scriptExecutable>
				<script>
					<code language="javascript">
            <![CDATA[
var url = results[0].value();

var myObject = {};
myObject.id=variables.get("instance_name");
myObject.status="RUNNING";
myObject.endpoint= variables.get("host_name") + ":" + variables.get("dashboard_port");

result=JSON.stringify(myObject);
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="clean_first">
			<description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
			<scriptExecutable>
				<script>
					<code language="bash">
            <![CDATA[
docker ps -a | awk '{ print $1,$2 }' | grep martinacti | awk '{print $1 }' | xargs -I {} docker rm -f {}
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
	</taskFlow>
</job>