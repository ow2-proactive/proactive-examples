<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.9"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.9 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.9/schedulerjob.xsd"
	name="Kafka" projectName="Cloud Automation - Deployment" priority="normal"
	onTaskError="pauseJob" maxNumberOfExecution="2">
	<variables>
		<variable name="zookeeper_instance_name" value="zookeeper-server-1" />
		<variable name="instance_name" value="kafka-server-1" />
		<variable name="zookeeper_service_model" value="http://models.activeeon.com/pca/zookeeper" />
	</variables>
	<description>
    	<![CDATA[ Deployment of the Kafka server. ]]>
	</description>
	<genericInformation>
		<info name="pca.service.type" value="Platform" />
		<info name="pca.service.description" value="Kafka Broker" />
		<info name="bucketName" value="Cloud-automation" />
		<info name="pca.action.icon"
			value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/kafka.png" />
		<info name="pca.service.name" value="Kafka" />
		<info name="pca.action.name" value="deployment" />
		<info name="pca.service.model" value="http://models.activeeon.com/pca/kafka" />
		<info name="pca.action.type" value="create" />
		<info name="pca.action.origin_state" value="null" />
		<info name="group" value="public-objects" />
	</genericInformation>
	<taskFlow>
		<task name="end_deployment">
			<depends>
				<task ref="start_kafka" />
			</depends>
			<scriptExecutable>
				<script>
					<code language="javascript">
            <![CDATA[
var resultObj={}
resultObj.id=variables.get("instance_name")
resultObj.status="RUNNING"
resultObj.endpoint=variables.get("endpoint")
result = JSON.stringify(resultObj);
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="start_kafka">
			<description>
        <![CDATA[ Pull Kafka image and start a container ]]>
			</description>
			<depends>
				<task ref="check_zookeeper" />
			</depends>
			<pre>
				<script>
					<code language="groovy">
            <![CDATA[
def PA_SCHEDULER_REST_URL = variables.get('PA_SCHEDULER_REST_URL')
def hostname = new URL(PA_SCHEDULER_REST_URL).getHost()
variables.put("hostname",hostname)
]]>
					</code>
				</script>
			</pre>
			<scriptExecutable>
				<script>
					<code language="bash">
            <![CDATA[
printf "Pulling Apache Kafka image \n"
docker pull wurstmeister/kafka

HOST=$variables_hostname
IP=$(docker network inspect --format='{{(index (index .IPAM.Config ) 0).Gateway}}' bridge)

ZOOKEEPER=$variables_zookeeper_instance_name
CONTAINER=$variables_instance_name
BROKER_ID=$(shuf -i 0-1000 -n 1)
PA_HOME=$variables_PA_SCHEDULER_HOME

if [ "$(docker ps -a | grep $CONTAINER)" ]; then
 RUNNING=$(docker inspect --format="{{ .State.Running }}" $CONTAINER 2> /dev/null)
 STOPPED=$(docker inspect --format="{{ .State.Status }}" $CONTAINER 2> /dev/null)  

 if [ "$RUNNING" == "true" ]; then 
   echo "$CONTAINER container is running"
 elif [ "$STOPPED" == "exited" ]; then 
   echo "Starting $CONTAINER container"
   docker start $CONTAINER
 fi 

else 
 echo "Running $CONTAINER container"
 docker run -d --name $CONTAINER \
           -p 9092 \
           --link $ZOOKEEPER:zookeeper \
           --add-host=$HOST:$IP \
           -v $PA_HOME:$PA_HOME \
           -v /tmp:/tmp \
           -v /var/run/docker.sock:/var/run/docker.sock \
           --env KAFKA_ADVERTISED_HOST_NAME="$HOST" \
           --env KAFKA_ZOOKEEPER_CONNECT="$variables_zookeeper_endpoint" \
           --env KAFKA_BROKER_ID="$BROKER_ID" \
           wurstmeister/kafka
fi

port=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "9092/tcp") 0).HostPort}}' $CONTAINER)
echo "$port" > $CONTAINER"_port"

# Endpoint added to the job variables using a groovy post-script
]]>
					</code>
				</script>
			</scriptExecutable>
			<post>
				<script>
					<code language="groovy">
            <![CDATA[
def hostname = variables.get("hostname")
def port=variables.get("instance_name")+"_port"
def endpoint = hostname + ":" + new File(port).text.trim()

println endpoint

variables.put("endpoint", endpoint)
]]>
					</code>
				</script>
			</post>
		</task>
		<task name="check_zookeeper">
			<description>
        <![CDATA[ Check Zookeeper service ]]>
			</description>
			<inputFiles>
				<files includes="cloud-automation-service-client-1.0.0-all.jar"
					accessMode="transferFromGlobalSpace" />
			</inputFiles>
			<forkEnvironment>
				<additionalClasspath>
					<pathElement path="cloud-automation-service-client-1.0.0-all.jar" />
				</additionalClasspath>
			</forkEnvironment>
			<scriptExecutable>
				<script>
					<code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.client.api.CloudAutomationApi;
import java.util.Optional;


model = variables.get("zookeeper_service_model")
instanceName = variables.get("zookeeper_instance_name")

schedulerapi.connect();

pcaUrl = variables.get("PA_SCHEDULER_REST_URL").replaceAll("/rest\\z", "/cloud-automation-service");
sessionId = schedulerapi.getSession();
api = new CloudAutomationApi(pcaUrl, sessionId);

Optional<String> endpoint  = api.getServiceEndpoint(model,instanceName);
if( !endpoint.isPresent()) {
            api.createServiceInstance(model, instanceName);
            endpoint = api.waitForServiceEndpoint(model, instanceName, 60);
}

println "Scheduler REST URL " + variables.get("PA_SCHEDULER_REST_URL")
println "Zookeeper Instance name " + variables.get("zookeeper_instance_name")
println "Zookeeper Service " + variables.get("zookeeper_service_model") + " is available on " + endpoint.get()

variables.put("zookeeper_endpoint", endpoint.get())
result = '<meta http-equiv="refresh" content="1; url=http://' + endpoint.get() + '/" />'
result+= '<h2><span style="color:black">Please wait while redirecting...</span></h2>'
resultMetadata.put("content.type", "text/html")
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
	</taskFlow>
</job>
