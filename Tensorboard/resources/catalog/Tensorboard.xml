<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.12" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Tensorboard" onTaskError="continueJobExecution" priority="normal" projectName="Cloud Automation - Deployment" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd">
  <variables>
    <variable name="NATIVE_SCHEDULER" value=""/>
    <variable name="NATIVE_SCHEDULER_PARAMS" value=""/>
    <variable name="INSTANCE_NAME" value="tensorboard-server-$PA_JOB_ID"/>
    <variable name="ENDPOINT_ID" value="tensorboard-gui-$PA_JOB_ID"/>
    <variable name="PROXYFIED" value="False" model="PA:Boolean"/>
    <variable name="HTTP_ENABLED" value="True" model="PA:Boolean"/>
    <variable name="MOUNT_LOG_PATH" value="/shared/$INSTANCE_NAME"/>
    <variable name="SERVICE_PORT" value="-1" model="PA:Integer"/>
    <variable name="ENGINE" value="docker" model="PA:List(docker,singularity)"/>
    <variable name="DOCKER_IMAGE" value="activeeon/tensorboard"/>
    <variable name="SINGULARITY_IMAGE_PATH" value="/tmp/tensorboard.sif"/>
    <variable name="BUILD_IMAGE_IF_NOT_EXISTS" value="True" model="PA:Boolean"/>
    <variable name="PASSWORD" value="" model="PA:HIDDEN"/>
  </variables>
  <description>
    <![CDATA[ Deploy a Tensorboard server.
The service can be started using the following variable:
$INSTANCE_NAME (Required): service instance name ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="cloud-automation"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
<info name="pca.states" value="(VOID,RUNNING)"/>
<info name="pca.service.id" value="Tensorboard"/>
<info name="Documentation" value="PCA/PCAUserGuide.html#_tensorboard"/>
<info name="NS" value="$NATIVE_SCHEDULER"/>
<info name="NS_BATCH" value="$NATIVE_SCHEDULER_PARAMS"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Start_Tensorboard_S">
      <description>
        <![CDATA[ Pull Tensorboard image and start a container ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="Documentation" value="PCA/PCAUserGuide.html"/>
        <info name="DISABLE_PTK" value="true"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo BEGIN "$variables_PA_TASK_NAME"

export XDG_RUNTIME_DIR=/run/user/$UID

################################################################################
### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
# Check if the Linux machine supports AVX instructions

INSTANCE_NAME=$variables_INSTANCE_NAME
MOUNT_LOG_PATH=$variables_MOUNT_LOG_PATH
SIF_IMAGE_PATH=$variables_SINGULARITY_IMAGE_PATH
BUILD_IMAGE=$variables_BUILD_IMAGE_IF_NOT_EXISTS
DOCKER_IMAGE=$variables_DOCKER_IMAGE
TENSORBOARD_HOST_PORT=$variables_SERVICE_PORT
LOGIN=$variables_PA_USER
PASSWORD=$variables_PASSWORD

if [[ "${BUILD_IMAGE,,}" = "true" && ! -f SIF_IMAGE_PATH && "$DOCKER_IMAGE" = "activeeon/tensorboard:secured" && -z "$PASSWORD" ]]; then
    echo "[ERROR] To secure tensorboard, the PASSWORD variable should be set."
    exit 1
fi

[[ ! -z "$PASSWORD" ]] && IS_SECURED=true || IS_SECURED=false

if $IS_SECURED; then
    SIF_IMAGE_DIR="$(dirname "${SIF_IMAGE_PATH}")"
    if [ ! -f "$SIF_IMAGE_DIR"/singularity-entrypoint.sh ]; then
        echo "[ERROR] The file $SIF_IMAGE_DIR/singularity-entrypoint.sh is not found."
        exit 1
    fi
    if [ ! -f "$SIF_IMAGE_DIR"/nginx_singularity.conf ]; then
        echo "[ERROR] The file $SIF_IMAGE_DIR/nginx_singularity.conf is not found."
        exit 1
    fi
fi

imagedecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }
SHARED_PATH=$(imagedecode "$MOUNT_LOG_PATH")
eval SHARED_PATH=$SHARED_PATH
echo $SHARED_PATH
mkdir -p $SHARED_PATH
if $IS_SECURED; then
    echo "warning"
    if [ "$DOCKER_IMAGE" = "activeeon/tensorboard" ]; then
    	DOCKER_IMAGE="activeeon/tensorboard:secured"
    fi
	mkdir -p $SHARED_PATH/.var/log/nginx
    mkdir -p $SHARED_PATH/.var/lib/nginx/body
    mkdir -p $SHARED_PATH/.var/run
    mkdir -p $SHARED_PATH/.nginx
fi
################################################################################

PATH=$PATH:/usr/sbin

GET_RANDOM_PORT(){
    PCA_SERVICES_PORT_RANGE_FILE=$variables_PA_SCHEDULER_HOME/config/pca_services_port_range
    if [[ -f "$PCA_SERVICES_PORT_RANGE_FILE" ]]; then
        read LOWERPORT UPPERPORT < $PCA_SERVICES_PORT_RANGE_FILE
    else
        read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
    fi
    while :
    do
        RND_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
        ss -lpn | grep -q ":$RND_PORT " || break
    done
    echo $RND_PORT
}

if [ "$TENSORBOARD_HOST_PORT" -eq "-1" ]; then
    echo "[INFO] Picking a random port number"
    TENSORBOARD_HOST_PORT=$(GET_RANDOM_PORT)
fi
echo "The service will be initialized on port $TENSORBOARD_HOST_PORT"

if [ -z "$INSTANCE_NAME" ]; then
    echo [ERROR] The INSTANCE_NAME is not provided by the user. Empty value is not allowed.
    exit 1
fi

if [ -z "$SIF_IMAGE_PATH" ]; then
    echo "[ERROR] The singularity image path is not provided by the user. Empty value is not allowed."
    exit 1
else
    echo "Using $SIF_IMAGE_PATH to start the service"
fi

if [ "$(singularity instance list | grep "^$INSTANCE_NAME$")" ]; then
    echo "[ERROR] $INSTANCE_NAME is already used by another service instance."
    exit 128
else
    if [ "${BUILD_IMAGE,,}" = "true" ]; then
        if [ -e "$SIF_IMAGE_PATH" ]; then
            echo "[INFO] Using existing image on $SIF_IMAGE_PATH"
        else
            echo "[INFO] Building the image on $SIF_IMAGE_PATH"
            echo "[INFO] singularity build $SIF_IMAGE_PATH docker://$DOCKER_IMAGE"
            singularity build $SIF_IMAGE_PATH docker://$DOCKER_IMAGE
        fi
    fi
    ################################################################################
    ### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
    echo "[INFO] Starting the singularity instance $INSTANCE_NAME"
    if $IS_SECURED; then
        echo "[INFO] singularity instance start --no-home -B $SHARED_PATH:/logs,$SHARED_PATH/.var:/var $SIF_IMAGE_PATH $INSTANCE_NAME"
        singularity instance start --no-home -B $SHARED_PATH:/logs,$SHARED_PATH/.var:/var $SIF_IMAGE_PATH $INSTANCE_NAME
        echo "[INFO] cp $SIF_IMAGE_DIR/singularity-entrypoint.sh $SHARED_PATH/singularity-entrypoint.sh"
        cp $SIF_IMAGE_DIR/singularity-entrypoint.sh $SHARED_PATH/singularity-entrypoint.sh
        echo "[INFO] cp $SIF_IMAGE_DIR/nginx_singularity.conf $SHARED_PATH/.nginx/nginx_singularity.conf"
        cp $SIF_IMAGE_DIR/nginx_singularity.conf $SHARED_PATH/.nginx/nginx_singularity.conf
        echo "[INFO] chmod +x $SHARED_PATH/singularity-entrypoint.sh"
        chmod +x $SHARED_PATH/singularity-entrypoint.sh
        TENSORBOARD_EXEC_COMMAND="singularity exec instance://${INSTANCE_NAME} /bin/bash /logs/singularity-entrypoint.sh $TENSORBOARD_HOST_PORT $LOGIN $PASSWORD /logs &> /dev/null & &> /dev/null"
    else
        echo "[INFO] singularity instance start -B $SHARED_PATH:/logs $SIF_IMAGE_PATH $INSTANCE_NAME"
        singularity instance start --no-home -B $SHARED_PATH:/logs $SIF_IMAGE_PATH $INSTANCE_NAME
        TENSORBOARD_EXEC_COMMAND="singularity exec instance://${INSTANCE_NAME} tensorboard --logdir '/logs' --port ${TENSORBOARD_HOST_PORT} &> /dev/null & &> /dev/null"
    fi
    echo "[INFO] $TENSORBOARD_EXEC_COMMAND"
    eval $TENSORBOARD_EXEC_COMMAND
    sleep 3
    ################################################################################
    if [ "$(singularity instance list | grep "^$INSTANCE_NAME$")" ]; then
        echo $INSTANCE_NAME > $INSTANCE_NAME"_status"
    fi
fi

echo "$TENSORBOARD_HOST_PORT" > $INSTANCE_NAME"_port"

# Endpoint added to the job variables using a groovy post-script
echo END "$variables_PA_TASK_NAME"
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Post_Start_Service/raw"/>
        </script>
      </post>
      <metadata>
        <positionTop>
            254
        </positionTop>
        <positionLeft>
            398.5
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Loop_Over_Instance_Status_S">
      <description>
        <![CDATA[ Loop over service instance status and fetch docker container logs.
It will run every minute. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="Documentation" value="PCA/PCAUserGuide.html"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="Start_Tensorboard_S"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def instanceName = variables.get("INSTANCE_NAME")
def channel = "Service_Instance_" + instanceId

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()

// Connect to Cloud Automation API
def serviceInstanceRestApi = new ServiceInstanceRestApi(new ApiClient().setBasePath(pcaUrl))

// If service instance is FINISHED or PAUSED then stop this loop and job and delete the sync channel
def currentStatus = serviceInstanceRestApi.getServiceInstanceUsingGET(sessionId, instanceId).getInstanceStatus()
if (currentStatus.equals("FINISHED")){
    variables.put("IS_FINISHED",true)
    synchronizationapi.deleteChannel(channel)
    // Remove token in the current node
    token = instanceName
    nodeUrl = variables.get("PA_NODE_URL")
    println("Current nodeUrl: " + nodeUrl)
    println("Removing token:  " + token)
    rmapi.connect()
    rmapi.removeNodeToken(nodeUrl, token)
} else {
    // Check if container has been stopped abnormally
    def command = ["singularity", "instance", "list"].execute() | ["grep", "${instanceName}"].execute()
    command.waitFor()
    def isContainerRunning = command.text
    if ((!isContainerRunning) && (!synchronizationapi.get(channel, "FINISH_LAUNCHED")) && (!synchronizationapi.get(channel, "PAUSE_LAUNCHED"))){
        currentStatus = 'ERROR'
        println("[ERROR] An internal error occured in docker container: " + instanceName)
        // Update docker container is not running
        def serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(sessionId, instanceId)
        serviceInstanceData.setInstanceStatus(currentStatus)
        serviceInstanceRestApi.updateServiceInstanceUsingPUT(sessionId, instanceId, serviceInstanceData)
        // Tell the CRON loop to stop
        variables.put("IS_FINISHED",true)
        // Exit with error
        System.exit(1)
    }
    //} else {
        // Fetch all logs or only new logs since last fetch time mark
        //def lastTime=variables.get('LAST_TIME_MARKER')
        //def fetchLogsCmd = lastTime ? ["docker", "logs", "--since", lastTime, instanceName] : ["docker", "logs", instanceName]
        //fetchLogsCmd.execute().waitForProcessOutput(System.out, System.err)
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <loop target="Loop_Over_Instance_Status_S">
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Fetch_Logs/raw"/>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            396
        </positionTop>
        <positionLeft>
            381.5
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Condition">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
        <info name="Documentation" value="user/ProActiveUserGuide.html#_branch"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def engine = variables.get("ENGINE")

println("[INFO] Starting a Tensorboard server in a " + engine + " container.")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <if else="Start_Tensorboard_D" target="Start_Tensorboard_S">
          <script>
            <code language="groovy">
              <![CDATA[
def engine = variables.get("ENGINE")
if(engine.toLowerCase().equals("singularity")){
    branch = "if";
} else {
    branch = "else";
}
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            116.515625
        </positionTop>
        <positionLeft>
            738.125
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Start_Tensorboard_D">
      <description>
        <![CDATA[ Pull Tensorboard image and start a container ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="Documentation" value="PCA/PCAUserGuide.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo BEGIN "$variables_PA_TASK_NAME"

################################################################################
### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
# Check if the Linux machine supports AVX instructions
TENSORBOARD_INTERNAL_PORT=6006
DOCKER_IMAGE=$variables_DOCKER_IMAGE
INSTANCE_NAME=$variables_INSTANCE_NAME
MOUNT_LOG_PATH=$variables_MOUNT_LOG_PATH
TENSORBOARD_HOST_PORT=$variables_SERVICE_PORT
LOGIN=$variables_PA_USER
PASSWORD=$variables_PASSWORD

if [[ "$DOCKER_IMAGE" = "activeeon/tensorboard:secured" && -z "$PASSWORD" ]]; then
    echo "[ERROR] To secure tensorboard, the PASSWORD variable should be set."
    exit 1
fi

[[ ("$DOCKER_IMAGE" = "activeeon/tensorboard" || "$DOCKER_IMAGE" = "activeeon/tensorboard:secured") && ! -z "$PASSWORD" ]] && IS_SECURED=true || IS_SECURED=false

avx_info=$(grep avx /proc/cpuinfo)
if [ -z "$avx_info" ] && [ "$DOCKER_IMAGE" = "activeeon/tensorboard" ]
then
      echo "\$avx_info is empty, no AVX support"
      DOCKER_IMAGE=activeeon/tensorboard:no-avx
      if $IS_SECURED; then
          echo "[WARNING] Due to no AVX support, LOGIN and PASSWORD protection is ignored."
          IS_SECURED=false
      fi
else
      echo "\$avx_info is NOT empty, with AVX support"
      if $IS_SECURED; then
          DOCKER_IMAGE=activeeon/tensorboard:secured
      else
          DOCKER_IMAGE=activeeon/tensorboard
      fi
fi

imagedecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }
SHARED_PATH=$(imagedecode "$MOUNT_LOG_PATH")
eval SHARED_PATH=$SHARED_PATH
echo $SHARED_PATH
################################################################################

PATH=$PATH:/usr/sbin

GET_RANDOM_PORT(){
    PCA_SERVICES_PORT_RANGE_FILE=$variables_PA_SCHEDULER_HOME/config/pca_services_port_range
    if [[ -f "$PCA_SERVICES_PORT_RANGE_FILE" ]]; then
        read LOWERPORT UPPERPORT < $PCA_SERVICES_PORT_RANGE_FILE
    else
        read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
    fi
    while :
    do
        RND_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
        ss -lpn | grep -q ":$RND_PORT " || break
    done
    echo $RND_PORT
}

if [ "$TENSORBOARD_HOST_PORT" -eq "-1" ]; then
    echo "Picking a random port number"
    TENSORBOARD_HOST_PORT=$(GET_RANDOM_PORT)
fi
echo "[INFO] The service will be initialized on port $TENSORBOARD_HOST_PORT"

if [ -z "$INSTANCE_NAME" ]; then
    echo "[ERROR] The INSTANCE_NAME is not provided by the user. Empty value is not allowed."
    exit 1
fi

echo "Pulling "$variables_PA_JOB_NAME" image"
docker pull $DOCKER_IMAGE

if [ "$(docker ps --format '{{.Names}}' | grep ^$INSTANCE_NAME$)" ]; then
    RUNNING=$(docker inspect --format="{{ .State.Running }}" $INSTANCE_NAME 2> /dev/null)
    STOPPED=$(docker inspect --format="{{ .State.Status }}" $INSTANCE_NAME 2> /dev/null)
    if [ "${RUNNING,,}" = "true" ]; then
        echo "$INSTANCE_NAME container is running"
    elif [ "${STOPPED,,}" = "exited" ]; then
        echo "Starting $INSTANCE_NAME container"
        docker start $INSTANCE_NAME
    fi
else
    echo "Running $INSTANCE_NAME container"
    if $IS_SECURED; then
        echo docker run -d --name $INSTANCE_NAME -p $TENSORBOARD_HOST_PORT:$TENSORBOARD_HOST_PORT -v $SHARED_PATH:/logs -e PORT=$TENSORBOARD_HOST_PORT -e LOGIN=$LOGIN -e PASSWORD=$PASSWORD -e "discovery.type=single-node" $DOCKER_IMAGE
        docker run -d --name $INSTANCE_NAME -p $TENSORBOARD_HOST_PORT:$TENSORBOARD_HOST_PORT -v $SHARED_PATH:/logs -e PORT=$TENSORBOARD_HOST_PORT -e LOGIN=$LOGIN -e PASSWORD=$PASSWORD -e "discovery.type=single-node" $DOCKER_IMAGE
    else
        echo docker run -d --name $INSTANCE_NAME -p $TENSORBOARD_HOST_PORT:$TENSORBOARD_INTERNAL_PORT -v $SHARED_PATH:/logs -e "discovery.type=single-node" $DOCKER_IMAGE
        docker run -d --name $INSTANCE_NAME -p $TENSORBOARD_HOST_PORT:$TENSORBOARD_INTERNAL_PORT -v $SHARED_PATH:/logs -e "discovery.type=single-node" $DOCKER_IMAGE
    fi
fi

if $IS_SECURED; then
    TENSORBOARD_PORT=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "'$TENSORBOARD_HOST_PORT'/tcp") 0).HostPort}}' $INSTANCE_NAME)
else
    TENSORBOARD_PORT=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "'$TENSORBOARD_INTERNAL_PORT'/tcp") 0).HostPort}}' $INSTANCE_NAME)
fi
echo "$TENSORBOARD_PORT" > $INSTANCE_NAME"_port"

containerID=$(docker ps -aqf "name=^$INSTANCE_NAME$")
echo "$containerID" > $INSTANCE_NAME"_containerID"

echo END "$variables_PA_TASK_NAME"
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Post_Start_Service/raw"/>
        </script>
      </post>
      <metadata>
        <positionTop>
            283.015625
        </positionTop>
        <positionLeft>
            807.859375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Loop_Over_Instance_Status_D">
      <description>
        <![CDATA[ Loop over service instance status and fetch docker container logs.
It will run every minute. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="Documentation" value="PCA/PCAUserGuide.html"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="Start_Tensorboard_D"/>
      </depends>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Check_Instance_Status/raw"/>
        </script>
      </scriptExecutable>
      <controlFlow>
        <loop target="Loop_Over_Instance_Status_D">
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Fetch_Logs/raw"/>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            410.015625
        </positionTop>
        <positionLeft>
            787.859375
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2144px;
            height:2712px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-111.515625px;left:-376.5px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_44" style="top: 254px; left: 398.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Pull Tensorboard image and start a container"><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Start_Tensorboard_S</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_47" style="top: 396px; left: 381.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Loop over service instance status and fetch docker container logs.
It will run every minute."><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Loop_Over_Instance_Status_S</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_50" style="top: 116.516px; left: 738.125px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Condition</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_53" style="top: 283.016px; left: 807.859px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Pull Tensorboard image and start a container"><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Start_Tensorboard_D</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_56" style="top: 410.016px; left: 787.859px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Loop over service instance status and fetch docker container logs.
It will run every minute."><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Loop_Over_Instance_Status_D</span></a></div><svg style="position:absolute;left:453px;top:293.5px" width="26" height="103" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 5 102 C 15 52 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M7.376416250000002,77.513772 L12.508678692931626,56.955078407826555 L6.08973810297964,63.57302383693572 L-1.4320694701326584,58.24175655484692 L7.376416250000002,77.513772" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M7.376416250000002,77.513772 L12.508678692931626,56.955078407826555 L6.08973810297964,63.57302383693572 L-1.4320694701326584,58.24175655484692 L7.376416250000002,77.513772" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:535.0266769263776px;top:345.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_67" style="position: absolute; transform: translate(-50%, -50%); left: 547px; top: 415.5px;">loop</div><svg style="position:absolute;left:388.5px;top:156.5px" width="360" height="98" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 97 C -10 47 349 50 339 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M60.118781250000005,65.56990625 L81.10450491281159,68.50238000915117 L73.84569673771506,62.818217460705554 L78.35281612351713,54.77546452143612 L60.118781250000005,65.56990625" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M60.118781250000005,65.56990625 L81.10450491281159,68.50238000915117 L73.84569673771506,62.818217460705554 L78.35281612351713,54.77546452143612 L60.118781250000005,65.56990625" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_73" style="position: absolute; transform: translate(-50%, -50%); left: 568px; top: 205px;">if</div><svg style="position:absolute;left:727.5px;top:156.5px" width="91" height="127" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 70 126 C 80 76 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M63.4634,94.724784 L57.59352476998819,74.36441649879576 L55.35898779616632,83.30907102049882 L46.17781179048701,82.46882870262944 L63.4634,94.724784" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M63.4634,94.724784 L57.59352476998819,74.36441649879576 L55.35898779616632,83.30907102049882 L46.17781179048701,82.46882870262944 L63.4634,94.724784" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_77" style="position: absolute; transform: translate(-50%, -50%); left: 772.5px; top: 219.5px;">else</div><svg style="position:absolute;left:862.5px;top:322.5px" width="23" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 2 87 C 12 37 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.652999999999999,65.86284375000001 L10.542150038492773,45.508043042940244 L3.882825259434565,51.88404441425608 L-3.4366492972511575,46.27821778350568 L4.652999999999999,65.86284375000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.652999999999999,65.86284375000001 L10.542150038492773,45.508043042940244 L3.882825259434565,51.88404441425608 L-3.4366492972511575,46.27821778350568 L4.652999999999999,65.86284375000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:942.0266769263776px;top:359.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_86" style="position: absolute; transform: translate(-50%, -50%); left: 954px; top: 429.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 453.5px; top: 284px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 389px; top: 244px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 458.5px; top: 426px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 458.5px; top: 386px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 545px; top: 386px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 545px; top: 426px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 778px; top: 147px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 728px; top: 147px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 863px; top: 313px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 798px; top: 273px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 865px; top: 440px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 865px; top: 400px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 952px; top: 400px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 952px; top: 440px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
