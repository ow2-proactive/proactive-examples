<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.14" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Tensorboard" onTaskError="continueJobExecution" priority="normal" tags="Visualization,Artificial Intelligence,TensorBoard,Service Automation" projectName="3. Data Visualization" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd">
  <variables>
    <variable advanced="false" description="The name of the service to be deployed." hidden="false" name="INSTANCE_NAME" value="tensorboard-server-$PA_JOB_ID"/>
    <variable advanced="false" description="The endpoint identifier that will be used." hidden="true" name="ENDPOINT_ID" value="tensorboard-gui-$PA_JOB_ID"/>
    <variable advanced="true" description="True if a proxy is needed to protect the access to the service endpoint." hidden="false" model="PA:Boolean" name="PROXYFIED" value="True"/>
    <variable advanced="false" description="True if an http endpoint will be exposed as the service endpoint." hidden="true" model="PA:Boolean" name="HTTP_ENABLED" value="True"/>
    <variable advanced="true" description="Path where Tensorboard logs are created and stored on the host." hidden="false" name="MOUNT_LOG_PATH" value="/shared/$INSTANCE_NAME"/>
    <variable advanced="true" description="The port that will be used to expose the service. Random value if -1 is set." hidden="false" model="PA:Integer" name="SERVICE_PORT" value="-1"/>
    <variable advanced="false" description="Container platform used for executing the workflow tasks." group="Container management" hidden="false" model="PA:List(docker,singularity)" name="ENGINE" value="docker"/>
    <variable advanced="true" description="Name of the docker image used to run the service" group="Container management" hidden="false" name="DOCKER_IMAGE" value="activeeon/tensorboard"/>
    <variable advanced="true" description="Location of the singularity image on the node file system. If the image does not exist in the specified location, it is possible to automatically built it from the specified Docker image." group="Singularity management" hidden="false" name="SINGULARITY_IMAGE_PATH" value="/tmp/tensorboard.sif"/>
    <variable advanced="true" description="Pull and build the singularity image if the Singularity Image File (SIF) file is not available." group="Singularity management" hidden="false" model="PA:Boolean" name="BUILD_IMAGE_IF_NOT_EXISTS" value="True"/>
    <variable advanced="false" description="If the service requires basic http authentication, enter a password." hidden="false" model="PA:HIDDEN" name="PASSWORD" value=""/>
    <variable advanced="false" group="Singularity management" hidden="true" model="PA:SPEL(variables['ENGINE'].toLowerCase() == 'singularity' ? showVar('SINGULARITY_IMAGE_PATH') : hideVar('SINGULARITY_IMAGE_PATH'))" name="SINGULARITY_IMAGE_PATH_HANDLER" value=""/>
    <variable advanced="false" group="Singularity management" hidden="true" model="PA:SPEL(variables['ENGINE'].toLowerCase() == 'singularity' ? showVar('BUILD_IMAGE_IF_NOT_EXISTS') : hideVar('BUILD_IMAGE_IF_NOT_EXISTS'))" name="SINGULARITY_BUILD_IMAGE_HANDLER" value=""/>
  </variables>
  <description>
    <![CDATA[ Deploy a Tensorboard server. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="service-automation"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
<info name="pca.states" value="(VOID,RUNNING)"/>
<info name="Documentation" value="PSA/PSAUserGuide.html#_tensorboard"/>
<info name="NODE_ACCESS_TOKEN" value="$NODE_ACCESS_TOKEN"/>
<info name="pca.service.id" value="Tensorboard"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Start_Tensorboard_S">
      <description>
        <![CDATA[ Pull Tensorboard image and start a container ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="Documentation" value="PSA/PSAUserGuide.html"/>
        <info name="DISABLE_PTK" value="true"/>
      </genericInformation>
      <pre>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Pre_Start_Service/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo BEGIN "$variables_PA_TASK_NAME"

export XDG_RUNTIME_DIR=/run/user/$UID

################################################################################
### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
# Check if the Linux machine supports AVX instructions

INSTANCE_NAME=$variables_INSTANCE_NAME
MOUNT_LOG_PATH=$variables_MOUNT_LOG_PATH
SIF_IMAGE_PATH=$variables_SINGULARITY_IMAGE_PATH
BUILD_IMAGE=$variables_BUILD_IMAGE_IF_NOT_EXISTS
DOCKER_IMAGE=$variables_DOCKER_IMAGE
TENSORBOARD_HOST_PORT=$variables_SERVICE_PORT
LOGIN=$variables_PA_USER
PASSWORD=$variables_PASSWORD

if [[ "${BUILD_IMAGE,,}" = "true" && ! -f SIF_IMAGE_PATH && "$DOCKER_IMAGE" = "activeeon/tensorboard:secured" && -z "$PASSWORD" ]]; then
    echo "[ERROR] To secure tensorboard, the PASSWORD variable should be set."
    exit 1
fi

[[ ! -z "$PASSWORD" ]] && IS_SECURED=true || IS_SECURED=false

if $IS_SECURED; then
    SIF_IMAGE_DIR="$(dirname "${SIF_IMAGE_PATH}")"
    if [ ! -f "$SIF_IMAGE_DIR"/singularity-entrypoint.sh ]; then
        echo "[ERROR] The file $SIF_IMAGE_DIR/singularity-entrypoint.sh is not found."
        exit 1
    fi
    if [ ! -f "$SIF_IMAGE_DIR"/nginx_singularity.conf ]; then
        echo "[ERROR] The file $SIF_IMAGE_DIR/nginx_singularity.conf is not found."
        exit 1
    fi
fi

imagedecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }
SHARED_PATH=$(imagedecode "$MOUNT_LOG_PATH")
eval SHARED_PATH=$SHARED_PATH
echo $SHARED_PATH
mkdir -p $SHARED_PATH
if $IS_SECURED; then
    echo "warning"
    if [ "$DOCKER_IMAGE" = "activeeon/tensorboard" ]; then
    	DOCKER_IMAGE="activeeon/tensorboard:secured"
    fi
	mkdir -p $SHARED_PATH/.var/log/nginx
    mkdir -p $SHARED_PATH/.var/lib/nginx/body
    mkdir -p $SHARED_PATH/.var/run
    mkdir -p $SHARED_PATH/.nginx
fi
################################################################################

PATH=$PATH:/usr/sbin

GET_RANDOM_PORT(){
    PCA_SERVICES_PORT_RANGE_FILE=$variables_PA_SCHEDULER_HOME/config/pca_services_port_range
    if [[ -f "$PCA_SERVICES_PORT_RANGE_FILE" ]]; then
        read LOWERPORT UPPERPORT < $PCA_SERVICES_PORT_RANGE_FILE
    else
        read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
    fi
    while :
    do
        RND_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
        ss -lpn | grep -q ":$RND_PORT " || break
    done
    echo $RND_PORT
}

if [ "$TENSORBOARD_HOST_PORT" -eq "-1" ]; then
    echo "[INFO] Picking a random port number"
    TENSORBOARD_HOST_PORT=$(GET_RANDOM_PORT)
fi
echo "The service will be initialized on port $TENSORBOARD_HOST_PORT"

if [ -z "$INSTANCE_NAME" ]; then
    echo [ERROR] The INSTANCE_NAME is not provided by the user. Empty value is not allowed.
    exit 1
fi

if [ -z "$SIF_IMAGE_PATH" ]; then
    echo "[ERROR] The singularity image path is not provided by the user. Empty value is not allowed."
    exit 1
else
    echo "Using $SIF_IMAGE_PATH to start the service"
fi

if [ "$(singularity instance list | grep "^$INSTANCE_NAME$")" ]; then
    echo "[ERROR] $INSTANCE_NAME is already used by another service instance."
    exit 128
else
    if [ "${BUILD_IMAGE,,}" = "true" ]; then
        if [ -e "$SIF_IMAGE_PATH" ]; then
            echo "[INFO] Using existing image on $SIF_IMAGE_PATH"
        else
            echo "[INFO] Building the image on $SIF_IMAGE_PATH"
            echo "[INFO] singularity build $SIF_IMAGE_PATH docker://$DOCKER_IMAGE"
            singularity build $SIF_IMAGE_PATH docker://$DOCKER_IMAGE
        fi
    fi
    ################################################################################
    ### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
    echo "[INFO] Starting the singularity instance $INSTANCE_NAME"
    if $IS_SECURED; then
        echo "[INFO] singularity instance start --no-home -B $SHARED_PATH:/logs,$SHARED_PATH/.var:/var $SIF_IMAGE_PATH $INSTANCE_NAME"
        singularity instance start --no-home -B $SHARED_PATH:/logs,$SHARED_PATH/.var:/var $SIF_IMAGE_PATH $INSTANCE_NAME
        echo "[INFO] cp $SIF_IMAGE_DIR/singularity-entrypoint.sh $SHARED_PATH/singularity-entrypoint.sh"
        cp $SIF_IMAGE_DIR/singularity-entrypoint.sh $SHARED_PATH/singularity-entrypoint.sh
        echo "[INFO] cp $SIF_IMAGE_DIR/nginx_singularity.conf $SHARED_PATH/.nginx/nginx_singularity.conf"
        cp $SIF_IMAGE_DIR/nginx_singularity.conf $SHARED_PATH/.nginx/nginx_singularity.conf
        echo "[INFO] chmod +x $SHARED_PATH/singularity-entrypoint.sh"
        chmod +x $SHARED_PATH/singularity-entrypoint.sh
        # TENSORBOARD_EXEC_COMMAND="singularity exec instance://${INSTANCE_NAME} /bin/bash /logs/singularity-entrypoint.sh $TENSORBOARD_HOST_PORT $LOGIN $PASSWORD /logs &> /dev/null & &> /dev/null"
        TENSORBOARD_EXEC_COMMAND="nohup singularity exec instance://${INSTANCE_NAME} /bin/bash /logs/singularity-entrypoint.sh $TENSORBOARD_HOST_PORT $LOGIN $PASSWORD &> /dev/null 2>&1 < /dev/null &"
    else
        echo "[INFO] singularity instance start -B $SHARED_PATH:/logs $SIF_IMAGE_PATH $INSTANCE_NAME"
        singularity instance start --no-home -B $SHARED_PATH:/logs $SIF_IMAGE_PATH $INSTANCE_NAME
        # TENSORBOARD_EXEC_COMMAND="singularity exec instance://${INSTANCE_NAME} tensorboard --logdir '/logs' --host 0.0.0.0 --port ${TENSORBOARD_HOST_PORT} &> /dev/null & &> /dev/null"
        TENSORBOARD_EXEC_COMMAND="nohup singularity exec instance://${INSTANCE_NAME} tensorboard --logdir '/logs' --host 0.0.0.0 --port ${TENSORBOARD_HOST_PORT} &> /dev/null 2>&1 < /dev/null &"
    fi
    echo "[INFO] $TENSORBOARD_EXEC_COMMAND"
    eval $TENSORBOARD_EXEC_COMMAND
    sleep 3
    ################################################################################
    if [ "$(singularity instance list | grep "^$INSTANCE_NAME$")" ]; then
        echo $INSTANCE_NAME > $INSTANCE_NAME"_status"
    fi
fi

echo "$TENSORBOARD_HOST_PORT" > $INSTANCE_NAME"_port"

# Endpoint added to the job variables using a groovy post-script
echo END "$variables_PA_TASK_NAME"
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Post_Start_Service/raw"/>
        </script>
      </post>
      <metadata>
        <positionTop>
            235.546875
        </positionTop>
        <positionLeft>
            93.5
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Loop_Over_Instance_Status_S">
      <description>
        <![CDATA[ Loop over service instance status and fetch singularity container logs.
It will run every minute. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="Documentation" value="PSA/PSAUserGuide.html"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="Start_Tensorboard_S"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def instanceName = variables.get("INSTANCE_NAME")
def channel = "Service_Instance_" + instanceId

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()

// Connect to Cloud Automation API
def serviceInstanceRestApi = new ServiceInstanceRestApi(new ApiClient().setBasePath(pcaUrl))

// If service instance is FINISHED or PAUSED then stop this loop and job and delete the sync channel
def currentStatus = serviceInstanceRestApi.getServiceInstanceUsingGET(sessionId, instanceId).getInstanceStatus()
if (currentStatus.equals("FINISHED")){
    variables.put("IS_FINISHED",true)
    synchronizationapi.deleteChannel(channel)
    // Remove token in the current node
    token = instanceName
    nodeUrl = variables.get("PA_NODE_URL")
    println("Current nodeUrl: " + nodeUrl)
    println("Removing token:  " + token)
    rmapi.connect()
    rmapi.removeNodeToken(nodeUrl, token)
} else {
    // Check if container has been stopped abnormally
    def command = ["singularity", "instance", "list"].execute() | ["grep", "${instanceName}"].execute()
    command.waitFor()
    def isContainerRunning = command.text
    if ((!isContainerRunning) && (!synchronizationapi.get(channel, "FINISH_LAUNCHED")) && (!synchronizationapi.get(channel, "PAUSE_LAUNCHED"))){
        currentStatus = 'ERROR'
        println("[ERROR] An internal error occurred in docker container: " + instanceName)
        // Update docker container is not running
        def serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(sessionId, instanceId)
        serviceInstanceData.setInstanceStatus(currentStatus)
        serviceInstanceRestApi.updateServiceInstanceUsingPUT(sessionId, instanceId, serviceInstanceData)
        // Tell the CRON loop to stop
        variables.put("IS_FINISHED",true)
        // Exit with error
        throw new IllegalStateException("An internal error occurred in docker container: " + instanceName)
    }
    //} else {
        // Fetch all logs or only new logs since last fetch time mark
        //def lastTime=variables.get('LAST_TIME_MARKER')
        //def fetchLogsCmd = lastTime ? ["docker", "logs", "--since", lastTime, instanceName] : ["docker", "logs", instanceName]
        //fetchLogsCmd.execute().waitForProcessOutput(System.out, System.err)
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <loop target="Loop_Over_Instance_Status_S">
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Fetch_Logs/raw"/>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            363.546875
        </positionTop>
        <positionLeft>
            93.5
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Condition">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
        <info name="Documentation" value="user/ProActiveUserGuide.html#_branch"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def engine = variables.get("ENGINE")

println("[INFO] Starting a Tensorboard server in a " + engine + " container.")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <if else="Start_Tensorboard_D" target="Start_Tensorboard_S">
          <script>
            <code language="groovy">
              <![CDATA[
def engine = variables.get("ENGINE")
if(engine.toLowerCase().equals("singularity")){
    branch = "if";
} else {
    branch = "else";
}
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            107.546875
        </positionTop>
        <positionLeft>
            157.5
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Start_Tensorboard_D">
      <description>
        <![CDATA[ Pull Tensorboard image and start a container ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="Documentation" value="PSA/PSAUserGuide.html"/>
      </genericInformation>
      <pre>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Pre_Start_Service/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo BEGIN "$variables_PA_TASK_NAME"

################################################################################
### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
# Check if the Linux machine supports AVX instructions
TENSORBOARD_INTERNAL_PORT=6006
DOCKER_IMAGE=$variables_DOCKER_IMAGE
INSTANCE_NAME=$variables_INSTANCE_NAME
MOUNT_LOG_PATH=$variables_MOUNT_LOG_PATH
TENSORBOARD_HOST_PORT=$variables_SERVICE_PORT
LOGIN=$variables_PA_USER
PASSWORD=$variables_PASSWORD

if [[ "$DOCKER_IMAGE" = "activeeon/tensorboard:secured" && -z "$PASSWORD" ]]; then
    echo "[ERROR] To secure tensorboard, the PASSWORD variable should be set."
    exit 1
fi

[[ ("$DOCKER_IMAGE" = "activeeon/tensorboard" || "$DOCKER_IMAGE" = "activeeon/tensorboard:secured") && ! -z "$PASSWORD" ]] && IS_SECURED=true || IS_SECURED=false

avx_info=$(grep avx /proc/cpuinfo)
if [ -z "$avx_info" ] && [ "$DOCKER_IMAGE" = "activeeon/tensorboard" ]
then
      echo "\$avx_info is empty, no AVX support"
      DOCKER_IMAGE=activeeon/tensorboard:no-avx
      if $IS_SECURED; then
          echo "[WARNING] Due to no AVX support, LOGIN and PASSWORD protection is ignored."
          IS_SECURED=false
      fi
fi
# else
#       echo "\$avx_info is NOT empty, with AVX support"
#       if $IS_SECURED; then
#           DOCKER_IMAGE=activeeon/tensorboard:secured
#       else
#           DOCKER_IMAGE=activeeon/tensorboard
#       fi
# fi

imagedecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }
SHARED_PATH=$(imagedecode "$MOUNT_LOG_PATH")
eval SHARED_PATH=$SHARED_PATH
echo $SHARED_PATH
################################################################################

PATH=$PATH:/usr/sbin

GET_RANDOM_PORT(){
    PCA_SERVICES_PORT_RANGE_FILE=$variables_PA_SCHEDULER_HOME/config/pca_services_port_range
    if [[ -f "$PCA_SERVICES_PORT_RANGE_FILE" ]]; then
        read LOWERPORT UPPERPORT < $PCA_SERVICES_PORT_RANGE_FILE
    else
        read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
    fi
    while :
    do
        RND_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
        ss -lpn | grep -q ":$RND_PORT " || break
    done
    echo $RND_PORT
}

if [ "$TENSORBOARD_HOST_PORT" -eq "-1" ]; then
    echo "Picking a random port number"
    TENSORBOARD_HOST_PORT=$(GET_RANDOM_PORT)
fi
echo "[INFO] The service will be initialized on port $TENSORBOARD_HOST_PORT"

if [ -z "$INSTANCE_NAME" ]; then
    echo "[ERROR] The INSTANCE_NAME is not provided by the user. Empty value is not allowed."
    exit 1
fi

echo "Pulling "$variables_PA_JOB_NAME" image"
docker pull $DOCKER_IMAGE

if [ "$(docker ps --format '{{.Names}}' | grep ^$INSTANCE_NAME$)" ]; then
    RUNNING=$(docker inspect --format="{{ .State.Running }}" $INSTANCE_NAME 2> /dev/null)
    STOPPED=$(docker inspect --format="{{ .State.Status }}" $INSTANCE_NAME 2> /dev/null)
    if [ "${RUNNING,,}" = "true" ]; then
        echo "$INSTANCE_NAME container is running"
    elif [ "${STOPPED,,}" = "exited" ]; then
        echo "Starting $INSTANCE_NAME container"
        docker start $INSTANCE_NAME
    fi
else
    echo "Running $INSTANCE_NAME container"
    # -u $(id -u ${USER}):$(id -g ${USER})
    if $IS_SECURED; then
        echo docker run -d --name $INSTANCE_NAME -p $TENSORBOARD_HOST_PORT:$TENSORBOARD_HOST_PORT -v $SHARED_PATH:/logs -e PORT=$TENSORBOARD_HOST_PORT -e LOGIN=$LOGIN -e PASSWORD=$PASSWORD -e "discovery.type=single-node" $DOCKER_IMAGE
        docker run -d --name $INSTANCE_NAME -p $TENSORBOARD_HOST_PORT:$TENSORBOARD_HOST_PORT -v $SHARED_PATH:/logs -e PORT=$TENSORBOARD_HOST_PORT -e LOGIN=$LOGIN -e PASSWORD=$PASSWORD -e "discovery.type=single-node" $DOCKER_IMAGE
    else
        echo docker run -d --name $INSTANCE_NAME -p $TENSORBOARD_HOST_PORT:$TENSORBOARD_INTERNAL_PORT -v $SHARED_PATH:/logs -e "discovery.type=single-node" $DOCKER_IMAGE
        docker run -d --name $INSTANCE_NAME -p $TENSORBOARD_HOST_PORT:$TENSORBOARD_INTERNAL_PORT -v $SHARED_PATH:/logs -e "discovery.type=single-node" $DOCKER_IMAGE
    fi
fi

if $IS_SECURED; then
    TENSORBOARD_PORT=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "'$TENSORBOARD_HOST_PORT'/tcp") 0).HostPort}}' $INSTANCE_NAME)
else
    TENSORBOARD_PORT=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "'$TENSORBOARD_INTERNAL_PORT'/tcp") 0).HostPort}}' $INSTANCE_NAME)
fi
echo "$TENSORBOARD_PORT" > $INSTANCE_NAME"_port"

containerID=$(docker ps -aqf "name=^/$INSTANCE_NAME$")
echo "$containerID" > $INSTANCE_NAME"_containerID"

echo END "$variables_PA_TASK_NAME"
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Post_Start_Service/raw"/>
        </script>
      </post>
      <metadata>
        <positionTop>
            229.546875
        </positionTop>
        <positionLeft>
            278.5
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Loop_Over_Instance_Status_D">
      <description>
        <![CDATA[ Loop over service instance status and fetch docker container logs.
It will run every minute. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="Documentation" value="PSA/PSAUserGuide.html"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="Start_Tensorboard_D"/>
      </depends>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Check_Instance_Status/raw"/>
        </script>
      </scriptExecutable>
      <controlFlow>
        <loop target="Loop_Over_Instance_Status_D">
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Fetch_Logs/raw"/>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            368.546875
        </positionTop>
        <positionLeft>
            309.5
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2476px;
            height:3328px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-102.546875px;left:-88.5px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_69" style="top: 235.547px; left: 93.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Pull Tensorboard image and start a container"><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Start_Tensorboard_S</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_72" style="top: 363.547px; left: 93.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Loop over service instance status and fetch docker container logs.
It will run every minute."><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Loop_Over_Instance_Status_S</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_75" style="top: 107.547px; left: 157.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Condition</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_78" style="top: 229.547px; left: 278.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Pull Tensorboard image and start a container"><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Start_Tensorboard_D</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_81" style="top: 368.547px; left: 309.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Loop over service instance status and fetch docker container logs.
It will run every minute."><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Loop_Over_Instance_Status_D</span></a></div><svg style="position:absolute;left:148px;top:275.5px" width="43.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 22.5 88 C 32.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M23.40936,66.303232 L23.83038624209553,45.1177950938735 L19.047922429813696,52.999929315276646 L10.52708355737218,49.47923266405979 L23.40936,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M23.40936,66.303232 L23.83038624209553,45.1177950938735 L19.047922429813696,52.999929315276646 L10.52708355737218,49.47923266405979 L23.40936,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:248.0266769263776px;top:313.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_92" style="position: absolute; transform: translate(-50%, -50%); left: 260px; top: 383.5px;">loop</div><svg style="position:absolute;left:83.5px;top:147.5px" width="85" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 74 50 64 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.081406499999998,63.998374500000004 L22.929075029560156,54.31512137928547 L13.721469712576434,53.84607519109808 L12.776775720658232,44.675058166709036 L4.081406499999998,63.998374500000004" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.081406499999998,63.998374500000004 L22.929075029560156,54.31512137928547 L13.721469712576434,53.84607519109808 L12.776775720658232,44.675058166709036 L4.081406499999998,63.998374500000004" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_98" style="position: absolute; transform: translate(-50%, -50%); left: 125.5px; top: 191.5px;">if</div><svg style="position:absolute;left:147.5px;top:147.5px" width="142" height="83" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 121 82 C 131 32 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M106.95239325,56.250909 L91.9130190611372,41.32384552430702 L94.31569615980068,50.224808548584676 L85.88691860972189,53.96054261450634 L106.95239325,56.250909" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M106.95239325,56.250909 L91.9130190611372,41.32384552430702 L94.31569615980068,50.224808548584676 L85.88691860972189,53.96054261450634 L106.95239325,56.250909" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_102" style="position: absolute; transform: translate(-50%, -50%); left: 218px; top: 188.5px;">else</div><svg style="position:absolute;left:333.5px;top:269.5px" width="74" height="100" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 53 99 C 63 49 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M49.856426,73.302678 L44.148676766160506,52.89626727484785 L41.84306734400898,61.82286602199035 L32.668864788150856,60.90962593083888 L49.856426,73.302678" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M49.856426,73.302678 L44.148676766160506,52.89626727484785 L41.84306734400898,61.82286602199035 L32.668864788150856,60.90962593083888 L49.856426,73.302678" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:464.0266769263776px;top:318.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_111" style="position: absolute; transform: translate(-50%, -50%); left: 476px; top: 388.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 148.5px; top: 266px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 84px; top: 226px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 171px; top: 394px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 171px; top: 354px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 258px; top: 354px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 258px; top: 394px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 198px; top: 138px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 148px; top: 138px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 334px; top: 260px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 269px; top: 220px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 387px; top: 399px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 387px; top: 359px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 474px; top: 359px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 474px; top: 399px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
