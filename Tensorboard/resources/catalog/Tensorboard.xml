<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.12" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd"  name="Tensorboard" projectName="Cloud Automation - Deployment" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
  <variables>
    <variable name="INSTANCE_NAME" value="tensorboard-server" />
    <variable name="MOUNT_LOG_PATH" value="/shared/$INSTANCE_NAME" />
    <variable name="PROXYFIED" value="False" model="PA:Boolean"/>
    <variable name="ENDPOINT_ID" value="tensorboard-gui" />
    <variable name="HTTP_ENABLED" value="True" model="PA:Boolean"/>
  </variables>
  <description>
    <![CDATA[ Deploy a Tensorboard server.
The service can be started using the following variable:
$INSTANCE_NAME (Required): service instance name ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="cloud-automation"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
    <info name="pca.states" value="(VOID,RUNNING)"/>
    <info name="Documentation" value="PCA/PCAUserGuide.html"/>
    <info name="pca.service.id" value="Tensorboard"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Start_Tensorboard" fork="true">
      <description>
        <![CDATA[ Pull Tensorboard image and start a container ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="Documentation" value="PCA/PCAUserGuide.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo BEGIN "$variables_PA_TASK_NAME"

################################################################################
### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
# Check if the Linux machine supports AVX instructions
avx_info=$(grep avx /proc/cpuinfo)
if [ -z "$avx_info" ]
then
      echo "\$avx_info is empty, no AVX support"
      DOCKER_IMAGE=activeeon/tensorboard:no-avx
else
      echo "\$avx_info is NOT empty, with AVX support"
      DOCKER_IMAGE=activeeon/tensorboard
fi
PORT=6006
INSTANCE_NAME=$variables_INSTANCE_NAME
MOUNT_LOG_PATH=$variables_MOUNT_LOG_PATH

imagedecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }
SHARED_PATH=$(imagedecode "$MOUNT_LOG_PATH")
eval SHARED_PATH=$SHARED_PATH
echo $SHARED_PATH
################################################################################


echo "Pulling "$variables_PA_JOB_NAME" image"
docker pull $DOCKER_IMAGE

GET_RANDOM_PORT(){
    read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
    while :
    do
        RND_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
        ss -lpn | grep -q ":$RND_PORT " || break
    done
    echo $RND_PORT
}

INSTANCE_NAME=$variables_INSTANCE_NAME

if [ -z "$INSTANCE_NAME" ]; then
    echo [ERROR] The INSTANCE_NAME is not provided by the user. Empty value is not allowed.
    exit 1
fi

if [ "$(docker ps --format '{{.Names}}' | grep ^$INSTANCE_NAME$)" ]; then
    RUNNING=$(docker inspect --format="{{ .State.Running }}" $INSTANCE_NAME 2> /dev/null)
    STOPPED=$(docker inspect --format="{{ .State.Status }}" $INSTANCE_NAME 2> /dev/null)
    if [ "$RUNNING" == "true" ]; then
        echo "$INSTANCE_NAME container is running"
    elif [ "$STOPPED" == "exited" ]; then
        echo "Starting $INSTANCE_NAME container"
        docker start $INSTANCE_NAME
    fi
else
    ################################################################################
    ### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
    echo "Running $INSTANCE_NAME container"
    F_PORT=$(GET_RANDOM_PORT)
    echo docker run -d --name $INSTANCE_NAME -p $F_PORT:$PORT -v $SHARED_PATH:/logs -e "discovery.type=single-node" $DOCKER_IMAGE
    docker run -d --name $INSTANCE_NAME -p $F_PORT:$PORT -v $SHARED_PATH:/logs -e "discovery.type=single-node" $DOCKER_IMAGE
    ################################################################################
fi

port=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "'$PORT'/tcp") 0).HostPort}}' $INSTANCE_NAME)
echo "$port" > $INSTANCE_NAME"_port"

containerID=$(docker ps -aqf "name=^$INSTANCE_NAME$")
echo "$containerID" > $INSTANCE_NAME"_containerID"

# Endpoint added to the job variables using a groovy post-script
echo END "$variables_PA_TASK_NAME"
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Post_Start_Service/raw" language="groovy"></file>
        </script>
      </post>
      <metadata>
        <positionTop>
            766.9175720214844
        </positionTop>
        <positionLeft>
            514.9573669433594
        </positionLeft>
      </metadata>
    </task>
    <task name="Loop_Over_Instance_Status" 
    
    
    
    
    fork="true">
      <description>
        <![CDATA[ Loop over service instance status and fetch docker container logs.
It will run every minute. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="Documentation" value="PCA/PCAUserGuide.html"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="Start_Tensorboard"/>
      </depends>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Check_Instance_Status/raw" language="groovy"></file>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="Loop_Over_Instance_Status">
          <script>
            <file url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Fetch_Logs/raw" language="groovy"></file>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            892.9402770996094
        </positionTop>
        <positionLeft>
            513.9488220214844
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2487px;
            height:2901px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-761.9175720214844px;left:-508.9488220214844px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable active-task" id="jsPlumb_1_1780" style="top: 766.918px; left: 514.971px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Pull Tensorboard image and start a container"><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Start_Tensorboard</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1783" style="top: 892.943px; left: 513.957px; z-index: 24;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Loop over service instance status and fetch docker container logs.
It will run every minute."><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Loop_Over_Instance_Status</span></a></div><svg style="position:absolute;left:562.5px;top:806.5px" width="42.457366943359375" height="86.94314575195312" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 21.457366943359375 85.94314575195312 C 31.457366943359375 35.943145751953125 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M22.455909604492188,64.42231283691406 L22.97239207151766,43.238988124743514 L18.15446031490292,51.099492789750926 L9.649572024354521,47.540437414332786 L22.455909604492188,64.42231283691406" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M22.455909604492188,64.42231283691406 L22.97239207151766,43.238988124743514 L18.15446031490292,51.099492789750926 L9.649572024354521,47.540437414332786 L22.455909604492188,64.42231283691406" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:654.984043869737px;top:842.4431457519531px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_1794" style="position: absolute; transform: translate(-50%, -50%); left: 666.957px; top: 912.443px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 563px; top: 797px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 584.457px; top: 922.943px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 584.457px; top: 882.943px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 664.957px; top: 882.943px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 664.957px; top: 922.943px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>
