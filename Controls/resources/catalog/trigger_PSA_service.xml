<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="Trigger_PSA_Service" tags="Controls,Get started,Building blocks" projectName="6. PaaS templates" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
    <variables>
        <variable name="SERVICE_ID" value="" model="" description="Id of the ProActive Service Automation service that will be triggered. An existing SERVICE_ID from the Service Activation list in the Service Automation portal must be provided. Example of SERVICE_ID: MongoDB, MySQL, Kibana ... ." group="" advanced="false" hidden="false"/>
        <variable name="SERVICE_VARS" value="" model="" description="&lt;b&gt;&lt;i&gt;(optional)&lt;/i&gt;&lt;/b&gt; A map as a String in format [&#39;k1&#39;: &#39;v1&#39;, &#39;k2&#39;: &#39;v2&#39;, ....] that contains a set of initialized variables used to start the service. Note that only variables of the corresponding service in ProActive Service Automation can be initialized." group="" advanced="false" hidden="false"/>
    </variables>
    <description>
        <![CDATA[ This task allows to start a PSA service from the studio using the client API rather than from the service automation portal. ]]>
    </description>
    <genericInformation>
        <info name="bucketName" value="control-templates"/>
        <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/start_PCA_service.png"/>
        <info name="group" value="public-objects"/>
    </genericInformation>
    <taskFlow>
        <task name="Trigger_PSA_Service"
              onTaskError="cancelJob"
              fork="true">
            <genericInformation>
                <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/start_PCA_service.png"/>
                <info name="task.documentation" value="PSA/PSAUserGuide.html"/>
            </genericInformation>
            <scriptExecutable>
                <script>
                    <code language="groovy">
                        <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription
import org.ow2.proactive.pca.service.client.model.CloudAutomationWorkflow
import org.ow2.proactive.pca.service.client.api.CatalogRestApi
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

println("BEGIN " + variables.get("PA_TASK_NAME"))

// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def sessionId = schedulerapi.getSession()

// Define PCA URL
def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')

// Connect to APIs
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
//apiClient.setDebugging(true)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

def serviceId = variables.get("SERVICE_ID")
if (serviceId.isEmpty()) {
    throw new IllegalArgumentException("You have to specify a SERVICE_ID value. Empty value is not allowed.");
}
println("SERVICE_ID:    " + serviceId)

//retrieve service variables
def serviceVars = variables.get("SERVICE_VARS")
def serviceVarsMap = new HashMap()
if(serviceVars.isEmpty()){
    println("The service " + serviceId + " is started without any variables. Default configuration is used.")
}
else{
    serviceVarsMap = evaluate(serviceVars)
    println("The provided service variables are:")
    serviceVarsMap.each{ k, v -> println "${k}:${v}" }
}

//Check that the provided service id belongs to the existing Service Activation list
def catalogRestApi = new CatalogRestApi(apiClient)
def isServiceIdExists = false
Map<String, List<CloudAutomationWorkflow>> listAllWorkflowsByServiceId = catalogRestApi.listAllWorkflowsByServiceId(sessionId)

for(String pcaServiceId : listAllWorkflowsByServiceId.keySet()){
     if (pcaServiceId.equals(serviceId)){
         isServiceIdExists = true
         break
     }
}
if(!isServiceIdExists){
	 throw new IllegalArgumentException("The provided SERVICE_ID: " + serviceId + " does not belong to the existing Service Activation list. You have to specify an existing service id.")
}

//Identifying the starting workflow and its bucket name in the catalog
def startingWorkflowName
def bucketName
def serviceVariables
Map<String, List<CloudAutomationWorkflow>> listStartingWorkflowsByServiceId = catalogRestApi.listStartingWorkflowsByServiceId(sessionId)
for(String serviceIdIterator : listStartingWorkflowsByServiceId.keySet()){
     if (serviceIdIterator.equals(serviceId)){
        startingWorkflowName = listStartingWorkflowsByServiceId.get(serviceIdIterator)[0].getName()
        bucketName = listStartingWorkflowsByServiceId.get(serviceIdIterator)[0].getBucket()
        //retrieve default pca service variables
        serviceVariables = listStartingWorkflowsByServiceId.get(serviceIdIterator)[0].getVariables().collectEntries {var -> [var.getName(), var.getValue()]}
        break
     }
}

serviceVariables.putAll(serviceVarsMap)

println("STARTING_WORKFLOW_NAME:    " + startingWorkflowName)
println("BUCKET_NAME:    " + bucketName)
println("VARIABLES:    " + serviceVariables.toString())

// Prepare service description
ServiceDescription serviceDescription = new ServiceDescription()
serviceDescription.setBucketName(bucketName)
serviceDescription.setWorkflowName(startingWorkflowName)


if( !serviceVariables.isEmpty() ){
    serviceVariables.each{ k, v -> serviceDescription.putVariablesItem("${k}", "${v}") }
}

/********************************************************************************/

// Run service
def serviceInstanceData = serviceInstanceRestApi.createRunningServiceInstance(sessionId, serviceDescription, Integer.parseInt(variables.get("PA_JOB_ID")))

// Acquire service Instance ID
def serviceInstanceId = serviceInstanceData.getInstanceId()
println("INSTANCE_ID: " + serviceInstanceId)

// Create synchro channel
def channel = "Service_Instance_" + serviceInstanceId
println("SYNC CHANNEL: " + channel)
synchronizationapi.createChannelIfAbsent(channel, false)

// Wait until the service reaches the RUNNING state
synchronizationapi.waitUntil(channel, "RUNNING_STATE", "{k,x -> x == 1}")

// Acquire service endpoint
def endpoint
if(serviceInstanceData.getDeployments()){
    endpoint = serviceInstanceData.getDeployments().iterator().next().getEndpoint().getUrl()
    println("ENDPOINT: " + endpoint)
    variables.put("ENDPOINT", endpoint)
}

variables.put("INSTANCE_ID", serviceInstanceId)

println("END " + variables.get("PA_TASK_NAME"))
]]>
                    </code>
                </script>
            </scriptExecutable>
            <metadata>
                <positionTop>
                    448.765625
                </positionTop>
                <positionLeft>
                    627
                </positionLeft>
            </metadata>
        </task>
    </taskFlow>
    <metadata>
        <visualization>
            <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2832px;
            height:3312px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-443.765625px;left:-622px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_16" style="top: 448.781px; left: 627px; z-index: 24;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/start_PCA_service.png" width="20px">&nbsp;<span class="name">Trigger_PSA_Service</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 682px; top: 479px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
        </visualization>
    </metadata>
</job>