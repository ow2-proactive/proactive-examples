<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.13" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd"  name="Execute_Action_PSA_Service" projectName="6. PaaS templates" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
    <variables>
        <variable name="INSTANCE_ID" value="" model="PA:INTEGER?" description="Instance id of the active service (to be retrieved from the Activated Service list in the service-automation portal)" group="" advanced="false" hidden="false"/>
        <variable name="ACTION" value="" model="" description="Name of the action to be executed. Possible actions are listed in the Full Services View of the started service in the service-automation portal." group="" advanced="false" hidden="false"/>
        <variable name="ACTION_VARS" value="" model="" description="&lt;b&gt;&lt;i&gt;(optional)&lt;/i&gt;&lt;/b&gt; A map as a String (in format &lt;i&gt;[&#39;k1&#39;: &#39;v1&#39;, &#39;k2&#39;: &#39;v2&#39;, ....]&lt;/i&gt;) that contains a set of initialized variables used to execute the action. Note that only variables of the corresponding service in ProActive Service Automation can be initialized." group="" advanced="false" hidden="false"/>
    </variables>
    <description>
        <![CDATA[ This workflow allows to manage the life-cycle of an active PSA service by executing an action such as Finish_XXXX, Pause_XXX... from the client side. ]]>
    </description>
    <genericInformation>
        <info name="bucketName" value="controls"/>
        <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/execute_action_PCA_service.png"/>
        <info name="group" value="public-objects"/>
        <info name="Documentation" value="PSA/PSAUserGuide.html"/>
    </genericInformation>
    <taskFlow>
        <task name="Execute_Action_PSA_Service"

              onTaskError="cancelJob"


              fork="true">
            <genericInformation>
                <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/execute_action_PCA_service.png"/>
                <info name="task.documentation" value="PSA/PSAUserGuide.html"/>
            </genericInformation>
            <scriptExecutable>
                <script>
                    <code language="groovy">
                        <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription
import org.ow2.proactive.pca.service.client.model.CloudAutomationWorkflow
import org.ow2.proactive.pca.service.client.api.CatalogRestApi
import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

println("--- BEGIN " + variables.get("PA_TASK_NAME") + " ---")


// Get schedulerapi access
schedulerapi.connect()

// Acquire session id
def sessionId = schedulerapi.getSession()

// Define PCA URL
def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')

// Connect to APIs
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
//apiClient.setDebugging(true)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)
def instanceId
try{
    instanceId = variables.get("INSTANCE_ID") as int
} catch(Exception e){
    throw new IllegalArgumentException("You have to provide a valid INSTANCE_ID value.");
}

println("INSTANCE_ID: " + instanceId)

def action = variables.get("ACTION")
if (action.isEmpty()) {
    throw new IllegalArgumentException("You have to provide an ACTION value. Empty value is not allowed.");
}

def bucketName
def isActionExists = false
def catalogRestApi = new CatalogRestApi(apiClient)
def actionVariables

List<CloudAutomationWorkflow> listExecutableActions = catalogRestApi.listExecutableActionsByInstanceIdUsingGET(sessionId, instanceId.toString()).get(instanceId.toString())
for (CloudAutomationWorkflow actionIterator : listExecutableActions) {
    if (actionIterator.getName().equals(action)){
        bucketName = actionIterator.getBucket()
        //retrieve default action variables
        actionVariables = actionIterator.getVariables().collectEntries {var -> [var.getName(), var.getValue()]}
        isActionExists = true
        break
     }
}
if(!isActionExists){
	 throw new IllegalArgumentException("The provided ACTION: " + action + " does not belong to the existing possible actions that can be applied to the current state of the service. You have to specify a valid action.")
}

//retrieve action variables
def actionVars = variables.get("ACTION_VARS")
def actionVarsMap = new HashMap()
if(actionVars.isEmpty()){
    println("The provided ACTION " + action + " is executed without any provided variables. Default configuration is used.")
}
else{
    actionVarsMap = evaluate(actionVars)
    println("The provided ACTION variables are:")
    actionVarsMap.each{ k, v -> println "${k}:${v}" }
}
actionVariables.putAll(actionVarsMap)


// Execute action on service
ServiceDescription service = new ServiceDescription()
service.setBucketName(bucketName)
service.setWorkflowName(action)
if( !actionVariables.isEmpty() ){
    actionVariables.each{ k, v -> service.putVariablesItem("${k}", "${v}") }
}
serviceInstanceRestApi.launchServiceInstanceActionUsingPUT(sessionId, instanceId, service, variables.get("PA_JOB_ID"))

println("--- END " + variables.get("PA_TASK_NAME") + " ---")
]]>
                    </code>
                </script>
            </scriptExecutable>
            <metadata>
                <positionTop>
                    448.78125
                </positionTop>
                <positionLeft>
                    598.5
                </positionLeft>
            </metadata>
        </task>
    </taskFlow>
    <metadata>
        <visualization>
            <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2832px;
            height:3312px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-443.78125px;left:-593.5px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_1" style="top: 448.796px; left: 598.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title=""><img src="/automation-dashboard/styles/patterns/img/wf-icons/execute_action_PCA_service.png" width="20px">&nbsp;<span class="name">Execute_Action_PSA_Service</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 673px; top: 479px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
        </visualization>
    </metadata>
</job>