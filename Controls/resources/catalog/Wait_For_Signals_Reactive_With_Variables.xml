<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.14" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Wait_For_Signals_Reactive_With_Variables" onTaskError="continueJobExecution" priority="normal" projectName="4. Signal Templates" tags="Controls,Building blocks" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd">
  <description>
    <![CDATA[ A workflow template that processes signals with input parameters, in a reactive mode. It exposes to users the signals specified in the variable 'SIGNALS' along with their associated input parameters, then waits until one signal (among those specified) is received by the job. This template allows to immediately react to signal reception and trigger some processing. It performs a blocking wait (i.e., the wait instruction keeps running and consuming a ProActive node) until the signal is received. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="control-templates"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/signal-wait.png"/>
<info name="documentation" value="user/ProActiveUserGuide.html#_task_signal_api"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="wait_for_signals_reactive_with_variables">
      <description>
        <![CDATA[ A template task that sends a ready notification for all the signals specified in the variable SIGNALS, then waits (i.e., performs a blocking wait) until one signal among those specified is received by the job. ]]>
      </description>
      <variables>
        <variable advanced="false" description="List of comma-separated signals expected by this task." hidden="false" inherited="false" model="PA:REGEXP(((\w|-|_)+,?\s?)+)" name="SIGNALS" value="Stop, Continue"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/signal-wait.png"/>
        <info name="TASK.DOCUMENTATION" value="user/ProActiveUserGuide.html#_task_signal_api"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import com.google.common.base.Splitter;
import org.ow2.proactive.scheduler.common.job.JobVariable;


List <JobVariable> signalVariables = new java.util.ArrayList<JobVariable>()
signalVariables.add(new JobVariable("INTEGER_VARIABLE", "12", "PA:INTEGER", "Put here a description of the Signal Variable. It will be displayed to the Users when sending the Signal.", "", false, false))
signalVariables.add(new JobVariable("LIST_VARIABLE", "True", "PA:LIST(True,False)", "Put here a description of the Signal Variable. It will be displayed to the Users when sending the Signal.", "Group", true, false))
signalVariables.add(new JobVariable("BOOLEAN_VARIABLE", "true", "PA:Boolean", "Put here a description of the Signal Variable. It will be displayed to the Users when sending the Signal.", "", false, true))

// Read the variable SIGNALS
signals = variables.get("SIGNALS")

// Split the value of the variable SIGNALS and transform it into a list
Set signalsSet = new HashSet<>(Splitter.on(',').trimResults().omitEmptyStrings().splitToList(signals))

// Send a ready notification for each signal in the set
println("Ready for signals "+ signalsSet)
signalsSet.each { signal ->
    if(signal.equals("Stop")) {
	    signalapi.readyForSignal(signal);
	  } else {
	    signalapi.readyForSignal(signal, signalVariables)
	  }
}

// Wait until one signal among those specified is received
println("Waiting for any signal among "+ signalsSet)
receivedSignal = signalapi.waitForAny(signalsSet)

// Remove ready signals
signalapi.removeManySignals(new HashSet<>(signalsSet.collect { signal -> "ready_"+signal }))

// Display the received signal and add it to the job result
println("Received signal: "+ receivedSignal)

println("Signal variables:")
def variables = receivedSignal.getUpdatedVariables().each{ k, v -> println "${k}:${v}" }

result = receivedSignal
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            214.5
        </positionTop>
        <positionLeft>
            563
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2740px;
            height:3492px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-209.5px;left:-558px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_76" style="top: 214.5px; left: 563px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A template task that sends a ready notification for all the signals specified in the variable SIGNALS, then waits (i.e., performs a blocking wait) until one signal among those specified is received by the job."><img src="/automation-dashboard/styles/patterns/img/wf-icons/signal-wait.png" width="20px">&nbsp;<span class="name">wait_for_signals_reactive_with_variables</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 664px; top: 245px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
