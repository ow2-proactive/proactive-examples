<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.14" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="MLOps_Dashboard" tags="MLOps,Dashboard,Model Management,Model Deployment,Model Monitoring,Triton,Service,Service Automation" onTaskError="continueJobExecution" priority="normal" projectName="1. MLOps Dashboard" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd">
  <variables>
    <variable advanced="true" description="Name of the node on which the service will be deployed." group="Resource Management" name="NODE_NAME" value=""/>
    <variable advanced="true" description="Service instance name." group="Proactive Service Parameters" hidden="false" name="INSTANCE_NAME" value="mlops-dashboard-$PA_JOB_ID"/>
    <variable advanced="true" description="The endpoint_id that will be used if PROXYFIED is set to True." group="Proactive Service Parameters" hidden="false" name="ENDPOINT_ID" value="mlops-dashboard-gui-$PA_JOB_ID"/>
    <variable advanced="true" description="True if a proxy is needed to protect the access to the service endpoint." group="Proactive Service Parameters" hidden="false" model="PA:Boolean" name="PROXYFIED" value="False"/>
    <variable advanced="true" description="True if an https endpoint will be exposed as the service endpoint." group="Proactive Service Parameters" hidden="false" model="PA:Boolean" name="HTTPS_ENABLED" value="False"/>
    <variable advanced="true" description="If specified, it specifies the port number for the HTTP metrics." group="MLOps Dashboard Service Configuration" hidden="false" name="DASHBOARD_SERVICE_PORT" value="-1"/>
    <variable advanced="true" description="Docker image used to start the MLOps Dashboard." group="MLOps Dashboard Service Configuration" hidden="false" name="DOCKER_IMAGE" value="activeeon/mlops_dashboard:latest"/>
    <variable advanced="false" description="If not empty, the MLOps Dashboard will ask this password to access the service." group="MLOps Dashboard Service Configuration" hidden="false" model="PA:HIDDEN" name="DASHBOARD_PASSWORD" value=""/>
  </variables>
  <description>
    <![CDATA[ The service starts the MLOps Dashboard to manage AI models deployment. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="ai-mlops-dashboard"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mlops_dashboard.png"/>
<info name="pca.states" value="(VOID,RUNNING)"/>
<info name="Documentation" value="PSA/PSAUserGuide.html"/>
<info name="pca.service.id" value="MLOps_Dashboard"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Start_MLOps_Dashboard_D" onTaskError="cancelJob" runAsMe="true">
      <description>
        <![CDATA[ Download the docker image and run the docker container. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/mlops_dashboard.png"/>
      </genericInformation>
      <inputFiles>
        <files accessMode="transferFromGlobalSpace" includes="certificate_mas.pem"/>
        <files accessMode="transferFromGlobalSpace" includes="key_mas.pem"/>
      </inputFiles>
      <selection>
        <script type="static">
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_node_name_not_empty/raw">
            <arguments>
              <argument value="$NODE_NAME"/>
            </arguments>
          </file>
        </script>
      </selection>
      <pre>
        <script>
          <code language="cpython">
            <![CDATA[
import subprocess
import sys
import json

global schedulerapi, variables

def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package, "--user"])

try:
    import cryptography
    from cryptography.fernet import Fernet
except ImportError:
    install('cryptography')
    import cryptography
    from cryptography.fernet import Fernet

# Get user credentials and convert to json
schedulerapi.connect()
sessionId = str(schedulerapi.getSession())
connectionInfo = schedulerapi.getConnectionInfo()
ciLogin = str(connectionInfo.getLogin())
ciPasswd = str(connectionInfo.getPassword())
ciUrl = str(connectionInfo.getUrl())
user_credentials = {
  'sessionId': sessionId,
  'ciLogin': ciLogin,
  'ciPasswd': ciPasswd,
  'ciUrl': ciUrl
}
user_credentials_json = json.dumps(user_credentials)

# Encrypt user data into a binary file
key = Fernet.generate_key()
f = Fernet(key)
message = user_credentials_json.encode()
encrypted = f.encrypt(message)
user_data_file = 'user_data.enc'
with open(user_data_file, 'wb') as f:
    f.write(encrypted)
variables.put("USER_KEY", key.decode())
variables.put("USER_DATA_FILE", user_data_file)
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo BEGIN "$variables_PA_TASK_NAME"

################################################################################
### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
DOCKER_IMAGE=$variables_DOCKER_IMAGE
DASHBOARD_INTERNAL_PORT=8080
DASHBOARD_SERVICE_PORT=$variables_DASHBOARD_SERVICE_PORT
DASHBOARD_PASSWORD=$variables_DASHBOARD_PASSWORD
HTTPS_ENABLED=$variables_HTTPS_ENABLED
INSTANCE_NAME=$variables_INSTANCE_NAME
USER_KEY=$variables_USER_KEY
USER_DATA_FILE="${PWD}/${variables_USER_DATA_FILE}"
PA_JOB_ID=$variables_PA_JOB_ID
PROXYFIED=$variables_PROXYFIED
################################################################################

BASE_URL=""
BASE_PATH=""
if [ "${PROXYFIED,,}" = "true" ]; then
    BASE_URL="$variables_PA_CLOUD_AUTOMATION_REST_PUBLIC_URL/services/$variables_PCA_INSTANCE_ID/endpoints/$variables_ENDPOINT_ID-$variables_PCA_INSTANCE_ID"
    BASE_PATH="/cloud-automation-service/services/$variables_PCA_INSTANCE_ID/endpoints/$variables_ENDPOINT_ID-$variables_PCA_INSTANCE_ID"
fi
echo "BASE_URL: $BASE_URL"
echo "BASE_PATH: $BASE_PATH"

PATH=$PATH:/usr/sbin

GET_RANDOM_PORT(){
    PCA_SERVICES_PORT_RANGE_FILE=$variables_PA_SCHEDULER_HOME/config/pca_services_port_range
    if [[ -f "$PCA_SERVICES_PORT_RANGE_FILE" ]]; then
        read LOWERPORT UPPERPORT < $PCA_SERVICES_PORT_RANGE_FILE
    else
        read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
    fi
    while :
    do
        RND_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
        ss -lpn | grep -q ":$RND_PORT " || break
    done
    echo $RND_PORT
}

if [ "$DASHBOARD_SERVICE_PORT" -eq "-1" ]; then
    echo "[INFO] Picking a random port number for DASHBOARD_SERVICE_PORT"
    DASHBOARD_SERVICE_PORT=$(GET_RANDOM_PORT)
    echo "[INFO] DASHBOARD_SERVICE_PORT is $DASHBOARD_SERVICE_PORT"
fi
echo "[INFO] The service will be initialized on port $DASHBOARD_SERVICE_PORT"

if [ -z "$INSTANCE_NAME" ]; then
    echo "[ERROR] The INSTANCE_NAME is not provided by the user. Empty value is not allowed".
    exit 1
fi

echo "Pulling $DOCKER_IMAGE"
docker pull $DOCKER_IMAGE

if [ "$(docker ps -a --format '{{.Names}}' | grep "^$INSTANCE_NAME$")" ]; then
    echo [ERROR] "$INSTANCE_NAME" is already used by another service instance.
    exit 128
else
    echo "Running $INSTANCE_NAME container"
    PARAMS=''
    if [ ! -z "$DASHBOARD_PASSWORD" ]; then
    	PARAMS="-e STREAMLIT_PASSWORD=$DASHBOARD_PASSWORD"
    fi
    echo "docker run -d --rm --name $INSTANCE_NAME $PARAMS -v /etc/timezone:/etc/timezone -v /etc/localtime:/etc/localtime -e BASE_PATH=$BASE_PATH -e BASE_URL=$BASE_URL -e PA_JOB_ID=$PA_JOB_ID -e USER_KEY=$USER_KEY -p $DASHBOARD_SERVICE_PORT:$DASHBOARD_INTERNAL_PORT $DOCKER_IMAGE"
    docker run -d --rm --name $INSTANCE_NAME $PARAMS -v /etc/timezone:/etc/timezone -v /etc/localtime:/etc/localtime -e BASE_PATH=$BASE_PATH -e BASE_URL=$BASE_URL -e PA_JOB_ID=$PA_JOB_ID -e USER_KEY=$USER_KEY -p $DASHBOARD_SERVICE_PORT:$DASHBOARD_INTERNAL_PORT $DOCKER_IMAGE
    docker cp $USER_DATA_FILE $INSTANCE_NAME:/opt/user_data.enc

    if [ "$(docker ps -a --format '{{.Names}}' | grep "^$INSTANCE_NAME$")" ]; then
        RUNNING=$(docker inspect --format="{{ .State.Running }}" $INSTANCE_NAME 2> /dev/null)
        if [ "${RUNNING,,}" = "true" ]; then
            echo $INSTANCE_NAME > $INSTANCE_NAME"_status"
        fi
    else
        echo $INSTANCE_STATUS > $INSTANCE_NAME"_status"
    fi
fi
echo "$DASHBOARD_SERVICE_PORT" > $INSTANCE_NAME"_port"

containerID=$(docker ps -aqf "name=^$INSTANCE_NAME$")
echo "$containerID" > $INSTANCE_NAME"_containerID"

echo END "$variables_PA_TASK_NAME"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
/*********************************************************************************
* THIS POSTSCRIPT PROPAGATES USEFUL INFORMATION SUCH AS:                         *
* 1) SERVICE ENDPOINT (PROTOCOL://HOSTNAME:PORT)                                 *
* 2) CREDENTIALS (IF THERE ARE ANY) BY ADDING THEM TO 3RD PARTY CREDENTIALS      *
*********************************************************************************/

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.Container
import org.ow2.proactive.pca.service.client.model.Endpoint
import org.ow2.proactive.pca.service.client.model.Deployment
import org.ow2.proactive.pca.service.client.model.Node
import java.net.URLEncoder;

// Acquire variables
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def httpsEnabled = variables.get("HTTPS_ENABLED")
def instanceName = variables.get("INSTANCE_NAME")
def proxyfied = variables.get("PROXYFIED")
def hostname = variables.get("PA_NODE_HOST")
def endpointID = variables.get("ENDPOINT_ID")+"-"+instanceId
def engine = variables.get("ENGINE")

println("proxyfied: " + proxyfied)
println("httpsEnabled: " + httpsEnabled)

// Handle service parameters
def port = new File(instanceName+"_port").text.trim()
def containerUrl = hostname+":"+port
def containerID = ""
if (engine != null && "singularity".equalsIgnoreCase(engine)) {
    containerID = "0"
} else {
    containerID = new File(instanceName+"_containerID").text.trim()
}

// Determine Cloud Automation URL
def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()

// Connect to Cloud Automation API
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

// Implement service model

// Container
def Container container = new Container()
container.setId(containerID)
container.setName(instanceName)
ENDPOINT_PATH = "/dashboard/"
// ENDPOINT_PATH = "/"

// Endpoint
def Endpoint endpoint = new Endpoint();
endpoint.setId(endpointID);
// Set the endpoint parameters according to the Proxy settings
if (proxyfied.toLowerCase()=="true"){
    if (httpsEnabled.toLowerCase()=="true"){
        containerUrl = "https://"+containerUrl+ENDPOINT_PATH
    } else{
        containerUrl = "http://"+containerUrl+ENDPOINT_PATH
    }
    containerUrl = URLDecoder.decode(containerUrl, "UTF-8");
    proxyfiedURL = pcaUrl+"/services/"+instanceId+"/endpoints/"+endpointID+ENDPOINT_PATH
    endpoint.setProxyfied(true);
    endpoint.setProxyfiedUrl(proxyfiedURL)
}else{
    endpoint.setProxyfied(false)
    if (httpsEnabled.toLowerCase()=="true"){
        containerUrl = "https://"+containerUrl+ENDPOINT_PATH
    } else{
        containerUrl = "http://"+containerUrl+ENDPOINT_PATH
    }
    containerUrl = URLDecoder.decode(containerUrl, "UTF-8");
}
endpoint.setUrl(containerUrl);

// Node
def Node node = new Node();
node.setName(variables.get("PA_NODE_NAME"))
node.setHost(variables.get("PA_NODE_HOST"))
node.setNodeSourceName(variables.get("PA_NODE_SOURCE"))
node.setUrl(variables.get("PA_NODE_URL"))

// Deployment
def Deployment deployment = new Deployment()
deployment.setNode(node)
deployment.setContainer(container)
deployment.setEndpoint(endpoint)

// Update service instance model (add Deployment, Groups)
def serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(sessionId, instanceId)
serviceInstanceData.setInstanceStatus("RUNNING")
serviceInstanceData = serviceInstanceData.addDeploymentsItem(deployment)
if (proxyfied.toLowerCase()=="true"){
    serviceInstanceData = serviceInstanceData.addGroupsItem("scheduleradmins")
    serviceInstanceData = serviceInstanceData.addGroupsItem("rmcoreadmins")
}
serviceInstanceData = serviceInstanceRestApi.updateServiceInstanceUsingPUT(sessionId, instanceId, serviceInstanceData)
println(serviceInstanceData)

schedulerapi.registerService(variables.get("PA_JOB_ID"), instanceId as int, true)

// Inform other platforms that service is running through Synchronization API
channel = "Service_Instance_" + instanceId
synchronizationapi.createChannelIfAbsent(channel, false)
synchronizationapi.put(channel, "RUNNING", true)
synchronizationapi.put(channel, "INSTANCE_NAME", instanceName)

// Add token to the current node
token = instanceName
nodeUrl = variables.get("PA_NODE_URL")
println("Current nodeUrl: " + nodeUrl)
println("Adding token:    " + token)
rmapi.connect()
rmapi.addNodeToken(nodeUrl, token)

// Log output
println(variables.get("PA_JOB_NAME") + "_INSTANCE_ID: " + instanceId)
println(variables.get("PA_JOB_NAME") + "_ENDPOINT: " + endpoint)

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </post>
      <cleaning>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Clean_Start_Service/raw"/>
        </script>
      </cleaning>
      <metadata>
        <positionTop>
            281.81666564941406
        </positionTop>
        <positionLeft>
            390.95001220703125
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Loop_Over_Instance_Status_D" runAsMe="true">
      <description>
        <![CDATA[ Loop over service instance status and fetch docker container logs.
It will run every minute. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="Start_MLOps_Dashboard_D"/>
      </depends>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Check_Instance_Status/raw"/>
        </script>
      </scriptExecutable>
      <controlFlow>
        <loop target="Loop_Over_Instance_Status_D">
          <script>
            <code language="groovy">
              <![CDATA[
// Check if loop task has ordered to finish the loop
def isFinished = variables.get('IS_FINISHED') as boolean
loop = isFinished ? false : '*/1 * * * *'

// Set a time marker to fetch logs since this marker.
variables.put("LAST_TIME_MARKER",new Date().format("yyyy-MM-dd'T'HH:mm:ssXXX"))
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            409.81663513183594
        </positionTop>
        <positionLeft>
            390.95001220703125
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2476px;
            height:3372px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-276.81666564941406px;left:-385.95001220703125px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable active-task" style="top: 281.816px; left: 390.95px;" id="jsPlumb_1_175"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Download the docker image and run the docker container."><img src="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png" width="20px">&nbsp;<span class="name">Start_MLOps_Dashboard_D</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" style="top: 409.816px; left: 390.95px;" id="jsPlumb_1_178"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Loop over service instance status and fetch docker container logs.
It will run every minute."><img src="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png" width="20px">&nbsp;<span class="name">Loop_Over_Instance_Status_D</span></a></div><svg style="position:absolute;left:458px;top:321.5px" width="30.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 9.5 88 C 19.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-stroke: #a8a095;" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M11.521328,66.303232 L15.340231614961638,45.46058401132944 L9.353652074163795,52.472064981973276 L1.5090645969349188,47.628259937165645 L11.521328,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" style="--darkreader-inline-fill: #a8a095; --darkreader-inline-stroke: #a8a095;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M11.521328,66.303232 L15.340231614961638,45.46058401132944 L9.353652074163795,52.472064981973276 L1.5090645969349188,47.628259937165645 L11.521328,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" style="--darkreader-inline-fill: #a8a095; --darkreader-inline-stroke: #a8a095;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path></svg><svg style="position:absolute;left:545.0266769263776px;top:359.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style="--darkreader-inline-stroke: #91cd91;" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294157,28.915376004420658 L-10.777784470220794,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)" style="--darkreader-inline-fill: #91cd91; --darkreader-inline-stroke: #91cd91;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294157,28.915376004420658 L-10.777784470220794,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)" style="--darkreader-inline-fill: #91cd91; --darkreader-inline-stroke: #91cd91;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></path></svg><div style="position: absolute; transform: translate(-50%, -50%); left: 557px; top: 429.5px;" class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_189">loop</div><div style="position: absolute; height: 20px; width: 20px; left: 458.5px; top: 312px;" class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: #a8a095; --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div style="position: absolute; height: 20px; width: 20px; left: 468px; top: 440px;" class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: #a8a095; --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div style="position: absolute; height: 20px; width: 20px; left: 468px; top: 400px;" class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: #a8a095; --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div style="position: absolute; height: 20px; width: 20px; left: 555px; top: 400px;" class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style="--darkreader-inline-fill: #91cd91; --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div style="position: absolute; height: 20px; width: 20px; left: 555px; top: 440px;" class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style="--darkreader-inline-fill: #91cd91; --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
