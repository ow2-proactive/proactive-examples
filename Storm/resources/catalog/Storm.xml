<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.8"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
	name="Storm" projectName="Cloud Automation - Deployment" priority="normal"
	onTaskError="pauseJob" maxNumberOfExecution="2">
	<variables>
		<variable name="zookeeper_instance_name" value="zookeeper-server-1" />
		<variable name="instance_name" value="storm-cluster-1" />
		<variable name="zookeeper_service_model" value="http://models.activeeon.com/pca/zookeeper" />
		<variable name="number_of_supervisors" value="2" />
	</variables>
	<description>
    	<![CDATA[ Deployment of the Storm cluster. ]]>
    </description>
	<genericInformation>
		<info name="pca.service.type" value="Platform" />
		<info name="pca.service.description" value="Storm Cluster" />
		<info name="bucketName" value="Cloud-automation" />
		<info name="pca.action.icon"
			value="/automation-dashboard/styles/patterns/img/wf-icons/storm.png" />
		<info name="pca.service.name" value="Storm" />
		<info name="pca.action.name" value="deployment" />
		<info name="pca.service.model" value="http://models.activeeon.com/pca/storm" />
		<info name="pca.action.type" value="create" />
		<info name="pca.action.origin_state" value="null" />
		<info name="group" value="public-objects" />
	</genericInformation>
	<taskFlow>
		<task name="end_deployment">
			<depends>
				<task ref="start_ui" />
			</depends>
			<scriptExecutable>
				<script>
					<code language="javascript">
            <![CDATA[
var resultObj={}
resultObj.id=variables.get("instance_name")
resultObj.status="RUNNING"
resultObj.endpoint=variables.get("endpoint")
result = JSON.stringify(resultObj);
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="pull_image">
			<description>
        <![CDATA[ Pull Storm image ]]>
      </description>
			<depends>
				<task ref="check_zookeeper" />
			</depends>
			<scriptExecutable>
				<script>
					<code language="bash">
            <![CDATA[
printf "Pulling Apache Storm image \n"
docker pull storm
]]>
					</code>
				</script>
			</scriptExecutable>
			<post>
				<script>
					<code language="groovy">
            <![CDATA[

]]>
					</code>
				</script>
			</post>
		</task>
		<task name="check_zookeeper">
			<description>
        <![CDATA[ Check Zookeeper service ]]>
      </description>
			<inputFiles>
				<files includes="cloud-automation-service-client-1.0.0-all.jar"
					accessMode="transferFromGlobalSpace" />
			</inputFiles>
			<forkEnvironment>
				<additionalClasspath>
					<pathElement path="cloud-automation-service-client-1.0.0-all.jar" />
				</additionalClasspath>
			</forkEnvironment>
			<scriptExecutable>
				<script>
					<code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.client.api.CloudAutomationApi;
import java.util.Optional;


model = variables.get("zookeeper_service_model")
instanceName = variables.get("zookeeper_instance_name")

schedulerapi.connect();

pcaUrl = variables.get("PA_SCHEDULER_REST_URL").replaceAll("/rest\\z", "/cloud-automation-service");
sessionId = schedulerapi.getSession();
api = new CloudAutomationApi(pcaUrl, sessionId);

Optional<String> endpoint  = api.getServiceEndpoint(model,instanceName);
if( !endpoint.isPresent()) {
            api.createServiceInstance(model, instanceName);
            endpoint = api.waitForServiceEndpoint(model, instanceName, 60);
}

println "Scheduler REST URL " + variables.get("PA_SCHEDULER_REST_URL")
println "Zookeeper Instance name " + variables.get("zookeeper_instance_name")
println "Zookeeper Service " + variables.get("zookeeper_service_model") + " is available on " + endpoint.get()

variables.put("zookeeper_endpoint", endpoint.get())
result = '<meta http-equiv="refresh" content="1; url=http://' + endpoint.get() + '/" />'
result+= '<h2><span style="color:black">Please wait while redirecting...</span></h2>'
resultMetadata.put("content.type", "text/html")
]]>
					</code>
				</script>
			</scriptExecutable>
			<post>
				<script>
					<code language="groovy">
            <![CDATA[
def PA_SCHEDULER_REST_URL = variables.get('PA_SCHEDULER_REST_URL')
def hostname = new URL(PA_SCHEDULER_REST_URL).getHost()

println hostname

variables.put("host_name", hostname)
]]>
					</code>
				</script>
			</post>
		</task>
		<task name="start_nimbus">
			<description>
        <![CDATA[ start Storm Nimbus ]]>
      </description>
			<depends>
				<task ref="pull_image" />
			</depends>
			<inputFiles>
				<files includes="storm.yaml" accessMode="transferFromGlobalSpace" />
			</inputFiles>
			<scriptExecutable>
				<script>
					<code language="bash">
            <![CDATA[
CONTAINER=$variables_instance_name"-nimbus"

echo "$CONTAINER"


if [ "$(docker ps -a | grep $CONTAINER)" ]; then
 RUNNING=$(docker inspect --format="{{ .State.Running }}" $CONTAINER 2> /dev/null)
 STOPPED=$(docker inspect --format="{{ .State.Status }}" $CONTAINER 2> /dev/null)  

 if [ "$RUNNING" == "true" ]; then 
   echo "$CONTAINER container is running"
 elif [ "$STOPPED" == "exited" ]; then 
   echo "Starting $CONTAINER container"
   docker start $CONTAINER
 fi

else
 sed -i "/nimbus.seeds:/c\nimbus.seeds: [\"$CONTAINER\"]" storm.yaml
 echo "storm.zookeeper.root: \"/$CONTAINER\"" >> storm.yaml 
 
 echo "Running $CONTAINER container"
 docker create -h $CONTAINER --name $CONTAINER --link $variables_zookeeper_instance_name:zookeeper storm storm nimbus           
 docker cp storm.yaml $CONTAINER:/conf/ 
 docker start $CONTAINER 
 docker exec -i $CONTAINER wget -P /apache-storm-1.1.1/lib/  http://central.maven.org/maven2/org/apache/storm/flux-core/1.1.1/flux-core-1.1.1.jar
fi
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="start_supervisors">
			<description>
        <![CDATA[ start Storm Supervisors ]]>
      </description>
			<depends>
				<task ref="start_nimbus" />
			</depends>
			<inputFiles>
				<files includes="storm.yaml" accessMode="transferFromGlobalSpace" />
			</inputFiles>
			<scriptExecutable>
				<script>
					<code language="bash">
            <![CDATA[
ZOOKEEPER=$variables_zookeeper_instance_name
NIMBUS=$variables_instance_name"-nimbus"

host_ip=$(docker exec -i $variables_zookeeper_instance_name /sbin/ip route|awk '/default/ { print $3 }')
echo $host_ip

HOST_MAPPING="$variables_host_name:$host_ip"

for (( c=1; c<=$variables_number_of_supervisors; c++ ))
do 
     CONTAINER=$variables_instance_name"-supervisor"$c
     
     if [ "$(docker ps -a | grep $CONTAINER)" ]; then
          RUNNING=$(docker inspect --format="{{ .State.Running }}" $CONTAINER 2> /dev/null)
          STOPPED=$(docker inspect --format="{{ .State.Status }}" $CONTAINER 2> /dev/null)  
     
          if [ "$RUNNING" == "true" ] ; then 
               echo "$CONTAINER is running"
          elif [ "$STOPPED" == "exited" ]; then 
               echo "Starting $CONTAINER"
               docker start $CONTAINER
               docker exec -d $CONTAINER storm logviewer
          fi
     else 
               echo "Running $CONTAINER"
               docker create -h $CONTAINER --add-host=$HOST_MAPPING --name $CONTAINER --link $ZOOKEEPER:zookeeper --link $NIMBUS:$NIMBUS storm storm supervisor
               sed -i "/nimbus.seeds:/c\nimbus.seeds: [\"$NIMBUS\"]" storm.yaml
               echo "storm.zookeeper.root: \"/$NIMBUS\"" >> storm.yaml
               docker cp storm.yaml $CONTAINER:/conf/
               docker start $CONTAINER
               docker exec -d $CONTAINER storm logviewer
     fi
done
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="start_ui">
			<description>
        <![CDATA[ start Storm UI ]]>
      </description>
			<depends>
				<task ref="start_supervisors" />
			</depends>
			<inputFiles>
				<files includes="storm.yaml" accessMode="transferFromGlobalSpace" />
			</inputFiles>
			<scriptExecutable>
				<script>
					<code language="bash">
            <![CDATA[
NIMBUS=$variables_instance_name"-nimbus"
CONTAINER=$variables_instance_name"-ui"

if [ "$(docker ps -a | grep $CONTAINER)" ]; then
 RUNNING=$(docker inspect --format="{{ .State.Running }}" $CONTAINER 2> /dev/null)
 STOPPED=$(docker inspect --format="{{ .State.Status }}" $CONTAINER 2> /dev/null)  

 if [ "$RUNNING" == "true" ]; then 
   echo "$CONTAINER is running"
 elif [ "$STOPPED" == "exited" ]; then 
   echo "Starting $CONTAINER"
   docker start $CONTAINER
 fi

else 
 echo "Running $CONTAINER"
 docker create -h ui -p 8080 --name $CONTAINER --link $NIMBUS:$NIMBUS storm storm ui
 sed -i "/nimbus.seeds:/c\nimbus.seeds: [\"$NIMBUS\"]" storm.yaml
 echo "storm.zookeeper.root: \"/$NIMBUS\"" >> storm.yaml
 docker cp storm.yaml $CONTAINER:/conf/
 docker start $CONTAINER
fi

port=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "8080/tcp") 0).HostPort}}' $CONTAINER)
echo "$variables_host_name:$port" > $CONTAINER"_endpoint"

echo "$variables_host_name:$port"

exists="false"
while [[ "$exists" == "false" ]]
do
  	if (curl --output /dev/null --silent --head --fail "$variables_host_name:$port") ; then
  	#if [[ `wget -S --spider "$variables_host_name:$port"  2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then	
		exists="true";
	else
      	sleep 5;
    fi
done

# Endpoint added to the job variables using a groovy post-script !!!
]]>
					</code>
				</script>
			</scriptExecutable>
			<post>
				<script>
					<code language="groovy">
            <![CDATA[
fileName=variables.get("instance_name")+"-ui_endpoint"
println fileName

def endpoint = new File(fileName).text.trim()
println endpoint

variables.put("endpoint", endpoint)
]]>
					</code>
				</script>
			</post>
		</task>
	</taskFlow>
</job>
