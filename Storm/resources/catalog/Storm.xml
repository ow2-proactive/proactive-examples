<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="Storm" projectName="Cloud Automation - Deployment" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="INSTANCE_NAME" value="storm-cluster-1" />
    <variable name="NUMBER_OF_SUPERVISORS" value="2" />
    <variable name="ZOOKEEPER_INSTANCE_NAME" value="zookeeper-server-1" />
    <variable name="ZOOKEEPER_SERVICE_ID" value="Zookeeper" />
  </variables>
  <description>
    <![CDATA[ Deploy a Kafka Database server.
The service can be started using the variable: 
$INSTANCE_NAME (Required): service instance name ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="cloud-automation"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/storm.png"/>
    <info name="pca.states" value="(VOID,RUNNING)"/>
    <info name="pca.service.id" value="Storm"/>
    <info name="group" value="public-objects"/>
    <info name="Documentation" value="https://kafka.apache.org/"/>
  </genericInformation>
  <taskFlow>
    <task name="Loop_Over_Instance_Status" >
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/storm.png"/>
      </genericInformation>
      <depends>
        <task ref="Update_Service_Instance"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service");

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Acquire service instance id
def service_instance_id = Long.valueOf(variables.get("PCA_INSTANCE_ID"))
println(service_instance_id)

// Construct synchro channel
channel = "Service_Instance_" + service_instance_id  
//synchronizationapi.createChannelIfAbsent(channel, false)

// Delete service instance from database is set to false
synchronizationapi.put(channel,"DELETE_LAUNCHED",false) 
synchronizationapi.put(channel,"DELETE_INSTANCE",false) 

// Loop over service instance status
def current_status = "RUNNING"
def instance_name = variables.get("INSTANCE_NAME")
def container_list = [instance_name+"-nimbus", instance_name+"-ui"]
def number_of_supervisors =  variables.get("NUMBER_OF_SUPERVISORS") as Integer

println number_of_supervisors

for (int i = 1; i < number_of_supervisors+1; i++) {
  container_list << instance_name+"-supervisor"+i
}
  
println container_list
		
while(current_status=="RUNNING") {
  sleep(30000);
  
  for (String container : container_list) {
    
    println(container)
    
    // Check docker container status 
    def ByteArrayOutputStream sout = new ByteArrayOutputStream();
    def ByteArrayOutputStream serr = new ByteArrayOutputStream();
    def proc = ["docker", "inspect", "--format", "{{ .State.Running }}", container].execute().waitForProcessOutput(sout, serr)
    def container_running = new String(sout.toByteArray()).trim()
    
    println(container_running)
    
    if ((container_running!="true") && (synchronizationapi.get(channel,"DELETE_LAUNCHED") ==  false)){
      
            current_status = 'ERROR'
            
            // Update docker container is not running
            def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
            service_instance_data.setInstanceStatus(current_status)
            service_instance_data = service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id,service_instance_data)
        
            break    
    }
  }
  
  // Check service instance status
  current_status = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id).getInstanceStatus() 
  
  println "$current_status"
}

// Allow the Delete workflow to be fulfilled
synchronizationapi.put(channel,"DELETE_INSTANCE",true)
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="pull_image" >
      <description>
        <![CDATA[ Pull Storm image ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/storm.png"/>
      </genericInformation>
      <depends>
        <task ref="Zookeeper_Start_or_Bind_Service"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
printf "Pulling Apache Storm image \n"
docker pull storm
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[

]]>
          </code>
        </script>
      </post>
    </task>
    <task name="start_nimbus" >
      <description>
        <![CDATA[ start Storm Nimbus ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/storm.png"/>
      </genericInformation>
      <depends>
        <task ref="pull_image"/>
      </depends>
      <inputFiles>
        <files  includes="storm.yaml" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
CONTAINER=$variables_INSTANCE_NAME"-nimbus"

echo "$CONTAINER"


if [ "$(docker ps -a | grep $CONTAINER)" ]; then
 RUNNING=$(docker inspect --format="{{ .State.Running }}" $CONTAINER 2> /dev/null)
 STOPPED=$(docker inspect --format="{{ .State.Status }}" $CONTAINER 2> /dev/null)  

 if [ "$RUNNING" == "true" ]; then 
   echo "$CONTAINER container is running"
 elif [ "$STOPPED" == "exited" ]; then 
   echo "Starting $CONTAINER container"
   docker start $CONTAINER
 fi

else
 sed -i "/nimbus.seeds:/c\nimbus.seeds: [\"$CONTAINER\"]" storm.yaml
 echo "storm.zookeeper.root: \"/$CONTAINER\"" >> storm.yaml 
 
 echo "Running $CONTAINER container"
 docker create -h $CONTAINER --name $CONTAINER --link $variables_ZOOKEEPER_INSTANCE_NAME:zookeeper storm storm nimbus           
 docker cp storm.yaml $CONTAINER:/conf/ 
 docker start $CONTAINER 
 docker exec -i $CONTAINER wget -P /apache-storm-1.2.2/lib/  http://central.maven.org/maven2/org/apache/storm/flux-core/1.2.2/flux-core-1.2.2.jar
fi
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="start_supervisors" >
      <description>
        <![CDATA[ start Storm Supervisors ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/storm.png"/>
      </genericInformation>
      <depends>
        <task ref="start_nimbus"/>
      </depends>
      <inputFiles>
        <files  includes="storm.yaml" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
def PA_SCHEDULER_REST_URL = variables.get('PA_SCHEDULER_REST_URL')
def hostname = new URL(PA_SCHEDULER_REST_URL).getHost()
variables.put("hostname",hostname)
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
ZOOKEEPER=$variables_ZOOKEEPER_INSTANCE_NAME
NIMBUS=$variables_INSTANCE_NAME"-nimbus"

host_ip=$(docker exec -i $ZOOKEEPER /sbin/ip route|awk '/default/ { print $3 }')
echo $host_ip

HOST_MAPPING="$variables_hostname:$host_ip"

for (( c=1; c<=$variables_NUMBER_OF_SUPERVISORS; c++ ))
do 
     CONTAINER=$variables_INSTANCE_NAME"-supervisor"$c
     
     if [ "$(docker ps -a | grep $CONTAINER)" ]; then
          RUNNING=$(docker inspect --format="{{ .State.Running }}" $CONTAINER 2> /dev/null)
          STOPPED=$(docker inspect --format="{{ .State.Status }}" $CONTAINER 2> /dev/null)  
     
          if [ "$RUNNING" == "true" ] ; then 
               echo "$CONTAINER is running"
          elif [ "$STOPPED" == "exited" ]; then 
               echo "Starting $CONTAINER"
               docker start $CONTAINER
               docker exec -d $CONTAINER storm logviewer
          fi
     else 
               echo "Running $CONTAINER"
               docker create -h $CONTAINER --add-host=$HOST_MAPPING --name $CONTAINER --link $ZOOKEEPER:zookeeper --link $NIMBUS:$NIMBUS storm storm supervisor
               sed -i "/nimbus.seeds:/c\nimbus.seeds: [\"$NIMBUS\"]" storm.yaml
               echo "storm.zookeeper.root: \"/$NIMBUS\"" >> storm.yaml
               docker cp storm.yaml $CONTAINER:/conf/
               docker start $CONTAINER
               docker exec -d $CONTAINER storm logviewer
     fi
done
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="start_ui" >
      <description>
        <![CDATA[ start Storm UI ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/storm.png"/>
      </genericInformation>
      <depends>
        <task ref="start_supervisors"/>
      </depends>
      <inputFiles>
        <files  includes="storm.yaml" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
NIMBUS=$variables_INSTANCE_NAME"-nimbus"
CONTAINER=$variables_INSTANCE_NAME"-ui"

if [ "$(docker ps -a | grep $CONTAINER)" ]; then
 RUNNING=$(docker inspect --format="{{ .State.Running }}" $CONTAINER 2> /dev/null)
 STOPPED=$(docker inspect --format="{{ .State.Status }}" $CONTAINER 2> /dev/null)  

 if [ "$RUNNING" == "true" ]; then 
   echo "$CONTAINER is running"
 elif [ "$STOPPED" == "exited" ]; then 
   echo "Starting $CONTAINER"
   docker start $CONTAINER
 fi

else 
 echo "Running $CONTAINER"
 docker create -h ui -p 8080 --name $CONTAINER --link $NIMBUS:$NIMBUS storm storm ui
 sed -i "/nimbus.seeds:/c\nimbus.seeds: [\"$NIMBUS\"]" storm.yaml
 echo "storm.zookeeper.root: \"/$NIMBUS\"" >> storm.yaml
 docker cp storm.yaml $CONTAINER:/conf/
 docker start $CONTAINER
fi

port=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "8080/tcp") 0).HostPort}}' $CONTAINER)
echo "$variables_hostname:$port" > $CONTAINER"_endpoint"

echo "$variables_hostname:$port"

exists="false"
while [[ "$exists" == "false" ]]
do
  	if (curl --output /dev/null --silent --head --fail "$variables_hostname:$port") ; then
  	#if [[ `wget -S --spider "$variables_hostname:$port"  2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then	
		exists="true";
	else
      	sleep 5;
    fi
done

# Endpoint added to the job variables using a groovy post-script !!!
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
fileName=variables.get("INSTANCE_NAME")+"-ui_endpoint"
println fileName

def endpoint = 'http://'+new File(fileName).text.trim()
println endpoint

variables.put("endpoint", endpoint)
]]>
          </code>
        </script>
      </post>
    </task>
    <task name="Update_Service_Instance" >
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/storm.png"/>
      </genericInformation>
      <depends>
        <task ref="start_ui"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData


// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
//api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Acquire service instance id
def service_instance_id = Long.valueOf(variables.get("PCA_INSTANCE_ID"))
println(service_instance_id)

// Set service instance status to running
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
service_instance_data.setInstanceStatus("RUNNING")

// Set service instance status endpoint
HashMap<String, String> endpoints = new HashMap<String, String>()
service_instance_data = service_instance_data.putInstanceEndpointsItem(variables.get("INSTANCE_NAME"),variables.get("endpoint"))

// Update service instance data
service_instance_data = service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id,service_instance_data)

// Inform other platforms that Visdom is running
channel = "Service_Instance_" + service_instance_id  
synchronizationapi.createChannelIfAbsent(channel, false)
synchronizationapi.put(channel,"RUNNING",true)

def instance_name = service_instance_data.getVariables().get("INSTANCE_NAME")
synchronizationapi.put(channel,"INSTANCE_NAME",instance_name)
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Zookeeper_Start_or_Bind_Service" >
      <description>
        <![CDATA[ This task calls ProActive-Cloud-Automation service to deploy an instance of Apache Zookeeper coordination server (https://zookeeper.apache.org/). The deployed instance consists in a single Zookeeper broker. The name and the endpoint of the deployed instance are added to the list of variables. ]]>
      </description>
      <variables>
        <variable name="INSTANCE_NAME" value="zookeeper-server-1" inherited="false" />
        <variable name="SERVICE_ID" value="Zookeeper" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/zookeeper.jpg"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription


println("BEGIN " + variables.get("PA_TASK_NAME"))

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pcaUrl = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

def serviceId = variables.get("ZOOKEEPER_SERVICE_ID")
def instanceName = variables.get("ZOOKEEPER_INSTANCE_NAME")
println("ZOOKEEPER_SERVICE_ID:    " + serviceId)
println("ZOOKEEPER_INSTANCE_NAME: " + instanceName)

/*********************************************************************************
*                     Using existing instance (if it exists)                     *
/********************************************************************************/
boolean instance_exists = false
List<ServiceInstanceData> service_instances = serviceInstanceRestApi.getServiceInstancesUsingGET()

for (ServiceInstanceData serviceInstanceData : service_instances) {
    if ( (serviceInstanceData.getServiceId() == serviceId) && (serviceInstanceData.getInstanceStatus()  == "RUNNING")){
        if (serviceInstanceData.getVariables().get("INSTANCE_NAME") == instanceName) {
            instance_exists = true
            def instanceId = serviceInstanceData.getInstanceId()
            endpoint = serviceInstanceData.getInstanceEndpoints().entrySet().iterator().next().getValue()
            println("ZOOKEEPER_INSTANCE_ID: " + instanceId)
            println("ZOOKEEPER_ENDPOINT:    " + endpoint)
            variables.put("ZOOKEEPER_INSTANCE_ID", instanceId)
            variables.put("ZOOKEEPER_ENDPOINT", endpoint)
            break
        }
      }
}
/*********************************************************************************
*                             Creating a new instance                            *
/********************************************************************************/
println("INSTANCE_EXISTS ? " + instance_exists)

if (!instance_exists){
    // Prepare service description
    ServiceDescription serviceDescription = new ServiceDescription()
    serviceDescription.setBucketName("cloud-automation")
    serviceDescription.setWorkflowName(serviceId)
    serviceDescription.putVariablesItem("INSTANCE_NAME", instanceName)

    // Run service
    def serviceInstanceData = serviceInstanceRestApi.createRunningServiceInstanceUsingPOST(sessionId, serviceDescription)

    // Acquire service Instance ID
    def serviceInstanceId = serviceInstanceData.getInstanceId()

    // Create synchro channel
    def channel = "Service_Instance_" + serviceInstanceId
    println("CHANNEL: " + channel)
    synchronizationapi.createChannelIfAbsent(channel, false)
    synchronizationapi.waitUntil(channel, "RUNNING", "{k,x -> x == true}")

    // Acquire service endpoint
    serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(serviceInstanceId)
    def instanceId = serviceInstanceData.getInstanceId()
    endpoint = serviceInstanceData.getInstanceEndpoints().entrySet().iterator().next().getValue()

    println("ZOOKEEPER_INSTANCE_ID: " + instanceId)
    println("ZOOKEEPER_ENDPOINT: " + endpoint)

    variables.put("ZOOKEEPER_INSTANCE_ID", instanceId)
    variables.put("ZOOKEEPER_ENDPOINT", endpoint)
}

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2476px;
            height:2795px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-109.98579025268555px;left:-431.7897644042969px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_ active-task" id="jsPlumb_1_1534" style="top: 879.077px; left: 492.812px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/storm.png" width="20px">&nbsp;<span class="name">Loop_Over_Instance_Status</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1537" style="top: 239.034px; left: 492.812px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/storm.png" width="20px">&nbsp;<span class="name">pull_image</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1540" style="top: 367.032px; left: 492.812px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/storm.png" width="20px">&nbsp;<span class="name">start_nimbus</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1543" style="top: 495.057px; left: 492.812px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/storm.png" width="20px">&nbsp;<span class="name">start_supervisors</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1546" style="top: 623.054px; left: 492.812px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/storm.png" width="20px">&nbsp;<span class="name">start_ui</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1549" style="top: 751.066px; left: 492.812px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/storm.png" width="20px">&nbsp;<span class="name">Update_Service_Instance</span></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_1552" style="top: 114.986px; left: 436.804px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/zookeeper.jpg" width="20px">&nbsp;<span class="name">Zookeeper_Start_or_Bind_Service</span></a></div><svg style="position:absolute;left:557px;top:790.5px" width="27.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 6.5 88 C 16.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M8.787796875,66.78168750000002 L13.502214816791486,46.123171980483264 L7.218760132881903,52.86988949607962 L-0.4095831871289066,47.692208722601364 L8.787796875,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M8.787796875,66.78168750000002 L13.502214816791486,46.123171980483264 L7.218760132881903,52.86988949607962 L-0.4095831871289066,47.692208722601364 L8.787796875,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:519.5px;top:154.5px" width="34" height="85" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 13 84 C 23 34 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M14.76028125,63.10631250000001 L17.541963825179497,42.10006956960089 L11.910079276439077,49.39951313946695 L3.8351644646464393,44.95027154316182 L14.76028125,63.10631250000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M14.76028125,63.10631250000001 L17.541963825179497,42.10006956960089 L11.910079276439077,49.39951313946695 L3.8351644646464393,44.95027154316182 L14.76028125,63.10631250000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:527.9817132113825px;top:278.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path></svg><svg style="position:absolute;left:532.5px;top:406.5px" width="26.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 5.5 88 C 15.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.868953124999999,66.78168750000002 L12.848095417762192,46.18537370290451 L6.478576933147113,52.85089950918167 L-1.0826925730561543,47.575749894757394 L7.868953124999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.868953124999999,66.78168750000002 L12.848095417762192,46.18537370290451 L6.478576933147113,52.85089950918167 L-1.0826925730561543,47.575749894757394 L7.868953124999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:532.5px;top:534.5px" width="26.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 15.5 50 5.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.3689531250000004,66.78168750000002 L6.582692573056153,47.575749894757394 L-0.9785769331471141,52.85089950918167 L-7.3480954177621935,46.18537370290451 L-2.3689531250000004,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.3689531250000004,66.78168750000002 L6.582692573056153,47.575749894757394 L-0.9785769331471141,52.85089950918167 L-7.3480954177621935,46.18537370290451 L-2.3689531250000004,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:532.5px;top:662.5px" width="45.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 24.5 88 C 34.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M25.144359625,65.8307285 L24.91960402101258,44.64230041015633 L20.379554453683394,52.666510647070254 L11.755386168082827,49.40710558147294 L25.144359625,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M25.144359625,65.8307285 L24.91960402101258,44.64230041015633 L20.379554453683394,52.666510647070254 L11.755386168082827,49.40710558147294 L25.144359625,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 564px; top: 909px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 564px; top: 869px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 533px; top: 269px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 533px; top: 229px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 533px; top: 397px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 533px; top: 357px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 538.5px; top: 525px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 538.5px; top: 485px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 533px; top: 653px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 533px; top: 613px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 557.5px; top: 781px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 557.5px; top: 741px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 520px; top: 145px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>