<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.12" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd"  name="Storm" projectName="Cloud Automation - Deployment" priority="normal" onTaskError="suspendTask"  maxNumberOfExecution="1"  >
  <variables>
    <variable name="INSTANCE_NAME" value="storm-cluster-1" />
    <variable name="NUMBER_OF_SUPERVISORS" value="2" />
    <variable name="ZOOKEEPER_INSTANCE_NAME" value="zookeeper-server-1" />
    <variable name="ZOOKEEPER_SERVICE_ID" value="Zookeeper" />
    <variable name="PROXYFIED" value="False" model="PA:Boolean"/>
    <variable name="ENDPOINT_ID" value="storm-gui" />
    <variable name="HTTP_ENABLED" value="True" model="PA:Boolean"/>
  </variables>
  <description>
    <![CDATA[ Deploy a Storm cluster. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="cloud-automation"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/storm.png"/>
    <info name="pca.states" value="(VOID,RUNNING)"/>
    <info name="Documentation" value="PCA/PCAUserGuide.html#_storm"/>
    <info name="pca.service.id" value="Storm"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="pull_image" 
    fork="true">
      <description>
        <![CDATA[ Pull Storm image ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/storm.png"/>
      </genericInformation>
      <depends>
        <task ref="Zookeeper_Start_or_Bind_Service"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
printf "Pulling Apache Storm image \n"
docker pull storm:1.2.2
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            227.0596466064453
        </positionTop>
        <positionLeft>
            495.2556457519531
        </positionLeft>
      </metadata>
    </task>
    <task name="start_nimbus" 
    fork="true">
      <description>
        <![CDATA[ start Storm Nimbus ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/storm.png"/>
      </genericInformation>
      <depends>
        <task ref="pull_image"/>
      </depends>
      <inputFiles>
        <files  includes="storm.yaml" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
CONTAINER=$variables_INSTANCE_NAME"-nimbus"

echo "$CONTAINER"

if [ "$(docker ps -a | grep $CONTAINER)" ]; then
   echo [ERROR] "$INSTANCE_NAME" is already used by another service instance.
   exit 128
else
 sed -i "/nimbus.seeds:/c\nimbus.seeds: [\"$CONTAINER\"]" storm.yaml
 echo "storm.zookeeper.root: \"/$CONTAINER\"" >> storm.yaml 
 
 echo "Running $CONTAINER container"
 docker create -h $CONTAINER --name $CONTAINER --link $variables_ZOOKEEPER_INSTANCE_NAME:zookeeper storm:1.2.2 storm nimbus           
 docker cp storm.yaml $CONTAINER:/conf/ 
 docker start $CONTAINER 
 docker exec -i $CONTAINER wget -P /apache-storm-1.2.2/lib/ https://repo1.maven.org/maven2/org/apache/storm/flux-core/1.2.2/flux-core-1.2.2.jar
fi
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            355.0709991455078
        </positionTop>
        <positionLeft>
            495.2556457519531
        </positionLeft>
      </metadata>
    </task>
    <task name="start_supervisors" 
    fork="true">
      <description>
        <![CDATA[ start Storm Supervisors ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/storm.png"/>
      </genericInformation>
      <depends>
        <task ref="start_nimbus"/>
      </depends>
      <inputFiles>
        <files  includes="storm.yaml" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
def PA_SCHEDULER_REST_URL = variables.get('PA_SCHEDULER_REST_URL')
def hostname = new URL(PA_SCHEDULER_REST_URL).getHost()
variables.put("hostname",hostname)
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
ZOOKEEPER=$variables_ZOOKEEPER_INSTANCE_NAME
NIMBUS=$variables_INSTANCE_NAME"-nimbus"

host_ip=$(ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+')
echo $host_ip

HOST_MAPPING="$variables_hostname:$host_ip"

for (( c=1; c<=$variables_NUMBER_OF_SUPERVISORS; c++ ))
do 
     CONTAINER=$variables_INSTANCE_NAME"-supervisor"$c
     
     if [ "$(docker ps -a | grep $CONTAINER)" ]; then
         echo [ERROR] "$INSTANCE_NAME" is already used by another service instance.
         exit 128    
     else 
               echo "Running $CONTAINER"
               docker create -h $CONTAINER --add-host=$HOST_MAPPING --name $CONTAINER --link $ZOOKEEPER:zookeeper --link $NIMBUS:$NIMBUS storm:1.2.2 storm supervisor
               sed -i "/nimbus.seeds:/c\nimbus.seeds: [\"$NIMBUS\"]" storm.yaml
               echo "storm.zookeeper.root: \"/$NIMBUS\"" >> storm.yaml
               docker cp storm.yaml $CONTAINER:/conf/
               docker start $CONTAINER
               docker exec -d $CONTAINER storm logviewer
     fi
done
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            483.08238220214844
        </positionTop>
        <positionLeft>
            495.2556457519531
        </positionLeft>
      </metadata>
    </task>
    <task name="start_ui"
    onTaskError="cancelJob"
    fork="true">
      <description>
        <![CDATA[ start Storm UI ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/storm.png"/>
      </genericInformation>
      <depends>
        <task ref="start_supervisors"/>
      </depends>
      <inputFiles>
        <files  includes="storm.yaml" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
NIMBUS=$variables_INSTANCE_NAME"-nimbus"
CONTAINER=$variables_INSTANCE_NAME

if [ "$(docker ps -a --format '{{.Names}}' | grep "^$INSTANCE_NAME$")" ]; then
         echo [ERROR] "$INSTANCE_NAME" is already used by another service instance.
         exit 128
else 
 echo "Running $CONTAINER"
 docker create -h ui -p 8080 --name $CONTAINER --link $NIMBUS:$NIMBUS storm:1.2.2 storm ui
 sed -i "/nimbus.seeds:/c\nimbus.seeds: [\"$NIMBUS\"]" storm.yaml
 echo "storm.zookeeper.root: \"/$NIMBUS\"" >> storm.yaml
 docker cp storm.yaml $CONTAINER:/conf/
 docker start $CONTAINER
fi

port=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "8080/tcp") 0).HostPort}}' $CONTAINER)
echo "$port" > $variables_INSTANCE_NAME"_port"

containerID=$(docker ps -aqf "name=^$CONTAINER$")
echo "$containerID" > $variables_INSTANCE_NAME"_containerID"

exists="false"
while [[ "$exists" == "false" ]]
do
  	if (curl --output /dev/null --silent --head --fail "$variables_hostname:$port") ; then
  	#if [[ `wget -S --spider "$variables_hostname:$port"  2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then	
		exists="true";
        echo $variables_INSTANCE_NAME > $variables_INSTANCE_NAME"_status"
	else
      	sleep 5;
    fi
done

# Endpoint added to the job variables using a groovy post-script !!!
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Post_Start_Service/raw" language="groovy"></file>
        </script>
      </post>
      <cleaning>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Clean_Start_Service/raw" language="groovy"></file>
        </script>
      </cleaning>
      <metadata>
        <positionTop>
            610.0710296630859
        </positionTop>
        <positionLeft>
            495.2414245605469
        </positionLeft>
      </metadata>
    </task>
    <task name="Zookeeper_Start_or_Bind_Service" 
    fork="true">
      <description>
        <![CDATA[ This task calls ProActive-Cloud-Automation service to deploy an instance of Apache Zookeeper coordination server (https://zookeeper.apache.org/). The deployed instance consists in a single Zookeeper broker. The name and the endpoint of the deployed instance are added to the list of variables. ]]>
      </description>
      <variables>
        <variable name="INSTANCE_NAME" value="zookeeper-server-1" inherited="false" />
        <variable name="SERVICE_ID" value="Zookeeper" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/zookeeper.jpg"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription


println("BEGIN " + variables.get("PA_TASK_NAME"))

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()

// Define PCA URL
def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')

// Connect to APIs
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

def serviceId = variables.get("ZOOKEEPER_SERVICE_ID")
def instanceName = variables.get("ZOOKEEPER_INSTANCE_NAME")
println("ZOOKEEPER_SERVICE_ID:    " + serviceId)
println("ZOOKEEPER_INSTANCE_NAME: " + instanceName)

/*********************************************************************************
*                     Using existing instance (if it exists)                     *
/********************************************************************************/
boolean instance_exists = false
List<ServiceInstanceData> service_instances = serviceInstanceRestApi.getServiceInstancesUsingGET(sessionId)

for (ServiceInstanceData serviceInstanceData : service_instances) {
    if ( (serviceInstanceData.getServiceId() == serviceId) && (serviceInstanceData.getInstanceStatus()  == "RUNNING")){
        if (serviceInstanceData.getVariables().get("INSTANCE_NAME") == instanceName) {
            instance_exists = true
            def instanceId = serviceInstanceData.getInstanceId()
            endpoint = serviceInstanceData.getDeployments().iterator().next().getEndpoint().getUrl()
            println("ZOOKEEPER_INSTANCE_ID: " + instanceId)
            println("ZOOKEEPER_ENDPOINT:    " + endpoint)
            variables.put("ZOOKEEPER_INSTANCE_ID", instanceId)
            variables.put("ZOOKEEPER_ENDPOINT", endpoint)
            break
        }
      }
}
/*********************************************************************************
*                             Creating a new instance                            *
/********************************************************************************/
println("INSTANCE_EXISTS ? " + instance_exists)

if (!instance_exists){
    // Prepare service description
    ServiceDescription serviceDescription = new ServiceDescription()
    serviceDescription.setBucketName("cloud-automation")
    serviceDescription.setWorkflowName(serviceId)
    serviceDescription.putVariablesItem("INSTANCE_NAME", instanceName)

    // Run service
    def serviceInstanceData = serviceInstanceRestApi.createRunningServiceInstanceUsingPOST(sessionId, serviceDescription, variables.get("PA_JOB_ID"))

    // Acquire service Instance ID
    def serviceInstanceId = serviceInstanceData.getInstanceId()

    // Create synchro channel
    def channel = "Service_Instance_" + serviceInstanceId
    println("CHANNEL: " + channel)
    synchronizationapi.createChannelIfAbsent(channel, false)
    synchronizationapi.waitUntil(channel, "RUNNING", "{k,x -> x == true}")

    // Acquire service endpoint
    serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(sessionId, serviceInstanceId)
    def instanceId = serviceInstanceData.getInstanceId()
    endpoint = serviceInstanceData.getDeployments().iterator().next().getEndpoint().getUrl()

    println("ZOOKEEPER_INSTANCE_ID: " + instanceId)
    println("ZOOKEEPER_ENDPOINT: " + endpoint)

    variables.put("ZOOKEEPER_INSTANCE_ID", instanceId)
    variables.put("ZOOKEEPER_ENDPOINT", endpoint)
}

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            99.04829406738281
        </positionTop>
        <positionLeft>
            495.2556457519531
        </positionLeft>
      </metadata>
    </task>
    <task name="Loop_Over_Instance_Status" 
    fork="true">
      <description>
        <![CDATA[ Loop over service instance status and fetch docker container logs.
It will run every minute. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/storm.png"/>
        <info name="Documentation" value="PCA/PCAUserGuide.html"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="start_ui"/>
      </depends>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Check_Instance_Status/raw" language="groovy"></file>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="Loop_Over_Instance_Status">
          <script>
            <file url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Fetch_Logs/raw" language="groovy"></file>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            786.4914398193359
        </positionTop>
        <positionLeft>
            465.2272644042969
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2487px;
            height:2901px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-94.04829406738281px;left:-460.2272644042969px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1548" style="top: 227.06px; left: 495.269px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Pull Storm image"><img src="/automation-dashboard/styles/patterns/img/wf-icons/storm.png" width="20px">&nbsp;<span class="name">pull_image</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1551" style="top: 355.071px; left: 495.269px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="start Storm Nimbus"><img src="/automation-dashboard/styles/patterns/img/wf-icons/storm.png" width="20px">&nbsp;<span class="name">start_nimbus</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1554" style="top: 483.083px; left: 495.269px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="start Storm Supervisors"><img src="/automation-dashboard/styles/patterns/img/wf-icons/storm.png" width="20px">&nbsp;<span class="name">start_supervisors</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1557" style="top: 610.071px; left: 495.255px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="start Storm UI"><img src="/automation-dashboard/styles/patterns/img/wf-icons/storm.png" width="20px">&nbsp;<span class="name">start_ui</span></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_1560" style="top: 99.0485px; left: 495.269px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task calls ProActive-Cloud-Automation service to deploy an instance of Apache Zookeeper coordination server (https://zookeeper.apache.org/). The deployed instance consists in a single Zookeeper broker. The name and the endpoint of the deployed instance are added to the list of variables."><img src="/automation-dashboard/styles/patterns/img/wf-icons/zookeeper.jpg" width="20px">&nbsp;<span class="name">Zookeeper_Start_or_Bind_Service</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1563" style="top: 786.492px; left: 465.241px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Loop over service instance status and fetch docker container logs.
It will run every minute."><img src="/automation-dashboard/styles/patterns/img/wf-icons/storm.png" width="20px">&nbsp;<span class="name">Loop_Over_Instance_Status</span></a></div><svg style="position:absolute;left:534.5px;top:138.5px" width="65" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 54 50 44 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M1.494148499999997,64.9032055 L18.217414262796662,51.89042784775093 L9.082705746464711,53.138266107163 L6.452474869959662,44.30187060128621 L1.494148499999997,64.9032055" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M1.494148499999997,64.9032055 L18.217414262796662,51.89042784775093 L9.082705746464711,53.138266107163 L6.452474869959662,44.30187060128621 L1.494148499999997,64.9032055" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:529.9817132113825px;top:266.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path></svg><svg style="position:absolute;left:534.5px;top:394.5px" width="26.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 5.5 88 C 15.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.868953124999999,66.78168750000002 L12.848095417762192,46.18537370290451 L6.478576933147113,52.85089950918167 L-1.0826925730561543,47.575749894757394 L7.868953124999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.868953124999999,66.78168750000002 L12.848095417762192,46.18537370290451 L6.478576933147113,52.85089950918167 L-1.0826925730561543,47.575749894757394 L7.868953124999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:534.5px;top:522.5px" width="26.5" height="88" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 87 C -10 37 15.5 50 5.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.3689531250000004,65.86284375000001 L6.607638578738619,46.66855289609319 L-0.9604783513609243,51.93387398149156 L-7.3213311897698325,45.26007812245412 L-2.3689531250000004,65.86284375000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.3689531250000004,65.86284375000001 L6.607638578738619,46.66855289609319 L-0.9604783513609243,51.93387398149156 L-7.3213311897698325,45.26007812245412 L-2.3689531250000004,65.86284375000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:534.5px;top:649.5px" width="22" height="137" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 1 136 C 11 86 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M3.74809375,104.0573125 L9.856874217283103,83.76734450587688 L3.1290328756463337,90.0710062101376 L-4.129432072579294,84.38640538023054 L3.74809375,104.0573125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M3.74809375,104.0573125 L9.856874217283103,83.76734450587688 L3.1290328756463337,90.0710062101376 L-4.129432072579294,84.38640538023054 L3.74809375,104.0573125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:607.0266769263776px;top:735.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_1586" style="position: absolute; transform: translate(-50%, -50%); left: 619px; top: 805.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 535px; top: 257px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 535px; top: 217px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 535px; top: 385px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 535px; top: 345px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 540.5px; top: 513px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 540.5px; top: 473px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 535px; top: 640px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 535px; top: 600px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 579px; top: 129px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 536px; top: 816px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 536px; top: 776px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 617px; top: 776px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 617px; top: 816px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>
