<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.8"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
    name="Storm" projectName="Cloud Automation - Deployment"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2"
>
  <variables>
    <variable name="instance_name" value="stormContainer"/>
    <variable name="host_name" value="try.activeeon.com"/>
    <variable name="number_of_slaves" value="2"/>
    <variable name="dashboard_port" value="49080"/>
  </variables>
  <genericInformation>
    <info name="pca.service.model" value="5"/>
    <info name="pca.service.type" value="platform"/>
    <info name="pca.service.name" value="storm"/>
    <info name="pca.service.description" value="storm"/>
    <info name="pca.action.type" value="create"/>
    <info name="pca.action.name" value="create"/>
    <info name="pca.action.description" value="create storm instance"/>
    <info name="pca.action.origin_state" value="null"/>
    <info name="pca.action.icon" value="/cloud-automation/styles/patterns/storm.png"/>
  </genericInformation>
  <taskFlow>
    <task name="Linux_Bash_Task">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
docker pull wurstmeister/storm:latest
	docker pull wurstmeister/storm-nimbus:latest
	docker pull wurstmeister/storm-supervisor:latest
	docker pull wurstmeister/zookeeper:latest
	docker pull wurstmeister/storm-ui:latest
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Linux_Bash_Task2">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <depends>
        <task ref="Linux_Bash_Task"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
# Retrieve variables
	nb_worker=$variables_number_of_slaves
	name_Containers=$variables_instance_name
    ui_port=$variables_dashboard_port


	if which docker-compose >/dev/null; then
		echo docker-compose exists
	else
		echo docker-compose not exist
	fi

	if which docker-compose >/dev/null; then
		echo docker-compose exists
	else
		echo docker-compose not exist
	fi

echo "$nb_worker"
echo "$nameContainers"
echo "$container_port"
echo "$ui_port"

echo -e ""${name_Containers}Zookeeper":
  image: wurstmeister/zookeeper
  ports:
    - "49181:2181"
    - "22"
"${name_Containers}Nimbus":
  image: wurstmeister/storm-nimbus
  ports:
    - "49627:6627"
    - "22"
  links:
    - "${name_Containers}Zookeeper:zk"
"${name_Containers}Supervisor":
  image: wurstmeister/storm-supervisor
  ports:
    - "8000"
    - "22"
  links:
    - "${name_Containers}Nimbus:nimbus"
    - "${name_Containers}Zookeeper:zk"
"${name_Containers}Ui":
  image: wurstmeister/storm-ui
  ports:
    - "${ui_port}:8080" 
    - "22"
  links:
    - "${name_Containers}Nimbus:nimbus"
    - "${name_Containers}Zookeeper:zk""> "docker-compose.yml"

docker-compose scale ${name_Containers}Supervisor=$nb_worker
docker-compose up -d
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <outputFiles>
        <files  includes="docker-compose.yml" accessMode="transferToOutputSpace"/>
      </outputFiles>
    </task>
    <task name="Linux_Bash_Task3">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <depends>
        <task ref="Linux_Bash_Task2"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
name_Containers=$variables_instance_name

docker ps -a --filter name="^.*${name_Containers}Nimbus_\d$" --format "{{.Names}}" >> results_$variables_PA_JOB_ID.txt
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="results_$PA_JOB_ID.txt" accessMode="transferToUserSpace"/>
      </outputFiles>
    </task>
    <task name="Ruby_Task">
      <description>
        <![CDATA[ The simplest task, ran by a ruby engine. ]]>
      </description>
      <depends>
        <task ref="Linux_Bash_Task3"/>
      </depends>
      <inputFiles>
        <files  includes="results_$PA_JOB_ID.txt" accessMode="transferFromUserSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="ruby">
            <![CDATA[
text = File.read("results_" + $variables['PA_JOB_ID']+".txt");
result = text;
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="end_deployment">
      <description>
        <![CDATA[ The simplest task, ran by a javascript engine. ]]>
      </description>
      <depends>
        <task ref="Ruby_Task"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="javascript">
            <![CDATA[
var url = results[0].value();

var name_basis = variables.get("instance_name");

var myObject = {};
myObject.id= name_basis;
myObject.status="RUNNING";
myObject.endpoint= variables.get("host_name") + ":" + variables.get("dashboard_port").split(':')[0];

result = JSON.stringify(myObject);
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>