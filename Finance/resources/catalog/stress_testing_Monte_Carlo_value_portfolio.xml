<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="Stress_Testing_Monte_Carlo_Value_Portfolio" projectName="Risk Valuation Workflows" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="DOCKER_ENABLED" value="True" model="PA:Boolean"/>
    <variable name="nb_MC_per_ptf_value" value="1000" />
    <variable name="nb_time_steps" value="255" />
    <variable name="stress_horizon" value="1" />
    <variable name="assets_params_file_path_from_dataspace" value="assets.txt" />
    <variable name="assets_correlations_file_path_from_dataspace" value="assets_correlations.txt" />
    <variable name="stressed_risk_free_rate_min_max_in_percent_and_steps" value="-10%,+10%,8" />
    <variable name="stressed_volatility_min_max_in_percent_and_steps" value="-5%,+5%,8" />
    <variable name="nb_replicated_tasks" value="4" />
  </variables>
  <description>
    <![CDATA[ Portfolio Stress-Testing  according to user ranges of values. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="finance"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/quantlib.png"/>
    <info name="Documentation" value="https://ow2-proactive.github.io/proactive-examples/Finance/resources/doc/V1/risk-valuation-proactive.pdf"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="plot_surface" 
    
    
    preciousResult="true" >
      <depends>
        <task ref="merge_to_csv"/>
      </depends>
      <inputFiles>
        <files  includes="stressed_PnLs.csv" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_vars_dlm3/raw" language="groovy"></file>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
# https://jakevdp.github.io/PythonDataScienceHandbook/04.12-three-dimensional-plotting.html

import matplotlib as mpl
mpl.use('Agg')
from matplotlib import pyplot
from mpl_toolkits.mplot3d import Axes3D
import pandas as pd

# Labels
X_label = 'stressed_risk_free_rate_in_percent'
Y_label = 'stressed_volatility_in_percent'
Z_label = 'expected_PnL'

# Read data
df = pd.read_csv('stressed_PnLs.csv', sep=' ')
X = df[X_label]
Y = df[Y_label]
Z = df[Z_label]

 # Plot
fig = pyplot.figure()
ax = Axes3D(fig)
ax.plot_trisurf(X, Y, Z, cmap='viridis', edgecolor='none');
ax.set_xlabel(X_label)
ax.set_ylabel(Y_label)
ax.set_zlabel(Z_label)

# Change POV
ax.view_init(elev=10., azim=100)

# Save the chart
chart_file_name = 'stressed_PnLs.png'
fig.savefig(chart_file_name)

# Expose the chart
with open(chart_file_name, "rb") as binary_file:
    FILE_BIN = binary_file.read()
result = FILE_BIN
resultMetadata.put("file.name", chart_file_name)
resultMetadata.put("content.type", "image/png")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <metadata>
        <positionTop>
            776
        </positionTop>
        <positionLeft>
            925.5
        </positionLeft>
      </metadata>
    </task>
    <task name="init_stress_testing" >
      <inputFiles>
        <files  includes="$assets_params_file_path_from_dataspace" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println "init_stress_testing..."

// Retrieve variables
def stressed_risk_free_rate_min_max_in_percent_and_steps = variables.get("stressed_risk_free_rate_min_max_in_percent_and_steps")
def stressed_volatility_min_max_in_percent_and_steps = variables.get("stressed_volatility_min_max_in_percent_and_steps")
def nb_replicated_tasks = variables.get("nb_replicated_tasks") as Integer
def assets_params_file_path_from_dataspace = variables.get("assets_params_file_path_from_dataspace")

// Deduce other variables
def stressed_risk_free_rate_min_max_in_percent_and_steps_arr = stressed_risk_free_rate_min_max_in_percent_and_steps.split(",")
def stressed_risk_free_rate_min_in_percent = stressed_risk_free_rate_min_max_in_percent_and_steps_arr[0].replaceAll("%", "") as Integer
def stressed_risk_free_rate_max_in_percent = stressed_risk_free_rate_min_max_in_percent_and_steps_arr[1].replaceAll("%", "") as Integer
def stressed_risk_free_rate_steps = stressed_risk_free_rate_min_max_in_percent_and_steps_arr[2] as Integer

def stressed_volatility_min_max_in_percent_and_steps_arr = stressed_volatility_min_max_in_percent_and_steps.split(",")
def stressed_volatility_min_in_percent = stressed_volatility_min_max_in_percent_and_steps_arr[0].replaceAll("%", "") as Integer
def stressed_volatility_max_in_percent = stressed_volatility_min_max_in_percent_and_steps_arr[1].replaceAll("%", "") as Integer
def stressed_volatility_steps = stressed_volatility_min_max_in_percent_and_steps_arr[2] as Integer

def nb_assets = new File(localspace, assets_params_file_path_from_dataspace).text.split(System.getProperty("line.separator")).length
variables["nb_assets"] = nb_assets

// Check split params validity
def total_nb_steps = stressed_risk_free_rate_steps * stressed_volatility_steps
def nb_steps_per_task = total_nb_steps / nb_replicated_tasks
if (total_nb_steps % nb_replicated_tasks != 0)
	throw new Exception("total_nb_steps % nb_replicated_tasks != 0")

// Compute ranges
def stressed_risk_free_rate_step_size_in_percent = (stressed_risk_free_rate_max_in_percent - stressed_risk_free_rate_min_in_percent) / (stressed_risk_free_rate_steps - 1)
def stressed_volatility_step_size_in_percent = (stressed_volatility_max_in_percent - stressed_volatility_min_in_percent) / (stressed_volatility_steps - 1)
def i = 0, j = 0, step_id = 0, task_id = 0
def steps_to_consider_per_task = []
while (i < stressed_risk_free_rate_steps)
{
    // Compute current_stressed_risk_free_rate_in_percent
    def current_stressed_risk_free_rate_in_percent = stressed_risk_free_rate_min_in_percent + i * stressed_risk_free_rate_step_size_in_percent
    if (i == stressed_risk_free_rate_steps - 1)
    	current_stressed_risk_free_rate_in_percent = stressed_risk_free_rate_max_in_percent

    while (j < stressed_volatility_steps)
    {
        // Compute current_stressed_risk_free_rate_in_percent
    	def current_stressed_volatility_in_percent = stressed_volatility_min_in_percent + j * stressed_volatility_step_size_in_percent
    	if (j == stressed_volatility_steps - 1)
    		current_stressed_volatility_in_percent = stressed_volatility_max_in_percent

        // Add another step pair
        steps_to_consider_per_task += [[current_stressed_risk_free_rate_in_percent, current_stressed_volatility_in_percent]]

        // If we reach nb_steps_per_task
        if (step_id == nb_steps_per_task - 1)
        {
            variables["steps_for_task_" + task_id] = steps_to_consider_per_task
            //println step_id + " == " + (nb_steps_per_task - 1) + " => " + variables["steps_for_task_" + task_id]
            steps_to_consider_per_task = []
            task_id++
            step_id = -1
        }

        // inc
        j++
        step_id++
    }

    // inc
    i++
    j = 0
}

println "... init_stress_testing"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
runs=variables.get("nb_replicated_tasks")
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
      <metadata>
        <positionTop>
            392
        </positionTop>
        <positionLeft>
            925.5
        </positionLeft>
      </metadata>
    </task>
    <task name="simulate_ptf_PnLs" >
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/quantlib.png"/>
      </genericInformation>
      <depends>
        <task ref="init_stress_testing"/>
      </depends>
      <inputFiles>
        <files  includes="ptfPnLSimulations" accessMode="transferFromGlobalSpace"/>
        <files  includes="$assets_params_file_path_from_dataspace" accessMode="transferFromGlobalSpace"/>
        <files  includes="$assets_correlations_file_path_from_dataspace" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// FUNCTIONS //////////////////////////////


void fromListToFile(stressed_assets_params_file_name, stressed_assets_params_list,stressed_risk_free_rate_in_percent, stressed_volatility_in_percent)
{
    // Build the file content
    def file_content = ""
    stressed_assets_params_list.each {
        file_content += it.join(",") + System.getProperty("line.separator")
    }
    file_content = file_content.substring(0, file_content.length() - 1)

    // Write the content
    new File(localspace, stressed_assets_params_file_name).text = file_content
}

void generate_stressed_assets_params_file(stressed_assets_params_file_name, assets_params_list, stressed_risk_free_rate_in_percent, stressed_volatility_in_percent)
{
    def stressed_assets_params_list = []

    assets_params_list.each {
        // Stress current values
        def current_risk_free_rate = it[1] as Double
        def stressed_risk_free_rate = current_risk_free_rate * ( 1 + stressed_risk_free_rate_in_percent / 100)

        def current_volatility = it[2] as Double
        def stressed_volatility = current_volatility * ( 1 + stressed_volatility_in_percent / 100)

        // Store stressed values
        stressed_assets_params_list += [[it[0], stressed_risk_free_rate, stressed_volatility, it[3]]]
    }

    // Generate a file from the list
    fromListToFile(stressed_assets_params_file_name, stressed_assets_params_list, stressed_risk_free_rate_in_percent, stressed_volatility_in_percent)
}


// MAIN //////////////////////////////


println "simulate_ptf_PnLs ..."

// Retrieve variables
def task_id = variables.get("PA_TASK_REPLICATION")
def steps_to_consider = variables.get("steps_for_task_" + task_id)
def nb_MC_per_ptf_value = variables.get("nb_MC_per_ptf_value")
def nb_time_steps = variables.get("nb_time_steps")
def stress_horizon = variables.get("stress_horizon")
def nb_assets = variables.get("nb_assets")
def assets_params_file_path_from_dataspace = variables.get("assets_params_file_path_from_dataspace")
def assets_correlations_file_path_from_dataspace = variables.get("assets_correlations_file_path_from_dataspace")

// Set executable permission
def executable_file_path = new File(localspace, "ptfPnLSimulations").absolutePath
["chmod","+x", executable_file_path].execute().waitForProcessOutput(System.out, System.err)

// Stressed values from the assets params file and Execute the command
def assets_params_file_content = new File(localspace, assets_params_file_path_from_dataspace).text
def assets_params_file_lines = assets_params_file_content.split(System.getProperty("line.separator"))
def assets_params_list = []
assets_params_file_lines.each {
    assets_params_list += it.split(",")
}

// For each stressed pair
def stressed_PnLs = ""
def assets_params_file_name = new File(localspace, assets_params_file_path_from_dataspace).name
(steps_to_consider as List).each {
    // Retrieve the stressed rates
    def stressed_risk_free_rate_in_percent = it.get(0)
    def stressed_volatility_in_percent = it.get(1)

    // Generate a stressed assets params file
    def stressed_assets_params_file_name = "stressed_" + stressed_risk_free_rate_in_percent + "_" + stressed_volatility_in_percent + "_" + assets_params_file_name
    generate_stressed_assets_params_file(stressed_assets_params_file_name, assets_params_list, stressed_risk_free_rate_in_percent, stressed_volatility_in_percent)

    // Build the command and execute it
    def cmd = ['/bin/sh', '-c', "docker run --rm -v " + new File('.').absolutePath + ":/defaultglobal activeeon/quantlib:1.19 /bin/bash -c 'cd defaultglobal; ./ptfPnLSimulations " + nb_MC_per_ptf_value + " " + nb_time_steps + " " + stress_horizon + " " + nb_assets + " " + stressed_assets_params_file_name + " " +  assets_correlations_file_path_from_dataspace + " " + task_id + "'"]
    println cmd
    def sout = new StringBuilder()
    cmd.execute().waitForProcessOutput(sout, System.err)

    def PnLs = sout.toString().split(" ")
    def expected_PnL = 0
    PnLs.each {
        expected_PnL += it as Double
    }
    expected_PnL = expected_PnL / PnLs.size()
    stressed_PnLs += stressed_risk_free_rate_in_percent + " " + stressed_volatility_in_percent + " " + expected_PnL + "\n"
}
stressed_PnLs = stressed_PnLs.substring(0, stressed_PnLs.length() - 1)

// Write results into a file
def file_name = "stressed_PnLs_" + task_id + ".txt"
new File(localspace, file_name).text = stressed_PnLs
result = file_name

println "... simulate_ptf_PnLs"
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="stressed_PnLs_${PA_TASK_REPLICATION}.txt" accessMode="transferToGlobalSpace"/>
      </outputFiles>
      <metadata>
        <positionTop>
            520
        </positionTop>
        <positionLeft>
            925.5
        </positionLeft>
      </metadata>
    </task>
    <task name="merge_to_csv" >
      <depends>
        <task ref="simulate_ptf_PnLs"/>
      </depends>
      <inputFiles>
        <files  includes="stressed_PnLs_*.txt" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def nb_replicated_tasks = variables.get("nb_replicated_tasks") as Integer
def csv_content = "stressed_risk_free_rate_in_percent stressed_volatility_in_percent expected_PnL" + System.getProperty("line.separator")

// Gather all stressed PnLs
for (i=0; i<nb_replicated_tasks-1; i++)
{
    csv_content += new File(localspace, "stressed_PnLs_" + i + ".txt").text + System.getProperty("line.separator")
}
csv_content += new File(localspace, "stressed_PnLs_" + i + ".txt").text

// Write them into the csv file
new File(localspace, "stressed_PnLs.csv").text = csv_content
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="stressed_PnLs.csv" accessMode="transferToGlobalSpace"/>
      </outputFiles>
      <metadata>
        <positionTop>
            648
        </positionTop>
        <positionLeft>
            925.5
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2830px;
            height:3388px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-387px;left:-920.5px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_ active-task" id="jsPlumb_1_92" style="top: 776px; left: 925.5px;"><a class="task-name"><img src="images/Python.png" width="20px">&nbsp;<span class="name">plot_surface</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_95" style="top: 392px; left: 925.5px;"><a class="task-name"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">init_stress_testing</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_98" style="top: 520px; left: 925.5px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/quantlib.png" width="20px">&nbsp;<span class="name">simulate_ptf_PnLs</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_101" style="top: 648px; left: 925.5px;"><a class="task-name"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">merge_to_csv</span></a></div><svg style="position:absolute;left:960.9817132113825px;top:687.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path></svg><svg style="position:absolute;left:1006.7px;top:421.5px" width="23.399999999999977" height="99" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 2.3999999999999773 88 C 12.399999999999977 88 -10 -10 0 0 " transform="translate(10.5,10.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#e5db3d" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M5.02343009999998,77.41936575 L10.807529466709596,57.03446460930203 L4.18117511311867,63.44472419691988 L-3.1671120863705244,57.87671959618334 L5.02343009999998,77.41936575" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M5.02343009999998,77.41936575 L10.807529466709596,57.03446460930203 L4.18117511311867,63.44472419691988 L-3.1671120863705244,57.87671959618334 L5.02343009999998,77.41936575" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_112" style="position: absolute; transform: translate(-50%, -50%); left: 1017.9px; top: 471.75px;">replicate</div><svg style="position:absolute;left:972.5px;top:431.5px" width="22.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 1.5 88 C 11.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M4.193578125,66.78168750000002 L10.22883008187672,46.46972713628781 L3.5238641657164487,52.79771513115072 L-3.755142286972582,47.139441095571364 L4.193578125,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M4.193578125,66.78168750000002 L10.22883008187672,46.46972713628781 L3.5238641657164487,52.79771513115072 L-3.755142286972582,47.139441095571364 L4.193578125,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:965.5px;top:559.5px" width="29.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 18.5 50 8.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.1068640000000003,66.303232 L7.664175659289976,47.500924057181315 L-0.11740982136979405,52.44530747750635 L-6.1937488632036715,45.511469878551104 L-2.1068640000000003,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.1068640000000003,66.303232 L7.664175659289976,47.500924057181315 L-0.11740982136979405,52.44530747750635 L-6.1937488632036715,45.511469878551104 L-2.1068640000000003,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 966px; top: 806px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 966px; top: 766px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 973px; top: 422px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint replicate-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 1007.2px; top: 422px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 974.5px; top: 550px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint replicate-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 1009.6px; top: 510px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 974.5px; top: 510px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 966px; top: 678px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 966px; top: 638px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>