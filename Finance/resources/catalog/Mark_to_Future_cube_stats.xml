<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="Mark_to_Future_cube_stats" projectName="Risk Valuation Workflows" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
    <variables>
        <variable name="evaluation_date_start" value="01/12/2018" model="PA:DATETIME(dd/mm/yyyy)"/>
        <variable name="evaluation_date_end" value="20/12/2018" model="PA:DATETIME(dd/mm/yyyy)"/>
        <variable name="evaluation_frequency" value="monthly" model="PA:LIST(monthly,biweekly)"/>
        <variable name="shocked_yield_start" value="0" />
        <variable name="shocked_yield_end" value="0.1" />
        <variable name="shocked_yield_delta" value="0.00000005" />
        <variable name="bonds_params_file_path_from_dataspace" value="bonds.txt" />
        <variable name="node_source_compute_intensive" value="local" />
        <variable name="node_source_memory_intensive" value="local" />
        <variable name="data_dir_path" value="/tmp" />
        <variable name="nb_replicated_tasks" value="4" />
        <variable name="nb_replicated_tasks_per_cubelet" value="4" />
    </variables>
    <description>
        <![CDATA[ Estimates a Mark-to-Future cube for bond portfolios. The pricing engine relies on the C++ Quantlib library. ]]>
    </description>
    <genericInformation>
        <info name="bucketName" value="finance"/>
        <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/quantlib.png"/>
        <info name="group" value="public-objects"/>
        <info name="Documentation" value="https://ow2-proactive.github.io/proactive-examples/Finance/resources/doc/V1/montecarlo-value-at-risk-proactive.pdf"/>
    </genericInformation>
    <taskFlow>
        <task name="split" >
            <inputFiles>
                <files  includes="$resources_file_path_from_dataspace" accessMode="transferFromGlobalSpace"/>
                <files  includes="$bonds_params_file_path_from_dataspace" accessMode="transferFromGlobalSpace"/>
            </inputFiles>
            <scriptExecutable>
                <script>
                    <code language="groovy">
                        <![CDATA[
println "split ..."

// Retrieve variables
def shocked_yield_start = variables.get("shocked_yield_start") as double
def shocked_yield_end = variables.get("shocked_yield_end") as double
def shocked_yield_delta = variables.get("shocked_yield_delta") as double
def bonds_params_file_path_from_dataspace = variables.get("bonds_params_file_path_from_dataspace")
def nb_replicated_tasks = variables.get("nb_replicated_tasks") as Integer
def nb_replicated_tasks_per_cubelet = variables.get("nb_replicated_tasks_per_cubelet") as Integer


/////////////////////////////////////////////////////////////////////////////////////////
// FIRST LEVEL OF PARALLELISM: nb_replicated_tasks REPLICATED TASKS
// EACH REPLICATED TASK CONSIDER A SUBSET OF THE SCENARIOS (CUBE -> CUBELETS)
/////////////////////////////////////////////////////////////////////////////////////////

// Compute nb_yields_ranges_per_task
def nb_yields = ((shocked_yield_end - shocked_yield_start) / shocked_yield_delta + 1).trunc()
def nb_yields_per_task = (nb_yields / nb_replicated_tasks).trunc()
def nb_yields_per_task_array = [nb_yields_per_task]*nb_replicated_tasks

// Now distribute the remainder yield ranges to the tasks
nb_remainder_yields = nb_yields % nb_replicated_tasks
0.upto(nb_remainder_yields-1) {

    nb_yields_per_task_array[it]++
}
println "nb_yields " + nb_yields
println "nb_yields_per_task_array " + nb_yields_per_task_array

// Give a yield start/end to each replicated tasks
def shocked_yield_start_tmp = null
def shocked_yield_end_tmp = shocked_yield_start - shocked_yield_delta
0.upto(nb_replicated_tasks-1) {

    shocked_yield_start_tmp = shocked_yield_end_tmp + shocked_yield_delta
    shocked_yield_end_tmp = shocked_yield_start_tmp + (nb_yields_per_task_array[it] - 1) * shocked_yield_delta

    // Store scenarios
    variables.put("task_" + it + "_yield_start", shocked_yield_start_tmp)
    variables.put("task_" + it + "_yield_end", shocked_yield_end_tmp)
}


/////////////////////////////////////////////////////////////////////////////////////////
// SECOND LEVEL OF PARALLELISM: nb_replicated_tasks_per_cubelet REPLICATED TASKS
// EACH REPLICATED TASK CONSIDER A SUBSET OF THE INSTRUMENTS (CUBELET -> MTF-Table)
/////////////////////////////////////////////////////////////////////////////////////////


// How many bonds, i.e. MtF tables, to consider?
def bonds_params_file = new File(localspace, bonds_params_file_path_from_dataspace)

// Split bonds over PA tasks
def list_lines = bonds_params_file.readLines()
def header = list_lines.remove(0)

// Create a bond file with a header per task
def bonds_params_file_name = bonds_params_file.name
variables.put("bonds_params_file_name", bonds_params_file_name)
(0..nb_replicated_tasks_per_cubelet-1).each {
    new File(localspace, it + "_" + bonds_params_file_name).text = header
}

// Now fill each bonds file
task_id_tmp = 0
list_lines.each { String line ->

    new File(localspace, task_id_tmp + "_" + bonds_params_file_name).append(System.getProperty("line.separator") + line)
    task_id_tmp = (task_id_tmp + 1) % nb_replicated_tasks_per_cubelet
}

println "... split"
]]>
                    </code>
                </script>
            </scriptExecutable>
            <controlFlow >
                <replicate>
                    <script>
                        <code language="groovy">
                            <![CDATA[
runs=variables.get("nb_replicated_tasks")
]]>
                        </code>
                    </script>
                </replicate>
            </controlFlow>
            <outputFiles>
                <files  includes="*_$bonds_params_file_name" accessMode="transferToGlobalSpace"/>
            </outputFiles>
            <metadata>
                <positionTop>
                    400
                </positionTop>
                <positionLeft>
                    1136.5
                </positionLeft>
            </metadata>
        </task>
        <task name="simulate_MtF_cubelet" >
            <genericInformation>
                <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/quantlib.png"/>
            </genericInformation>
            <depends>
                <task ref="split"/>
            </depends>
            <scriptExecutable>
                <script>
                    <code language="groovy">
                        <![CDATA[
import org.apache.commons.io.FileUtils

println "simulate_MtF_cubelet ..."

// Retrieve variables
def task_id = variables.get("PA_TASK_REPLICATION")
def current_job_id = variables.get("PA_JOB_ID")
def evaluation_date_start = variables.get("evaluation_date_start")
def evaluation_date_end = variables.get("evaluation_date_end")
def evaluation_frequency = variables.get("evaluation_frequency")
def shocked_yield_start = variables.get("task_" + task_id + "_yield_start")
def shocked_yield_end = variables.get("task_" + task_id + "_yield_end")
def shocked_yield_delta = variables.get("shocked_yield_delta")
def bonds_params_file_path_from_dataspace = variables.get("bonds_params_file_path_from_dataspace")
def node_source_compute_intensive = variables.get("node_source_compute_intensive")
def node_source_memory_intensive = variables.get("node_source_memory_intensive")
def data_dir_path = variables.get("data_dir_path")
def nb_replicated_tasks_per_cubelet = variables.get("nb_replicated_tasks_per_cubelet")

println "================="
println "shocked_yield_start " + shocked_yield_start
println "shocked_yield_end " + shocked_yield_end
println "================="

// Connect to the scheduler for workflow submission
schedulerapi.connect()

// Submit the workflow
def workflow_variables = ["evaluation_date_start":evaluation_date_start,
                          "evaluation_date_end":evaluation_date_end,
                          "evaluation_frequency":evaluation_frequency,
                          "shocked_yield_start":shocked_yield_start,
                          "shocked_yield_end":shocked_yield_end,
                          "shocked_yield_delta":shocked_yield_delta,
                          "bonds_params_file_path_from_dataspace":bonds_params_file_path_from_dataspace,
                          "nb_replicated_tasks":nb_replicated_tasks_per_cubelet,
                          "node_source_compute_intensive":node_source_compute_intensive,
                          "node_source_memory_intensive":node_source_memory_intensive,
                          "data_dir_path":data_dir_path,
                          "submitter_task_id":task_id]
def workflow_generic_infos = ["PARENT_JOB_ID" : current_job_id]
def job_id = schedulerapi.submitFromCatalog(variables.get("PA_CATALOG_REST_URL"), "finance", "Mark_to_Future_cubelet", workflow_variables, workflow_generic_infos)

// Wait until the submitted workflow is finised
def timeout_in_sec = 300
schedulerapi.waitForJob(job_id.toString(), timeout_in_sec * 1000)
println "job_id " + job_id + " terminated!"

println "... simulate_MtF_cubelet"
]]>
                    </code>
                </script>
            </scriptExecutable>
            <controlFlow block="start"></controlFlow>
            <metadata>
                <positionTop>
                    526
                </positionTop>
                <positionLeft>
                    1136.5
                </positionLeft>
            </metadata>
        </task>
        <task name="stats_cubelet" >
            <depends>
                <task ref="simulate_MtF_cubelet"/>
            </depends>
            <inputFiles>
                <files  includes="MtF-cubelet_$PA_TASK_REPLICATION.csv" accessMode="transferFromGlobalSpace"/>
            </inputFiles>
            <selection>
                <script type="dynamic">
                    <code language="groovy">
                        <![CDATA[
if (variables.get("node_source_memory_intensive").equals(System.getProperty("proactive.node.nodesource"))) {
    selected = true
} else {
   selected = false
}
]]>
                    </code>
                </script>
            </selection>
            <scriptExecutable>
                <script>
                    <code language="R">
                        <![CDATA[
print("stats_cubelet ...")

# Retrieve variables
task_id <- variables["PA_TASK_REPLICATION"]
data_dir_path <- variables["data_dir_path"]

# Read the cubelet csv file
MtF_cubelet_file_path <- file.path(data_dir_path, paste("MtF-cubelet_submitter_task_id_", task_id, ".csv", sep=''))
MtF_cubelet <- read.csv(file=MtF_cubelet_file_path, header=TRUE, sep=",")

# Compute the portfolios clean prices
MtF_cubelet_stats <- aggregate(x= MtF_cubelet$cleanPrice, by=list(MtF_cubelet$evaluationDate, MtF_cubelet$shockedYield), FUN=sum)
names(MtF_cubelet_stats) <- c("evaluationDate", "shockedYield", "portfolioCleanPrice")

print(MtF_cubelet_stats)

# Save the results
MtF_cubelet_stats_file_path <- file.path(localspace, paste("MtF_cubelet_stats_", task_id, ".csv", sep=''))
write.csv(MtF_cubelet_stats, file = MtF_cubelet_stats_file_path, row.names=TRUE)

print("... stats_cubelet")
]]>
                    </code>
                </script>
            </scriptExecutable>
            <controlFlow block="end"></controlFlow>
            <outputFiles>
                <files  includes="MtF_cubelet_stats_$PA_TASK_REPLICATION.csv" accessMode="transferToGlobalSpace"/>
            </outputFiles>
            <metadata>
                <positionTop>
                    650
                </positionTop>
                <positionLeft>
                    1136.5
                </positionLeft>
            </metadata>
        </task>
        <task name="stats_cube" >
            <depends>
                <task ref="stats_cubelet"/>
            </depends>
            <inputFiles>
                <files  includes="MtF_cubelet_stats_*.csv" accessMode="transferFromGlobalSpace"/>
            </inputFiles>
            <scriptExecutable>
                <script>
                    <code language="R">
                        <![CDATA[
# install.packages("corrplot")
library("corrplot")

print("stats_cube ...")

# Retrieve variables
nb_replicated_tasks <- as.integer(variables["nb_replicated_tasks"])

# Gather the first cubelet stats
MtF_cube_stats <- read.csv(file=file.path(localspace, "MtF_cubelet_stats_0.csv"), header=TRUE, sep=",")

# Merge with the other cubelets stats
i <- 1
while (i < nb_replicated_tasks) {

    MtF_cubelet_stats_file_path <- file.path(localspace, paste("MtF_cubelet_stats_", i, ".csv", sep=''))
    MtF_cubelet_stats <- read.csv(file=MtF_cubelet_stats_file_path, header=TRUE, sep=",")

    MtF_cube_stats <- rbind(MtF_cube_stats, MtF_cubelet_stats)

    i <- i+1
}

# Save the results
MtF_cube_stats_file_path <- file.path(localspace, "MtF_cube_stats.csv")
write.csv(MtF_cube_stats, file = MtF_cube_stats_file_path, row.names=TRUE)

# Create a dataframe with ordered ptf values time series for each shockedYield column
ptf_values_time_series <- data.frame(matrix(0, nrow = length(unique(MtF_cube_stats$evaluationDate))))
shockedYields <- unique(MtF_cube_stats$shockedYield)
for (i in shockedYields) {
  MtF_cube_stats_filtered <- MtF_cube_stats[MtF_cube_stats$shockedYield==i,]
  MtF_cube_stats_filtered_ordered <- MtF_cube_stats_filtered[order( format( as.Date( MtF_cube_stats_filtered$evaluationDate,"%m/%d/%Y"), format="%Y/%m/%d")),]

  ptf_values_time_series <- cbind(ptf_values_time_series, MtF_cube_stats_filtered_ordered$portfolioCleanPrice)
}
ptf_values_time_series <- ptf_values_time_series[,-1]
colnames(ptf_values_time_series) <- shockedYields

print("========ptf_values_time_series=======")
print(ptf_values_time_series)
print("===============")

# Save the results
ptf_values_time_series_file_path <- file.path(localspace, "ptf_values_time_series.csv")
write.csv(ptf_values_time_series, file = ptf_values_time_series_file_path, row.names=TRUE)

# Compute correlations
ptf_values_time_series_corr <- cor(ptf_values_time_series)

print("========ptf_values_time_series_corr=======")
print(ptf_values_time_series_corr)
print("===============")

# Save the results
ptf_values_time_series_corr_file_path <- file.path(localspace, "ptf_values_time_series_corr.csv")
write.csv(ptf_values_time_series_corr, file = ptf_values_time_series_corr_file_path, row.names=TRUE)

# Plot and Save as png
ptf_values_time_series_corr_png_file_path <- file.path(localspace, "ptf_values_time_series_corr.png")
png(height=1200, width=1200, file=ptf_values_time_series_corr_png_file_path)
corrplot(ptf_values_time_series_corr, type="upper", order="hclust", tl.col="black", tl.srt=45)
dev.off()

print("... stats_cube")
]]>
                    </code>
                </script>
            </scriptExecutable>
            <outputFiles>
                <files  includes="MtF_cube_stats.csv" accessMode="transferToGlobalSpace"/>
                <files  includes="ptf_values_time_series.csv" accessMode="transferToGlobalSpace"/>
                <files  includes="ptf_values_time_series_corr.csv" accessMode="transferToGlobalSpace"/>
                <files  includes="ptf_values_time_series_corr.png" accessMode="transferToGlobalSpace"/>
            </outputFiles>
            <metadata>
                <positionTop>
                    776
                </positionTop>
                <positionLeft>
                    1136.5
                </positionLeft>
            </metadata>
        </task>
    </taskFlow>
    <metadata>
        <visualization>
            <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1427px;
            height:860px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-293px;left:-649.5px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_325" style="top: 298px; left: 654.5px;"><a class="task-name"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">split</span></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_328" style="top: 424px; left: 654.5px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/quantlib.png" width="20px">&nbsp;<span class="name">simulate_MtF_cubelet</span></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_331" style="top: 548px; left: 654.5px;"><a class="task-name"><img src="/studio/images/R.png" width="20px">&nbsp;<span class="name">stats_cubelet</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_334" style="top: 674px; left: 654.5px;"><a class="task-name"><img src="/studio/images/R.png" width="20px">&nbsp;<span class="name">stats_cube</span></a></div><svg style="position:absolute;left:724.5px;top:327.5px" width="46.60000000000002" height="97" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 25.600000000000023 86 C 35.60000000000002 86 -10 -10 0 0 " transform="translate(10.5,10.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#e5db3d" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M25.573943200000024,75.169922 L26.345272693296565,53.9943452472225 L21.43310965067004,61.79631001532124 L12.971660708617812,58.13517879655248 L25.573943200000024,75.169922" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M25.573943200000024,75.169922 L26.345272693296565,53.9943452472225 L21.43310965067004,61.79631001532124 L12.971660708617812,58.13517879655248 L25.573943200000024,75.169922" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_342" style="position: absolute; transform: translate(-50%, -50%); left: 747.3px; top: 376.75px;">replicate</div><svg style="position:absolute;left:694.5px;top:337.5px" width="37" height="87" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 16 86 C 26 36 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M17.5168125,64.94400000000002 L19.608787716546182,43.85789937201864 L14.219073522473845,51.33793820254721 L6.002725919093373,47.155638349544795 L17.5168125,64.94400000000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M17.5168125,64.94400000000002 L19.608787716546182,43.85789937201864 L14.219073522473845,51.33793820254721 L6.002725919093373,47.155638349544795 L17.5168125,64.94400000000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:694.5px;top:463.5px" width="37" height="85" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 84 C -10 34 26 50 16 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-1.5168125000000006,63.10631250000001 L10.108368224482753,45.39035435139527 L1.8660086676879877,49.5211543872859 L-3.4767898882313597,42.007533183707274 L-1.5168125000000006,63.10631250000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-1.5168125000000006,63.10631250000001 L10.108368224482753,45.39035435139527 L1.8660086676879877,49.5211543872859 L-3.4767898882313597,42.007533183707274 L-1.5168125000000006,63.10631250000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:689.9783554952701px;top:587.5px" width="15.521644504729927" height="87" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 86 C -10 36 -10 50 0 0 " transform="translate(15.021644504729927,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.331249999999999,64.94400000000002 L-1.2792764656232984,43.975321988607305 L-7.004697339623629,51.20163196089339 L-15.021644504729927,46.64876932823094 L-4.331249999999999,64.94400000000002" class="" stroke="#666" fill="#666" transform="translate(15.021644504729927,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.331249999999999,64.94400000000002 L-1.2792764656232984,43.975321988607305 L-7.004697339623629,51.20163196089339 L-15.021644504729927,46.64876932823094 L-4.331249999999999,64.94400000000002" class="" stroke="#666" fill="#666" transform="translate(15.021644504729927,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 695px; top: 328px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint replicate-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 725px; top: 328px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 711px; top: 454px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint replicate-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 750.6px; top: 414px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 711px; top: 414px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 695px; top: 578px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 695px; top: 538px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 695px; top: 704px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 695px; top: 664px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
        </visualization>
    </metadata>
</job>