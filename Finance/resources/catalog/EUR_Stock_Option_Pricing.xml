<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="EUR_Stock_Option_Pricing" tags="Pycuda,Finance,Pricing,Bale,Risk,Solvency,Black-Scholes" projectName="Pricing Workflows" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="StockPrice" value="20.83" description="The price of the underlying stock."/>
    <variable name="StrikePrice" value="21.50" description="The strike of the option."/>
    <variable name="Volatility" value="0.021" description="The volatility rate of the underlying stock."/>
    <variable name="InterestRate" value="0.20" description="The discount rate."/>
    <variable name="Maturity" value="0.6" description="The maturity of the option in year fraction."/>
    <variable name="NumPath" value="3000000" description="The number of Monte Carlo simulations."/>
    <variable name="NumStep" value="100" description="The number of steps per simulation."/>
  </variables>
  <description>
    <![CDATA[ European stock option pricing via Monte Carlo simulations in PyCuda. This workflow requires Cuda drivers and PyCuda to be installed before execution]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="hpc-finance"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/nvidia.png"/>
    <info name="Documentation" value="https://developer.nvidia.com/pycuda"/>
  </genericInformation>
  <taskFlow>
    <task name="pycuda_option_pricing" >
      <description>
        <![CDATA[ European stock option pricing via Monte Carlo simulations in PyCuda. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/nvidia.png"/>
      </genericInformation>
      <selection>
        <script type="static">
          <code language="groovy">
            <![CDATA[
selected = new File("/dev/nvidia0").exists() && new File("/dev/nvidiactl").exists() && new File("/dev/nvidia-uvm").exists()
]]>
          </code>
        </script>
      </selection>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_pycuda/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
print("pycuda_option_pricing ...")


#Source: https://nvidia.qwiklab.com/
#Lab title: Accelerating Applications with GPU-Accelerated Libraries in Python
#Optimized

import numpy as np                         # numpy namespace
from timeit import default_timer as timer  # for timing
import math
import pycuda.driver as cuda
import pycuda.autoinit, pycuda.compiler
import pycuda.gpuarray as gpuarray
import pycuda.cumath as cumath             # elementwise functions for math
from pycuda.curandom import XORWOWRandomNumberGenerator as curand # random number generator for CUDA

# Stock information parameters
StockPrice = float(variables.get("StockPrice"))
StrikePrice = float(variables.get("StrikePrice"))
Volatility = float(variables.get("Volatility"))
InterestRate = float(variables.get("InterestRate"))
Maturity = float(variables.get("Maturity"))

# monte-carlo simulation parameters
NumPath = int(variables.get("NumPath"))
NumStep = int(variables.get("NumStep"))

paths = np.zeros((NumPath, NumStep + 1), order='F')
paths[:, 0] = StockPrice
paths_flat = paths[:,0]
DT = Maturity / NumStep

def step(price, dt, c0, c1, noise): #for GPU
    # Data types must be specified. Data is sent to GPU which uses C, a statically typed language.
    # All of CUDAâs supported vector types, such as float3 and long4 are available as numpy data
    # types using pycuda.gpuarray.
    price = price.astype(np.float32)
    dt = np.float32(dt)
    c0 = np.float32(c0)
    c1 = np.float32(c1)
    return price*cumath.exp(c0*dt+c1*noise)

# Inputs:
#   paths - a 100x3000000 array to store the 100 time steps of prices for each 3,000,000 paths
#   dt - A constant value needed in the Monte Carlo algorithm
#   interest - A constant value needed in the Monte Carlo algorithm
#   volatility - A constant value needed in the Monte Carlo algorithm
def montecarlo(paths, dt, interest, volatility):
    c0 = interest - 0.5 * volatility ** 2
    c1 = volatility * np.sqrt(dt)

    # PyCUDA includes cuRAND, a CUDA library for generating random numbers.
    # See documentation for more information
    # https://documen.tician.de/pycuda/array.html#module-pycuda.curandom
    prng = curand()
    d_noises = gpuarray.empty(paths.shape[0], np.float32) # Allocate memory for arrays in GPU
    d_curLast= gpuarray.to_gpu(paths[:,0].astype(np.float32)) # Allocate and send starting array to GPU
    d_curNext = gpuarray.empty(paths.shape[0], np.float32) # Allocate memory for arrays in GPU

    for j in range(1, paths.shape[1]):   # for each time step
        # Generate gaussian noises for simulation
        prng.fill_normal(d_noises)
        # Call the GPU-acclereated step function to calculate the next set of prices
        d_curNext = step(d_curLast, dt, c0, c1, d_noises)
        # Copy calculated prices to host (CPU)
        paths[:,j] = d_curNext.get()
        # Swap the prices so the "last" prices was the one we just copied
        # to the host. We do this to avoid sending all price calculations back to the host
        # which wastes time in data transfer. We keep all data on the GPU to speed up our calculation.
        d_curNext, d_curLast = d_curLast, d_curNext


ts = timer()
montecarlo(paths, DT, InterestRate, Volatility)
te = timer()
elapsed = te - ts

ST = paths[:, -1]
PaidOff = np.maximum(paths[:, -1] - StrikePrice, 0)
print("Result")
fmt = '%20s: %s'
print(fmt % ('stock price', np.mean(ST)))
print(fmt % ('standard error', np.std(ST) / np.sqrt(NumPath)))
print(fmt % ('paid off', np.mean(PaidOff)))
optionprice = np.mean(PaidOff) * np.exp(-InterestRate * Maturity)
print(fmt % ('option price', optionprice))

print("... pycuda_option_pricing")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1139px;
            height:566px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-333.9875030517578px;left:-472px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_3881" style="top: 339px; left: 477px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/nvidia.png" width="20px">&nbsp;<span class="name">pycuda_option_pricing</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 534px; top: 369px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>