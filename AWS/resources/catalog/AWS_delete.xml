<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.8"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
	name="AWS_delete" projectName="Cloud Automation - Lifecycle" priority="normal"
	onTaskError="continueJobExecution" maxNumberOfExecution="2">
	<description>
    <![CDATA[ Delete AWS instance. ]]>
    </description>
	<genericInformation>
		<info name="group" value="public-objects"/>
		<info name="pca.service.id" value="AWS"/>
		<info name="pca.states" value="(RUNNING,FINISHED)(ERROR,FINISHED)"/>
		<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/amazon.png"/>
	</genericInformation>
	<taskFlow>

		<task name="delete_aws_instance_and_update_service_instance">
			<genericInformation>
				<info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/amazon.png"/>
			</genericInformation>
			<inputFiles>
				<files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
			</inputFiles>
			<forkEnvironment >
				<additionalClasspath>
					<pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
				</additionalClasspath>
			</forkEnvironment>
			<scriptExecutable>
				<script>
					<code language="groovy">
						<![CDATA[
org.ow2.proactive.pca.service.client.ApiClient
org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Retrieve variables
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Get the aws infos for the deletion
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
def aws_instance_name = service_instance_data.getVariables().get("instance_name")
def infrastructure_name = service_instance_data.getVariables().get("infrastructure_name")

// Define and execute the deletion cmd
def cmd = ["curl", "-X", "DELETE", "http://localhost:8080/connector-iaas/infrastructures/" + infrastructure_name + "/instances?instanceTag=" + aws_instance_name]
cmd.execute().waitForProcessOutput(System.out, System.err)

// Update the related service instance infos
service_instance_data.setInstanceStatus("FINISHED")
service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
	</taskFlow>
</job>
