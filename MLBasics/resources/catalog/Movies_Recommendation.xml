<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.11" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Movies_Recommendation" onTaskError="continueJobExecution" priority="normal" projectName="1. Basic Machine Learning" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd">
  <description>
    <![CDATA[ Recommend movies using a collaborative filtering algorithm. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="machine-learning-workflows"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/machine_learning.png"/>
<info name="Documentation" value="MLOS/MLOSUserGuide.html#_basic_ml"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task name="Collaborative_Filtering_Task">
      <description>
        <![CDATA[ The simplest task, ran by a python engine. ]]>
      </description>
      <variables>
        <variable inherited="false" name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/machine_learning.png"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/machine_learning.png"/>
      </genericInformation>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_dlm3/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
# Add 'PYTHON_COMMAND' Generic Info to run a specific Python version
# Go to http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_python_script_engine for more info
import platform
print("The current version of python you are using is: " + platform.python_version())

# Simple implementation of a Collaborative Filtering algorithm for Recommender Systems.
# https://github.com/madhug-nadig/Machine-Learning-Algorithms-from-Scratch
from math import sqrt

data = {
      "Manish": {
            "Interstellar": 4,
            "The Dark Knight": 5,
            "Wanted": 3,
            "Sucker Punch": 2,
            "Inception": 5,
            "The Conjuring": 3,
            "21 Jump Street": 4,
            "The Prestige": 5
            },
        "Madhu": {
              "Interstellar": 5,
            "The Dark Knight": 5,
            "Wanted": 1,
            "Devil": 3,
            "The Conjuring": 1,
            "21 Jump Street": 4,
            "Men in Black": 2

            },
        "Mansukh": {
              "Hot Tub Time Machine": 1,
              "Inception": 5,
              "Revenant": 3,
              "Avengers 1": 4,
              "Iron Man 2": 3,
              "Batman v Superman": 5,
              "Wanted": 4,

            },
        "Imran": {
              "Inception": 5,

            },
        "Kumar": {
              "Hot Tub Time Machine": 1,
              "Avengers 1": 4,
              "Avengers 2": 3,
              "The Departed": 5,
              "Interstellar": 4,
              "Fight Club": 5,
              "Vampires Suck": 1,
              "Twilight": 1
            },
        "Tori": {
              "Notebook": 5,
              "The Terminal": 4,
              "Twilight": 5,
              "Inception": 2,
              "The Dark Knight": 1,
              "Hot Tub Time Machine": 2,
              "The Vow": 4
            },
        "Jatin": {
            "Inception":5,
            "The Conjuring":4
            },
        "Latha": {
              "Twilight": 1
            }
      }

itemNames = [
        "Interstellar",
        "The Dark Knight",
        "Wanted",
        "Sucker Punch",
        "Inception",
        "The Conjuring",
        "21 Jump Street",
        "The Prestige",
        "Devil",
        "Men in Black",
        "Hot Tub Time Machine",
        "Revenant",
          "Avengers 1",
          "Iron Man 2",
          "Batman v Superman",
          "Avengers 2",
          "The Departed",
          "Fight Club",
          "Vampires Suck",
          "Twilight",
          "Notebook",
          "The Terminal",
          "The Vow",
          "Focus"
      ]

MAXrating = 5
MINrating = 1

def compute_similarity(item1,item2,userRatings):
  averages = {}
  for (key,ratings) in userRatings.items():
    averages[key] = (float(sum(ratings.values()))/len(ratings.values()))

  num = 0
  dem1 = 0
  dem2 = 0

  for (user,ratings) in userRatings.items():
    if item1 in ratings and item2 in ratings:
      avg = averages[user]
      num += (ratings[item1] - avg) * (ratings[item2] - avg)
      dem1 += (ratings[item1] - avg) ** 2
      dem2 += (ratings[item2] - avg) ** 2
  if dem1*dem2 == 0:
    return 0
  return num / (sqrt(dem1 * dem2))

def build_similarity_matrix(userRatings):
  similarity_matrix = {}

  for i in range(0,len(itemNames)):
    band = {}
    for j in range(0,len(itemNames)):
      if itemNames[i] != itemNames[j]:
        band[itemNames[j]] = compute_similarity(itemNames[i],itemNames[j],data)
    similarity_matrix[itemNames[i]] = band
  return similarity_matrix

def normalize(rating):
  num = 2 * (rating - MINrating) - (MAXrating - MINrating)
  den = (MAXrating - MINrating)
  return num / den

def denormalize(rating):
  return (((rating + 1) * (MAXrating - MINrating))/2 ) + MINrating

def prediction(username,item):
  num = 0
  den = 0
  for band,rating in data[username].items():
    num += sm[item][band] * normalize(rating)
    den += abs(sm[item][band])

  if den == 0:
    return 0
  return denormalize(num/den)

def recommendation(username,userRatings):
  recommend = []
  for item in itemNames:
    if item not in userRatings[username].keys():
      if prediction(username,item) >= 3.5:
        recommend.append(item)
  return recommend

sm = build_similarity_matrix(data)
# for k,i in sm.items():
#  print(k , i)
print("Recommendation for Jatin: ")
print(recommendation("Jatin",data))
print("Recommendation for Latha: ")
print(recommendation("Latha",data))
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1139px;
            height:566px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-333.9875030517578px;left:-451.75px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_2682" style="top: 339px; left: 456.75px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/machine_learning.png" width="20px">&nbsp;<span class="name">Collaborative_Filtering_Task</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 527.5px; top: 369px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>
