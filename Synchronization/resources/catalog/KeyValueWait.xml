<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.10"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
    name="KeyValueWait"
	projectName="3. Synchronization Examples"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2"
>
  <description>
    <![CDATA[ In this example usage of the Synchronization API, two sibling tasks wait for each other. Synchronization is made with an explicit wait call. ]]>
  </description>
  <genericInformation>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_wait_for_any_replicate.png"/>
  </genericInformation>
  <taskFlow>
    <task name="TaskA">
      <description>
        <![CDATA[ Unblock TaskB after 5 seconds ]]>
      </description>
      <genericInformation>
        <info name="TASK.ICON" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_wait_for_any_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="Init"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println "Sleeping 5 seconds"
Thread.sleep(5000)
println "Unlocking Task B"
synchronizationapi.put(variables.get("PA_JOB_ID"), "lock", false)
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="TaskB_Wait">
      <description>
        <![CDATA[ Wait for unblock ]]>
      </description>
      <genericInformation>
        <info name="TASK.ICON" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_wait_for_any_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="Init"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
println "Waiting for Task A"
synchronizationapi.waitUntil(variables.get("PA_JOB_ID"), "lock", "{k, x -> x == false}")
println "Task B has been unlocked by Task A"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Init">
      <description>
        <![CDATA[ Initialize Channel ]]>
      </description>
      <genericInformation>
        <info name="TASK.ICON" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_wait_for_any_replicate.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
jobid = variables.get("PA_JOB_ID")
synchronizationapi.createChannel(jobid, false)
synchronizationapi.put(jobid, "lock", true)
println "Channel " + jobid + " created."
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Clean">
      <description>
        <![CDATA[ Clean channel ]]>
      </description>
      <genericInformation>
        <info name="TASK.ICON" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_wait_for_any_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="TaskA"/>
        <task ref="TaskB_Wait"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
jobid = variables.get("PA_JOB_ID")
synchronizationapi.deleteChannel(jobid )
println "Channel " + jobid + " deleted."
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>