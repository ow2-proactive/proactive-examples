<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.10"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
    name="PCA_example_finish" projectName="Cloud Automation - Proactive Template"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2"
>
  <description>
    <![CDATA[ Undeploy ProActive service. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="cloud-automation"/>
    <info name="group" value="public-objects"/>
    <info name="pca.service.id" value="ProActive"/>
    <info name="pca.states" value="(RUNNING,FINISHED)"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/proactive.png"/>
  </genericInformation>
  <taskFlow>
    <task name="undeploy">
      <description>
        <![CDATA[ Undeploy ProActive service ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/proactive.png"/>
      </genericInformation>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
org.ow2.proactive.pca.service.client.ApiClient
org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Retrieve variables
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")
def status = "FINISHED"

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)


//Deploying instance
print "Undeploying ProActive instance"
print "ProActive instance undeployed"

// Update the related service instance status
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)

service_instance_data.setInstanceStatus(status)

service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>