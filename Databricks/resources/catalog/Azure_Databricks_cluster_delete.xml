<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.10"
        xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
        name="Azure_Databricks_cluster_delete" projectName="Azure Big Data"
        priority="normal"
        onTaskError="continueJobExecution"
        maxNumberOfExecution="2"
>
  <variables>
    <variable name="domain" value="westeurope.azuredatabricks.net"/>
    <variable name="token" value=""/>
    <variable name="cluster_id" value="" />
  </variables>
  <description>
    <![CDATA[ Removes a Databricks Spark cluster given its id. ]]>
  </description>
  <genericInformation>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/databricks.png"/>
    <info name="Documentation" value="https://docs.azuredatabricks.net/api/latest/index.html"/>
  </genericInformation>
  <taskFlow>

    <task name="Azure_Databricks_cluster_delete">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/databricks.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.JsonBuilder
import org.apache.http.entity.StringEntity

// Retrieve variables
def domain = variables.get("domain")
def token = variables.get("token")
def cluster_id = variables.get("cluster_id")

// Build the command params
def json = new JsonBuilder([cluster_id: cluster_id])
print json.toString()

// Build the command
def query = "https://" + domain + "/api/2.0/clusters/delete"
def post = new org.apache.http.client.methods.HttpPost(query)
post.addHeader("Content-Type", "application/json")
post.addHeader("Authorization", "Basic " + ("token:" + token).bytes.encodeBase64().toString())
post.setEntity(new StringEntity(json.toString()));

// Execute the command
def response = org.apache.http.impl.client.HttpClientBuilder.create().build().execute(post)
println response
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>