<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="Terraform_AWS_EC2_Instances_3" projectName="Terraform workflows" tags="IaC,Infrastructure as Code,Terraform,AWS,SSH connection,Wetty" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="1"  >
  <variables>
    <variable name="AWS_ACCESS_KEY" value="AKIAXDWXS44FJZMSTNEW" model="PA:NOT_EMPTY_STRING" description="AWS access key used by Terraform to connect to AWS EC2 services." group="AWS"  />
    <variable name="AWS_SECRET_KEY" value="AKIAXDWXS44FJZMSTNEW" model="PA:CREDENTIAL" description="AWS secret key used by Terraform to connect to AWS EC2 services. Must be added to the third-party credentials vault." group="AWS"  />
    <variable name="AWS_AMI" value="ami-054e881150baee51a" model="PA:NOT_EMPTY_STRING" description="AWS Image for EC2 instances to be deployed" group="AWS"  />
    <variable name="AWS_INSTANCE_TYPE" value="t2.micro" model="PA:NOT_EMPTY_STRING" description="Instance size for the EC2 instances to be deployed (see &lt;a href=&#39;https://aws.amazon.com/fr/ec2/instance-types/&#39; target=_blank &gt;Instance size definitions&lt;/a&gt;)." group="AWS"  />
    <variable name="AWS_INSTANCES_NUMBER" value="3" model="PA:INTEGER[1,5]" description="Number of AWS EC2 instances to be deployed" group="AWS"  />
    <variable name="USER_OF_AWS_AMI" value="ubuntu" model="PA:NOT_EMPTY_STRING" description="Standard user for the chosen AWS AMI" group="AWS" advanced="true" />
  </variables>
  <description>
    <![CDATA[ A workflow that uses the Terraform IaC tool to deploy AWS EC2 instances. The workflow requires Docker or Terraform to be installed in the underlying host (where it will be executed). The workflow takes as input the Terraform file 'terraform_aws_ec2_instances.tf' stored in the bucket 'it-infrastructure-as-code'. The workflow deploys a number of AWS EC2 instances given as input, then waits for an action from the user to: (i) perform SSH connections to the deployed EC2 instances, or (ii) finish SSH connection services and terminate the deployed AWS EC2 instances. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="it-infrastructure-as-code"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/terraform.png"/>
    <info name="documentation" value="https://www.terraform.io/"/>
    <info name="group" value="public-objects"/>
    <info name="submission.mode" value="studio"/>
  </genericInformation>
  <taskFlow>
    <task name="deploy-ec2-instances" 
    
    
    
    
    fork="true">
      <description>
        <![CDATA[ A bash task that prepares Terraform setup and files for the deployment of AWS EC2 instances, then executes Terraform commands to perform the deployment. ]]>
      </description>
      <genericInformation>
        <info name="PRE_SCRIPT_AS_FILE" value="terraform_aws_ec2_instances.tf"/>
      </genericInformation>
      <depends>
        <task ref="read_aws_access_credentials"/>
      </depends>
      <pre>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/it-infrastructure-as-code/resources/terraform_aws_ec2_instances.tf/raw"></file>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
workDir="/tmp/terraform-aws/$variables_PA_JOB_ID"
mkdir -p $workDir
cp terraform_aws_ec2_instances.tf $workDir
cd  $workDir

terraformBaseCommand="terraform"
docker version
if [ $? -eq 0 ] 
then
 echo "The Docker container for Terraform will be used" 
 terraformBaseCommand="docker run --rm -i -v `pwd`:/workdir hashicorp/terraform:latest -chdir=/workdir"
else 
 terraform -version
 if [ $? -ne 0 ] 
 then
   echo "Error: Docker and Terraform are not installed."
   exit 1
 fi
fi

echo "aws_access_key_id     = \"$variables_AWS_ACCESS_KEY\"" > $workDir/terraform.tfvars
echo "aws_secret_access_key = \"$variables_AWS_ACCESS_SECRET\"" >> $workDir/terraform.tfvars
echo "aws_private_key  = \"activeeon_tf_aws_private_key_$variables_PA_JOB_ID\"" >> $workDir/terraform.tfvars
echo "aws_keypair_name = \"activeeon_tf_aws_keypair_$variables_PA_JOB_ID\"" >> $workDir/terraform.tfvars
echo "aws_instances_count = \"$variables_AWS_INSTANCES_NUMBER\"" >> $workDir/terraform.tfvars
echo "aws_ami = \"$variables_AWS_AMI\"" >> $workDir/terraform.tfvars
echo "aws_instance_type = \"$variables_AWS_INSTANCE_TYPE\"" >> $workDir/terraform.tfvars

$terraformBaseCommand init
$terraformBaseCommand fmt
$terraformBaseCommand validate
$terraformBaseCommand plan -out "aws_tf_plan_$variables_PA_JOB_ID"
$terraformBaseCommand apply "aws_tf_plan_$variables_PA_JOB_ID"
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
import com.google.common.net.MediaType

def jobID=variables.get("PA_JOB_ID")
def token="activeeon_tf_aws_${jobID}"

rmapi.connect()
rmapi.addNodeToken(variables.get("PA_NODE_URL"),token)
variables.put("NODE_TOKEN",token)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            582.484375
        </positionTop>
        <positionLeft>
            683
        </positionLeft>
      </metadata>
    </task>
    <task name="undeploy_ec2_instances" 
    
    
    
    
    fork="true">
      <description>
        <![CDATA[ A bash task that executes Terraform commands to terminate the deployed AWS EC2 instances. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="${NODE_TOKEN}"/>
      </genericInformation>
      <depends>
        <task ref="stop_ssh_connection"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
workDir="/tmp/terraform-aws/$variables_PA_JOB_ID"
cd  $workDir

terraformBaseCommand="terraform"
docker version
if [ $? -eq 0 ] 
then
 echo "The Docker container for Terraform will be used" 
 terraformBaseCommand="docker run --rm -i -v `pwd`:/workdir hashicorp/terraform:latest -chdir=/workdir"
else 
 terraform -version
 if [ $? -ne 0 ] 
 then
   echo "Error: Docker and Terraform are not installed."
   exit 1
 fi
fi

$terraformBaseCommand destroy --auto-approve

rm -rf $workDir/*
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="end"></controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
//Remove the token added to ProActive node
rmapi.connect()
rmapi.removeNodeToken(variables.get("PA_NODE_URL"), variables.get("NODE_TOKEN"))

//Remove External Endpoint Url
schedulerapi.connect()
schedulerapi.removeExternalEndpointUrl(variables.get("PA_JOB_ID"), "AWS EC2")
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            1390.484375
        </positionTop>
        <positionLeft>
            737.5
        </positionLeft>
      </metadata>
    </task>
    <task name="download_private_key" 
    
    
    
    preciousResult="true" 
    fork="true">
      <description>
        <![CDATA[ A groovy task that: (i) displays the public DNS of each of the deployed AWS EC2 instances, and (ii) allows to download the SSH private key needed for accessing these instances ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="${NODE_TOKEN}"/>
      </genericInformation>
      <depends>
        <task ref="deploy-ec2-instances"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.io.FileType

def jobID=variables.get("PA_JOB_ID")
def workDir="/tmp/terraform-aws/${jobID}"

// Display the AWS portal endpoint
schedulerapi.connect()
schedulerapi.addExternalEndpointUrl(jobID, "AWS EC2", "https://aws.amazon.com/ec2/?nc2=h_ql_prod_cp_ec2" , "/automation-dashboard/styles/patterns/img/wf-icons/amazon.png")

// Acquire and display SSH private key
fileName="activeeon_tf_aws_private_key_${jobID}"
file = new File("${workDir}/artefacts/${fileName}")
result = file.getBytes()
resultMetadata.put("file.name", fileName.toString())
variables.put("PRIVATE_KEY",file.getText())
println(variables.get("PRIVATE_KEY"))

// Acquire and display the FQDN of instances
def LinkedList instancesList = []

numberOfInstances=variables.get("AWS_INSTANCES_NUMBER")
def artefactsDir = new File(workDir+"/artefacts")
artefactsDir.eachFileRecurse (FileType.FILES) { file ->
  println(file.name)
    if (file.name.startsWith("aws_instance_")){
        println(file.name +" - "+ file.getText())
        resultMap.put(file.name,file.getText())
        instancesList.add(file.getText().trim())
    }
}
variables.put("INSTANCES_LIST",instancesList)
println(variables.get("INSTANCES_LIST"))

variables.put("SSH_SERVICE_COUNTER", 0)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            723.484375
        </positionTop>
        <positionLeft>
            695
        </positionLeft>
      </metadata>
    </task>
    <task name="read_aws_access_credentials" 
    
    
    
    
    fork="true">
      <description>
        <![CDATA[ A groovy task that reads the AWS access credentials from the ProActive buit-in vault (called 3rd Party Credentials vault) ]]>
      </description>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
variables.put("AWS_ACCESS_SECRET",credentials.get(variables.get("AWS_ACCESS_KEY")))
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            437.484375
        </positionTop>
        <positionLeft>
            658
        </positionLeft>
      </metadata>
    </task>
    <task name="start_ssh_connection" 
    
    
    
    
    fork="false">
      <description>
        <![CDATA[ Start a SSH connection in the browser to a given EC2 instance. ]]>
      </description>
      <variables>
        <variable name="SSH_INSTANCE_NAME" value="ssh-via-browser-${PA_JOB_ID}" inherited="false" model="PA:NOT_EMPTY_STRING" description="Name of the SSH service instance."  advanced="false" hidden="false"/>
        <variable name="SERVICE_ACTIVATION_WORKFLOW" value="service-automation/SSH_Terminal_Via_Browser" inherited="false" model="PA:CATALOG_OBJECT(Workflow/psa,,,SSH_Terminal_Via_Browser%)" description="The SSH service activation workflow."  advanced="false" hidden="false"/>
        <variable name="INSTANCE_NAME" value="" inherited="true"  description="Instance name of RabbitMQ"  advanced="false" hidden="false"/>
        <variable name="PROXYFIED" value="" inherited="true"  description="If True, requests to RabbitMQ are sent via a proxy server."  advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png"/>
        <info name="task.documentation" value="PSA/PSAUserGuide.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw" language="groovy">
            <arguments>
              <argument value="true"/>
              <argument value="false"/>
              <argument value="INSTANCE_NAME"/>
              <argument value="PROXYFIED"/>
              <argument value="USE_MANAGED_HOST_LIST"/>
              <argument value="SSH_TARGET_HOST"/>
              <argument value="SSH_USER"/>
              <argument value="SSH_PORT"/>
              <argument value="AUTHENTICATION_METHOD"/>
              <argument value="SSH_PRIVATE_KEY"/>
              <argument value="ENDPOINT_ID"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
def LinkedList instancesList = variables.get("INSTANCES_LIST")
if (!instancesList.isEmpty()){
    instancesList.remove(variables.get("EC2_INSTANCE"))
    variables.put("INSTANCES_LIST",instancesList)
}
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            1118.5
        </positionTop>
        <positionLeft>
            476
        </positionLeft>
      </metadata>
    </task>
    <task name="wait_for_user_action" 
    
    onTaskError="cancelJob" 
    
    
    fork="true">
      <description>
        <![CDATA[ A groovy task that waits for a user action to: (i) perform SSH connections to the deployed EC2 instances, or (ii) finish SSH connection services and terminate the deployed AWS EC2 instances. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/signal-wait.png"/>
      </genericInformation>
      <depends>
        <task ref="download_private_key"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.scheduler.common.job.JobVariable

// Undeploy_EC2_Instances signal
def signals = ['Undeploy_EC2_Instances']
signalapi.readyForSignal("Undeploy_EC2_Instances")

// Connect_via_SSH signal
def LinkedList instancesList = variables.get("INSTANCES_LIST")

if (!instancesList.isEmpty()){
    
    signals.add('Connect_via_SSH')
    
    defaultInstance=instancesList?.first()
    instances = instancesList.join(",")

    List <JobVariable> sshVariables = new java.util.ArrayList<JobVariable>()
    sshVariables.add(new JobVariable("EC2_Instance", "${defaultInstance}", "PA:LIST(${instances})", "EC2 instance to get connected to", "SSH connection", false, false))

    signalapi.readyForSignal("Connect_via_SSH", sshVariables)
}

// Handle signals
println("Waiting for user action ... ")
receivedSignal = signalapi.waitForAny(signals.toSet())
println(receivedSignal)

signals.each {  signalapi.removeSignal("ready_"+it) }

if (receivedSignal.getName() == "Undeploy_EC2_Instances") {
    variables.put("SIGNAL_ACTION","Undeploy_EC2_Instances")
    println("Undeploying EC2 instances ...")
    
} else if (receivedSignal.getName() == "Connect_via_SSH"){
    instance = receivedSignal.getUpdatedVariables().get("EC2_Instance")

    variables.put("SIGNAL_ACTION","Connect_via_SSH")
    variables.put("EC2_INSTANCE",instance)

    println("Connecting to ${instance} via SSH ...")
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow  block="start">
        <if target="start_ssh_connection"
        else="check_ssh_services"
        continuation="check_loop">
          <script>
            <code language="groovy">
              <![CDATA[
action = variables.get("SIGNAL_ACTION")

if ( action == "Connect_via_SSH" ) {
    branch = "if"
} else  if ( action == "Undeploy_EC2_Instances" ) {
    branch = "else"
}
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
action = variables.get("SIGNAL_ACTION")

if ( action == "Connect_via_SSH" ) {
    jobID = variables.get("PA_JOB_ID")
    counter = variables.get("SSH_SERVICE_COUNTER") as int
    host = variables.get("EC2_INSTANCE")
    user = variables.get("USER_OF_AWS_AMI")
 
    variables.put("INSTANCE_NAME", "shell-terminal-${jobID}-${counter}")
    variables.put("PROXYFIED", "True")
    variables.put("ENDPOINT_ID", host)
    
    variables.put("USE_MANAGED_HOST_LIST", "False")
    variables.put("SSH_TARGET_HOST", host)
    variables.put("SSH_USER", user)
    variables.put("SSH_PORT", "22")
	
    variables.put("AUTHENTICATION_METHOD", "SSH_PRIVATE_KEY")

    schedulerapi.connect() 
	schedulerapi.putThirdPartyCredential("${user}@${host}",variables.get("PRIVATE_KEY")) 
    
    variables.put("SSH_SERVICE_COUNTER", counter+1)  
}
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            857.5
        </positionTop>
        <positionLeft>
            717
        </positionLeft>
      </metadata>
    </task>
    <task name="check_loop" 
    
    
    
    
    fork="true">
      <description>
        <![CDATA[ A dummy task to loop over user actions. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow  block="end">
        <loop target="wait_for_user_action">
          <script>
            <code language="groovy">
              <![CDATA[
signalAction=variables.get("SIGNAL_ACTION")

loop = signalAction=="Undeploy_EC2_Instances" ? false : true

variables.put("SIGNAL_ACTION","")
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            1115.5
        </positionTop>
        <positionLeft>
            988.484375
        </positionLeft>
      </metadata>
    </task>
    <task name="stop_ssh_connection" 
    
    
    
    
    fork="true">
      <description>
        <![CDATA[ A loop task that finishes SSH connection  services iteratively. ]]>
      </description>
      <variables>
        <variable name="INSTANCE_ID" value="" inherited="false"    advanced="false" hidden="false"/>
        <variable name="SERVICE_ACTION_WORKFLOW" value="service-automation/Finish_SSH_Terminal_Via_Browser" inherited="false" model="PA:CATALOG_OBJECT(Workflow/psa,,,%Finish_SSH_Terminal_Via_Browser)"   advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png"/>
      </genericInformation>
      <depends>
        <task ref="check_ssh_services"/>
      </depends>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
def counter = variables.get("SSH_SERVICE_COUNTER") as int
def jobID = variables.get("PA_JOB_ID")
variables.put("SSH_SERVICE_COUNTER", counter-1)
variables.put("INSTANCE_NAME", "shell-terminal-${jobID}-${counter-1}")
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.CatalogRestApi
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.CloudAutomationWorkflow
import org.ow2.proactive.pca.service.client.model.ServiceDescription
import java.util.concurrent.TimeoutException
import com.google.common.base.Strings

println("BEGIN " + variables.get("PA_TASK_NAME"))


    try {
    // Get schedulerapi access
    schedulerapi.connect()

    // Acquire session id
    def sessionId = schedulerapi.getSession()

    // Define PCA URL
    def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')

    // Connect to APIs
    def apiClient = new ApiClient()
    apiClient.setBasePath(pcaUrl)
    //apiClient.setDebugging(true)
    def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)
    def instanceName = variables.get("INSTANCE_NAME")
    def instanceId = (!variables.get("INSTANCE_ID") && instanceName)? variables.get("INSTANCE_ID_" + instanceName) : variables.get("INSTANCE_ID")
    if (!instanceId && !instanceName){
        throw new IllegalArgumentException("You have to specify an INSTANCE_NAME or an INSTANCE_ID. Empty value for both is not allowed.");
    }

    println("INSTANCE_ID: " + instanceId)
	println(instanceName)
    println(variables.get("INSTANCE_ID_" + instanceName))

    def bucketName
    def isActionExists = false
    def catalogRestApi = new CatalogRestApi(apiClient)
    def actionVariables = new HashMap()

    def action = variables.get("ACTION")
    def serviceActionWorkflow = variables.get("SERVICE_ACTION_WORKFLOW")

    if (Strings.isNullOrEmpty(action) && Strings.isNullOrEmpty(serviceActionWorkflow)) {
        throw new IllegalArgumentException("You have to provide an ACTION value or a SERVICE_ACTION_WORKFLOW. Empty value is not allowed.");
    }

    if (!Strings.isNullOrEmpty(action)) {
        List<CloudAutomationWorkflow> listExecutableActions = catalogRestApi.listExecutableActionsByInstanceIdUsingGET(sessionId, instanceId.toString()).get(instanceId.toString())
        for (CloudAutomationWorkflow actionIterator : listExecutableActions) {
            if (actionIterator.getName().equals(action)){
                bucketName = actionIterator.getBucket()
                //retrieve default action variables
                actionVariables = actionIterator.getVariables().collectEntries {var -> [var.getName(), var.getValue()]}
                isActionExists = true
                break
            }
        }
    } else if (!Strings.isNullOrEmpty(serviceActionWorkflow)) {
        def serviceActionWorkflowSplits = serviceActionWorkflow.split('/')
        bucketName = serviceActionWorkflowSplits[0]
        action = serviceActionWorkflowSplits[1]
        CloudAutomationWorkflow executableAction = catalogRestApi.getExecutableActionByCatalogObjectUsingGET(sessionId, instanceId, bucketName, action)
        println("Action Bucket_name: " + bucketName + ", Action_workflow_name: " + action)
        if (executableAction != null) {
            actionVariables = executableAction.getVariables().collectEntries {var -> [var.getName(), var.getValue()]}
            isActionExists = true
        }
    }
    if(!isActionExists){
        throw new IllegalArgumentException("The provided ACTION: " + action + " does not belong to the existing possible actions that can be applied to the current state of the service. You have to specify a valid action.")
    }

    // Retrieve and update workflow variables
    if (binding.variables["args"]){
        for (String var: args){
            actionVariables.put(var, variables.get(var))
        }
    }

    // Execute action on service
    ServiceDescription service = new ServiceDescription()
    service.setBucketName(bucketName)
    service.setWorkflowName(action)
    if( !actionVariables.isEmpty() ){
        actionVariables.each{ k, v -> service.putVariablesItem("${k}", "${v}") }
    }
    def serviceInstanceData = serviceInstanceRestApi.launchServiceInstanceActionUsingPUT(sessionId, instanceId as int, service, variables.get("PA_JOB_ID"))

    if (action.toLowerCase().contains("finish")) {
        try {
            schedulerapi.waitForJob(serviceInstanceData.getJobSubmissions().get(0).getJobId().toString(), 180000)
        } catch (TimeoutException toe) {
            println("[warning] Timeout reached. Disable to wait until the PCA service " + instanceId + " finishes." )
        }
    }}
    catch (Exception ex) {
        println("[error] Unable to finalize the PCA service. It was already finished?" )
        ex.printStackTrace();
    }


	println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
          <arguments>
            <argument value="INSTANCE_NAME"/>
          </arguments>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="stop_ssh_connection">
          <script>
            <code language="groovy">
              <![CDATA[
def counter = variables.get("SSH_SERVICE_COUNTER") as int
    
loop = true

if (counter == 0){
    loop = false
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            1250.453125
        </positionTop>
        <positionLeft>
            720.28125
        </positionLeft>
      </metadata>
    </task>
    <task name="check_ssh_services" 
    
    
    
    
    fork="true">
      <description>
        <![CDATA[ A dummy task that starts the else branch (to finishSSH connection services and terminate the deployed AWS EC2 instances). ]]>
      </description>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="start"></controlFlow>
      <metadata>
        <positionTop>
            1119.453125
        </positionTop>
        <positionLeft>
            739.28125
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2725px;
            height:3120px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-432.484375px;left:-471px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_69" style="top: 582.484px; left: 683px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A bash task that prepares Terraform setup and files for the deployment of AWS EC2 instances, then executes Terraform commands to perform the deployment."><img src="/studio/images/LinuxBash.png" width="20px">&nbsp;<span class="name">deploy-ec2-instances</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_72" style="top: 1390.48px; left: 737.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A bash task that executes Terraform commands to terminate the deployed AWS EC2 instances."><img src="/studio/images/LinuxBash.png" width="20px">&nbsp;<span class="name">undeploy_ec2_instances</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_75" style="top: 723.484px; left: 695px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A groovy task that: (i) displays the public DNS of each of the deployed AWS EC2 instances, and (ii) allows to download the SSH private key needed for accessing these instances"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">download_private_key</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_78" style="top: 437.484px; left: 658px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A groovy task that reads the AWS access credentials from the ProActive buit-in vault (called 3rd Party Credentials vault)"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">read_aws_access_credentials</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_81" style="top: 1118.5px; left: 476px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Start a SSH connection in the browser to a given EC2 instance."><img src="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png" width="20px">&nbsp;<span class="name">start_ssh_connection</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon" class="glyphicon glyphicon-arrow-right"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_84" style="top: 857.5px; left: 717px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A groovy task that waits for a user action to: (i) perform SSH connections to the deployed EC2 instances, or (ii) finish SSH connection services and terminate the deployed AWS EC2 instances."><img src="/automation-dashboard/styles/patterns/img/wf-icons/signal-wait.png" width="20px">&nbsp;<span class="name">wait_for_user_action</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_87" style="top: 1115.5px; left: 988.484px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A dummy task to loop over user actions."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">check_loop</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_90" style="top: 1250.45px; left: 720.281px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A loop task that finishes SSH connection  services iteratively."><img src="/automation-dashboard/styles/patterns/img/wf-icons/ssh.png" width="20px">&nbsp;<span class="name">stop_ssh_connection</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon" class="glyphicon glyphicon-arrow-right"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_93" style="top: 1119.45px; left: 739.281px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A dummy task that starts the else branch (to finishSSH connection services and terminate the deployed AWS EC2 instances)."><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">check_ssh_services</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><svg style="position:absolute;left:734.5px;top:476.5px" width="26.5" height="106" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 5.5 105 C 15.5 55 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M7.808000000000001,79.68 L12.824134651406077,59.092664253018 L6.442652114007716,65.7467367372099 L-1.1091286113840306,60.45801213901028 L7.808000000000001,79.68" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M7.808000000000001,79.68 L12.824134651406077,59.092664253018 L6.442652114007716,65.7467367372099 L-1.1091286113840306,60.45801213901028 L7.808000000000001,79.68" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:776.5px;top:1289.5px" width="47" height="101" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 26 100 C 36 50 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M26.292266000000005,75.71226250000001 L26.44696393501858,54.52320710461012 L21.76395418052783,62.46483286004235 L13.199534295060923,59.0515189240823 L26.292266000000005,75.71226250000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M26.292266000000005,75.71226250000001 L26.44696393501858,54.52320710461012 L21.76395418052783,62.46483286004235 L13.199534295060923,59.0515189240823 L26.292266000000005,75.71226250000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:740px;top:621.5px" width="35.5" height="102" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 14.5 101 C 24.5 51 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M15.933586375,76.61301725 L18.79532954624336,55.61753140132667 L13.135658701900123,62.895451841513626 L5.077764137756988,58.41545907442655 L15.933586375,76.61301725" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M15.933586375,76.61301725 L18.79532954624336,55.61753140132667 L13.135658701900123,62.895451841513626 L5.077764137756988,58.41545907442655 L15.933586375,76.61301725" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:754.5px;top:762.5px" width="39.5" height="96" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 18.5 95 C 28.5 45 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M19.612773,71.70201 L21.28431689423527,50.57842268606005 L16.04466772966539,58.16433572485915 L7.74664261909442,54.146527956394664 L19.612773,71.70201" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M19.612773,71.70201 L21.28431689423527,50.57842268606005 L16.04466772966539,58.16433572485915 L7.74664261909442,54.146527956394664 L19.612773,71.70201" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:465.5px;top:897.5px" width="262" height="222" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 221 C -10 171 251 50 241 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M40.499514000000005,167.76728599999998 L60.54913587684877,160.91070794710893 L51.506082989608764,159.11538221661317 L51.89723209346197,149.90413895750018 L40.499514000000005,167.76728599999998" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M40.499514000000005,167.76728599999998 L60.54913587684877,160.91070794710893 L51.506082989608764,159.11538221661317 L51.89723209346197,149.90413895750018 L40.499514000000005,167.76728599999998" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_113" style="position: absolute; transform: translate(-50%, -50%); left: 596px; top: 1008px;">if</div><svg style="position:absolute;left:706.5px;top:897.5px" width="43" height="222" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 22 221 C 32 171 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M21.230563,171.25423025 L25.428618810604384,150.48462920878953 L19.315272855079293,157.38586107187493 L11.560249632479305,152.39991935371026 L21.230563,171.25423025" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M21.230563,171.25423025 L25.428618810604384,150.48462920878953 L19.315272855079293,157.38586107187493 L11.560249632479305,152.39991935371026 L21.230563,171.25423025" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_117" style="position: absolute; transform: translate(-50%, -50%); left: 727.5px; top: 1008px;">else</div><svg style="position:absolute;left:706.5px;top:897.5px" width="292" height="219" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 271 218 C 281 168 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M223.48034374999997,164.15087499999998 L210.9619798949416,147.0543675674169 L211.9422599909588,156.22164911285623 L203.03275400779788,158.59245132645808 L223.48034374999997,164.15087499999998" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M223.48034374999997,164.15087499999998 L210.9619798949416,147.0543675674169 L211.9422599909588,156.22164911285623 L203.03275400779788,158.59245132645808 L223.48034374999997,164.15087499999998" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_121" style="position: absolute; transform: translate(-50%, -50%); left: 852px; top: 1006.5px;">continuation</div><svg style="position:absolute;left:849.5px;top:847.5px" width="239" height="319" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 0 C 50 -50 228 268 238 218 " transform="translate(0.5,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M64.13412500000001,26.933500000000006 L83.15141278348322,36.2792351428435 L73.95363176030433,36.91234196609696 L73.17257081738627,46.09874190314782 L64.13412500000001,26.933500000000006" class="" stroke="#316b31" fill="#316b31" transform="translate(0.5,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M64.13412500000001,26.933500000000006 L83.15141278348322,36.2792351428435 L73.95363176030433,36.91234196609696 L73.17257081738627,46.09874190314782 L64.13412500000001,26.933500000000006" class="" stroke="#316b31" fill="#316b31" transform="translate(0.5,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_127" style="position: absolute; transform: translate(-50%, -50%); left: 983.5px; top: 1006.5px;">loop</div><svg style="position:absolute;left:776.5px;top:1158.5px" width="38" height="92" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 91 C -10 41 27 50 17 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.3194477500000013,68.56069325 L10.351557105796513,50.87488974391145 L2.098531350281392,54.98433811063953 L-3.224798033563964,47.45691064363005 L-1.3194477500000013,68.56069325" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.3194477500000013,68.56069325 L10.351557105796513,50.87488974391145 L2.098531350281392,54.98433811063953 L-3.224798033563964,47.45691064363005 L-1.3194477500000013,68.56069325" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:843.5px;top:1239.5px" width="61" height="61" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C 50 -10 -10 50 0 0 " transform="translate(10.5,10.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.55903999999999,26.37184000000001 L31.950657715430147,15.848133532719785 L22.731266562420885,15.794966176056539 L21.37378389148668,6.67590697029889 L13.55903999999999,26.37184000000001" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,10.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.55903999999999,26.37184000000001 L31.950657715430147,15.848133532719785 L22.731266562420885,15.794966176056539 L21.37378389148668,6.67590697029889 L13.55903999999999,26.37184000000001" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,10.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_136" style="position: absolute; transform: translate(-50%, -50%); left: 868.5px; top: 1269.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 740.5px; top: 612px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 740.5px; top: 572px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 803px; top: 1420px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 803px; top: 1380px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 755px; top: 753px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 755px; top: 713px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 735px; top: 467px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 533.5px; top: 1149px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 466px; top: 1109px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 773.5px; top: 888px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 773.5px; top: 848px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 707px; top: 888px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 840px; top: 888px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 1028px; top: 1146px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 978px; top: 1106px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 1078px; top: 1106px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 777px; top: 1280px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 777px; top: 1240px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 844px; top: 1240px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 844px; top: 1280px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 794px; top: 1149px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 729px; top: 1109px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>