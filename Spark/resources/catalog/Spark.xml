<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.8"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
	name="Spark" projectName="Cloud Automation - Deployment" priority="normal"
	onTaskError="continueJobExecution" maxNumberOfExecution="2">
	<variables>
		<variable name="spark_UI_port" value="5000" />
		<variable name="instance_name" value="my-instance" />
		<variable name="network_name" value="my-net" />
	</variables>
	<description>
    	<![CDATA[ Deployment of Spark. ]]>
    </description>
	<genericInformation>
   	    <info name="pca.service.id" value="HDFS-Spark" />
		<info name="pca.states" value="(SWARM_DEPLOYED,SPARK_DEPLOYED)(HDFS_DEPLOYED,HDFS_SPARK_DEPLOYED)"/>
	    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" />
	    <info name="Documentation" value="http://activeeon.com/resources/activeeon-deploy-swarm-hdfs-spark.pdf" />
	    <info name="group" value="public-objects" />
	</genericInformation>
	<taskFlow>
		<task name="get_resources_from_service_instance">
			<inputFiles>
				<files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
			</inputFiles>
			<forkEnvironment >
				<additionalClasspath>
					<pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
				</additionalClasspath>
			</forkEnvironment>
			<scriptExecutable>
				<script>
					<code language="groovy">
						<![CDATA[
org.ow2.proactive.pca.service.client.ApiClient
org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Retrieve variables
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Get the targeted resources the PCA service instance
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
def service_instance_variables = service_instance_data.getVariables()
variables.put("node_source_name", service_instance_variables.get("node_source_name"))
variables.put("nb_nodes", service_instance_variables.get("nb_nodes"))
variables.put("subnet", service_instance_variables.get("subnet"))

// Get optional namenode IP address in overlay
def service_instance_end_points = service_instance_data.getInstanceEndpoints()
variables.put("namenode_IP_address", service_instance_end_points.get("namenode_IP_address"))
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="start_spark_master">
			<genericInformation>
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" />
			</genericInformation>
			<depends>
				<task ref="get_resources_from_service_instance"/>
			</depends>
			<selection>
				<script>
					<code language="groovy">
						<![CDATA[
if (variables.get("node_source_name").equals(System.getProperty("proactive.node.nodesource"))) {
    selected = true
} else {
   selected = false
}
]]>
					</code>
				</script>
			</selection>
			<scriptExecutable>
				<script>
					<code language="groovy">
            <![CDATA[
import org.objectweb.proactive.core.util.ProActiveInet
import org.apache.commons.net.util.SubnetUtils

println "start_spark_master ..."

// Retrieve variables
def instance_name = variables.get("instance_name")
def spark_UI_port = variables.get("spark_UI_port")
def namenode_IP_address = variables.get("namenode_IP_address")
def network_name = variables.get("network_name")
def subnet = variables.get("subnet")

// Get the current IP address and store it
// Consider the first eligible IP address without including those in the overlay
def subnet_utils = new SubnetUtils(subnet)
def spark_master_IP_address = ProActiveInet.getInstance().getEligibleAdresses().findAll{ !subnet_utils.getInfo().isInRange(it.getHostAddress()) }.get(0).getHostAddress()
println "HI spark_master_IP_address " + spark_master_IP_address
variables.put("spark_master_IP_address", spark_master_IP_address)

def spark_master_container_name = instance_name + "-spark-master"

// Start the spark master docker container
def cmd = ["docker", "run", "-dit", "--publish", spark_UI_port + ":8080", "--name", spark_master_container_name, "--net", network_name, "activeeon/hdfs-spark:1.0"]
cmd.execute().waitForProcessOutput(System.out, System.err)

// Spark master configuration + Start
def docker_config_command = "sed s/IP:PORT/" + namenode_IP_address + ":9000/ \$HADOOP_HOME/etc/hadoop/core-site.xml.template > \$HADOOP_HOME/etc/hadoop/core-site.xml; \$SPARK_HOME/sbin/start-master.sh"
cmd = ["docker", "exec", spark_master_container_name, "/bin/sh", "-c", docker_config_command]
cmd.execute().waitForProcessOutput(System.out, System.err)

// Ensure Master is started
cmd = ["docker", "exec", spark_master_container_name, "jps"]
def output = new StringBuilder()

while (!output.toString().contains("Master")){
	cmd.execute().waitForProcessOutput(output, System.err)
	sleep(1000)
}

println "... start_spark_master"
]]>
					</code>
				</script>
			</scriptExecutable>
			<controlFlow>
				<replicate>
					<script>
						<code language="groovy">
							<![CDATA[
runs=variables.get("nb_nodes")
]]>
						</code>
					</script>
				</replicate>
			</controlFlow>
		</task>
		<task name="start_spark_slave">
			<genericInformation>
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" />
			</genericInformation>
			<depends>
				<task ref="start_spark_master" />
			</depends>
			<selection>
				<script>
					<code language="groovy">
            <![CDATA[
if (variables.get("node_source_name").equals(System.getProperty("proactive.node.nodesource"))) {
    selected = true
} else {
   selected = false
}
]]>
					</code>
				</script>
			</selection>
			<scriptExecutable>
				<script>
					<code language="groovy">
            <![CDATA[
println "start_spark_slave ..."

// Retrieve variables
def instance_name = variables.get("instance_name")
def task_id = variables.get("PA_TASK_REPLICATION") as Integer
def network_name = variables.get("network_name")
def namenode_IP_address = variables.get("namenode_IP_address")

def spark_master_container_name = instance_name + "-spark-master"
def spark_slave_container_name = variables.get("instance_name") + "-spark-slave-" + task_id

// Start the spark slave container
def cmd = ["docker", "run", "-dit", "--name", spark_slave_container_name, "--net", network_name, "activeeon/hdfs-spark:1.0"]
cmd.execute().waitForProcessOutput(System.out, System.err)

// Spark slave configuration + Start
def docker_config_command = "sed s/IP:PORT/" + namenode_IP_address + ":9000/ \$HADOOP_HOME/etc/hadoop/core-site.xml.template > \$HADOOP_HOME/etc/hadoop/core-site.xml; \$SPARK_HOME/sbin/start-slave.sh spark://" + spark_master_container_name + ":7077"
cmd = ["docker", "exec", spark_slave_container_name, "/bin/sh", "-c", docker_config_command]
cmd.execute().waitForProcessOutput(System.out, System.err)

println "... start_spark_slave"
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="update_service_instance">
			<genericInformation>
				<info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" />
			</genericInformation>
			<depends>
				<task ref="start_spark_slave" />
			</depends>
			<inputFiles>
				<files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
			</inputFiles>
			<forkEnvironment >
				<additionalClasspath>
					<pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
				</additionalClasspath>
			</forkEnvironment>
			<scriptExecutable>
				<script>
					<code language="groovy">
						<![CDATA[
org.ow2.proactive.pca.service.client.ApiClient
org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Retrieve variables
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def service_instance_id = variables.get("PCA_INSTANCE_ID") as Long
def spark_master_IP_address = variables.get("spark_master_IP_address")
def spark_UI_port = variables.get("spark_UI_port")

// Define other variables
def pca_url = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
api_client.setDebugging(true)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Update the related service instance status
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(service_instance_id)
def service_instance_status = service_instance_data.getInstanceStatus()

if (service_instance_status == "HDFS_DEPLOYED->HDFS_SPARK_DEPLOYED"){
	service_instance_data.setInstanceStatus("HDFS_SPARK_DEPLOYED")
}
else if (service_instance_status == "SWARM_DEPLOYED->SPARK_DEPLOYED"){
	service_instance_data.setInstanceStatus("SPARK_DEPLOYED")
}

service_instance_data.getInstanceEndpoints().put("spark_UI", "http://" + spark_master_IP_address + ":" + spark_UI_port)
service_instance_rest_api.updateServiceInstanceUsingPUT(service_instance_id, service_instance_data)
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
	</taskFlow>
</job>
