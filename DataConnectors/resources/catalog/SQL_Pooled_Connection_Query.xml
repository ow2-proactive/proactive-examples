<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="SQL_Pooled_Connection_Query" projectName="2. SQL" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="RDBMS_NAME" value="HSQLDB" model="PA:LIST(PostgreSQL, MySQL, Greenplum, SQL Server, Oracle, HSQLDB)"/>
    <variable name="HOST" value="localhost" />
    <variable name="PORT" value="" />
    <variable name="USERNAME" value="scheduler" />
    <variable name="DATABASE" value="scheduler" />
    <variable name="POOL_autoCommit" value="true" model="PA:Boolean"/>
    <variable name="SQL_STATEMENTS" value="select * from JOB_DATA" />
    <variable name="OUTPUT_TYPE" value="HTML" model="PA:List(CSV,HTML)"/>
    <variable name="STORE_RESULT_VARIABLE" value="" />
  </variables>
  <description>
    <![CDATA[ This workflow is a template that demonstrates how to use pooled connections to SQL databases across multiple SQL tasks (basically when running several tasks concurrently on the same machine). The workflow is composed of a single task Open_Pooled_connection_and_Execute_Query.

Before the execution, the user has to provide the following variables:
RDBMS_NAME is the relational database management system name e.g. PostgreSQL, MySQL, Greenplum, HSQLDB, Oracle...
HOST (required) is the server host. Default value is localhost.
USERNAME (required) is the username used for accessing the SQL database.
PORT (optional) is the listening port.
DATABASE (required) is the database name.
POOL_PROPERTY (optional) HikariCP offers many data source properties that can be used to configure the DB pooled connection such as autoCommit, maximumPoolSize, maxLifetime, idleTimeout .... You can add as many properties as you want. For each one, add a new task variable where the variable name is the property name having "POOL_"  as a prefix (e.g. POOL_autoCommit, POOL_maximumPoolSize) and the variable value is the property value. For more info, please refer to https://github.com/brettwooldridge/HikariCP.
SQL_STATEMENTS (required) is a string composed of a set of query statements (SELECT statement).
OUTPUT_TYPE (optional) if set to HTML, it allows to preview the results in the Scheduler Portal in a HTML format. if set to CSV,  it allows to download the results from the Scheduler Portal in a CSV format.
Default value is HTML
STORE_RESULT_VARIABLE (optional) if not empty, the value will be the name of a variable that contains the resultSet (converted into a List of Maps) of the query. This variable can be used in other tasks.

To allow the persistence of a single connection across multiple tasks executions, the scheduler should be configured in non-forked mode to execute tasks in a single JVM rather than starting a dedicated JVM to run the task (In $PROACTIVE_HOME/config/scheduler/settings.ini, please set pa.scheduler.task.fork=false).

This workflow may need to add some third-party dependencies to its classpath (notably, JDBC jar libraries), so it can be executed properly. The user determines the required dependencies depending on the workflow implementation and the used DataBase system. Third-party dependencies can be added to the workflow classpath in three ways (depending on the nodes that will run the workflow):

- If the workflow is to be executed on Nodes running in the same host as the ProActive server, the dependencies can be placed under the addons directory of the server (i.e., $PROACTIVE_HOME/addons);
- If the workflow is to be executed on remote Nodes that are not on the ProActive Server Host, and such Nodes are started using the proactive-node command (i.e., based on activeeon_enterprise-node-xxxxx.jar) , third party dependencies can be placed under the addons directory of the Node (i.e., $PROACTIVE_NODE/addons);
- If the workflow is to be executed on remote Nodes that are not on the ProActive Server Host, and such Nodes are started using the executable jar 'node.jar' (usually used for cloud infrastructure), third party dependencies can be placed inside the lib folder of the node.jar archive itself, which is located under $PROACTIVE_HOME/dist/war/rest. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="data-connectors"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/rdbms.png"/>
    <info name="Documentation" value="user/ProActiveUserGuide.html#_database_connections_pooling"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Open_Pooled_Connection_and_Execute_Query" >
      <description>
        <![CDATA[ This task allows to open a pooled connection to any SQL database and then execute any SQL query statements on it.
If it requires a password, you have to add it using the following third-party credential: {key: rdbms_protocol://<username>@<host>:<port>, value: RDBMS_PASSWORD}.
Please refer to the User documentation to learn how to add third-party credentials.
This task has the same list of workflow variables. ]]>
      </description>
      <variables>
        <variable name="RDBMS_NAME" value="" inherited="true" />
        <variable name="HOST" value="" inherited="true" />
        <variable name="PORT" value="" inherited="true" />
        <variable name="USERNAME" value="" inherited="true" />
        <variable name="DATABASE" value="" inherited="true" />
        <variable name="POOL_autoCommit" value="" inherited="true" />
        <variable name="SQL_STATEMENTS" value="" inherited="true" />
        <variable name="OUTPUT_TYPE" value="HTML" inherited="true" model="PA:List(CSV,HTML)"/>
        <variable name="STORE_RESULT_VARIABLE" value="" inherited="true" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/rdbms.png"/>
        <info name="task.documentation" value="user/ProActiveUserGuide.html#_database_connections_pooling"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import java.sql.ResultSet
import org.ow2.proactive.scheduler.examples.connectionpooling.*
import groovy.ui.SystemOutputInterceptor
import java.sql.ResultSetMetaData
import java.sql.SQLException
import org.apache.commons.dbutils.handlers.MapListHandler

// Retrieve the RDBMS name
RDBMS_NAME = variables.get("RDBMS_NAME")

println("BEGIN Pooled Connection and execute Query on " + RDBMS_NAME + " database")

RDBMS_PROTOCOL = ""
RDBMS_DEFAULT_PORT = ""
RDBMS_DATA_SOURCE_CLASS_NAME = ""

if (RDBMS_NAME.equals("PostgreSQL")){
    init("postgresql", "5432", "org.postgresql.ds.PGSimpleDataSource")
} else if (RDBMS_NAME.equals("MySQL")){
    init("mysql", "3306", "com.mysql.cj.jdbc.Driver")
} else if (RDBMS_NAME.equals("Greenplum")){
    init("postgresql", "5432", "org.postgresql.ds.PGSimpleDataSource")
} else if (RDBMS_NAME.equals("SQL Server")){
    init("sqlserver", "1433", "com.microsoft.sqlserver.jdbc.SQLServerDataSource")
} else if (RDBMS_NAME.equals("Oracle")){
    init("oracle" ,"1521", "oracle.jdbc.pool.OracleDataSource")
} else if (RDBMS_NAME.equals("HSQLDB")){
    init("hsqldb:hsql" ,"9001", "org.hsqldb.jdbc.JDBCDataSource")
} else {
    throw new IllegalArgumentException("You must specify a valid RDBMS name in the script arguments amongst PostgreSQL, MySQL, Greenplum, SQL Server, HSQLDB or Oracle")
}

host = variables.get("HOST")
if (!host) {
    throw new IllegalArgumentException("ERROR: HOST variable is not provided by the user. Empty value is not allowed.")
}

username = variables.get("USERNAME")
if (!username) {
    throw new IllegalArgumentException("ERROR: USERNAME variable is not provided by the user. Empty value is not allowed.")
}

port = variables.get("PORT")
if (!port) {
    port = RDBMS_DEFAULT_PORT
    println("WARNING: PORT variable is not provided by the user. Using the default value:" + RDBMS_DEFAULT_PORT)
}

database = variables.get("DATABASE")
if (!database) {
    throw new IllegalArgumentException("ERROR: DATABASE variable is not provided by the user. Empty value is not allowed.")
}

// This key is used for getting the password from 3rd party credentials.
CREDENTIALS_KEY = RDBMS_PROTOCOL + "://" + username + "@" + host + ":" + port
CREDENTIALS_KEY_MSG = RDBMS_PROTOCOL + "://<username>@<host>:<port>"
password = credentials.get(CREDENTIALS_KEY)
if (!password) {
    println("WARNING: Your didn't add your password to 3rd-party credentials under the key :\"" + CREDENTIALS_KEY + "\"")
}

//Construct the jdbc URL
jdbcUrl = "jdbc:" + RDBMS_PROTOCOL + "://" + host + ":" + port + "/"+ database
//Oracle & SQL Server are particular cases
if(RDBMS_PROTOCOL.equals("oracle")){
    jdbcUrl = "jdbc:oracle:thin:@//" + host + ":" + port + "/" + database
} else if(RDBMS_PROTOCOL.equals("sqlserver")){
    jdbcUrl = "jdbc:" + RDBMS_PROTOCOL + "://" + host + ":" + port + ";database=" + database
}

interceptor = new SystemOutputInterceptor({ id, str -> print(str); false})
interceptor.start()

if(password){
    dbConnectionDetailsBuilder = new DBConnectionDetails.Builder().jdbcUrl(jdbcUrl).username(username).password(password)
}else{
    dbConnectionDetailsBuilder = new DBConnectionDetails.Builder().jdbcUrl(jdbcUrl).username(username)
}

//Add (optional) data source properties to configure the DB pooled connection
variables.entrySet().each { var ->
    if (var.getKey().startsWith("POOL_")){
        dbConnectionDetailsBuilder.addDataSourceProperty(var.getKey().replace("POOL_", ""), var.getValue())
    }} 


//Open the pooled connection to the database
dbConnectionDetails = dbConnectionDetailsBuilder.build()
sqlStatements = variables.get("SQL_STATEMENTS")   
if (!sqlStatements){
    throw new IllegalArgumentException("ERROR: SQL_STATEMENTS variable is not provided by the user. Empty value is not allowed.")
}
ResultSet rs = null
try {
    dBConnectionPoolsHolder = DBConnectionPoolsHolder.getInstance()
    rs = dBConnectionPoolsHolder.executeQuery(dbConnectionDetails, sqlStatements)
} catch (Exception e) {
    println org.objectweb.proactive.utils.StackTraceUtil.getStackTrace(e)
    throw e
}
interceptor.stop()

outputType = variables.get("OUTPUT_TYPE")
if (outputType == "HTML"){
    result = getHtmlPreview(rs).toString()
    resultMetadata.put("file.extension", ".html")
    resultMetadata.put("file.name", "output.html") 
    resultMetadata.put("content.type", "text/html")
} else {
    result = getCsvPreview(rs)
    resultMetadata.put("file.extension", ".csv")
    resultMetadata.put("file.name", "result.csv")
    resultMetadata.put("content.type", "text/csv")
}

storeResultVariable = variables.get("STORE_RESULT_VARIABLE")
if(storeResultVariable){
    try {
        handler = new MapListHandler()
        variables.put(storeResultVariable, handler.handle(rs))
    } catch (Exception e) {
        println org.objectweb.proactive.utils.StackTraceUtil.getStackTrace(e)
        throw e
    }   
}

/**
* This method initializes the default data base properties (port, connection protocol and drivers, etc)
*/
def init(String protocol, String port, String dataSourceClassName){
    RDBMS_PROTOCOL = protocol
    RDBMS_DEFAULT_PORT = port
    RDBMS_DATA_SOURCE_CLASS_NAME = dataSourceClassName
}

/**
* This methods allows to download the results from the Scheduler Portal in a CSV format. 
*/
def getCsvPreview(ResultSet rs) throws IOException, SQLException {

    ResultSetMetaData rsmd = rs.getMetaData()
    StringBuilder csvTable  = new StringBuilder()
    int columnCount = rsmd.getColumnCount()
    for (int i=1; i <= columnCount; i++) {
        csvTable.append(rsmd.getColumnName(i))
        if (i != columnCount) {
            csvTable.append(',')
        }
    }
    csvTable.append('\n')
    while (rs.next()) {
        for (int i = 1; i <= columnCount; i++) {
            value = rs.getString(i)
            csvTable.append(value == null ? "" : value.toString())
            if (i != columnCount) {
                csvTable.append(',')
            }
        }
        csvTable.append('\n')
    }
    rs.beforeFirst()
    return csvTable
}

/**
* This methods allows to preview the results in the Scheduler Portal in a HTML format. 
*/
def getHtmlPreview(ResultSet rs) throws IOException, SQLException {

    ResultSetMetaData md = rs.getMetaData()
    StringBuilder htmlTable  = new StringBuilder("<style  type=\"text/css\" >th { font-weight: bold; text-align: center; background: #0B6FA4; color: white;} td {text-align: right;padding: 3px 5px;border-bottom: 1px solid #999999;} table {border: 1px solid #999999;text-align: center;width: 100%;border: 1px solid #999999;}</style>");
    int count = md.getColumnCount()
    htmlTable.append("<table border=1>")
    htmlTable.append("<tr>")
    for (int i=1; i<=count; i++) {
        htmlTable.append("<th>")
        htmlTable.append(md.getColumnLabel(i))
    }
    htmlTable.append("</tr>")
    while (rs.next()) {
        htmlTable.append("<tr>")
        for (int i=1; i<=count; i++) {
            htmlTable.append("<td>")
            htmlTable.append(rs.getString(i))
        }
        htmlTable.append("</tr>")
    }
    htmlTable.append("</table>")
    rs.beforeFirst()
    return htmlTable
}


println("END execute query in " + RDBMS_NAME + " database")
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            330
        </positionTop>
        <positionLeft>
            617
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2864px;
            height:3304px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-325px;left:-612px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_211" style="top: 330px; left: 617px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/rdbms.png" width="20px">&nbsp;<span class="name">Open_Pooled_Connection_and_Execute</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 715px; top: 360px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>