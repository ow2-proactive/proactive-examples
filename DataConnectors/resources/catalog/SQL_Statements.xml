<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="SQL_Statements" tags="Data Connectors,SQL,PostgreSQL,MySQL,Greenplum,SQL Server,Oracle" projectName="2. SQL" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="RDBMS_NAME" value="postgresql" model="PA:LIST(postgresql, mysql, greenplum, sqlserver, oracle)" group="Database Connection" description="The relational database management system name e.g. postgresql, mysql, greenplum, hsqldb, oracle..."/>
    <variable name="DATABASE" value="my_database" model="PA:NOT_EMPTY_STRING" group="Database Connection" description="The database name"/>
    <variable name="HOST" value="localhost" model="PA:NOT_EMPTY_STRING" group="Database Connection" description="Hostname or IP address of the database host machine. Default value is localhost"/>
    <variable name="PORT" value="" model="PA:INTEGER?" group="Database Connection" description="The listening port of the database"/>
    <variable name="USER" value="my_user" model="PA:NOT_EMPTY_STRING" group="Database Connection" description="Database user name"/>
    <variable name="CREDENTIALS_KEY" value="${RDBMS_NAME}://${USER}@${HOST}:${PORT}" model="PA:Credential" group="Database Connection" description="Third-party credential storing the password associated with the given user name"/>
  </variables>
  <description>
    <![CDATA[ This task enables to execute any SQL statement (SQL query, trigger, procedure..) on an SQL database.
It requires the following third-party credential: {key: <dbms>://<username>@<host>:<port>, value: DATABASE_PASSWORD}. Please refer to the User documentation to learn how to add third-party credentials.]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="data-connectors"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/sql-statement.png"/>
    <info name="Documentation" value="user/ProActiveUserGuide.html#_sql"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Execute_SQL_Statements" >
      <description>
        <![CDATA[ This task enables to execute any SQL statement (SQL query, trigger, procedure..) on an SQL database.
It uses the following variables:
INPUT_TYPE (required) is the type of the input statements. It can be either "File" or "String". The default value is "String".
SQL_STATEMENTS is a string composed of a set of SQL statements. If INPUT_TYPE is equals to String then SQL_STATEMENTS is required.
INPUT_FILE is the file that contains the SQL statements which is stored in the dataspace (user, global..). If INPUT_TYPE is equals to File then INPUT_FILE is required. ]]>
      </description>
      <variables>
        <variable inherited="true" model="PA:Boolean" name="DOCKER_ENABLED" value="True" group="Docker Parameters" description="If true, the workflow tasks will be executed inside a docker container" advanced="true"/>
        <variable inherited="true" name="DOCKER_IMAGE" value="activeeon/dlm3" group="Docker Parameters" description="Name of the docker image used to execute the task" advanced="true"/>
        <variable name="SQL_STATEMENTS" value="my_sql_statement" group="Execution Parameters" inherited="false" description="A string composed of a set of SQL statements. If INPUT_TYPE is equals to String then SQL_STATEMENTS is required"/>
        <variable name="INPUT_TYPE" value="String" inherited="false" group="Execution Parameters" model="PA:List(File,String)" description="The type of the input statements. It can be either File or String. The default value is String"/>
        <variable name="INPUT_FILE" value="my_file" model="PA:NOT_EMPTY_STRING" group="Execution Parameters" inherited="false" description="A relative path of a CSV file in the Global Data Space that contains data to be imported. The string could also be a URL. Valid URL schemes include http, ftp, s3, and file"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/sql-statement.png"/>
        <info name="task.documentation" value="user/ProActiveUserGuide.html#_sql"/>
      </genericInformation>
      <inputFiles>
        <files  includes="$INPUT_FILE" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_vars/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
import numpy as np
from sqlalchemy import create_engine, text, exc
import sys

DBMS = variables.get("RDBMS_NAME")
if DBMS == "postgresql":
    DBMS_DEFAULT_PORT,DBMS_DRIVER,DBMS_PROTOCOL = 5432,'psycopg2','postgresql'
if DBMS == "mysql":
    DBMS_DEFAULT_PORT,DBMS_DRIVER,DBMS_PROTOCOL = 3306,'mysqlconnector','mysql'
if DBMS == "oracle":
    DBMS_DEFAULT_PORT,DBMS_DRIVER,DBMS_PROTOCOL = 1521,'cx_oracle','oracle'
if DBMS == "sqlserver":
    DBMS_DEFAULT_PORT,DBMS_DRIVER,DBMS_PROTOCOL = 1433,'pyodbc','sqlserver'
if DBMS == "greenplum":
    DBMS_DEFAULT_PORT,DBMS_DRIVER,DBMS_PROTOCOL = 5432,'psycopg2','greenplum'


HOST = variables.get("HOST")
PORT = int(variables.get("PORT"))
DATABASE = variables.get("DATABASE")
USER = variables.get("USER")
INPUT_TYPE = variables.get("INPUT_TYPE")
# This key is used for getting the password from 3rd party credentials.
PASSWORD_KEY = DBMS_PROTOCOL + "://" + USER + "@" + HOST + ":" + str(PORT)
PASSWORD=credentials.get(PASSWORD_KEY)

if not HOST:
    print("ERROR: HOST variable is not provided by the user.")
    sys.exit(1)
if not PORT:
    PORT = DBMS_DEFAULT_PORT
    print("WARNING: PORT variable is not provided by the user. Using the default value:", PORT)
if not DATABASE:
    print("ERROR: DATABASE variable is not provided by the user.")
    sys.exit(1)
if not USER:
    print("ERROR: USER variable is not provided by the user.")
    sys.exit(1)
if not PASSWORD:
    print("ERROR: Please add your " + DBMS + " password to 3rd-party credentials in the scheduler-portal under the key :\"" + PASSWORD_KEY + "\"")
    sys.exit(1)
if INPUT_TYPE == "File":
    INPUT_FILE = variables.get("INPUT_FILE")
    if not INPUT_FILE:
        print("ERROR: INPUT_FILE variable is not provided by the user.")
        sys.exit(1)
    print("Reading SQL_STATEMENTS from the file: " + INPUT_FILE)
    file = open(INPUT_FILE)
    SQL_STATEMENTS = text(file.read())
if INPUT_TYPE == "String":
    SQL_STATEMENTS = variables.get("SQL_STATEMENTS")
    if not SQL_STATEMENTS:
        print("ERROR: SQL_STATEMENTS variable is not provided by the user.")
        sys.exit(1)

# Please refer to SQLAlchemy doc for more info about database urls.
# http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls

print("BEGIN processing in " + DBMS + " database using " + DBMS_DRIVER + " connector")
print('HOST=', HOST)
print('PORT=', PORT)
print('USER=', USER)
print('DATABASE=', DATABASE)
if DBMS_PROTOCOL == "greenplum":
    DBMS_PROTOCOL = "postgresql"
database_url = '{0}+{1}://{2}:{3}@{4}:{5}/{6}'.format(DBMS_PROTOCOL,DBMS_DRIVER,USER,PASSWORD,HOST,PORT,DATABASE)
engine = create_engine(database_url)
try:
    connection = engine.connect()
except OperationalError:
    print("OperationalError: Unable to connect to " + DBMS + " database.")
    raise
try:
    connection.execute(SQL_STATEMENTS)
    connection.close()
except exc.DBAPIError as err:
    print(str(err))
    pass

print("END EXECUTE SQL STATEMENTS")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1139px;
            height:566px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-334.00001525878906px;left:-457.75px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_1433" style="top: 339px; left: 462.75px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/sql-statement.png" width="20px">&nbsp;<span class="name">Execute_SQL_Statements</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 528px; top: 369px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>