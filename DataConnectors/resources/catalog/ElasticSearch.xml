<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.10"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
    name="ElasticSearch" projectName="3. NoSQL"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="ELASTICSEARCH_HOSTNAME" value="localhost" model=""/>
    <variable name="ELASTICSEARCH_PORT" value="9200" model="PA:Integer"/>
  </variables>
  <description>
    <![CDATA[ Load data from Elasticsearch. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="data-connectors"/>
    <info name="Documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
    <info name="group" value="public-objects"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.svg"/>
  </genericInformation>
  <taskFlow>
    <task name="Import_from_ElasticSearch">
      <description>
        <![CDATA[ Load data from Elasticsearch.
The task requires the following third-party credentials : ELASTICSEARCH_USERNAME and ELASTICSEARCH_PASSWORD. Please refer to the User documentation to learn how to add third-party credentials.
It also requires a $QUERY and an $INDEX to fetch data. By default, it will fetch all documents from the specified index. $ELASTICSEARCH_SIZE is the maximum amount of hits to be returned.
The imported data is exported in a JSON format. ]]>
      </description>
      <variables>
        <variable name="ELASTICSEARCH_QUERY" value="" inherited="false" />
        <variable name="ELASTICSEARCH_INDEX" value="" inherited="false" />
        <variable name="ELASTICSEARCH_SIZE" value="10" inherited="false" model="PA:Integer"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.svg"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
      </genericInformation>
      <depends>
        <task ref="Export_to_ElasticSearch"/>
      </depends>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
# In the Java Home location field, use the value: "/usr" to force using the JRE provided in the docker image below (Recommended).
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters 
containerName = 'activeeon/dlm3' 
dockerRunCommand =  'docker run ' 
dockerParameters = '--rm ' 
# Prepare ProActive home volume 
paHomeHost = variables.get("PA_SCHEDULER_HOME") 
paHomeContainer = variables.get("PA_SCHEDULER_HOME") 
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' 
# Prepare working directory (For Dataspaces and serialized task file) 
workspaceHost = localspace 
workspaceContainer = localspace 
workspaceVolume = '-v '+localspace +':'+localspace+' ' 
# Prepare container working directory 
containerWorkingDirectory = '-w '+workspaceContainer+' ' 
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node 
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
import json
from elasticsearch import Elasticsearch

print("BEGIN Import Data FROM elasticsearch")

SEARCH_SIZE = 10
PORT = 9200

if variables.get("ELASTICSEARCH_HOSTNAME"):
    HOSTNAME = variables.get("ELASTICSEARCH_HOSTNAME")
else:
    print("ELASTICSEARCH_HOSTNAME not defined by the user.")
    sys.exit(1)
if variables.get("ELASTICSEARCH_PORT"):
    PORT = int(variables.get("ELASTICSEARCH_PORT"))
else:    
    print("ELASTICSEARCH_PORT not defined by the user. Using the default value: " + PORT)
if variables.get("ELASTICSEARCH_INDEX"):
    INDEX = variables.get("ELASTICSEARCH_INDEX")
else:
    print("ELASTICSEARCH_INDEX not defined by the user. Searching in all indices.")
    INDEX = ""
if variables.get("ELASTICSEARCH_SIZE"):
    SEARCH_SIZE = int(variables.get("ELASTICSEARCH_SIZE"))
if credentials.get("ELASTICSEARCH_USERNAME") is not None and credentials.get("ELASTICSEARCH_PASSWORD") is not None:
    ELASTICSEARCH_USERNAME = credentials.get("ELASTICSEARCH_USERNAME")
    ELASTICSEARCH_PASSWORD=credentials.get("ELASTICSEARCH_PASSWORD")
else:
    print("You first need to add third-party credentials (ELASTICSEARCH_USERNAME, ELASTICSEARCH_PASSWORD) for the database in the scheduler-portal.")
    sys.exit(1)
if variables.get("ELASTICSEARCH_QUERY"):
    # This is a workaround to force the variable string value into json
    exec("QUERY=json.loads(variables.get('ELASTICSEARCH_QUERY'))")
else:
    #print("ELASTICSEARCH_QUERY not defined by the user.")
    #sys.exit(1)
    print("ELASTICSEARCH_QUERY not defined by the user. Fetching all documents.")
    QUERY = { "query": { "match_all": {} } }



def connect(host, port, username, password):
    """ A util for making a connection to elasticsearch """

    # Connect to cluster over SSL using auth for best security:
    es_header = [{
        'host': host,
        'port': port,
        'use_ssl': True,
        'http_auth': (username,password)
    }]

    # Instantiate the new Elasticsearch connection:
    es = Elasticsearch(es_header)

    return es


def read_elasticsearch(index, query, search_size, host, port, username, password):

    # Connect to elasticsearch
    es = connect(host=host, port=port, username=username, password=password)
    
    
    # Make a query to the specific DB and Collection
    res = es.search(index=index, size=search_size, body=query)
    print("%d documents found" % res['hits']['total'])

    return res

print("EXECUTING QUERY...")
print('ELASTICSEARCH_HOSTNAME='+HOSTNAME)
print('ELASTICSEARCH_PORT=', PORT)
print('ELASTICSEARCH_INDEX='+INDEX)
print('ELASTICSEARCH_QUERY='+json.dumps(QUERY))
print('ELASTICSEARCH_SIZE=', SEARCH_SIZE)


query_results= read_elasticsearch(INDEX, QUERY, SEARCH_SIZE, HOSTNAME,  PORT,  ELASTICSEARCH_USERNAME,  ELASTICSEARCH_PASSWORD)
    
#**************Preview Data*********************
result = json.dumps(query_results).encode('utf-8')
resultMetadata.put("file.extension", ".json")
resultMetadata.put("file.name", "result.json")
resultMetadata.put("content.type", "application/json")
#***********************************************
print("END Import_Data")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Export_to_ElasticSearch">
      <description>
        <![CDATA[ This task allows exporting data to ElasticSearch.
The task requires the following third-party credentials : ELASTICSEARCH_USERNAME and ELASTICSEARCH_PASSWORD. Please refer to the User documentation to learn how to add third-party credentials.
It uses the following variables:
$ELASTICSEARCH_INDEX (required) the index to use. It is created if it does not exist
$ELASTICSEARCH_DOC_TYPE (required) the documents type.
$ELASTICSEARCH_INPUT (required) A JSON Object/Array to be indexed in ElasticSearch. This variable can:
 - A String describing the JSON Object/Array
 - A relative path in the data space of a JSON file. ]]>
      </description>
      <variables>
        <variable name="ELASTICSEARCH_INDEX" value="" inherited="false" />
        <variable name="ELASTICSEARCH_DOC_TYPE" value="" inherited="false" />
        <variable name="ELASTICSEARCH_INPUT" value="" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/elasticsearch.svg"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
      </genericInformation>
      <inputFiles>
        <files  includes="$ELASTICSEARCH_INPUT" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
# In the Java Home location field, use the value: "/usr" to force using the JRE provided in the docker image below (Recommended).
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters 
containerName = 'activeeon/dlm3' 
dockerRunCommand =  'docker run ' 
dockerParameters = '--rm ' 
# Prepare ProActive home volume 
paHomeHost = variables.get("PA_SCHEDULER_HOME") 
paHomeContainer = variables.get("PA_SCHEDULER_HOME") 
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' 
# Prepare working directory (For Dataspaces and serialized task file) 
workspaceHost = localspace 
workspaceContainer = localspace 
workspaceVolume = '-v '+localspace +':'+localspace+' ' 
# Prepare container working directory 
containerWorkingDirectory = '-w '+workspaceContainer+' ' 
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node 
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
from elasticsearch import Elasticsearch
from elasticsearch.helpers import bulk
from bson.json_util import dumps, loads

# DEFAULTS
PORT = 9200

def get_input_json(input):
    """
    A util for detecting whether the input string is a valid json or a file path/url
    """
    if input.startswith(("{", "[")):
        print("Exporting a JSON String")
        return loads(input)
    else:
        print("Exporting JSON File:{0}".format(input))
        json_data = open(input, "r").read()
        return loads(json_data)

def connect(host, port, username, password):
    """ A util for making a connection to elasticsearch """

    # Connect to cluster over SSL using auth for best security:
    es_header = [{
        'host': host,
        'port': port,
        'use_ssl': True,
        'http_auth': (username,password)
    }]

    # Instantiate the new Elasticsearch connection:
    es = Elasticsearch(es_header)

    return es

def write_elasticsearch(index, inputs, doc_type, host, port, username, password):

    # Connect to elasticsearch
    es = connect(host=host, port=port, username=username, password=password)
    
    # Create an index if it does not exist
    if not es.indices.exists(index=index):
        es.indices.create(index=index,body={})
        
    if isinstance(inputs, list):
        res = bulk(es, inputs, index=index,doc_type=doc_type, raise_on_error=True)
        if res[0] == len(inputs):
            print("Successfully inserted [{0}/{1}] documents.".format(res[0], len(inputs)))
            return 'True'
        else:
            print("Failed to insert all documents. Only [{0}/{1}] were inserted".format(res[0], len(inputs)))
            return 'False'
    elif isinstance(inputs,dict):
        res = es.index(index=index, doc_type=doc_type, body=inputs)
        if res:
            print("Successfully inserted 1 documents")
            return 'True'
        else:
            print("Failed to insert document.")
            return 'False'

if variables.get("ELASTICSEARCH_HOSTNAME"):
    HOSTNAME = variables.get("ELASTICSEARCH_HOSTNAME")
else:
    print("ELASTICSEARCH_HOSTNAME not defined by the user.")
    sys.exit(1)
if variables.get("ELASTICSEARCH_PORT"):
    PORT = int(variables.get("ELASTICSEARCH_PORT"))
else:    
    print("ELASTICSEARCH_PORT not defined by the user. Using the default value: " + PORT)
if variables.get("ELASTICSEARCH_INDEX"):
    INDEX = variables.get("ELASTICSEARCH_INDEX")
else:
    print("[ERROR] ELASTICSEARCH_INDEX not defined by the user.")
    sys.exit(1)
if variables.get("ELASTICSEARCH_DOC_TYPE"):
    DOC_TYPE = variables.get("ELASTICSEARCH_DOC_TYPE")
else:
    print("[ERROR] ELASTICSEARCH_DOC_TYPE not defined by the user.")
    sys.exit(1)
if variables.get("ELASTICSEARCH_INPUT"):
    INPUT = get_input_json(variables.get("ELASTICSEARCH_INPUT"))
if credentials.get("ELASTICSEARCH_USERNAME") is not None and credentials.get("ELASTICSEARCH_PASSWORD") is not None:
    ELASTICSEARCH_USERNAME = credentials.get("ELASTICSEARCH_USERNAME")
    ELASTICSEARCH_PASSWORD = credentials.get("ELASTICSEARCH_PASSWORD")
else:
    print("You first need to add third-party credentials (ELASTICSEARCH_USERNAME, ELASTICSEARCH_PASSWORD) for the database in the scheduler-portal.")
    sys.exit(1)

print('BEGIN Export Data to ElasticSearch')
print('ELASTICSEARCH_HOSTNAME='+HOSTNAME)
print('ELASTICSEARCH_PORT=', PORT)
print('ELASTICSEARCH_INDEX='+INDEX)
    
# Insert INPUT in mongoDB
write_elasticsearch(INDEX, INPUT, DOC_TYPE, HOSTNAME,  PORT,  ELASTICSEARCH_USERNAME,  ELASTICSEARCH_PASSWORD)
print("END Export Data")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>