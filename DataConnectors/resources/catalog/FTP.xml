<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="FTP" projectName="1. File" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <description>
    <![CDATA[ Import /Export file(s) from/to an FTP server. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="data-connectors"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ftp_import.png"/>
    <info name="Documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_file"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Import_from_FTP_Server" >
      <description>
        <![CDATA[ This task allows to import locally (data space) files from an FTP server. The task requires the following third-party credential: {key: ftp://<username>@<hostname>, value: PASSWORD}.  Please refer to the User documentation to learn how to add third-party credentials.
It is launched with the following parameters:
$HOST (required) is the FTP server host. Default value is localhost.
$USERNAME (required) is the username used for accessing the FTP server.
$PORT (optional) is the listening port. Default value is 21.
$LOCAL_BASE (required) is the local relative path in the data space from which we export file(s) to the FTP server. $LOCAL_BASE can be either a path to a folder terminated by / or an empty value for the root (e.g. LOCAL/).
$REMOTE_BASE (optional) is the remote relative path on the FTP server to which we export file(s) (e.g. REMOTE/).
$FILE_PATTERN (optional) is either a file name or a wildcard string pattern (e.g. file.txt, *.txt ) ]]>
      </description>
      <variables>
        <variable name="HOST" value="localhost" inherited="false" />
        <variable name="USERNAME" value="" inherited="false" />
        <variable name="PORT" value="21" inherited="false" />
        <variable name="FILE_PATTERN" value="" inherited="false" />
        <variable name="REMOTE_BASE" value="" inherited="false" model="PA:REGEXP(^$|^.+/$)"/>
        <variable name="LOCAL_BASE" value="" inherited="false" model="PA:REGEXP(^$|^.+/$)"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ftp_import.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_file"/>
      </genericInformation>
      <depends>
        <task ref="Export_to_FTP_Server"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
/*
#If you want to add more functionalities like a Proxy use
# Please refer to Commons Virtual File System doc for more info.
# https://commons.apache.org/proper/commons-vfs/index.html
*/

import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.regex.Pattern;
import org.apache.commons.vfs2.*;
import org.apache.commons.vfs2.auth.*;
import org.apache.commons.vfs2.impl.*;
import org.apache.commons.vfs2.provider.local.*;
import org.objectweb.proactive.extensions.dataspaces.vfs.selector.*

///Set connection parameters and retrieve the ftp password
final String FTP_URL_KEY = "ftp://<username>@<host>";
host = variables.get("HOST")
username = variables.get("USERNAME")
port = variables.get("PORT")
password = checkParametersAndReturnPassword()

//Initialize the connection manger to the remote FTP server.
optsRemote = new FileSystemOptions()
fsManager = null 
initializeAuthentication()

//Initialize file pattern, local and remote bases
remoteDir = variables.get("REMOTE_BASE")
filePattern = variables.get("FILE_PATTERN")
localBase = variables.get("LOCAL_BASE")
src = null
//Export file(s) to the FTP server
importFiles()
release()

/**
* Retrieves files that match the specified File pattern from the FTP server
* and import them to the local directory (global space).
*/
void importFiles(){
	try {   
    	startUrl = "ftp://" + host + ":" + port + "/" + remoteDir   
    	localDir = Paths.get(localspace, localBase).toString()
        (new File(localDir)).mkdirs()
        ftpFile = fsManager.resolveFile(startUrl, optsRemote)
        src = ftpFile
        remoteBasePath = ftpFile.getName()
        children = this.ftpFile.findFiles(new org.objectweb.proactive.extensions.dataspaces.vfs.selector.FileSelector(filePattern))
        children.each { f ->
        	String relativePath =
            File.separator + remoteBasePath.getRelativeName(f.getName());
       		 if (f.getType() == FileType.FILE) {
            	println("Examining remote file " + f.getName());
                standardPath = new File(localDir, relativePath);
            	localUrl = standardPath.toURI().toURL();            
            	println("  Standard local path is " + standardPath);
            	LocalFile localFile = (LocalFile) fsManager.resolveFile(localUrl.toString());
            	println("    Resolved local file name: " + localFile.getName());
                if (!localFile.getParent().exists()) {
                	localFile.getParent().createFolder();
            	}
            	println("  ### Retrieving file ###");
            	localFile.copyFrom(f, new AllFileSelector());
             } else {
            	println("Ignoring non-file " + f.getName());
        	}
    	}
	} catch (FileSystemException ex) {
            throw new RuntimeException("Error collecting directory listing of " +
                    startUrl, ex);
    }
}

/**
* Release system resources, close connection to the filesystem. 
*/
void release() {
    FileSystem fs = null;
    if (src != null) {
        fs = src.getFileSystem(); // This works even if the src is closed.
        fsManager.closeFileSystem(fs)
    }
} 

/**
* Checks whether the provided host, username and port values are empty or not, then
* returns the ftp password using the third party credentials mechanism
*/
def checkParametersAndReturnPassword (){
    if (host.isEmpty()){
    	throw new IllegalArgumentException("ERROR: HOST variable is not provided by the user. Empty value is not allowed.")
	}
	if (username.isEmpty()){
     	throw new IllegalArgumentException("ERROR: USERNAME variable is not provided by the user. Empty value is not allowed.")
	}
	def ftpUrlKey = "ftp://" + username + "@" + host;
	def password = credentials.get(ftpUrlKey)
	if (password == null || password.isEmpty()){
   		 throw new IllegalArgumentException("Please add your ftp password to 3rd-party credentials under the key :\"" +
                                               FTP_URL_KEY + "\"");
	}
	if (port == null || port.isEmpty()){
      	port = "21"
      	println("WARNING: PORT variable is not provided by the user. Using the default value.")
	}
    return password
}

/**
*This method initializes the connection to the remote FTP server and returns the FileSystemManager instance that manages this connection.
*/
void initializeAuthentication(){
    try {
    	fsManager = VFS.getManager();
	} catch (FileSystemException ex) {
    	throw new RuntimeException("failed to get fsManager from VFS", ex);
	}
	def auth = new StaticUserAuthenticator(null, username, password)
	try {
 		DefaultFileSystemConfigBuilder.getInstance().setUserAuthenticator(optsRemote, auth);
	} catch (FileSystemException ex) {
    	throw new RuntimeException("setUserAuthenticator failed", ex);
	}
}

result = true
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="${LOCAL_BASE}${FILE_PATTERN}" accessMode="transferToGlobalSpace"/>
      </outputFiles>
    </task>
    <task name="Export_to_FTP_Server" >
      <description>
        <![CDATA[ This task allows to export files to an FTP server. The task requires the following third-party credential: {key: ftp://<username>@<host>, value: PASSWORD}. Please refer to the User documentation to learn how to add third-party credentials.
It is launched with the following parameters:
$HOST (required) is the FTP server host. Default value is localhost.
$USERNAME (required) is the username used for accessing the FTP server.
$PORT (optional) is the listening port. Default value is 21.
$LOCAL_BASE (required) is the local relative path in the data space from which we export file(s) to the FTP server. $LOCAL_BASE can be either a path to a folder terminated by / or an empty value for the root (e.g. LOCAL/).
$REMOTE_BASE (optional) is the remote relative path on the FTP server to which we export file(s) (e.g. REMOTE/).
$FILE_PATTERN (optional) is either a file name or a wildcard string pattern (e.g. file.txt, *.txt ) ]]>
      </description>
      <variables>
        <variable name="HOST" value="localhost" inherited="false" />
        <variable name="USERNAME" value="" inherited="false" />
        <variable name="PORT" value="21" inherited="false" />
        <variable name="FILE_PATTERN" value="" inherited="false" />
        <variable name="REMOTE_BASE" value="" inherited="false" model="PA:REGEXP(^$|^.+/$)"/>
        <variable name="LOCAL_BASE" value="" inherited="false" model="PA:REGEXP(^$|^.+/$)"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ftp_import.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_file"/>
      </genericInformation>
      <inputFiles>
        <files  includes="${LOCAL_BASE}${FILE_PATTERN}" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
/*
#If you want to add more functionalities like a Proxy use
# Please refer to Commons Virtual File System doc for more info.
# https://commons.apache.org/proper/commons-vfs/index.html
*/

import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.regex.Pattern;
import org.apache.commons.vfs2.*;
import org.apache.commons.vfs2.auth.*;
import org.apache.commons.vfs2.impl.*;
import org.apache.commons.vfs2.provider.local.*;
import org.objectweb.proactive.extensions.dataspaces.vfs.selector.*

//Set connection parameters and retrieve the ftp password
final String FTP_URL_KEY = "ftp://<username>@<host>";
host = variables.get("HOST")
username = variables.get("USERNAME")
port = variables.get("PORT")
password = checkParametersAndReturnPassword()

//Initialize the connection manger to the remote FTP server.
optsRemote = new FileSystemOptions()
fsManager = null 
initializeAuthentication()

//Initialize file pattern, local and remote bases
remoteDir = variables.get("REMOTE_BASE")
filePattern = variables.get("FILE_PATTERN")
localBase = variables.get("LOCAL_BASE")
src = null
//Export file(s) to the FTP server
exportFiles()
release()

/**
* Retrieves files that match the specified File pattern from the local directory (global space)
* and export them to the FTP server.
*/
void exportFiles(){
	try {
    	optsLocal = new FileSystemOptions()
		startRemoteUrl = "ftp://" + host + ":" + port + "/" + remoteDir
    	localDir = Paths.get(localspace, localBase).toString()
    	startLocalPath = new File(localDir).toURI().toURL().toString();  
    	println "Local path is : " + startLocalPath
    	(new File(localDir)).mkdirs()
        localFileRoot = fsManager.resolveFile(startLocalPath, optsLocal)
        src = localFileRoot
		localBasePath = localFileRoot.getName()
		children = localFileRoot.findFiles(new org.objectweb.proactive.extensions.dataspaces.vfs.selector.FileSelector(filePattern))
		children.each { f ->
        	String relativePath = localBasePath.getRelativeName(f.getName());
			if (f.getType() == FileType.FILE) {
            	println("Examining local file " + f.getName());
            	String remoteUrl = startRemoteUrl + "/" + relativePath;
            	println("  Remote url is " + remoteUrl);
            	remoteFile = fsManager.resolveFile(remoteUrl, optsRemote);
            	println("    Resolved remote file name: " + remoteFile.getName());
            	if (!remoteFile.getParent().exists()) {
                	remoteFile.getParent().createFolder();
            	}
            	println("  ### Uploading file ###");
            	remoteFile.copyFrom(f, new AllFileSelector());
			} else {
            	println("Ignoring non-file " + f.getName());
       		 } 
        }
	} catch (FileSystemException ex) {
            throw new RuntimeException("Error collecting directory listing of " +
                    startRemoteUrl, ex);
    }
}

/**
* Release system resources, close connection to the filesystem. 
*/
void release() {
    FileSystem fs = null;
    if (src != null) {
        fs = src.getFileSystem(); // This works even if the src is closed.
        fsManager.closeFileSystem(fs)
    }
} 

/**
* Checks whether the provided host, username and port values are empty or not, then
* returns the ftp password using the third party credentials mechanism
*/
def checkParametersAndReturnPassword (){
    if (host.isEmpty()){
    	throw new IllegalArgumentException("ERROR: HOST variable is not provided by the user. Empty value is not allowed.")
	}
	if (username.isEmpty()){
     	throw new IllegalArgumentException("ERROR: USERNAME variable is not provided by the user. Empty value is not allowed.")
	}
	def ftpUrlKey = "ftp://" + username + "@" + host;
	def password = credentials.get(ftpUrlKey)
	if (password == null || password.isEmpty()){
   		 throw new IllegalArgumentException("Please add your ftp password to 3rd-party credentials under the key :\"" +
                                               FTP_URL_KEY + "\"");
	}
	if (port == null || port.isEmpty()){
      	port = "21"
      	println("WARNING: PORT variable is not provided by the user. Using the default value.")
	}
    return password
}

/**
*This method initializes the connection to the remote FTP server and returns the FileSystemManager instance that manages this connection.
*/
void initializeAuthentication(){
    try {
    	fsManager = VFS.getManager();
	} catch (FileSystemException ex) {
    	throw new RuntimeException("failed to get fsManager from VFS", ex);
	}
	def auth = new StaticUserAuthenticator(null, username, password)
	try {
 		DefaultFileSystemConfigBuilder.getInstance().setUserAuthenticator(optsRemote, auth);
	} catch (FileSystemException ex) {
    	throw new RuntimeException("setUserAuthenticator failed", ex);
	}
}

result = true
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1217px;
            height:812px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-391.984375px;left:-612.234375px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_322" style="top: 525.984px; left: 617.234px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/ftp_import.png" width="20px">&nbsp;<span class="name">Import_from_FTP_Server</span></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable active-task" id="jsPlumb_1_325" style="top: 396.984px; left: 617.25px; z-index: 24;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/ftp_import.png" width="20px">&nbsp;<span class="name">Export_to_FTP_Server</span></a></div><svg style="position:absolute;left:675.25px;top:436.484375px" width="26.25" height="90.015625" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 5.25 89.015625 C 15.25 39.015625 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.634855999999999,67.2319845 L12.621244748765225,46.637423877199915 L6.249381408952906,53.30070817090642 L-1.3100315803283493,48.022898468247014 L7.634855999999999,67.2319845" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.634855999999999,67.2319845 L12.621244748765225,46.637423877199915 L6.249381408952906,53.30070817090642 L-1.3100315803283493,48.022898468247014 L7.634855999999999,67.2319845" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 681px; top: 556px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 681px; top: 516px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 675.75px; top: 426.984px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>