<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="URL" projectName="1. File" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <description>
    <![CDATA[ Import files from a given URL using HTTP, HTTPS, or FILE protocols. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="data-connectors"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/url_import.png"/>
    <info name="Documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_file"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="url-connector" >
      <description>
        <![CDATA[ $FILE_URL (required)  Link to a file accessible using HTTP, HTTPS, SFTP or FTP protocols.
FTP and SFTP urls must have the following patterns:
FTP url ftp://<username>:<password>@<hostname>:<port>/<relativePath>
SFTP url sftp://<username>@<hostname>[:<port>][/<relativePath>]
$LOCAL_RELATIVE_PATH relative path in the dataspace to which we download file(s).
$EXTRACT_ARCHIVE is a boolean. If set to true, the imported file will be extracted if it is an archive. ]]>
      </description>
      <variables>
        <variable name="EXTRACT_ARCHIVE" value="false" inherited="false" model="PA:Boolean"/>
        <variable name="FILE_URL" value="" inherited="false" />
        <variable name="LOCAL_RELATIVE_PATH" value="" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/url_import.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_file"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import java.io.IOException;
import java.io.FileOutputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.io.File;
import java.util.Map;
import java.util.HashMap;
import java.nio.file.Paths;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;

SCHEME_LIST = ["HTTP", "HTTPS", "FTP", "SFTP"];
def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]

schedulerapi.connect();
//Default value is getLocalSpace() because it will always be writable and moreover can be used to transfer files to another data space (global, user)
LOCAL_RELATIVE_PATH = schedulerapi.getLocalSpace();

if (!variables.get("LOCAL_RELATIVE_PATH").isEmpty()) {
    LOCAL_RELATIVE_PATH = variables.get("LOCAL_RELATIVE_PATH");
}
if (!variables.get("FILE_URL").isEmpty()) {
    FILE_URL = variables.get("FILE_URL");
} else {
    throw new IllegalArgumentException("You have to specify a valid URL. Empty value is not allowed.");
}

EXTRACT_ARCHIVE = Boolean.parseBoolean(variables.get("EXTRACT_ARCHIVE"));

String scheme = getScheme(FILE_URL);
URI uri = new URI(FILE_URL);
switch (scheme.toUpperCase()) {
    case "HTTP":
    case "HTTPS":
    System.out.println("HTTP(S) Url detected. Downloading file from " + FILE_URL);
    try {
        String savePath = Paths.get(LOCAL_RELATIVE_PATH, new File(uri.getPath()).getName()).toString();
        downloadUsingNIO(FILE_URL, savePath);
      	System.out.println("file DOWNLOADED successfully to: " + savePath);
      	if (EXTRACT_ARCHIVE && savePath.endsWith(".zip")){
      	    extractArchive(savePath, LOCAL_RELATIVE_PATH);
      	}
    } catch (IOException e) {
        e.printStackTrace();
    }
    break;

    //FTP url ftp://<username>:<password>@<hostname>:[<port>]/<relativePath>
    case "FTP":
        System.out.println("FTP Url detected. Launching the FTP-connector.");
        Map<String, String> jobVariables= new HashMap();
    	String password = getPassword(uri);
    	String username = getUsername(uri);
    	if(password != null && username != null){
            ftpUrlKey = "ftp://" + username + "@" + uri.getHost();
            schedulerapi.putThirdPartyCredential(ftpUrlKey, password);
        }
        jobVariables.put("FTP_LOCAL_RELATIVE_PATH", LOCAL_RELATIVE_PATH);
        jobVariables.put("FTP_EXTRACT_ARCHIVE", EXTRACT_ARCHIVE);
        String remotePath = uri.getPath().startsWith("/") ? uri.getPath().substring(1): uri.getPath();
        jobVariables.put("FTP_REMOTE_RELATIVE_PATH",  remotePath);
        jobVariables.put("FTP_PORT",  uri.getPort()>-1?uri.getPort():21);
    	jobVariables.put("FTP_HOST",  uri.getHost());
    	jobVariables.put("FTP_USERNAME",  username);
        schedulerapi.submitFromCatalog(variables.get("PA_CATALOG_REST_URL"),"data-connectors","FTP", jobVariables, generic_infos_map);
        System.out.println("Submitting the FTP workflow from the Catalog");
    break;

    //SFTP url sftp://<username>[:<password>]@<hostname>[:<port>]/<relativePath>
    case "SFTP":
        throw new IllegalArgumentException("SFTP protocol is detected. Please, use the dedicated File connector.");

}

def getScheme(String fileUrl) throws URISyntaxException, MalformedURLException {
    URI uri = new URI(fileUrl);
    String scheme =  uri.getScheme();
    if(!SCHEME_LIST.contains(scheme.toUpperCase())) {
        throw new MalformedURLException("Error: not recognized URL scheme. Scheme has to be http, https, ftp or sftp.");
    }
    return scheme;
}

void downloadUsingNIO(String urlStr, String file) throws IOException {
    URL url = new URL(urlStr);
    File parentDir = new File(file).getParentFile();
    if (parentDir != null && !parentDir.exists()) {
        parentDir.mkdirs();
    }
    ReadableByteChannel rbc = Channels.newChannel(url.openStream());
    FileOutputStream fos = new FileOutputStream(file);
    fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
    fos.close();
    rbc.close();
}

def getPassword(URI uri) {
    String userInfo = uri.getUserInfo();
    if (userInfo != null && userInfo.split(":", 2).length > 1) {
        return userInfo.split(":", 2)[1];
    }
    return null;
}

def getUsername(URI uri) {
    String userInfo = uri.getUserInfo();
    if (userInfo != null && userInfo.split(":", 2).length > 0) {
        return userInfo.split(":", 2)[0];
    }
    return null;
}

void extractArchive(String localFilePath, String sftpLocalRelativePath) {
    System.out.println("Decompressing archive: " + localFilePath);
    ZipUtil.unpack(new File(localFilePath), new File(sftpLocalRelativePath));
    System.out.println("Archive decompressed successfully at: " + sftpLocalRelativePath);
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="$LOCAL_RELATIVE_PATH**" accessMode="transferToGlobalSpace"/>
        <files  includes="$LOCAL_RELATIVE_PATH/**" accessMode="transferToGlobalSpace"/>
      </outputFiles>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1139px;
            height:566px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-333.9875030517578px;left:-497.5px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_1439" style="top: 339px; left: 502.5px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/url_import.png" width="20px">&nbsp;<span class="name">url-connector</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 542px; top: 369px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>