<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.10"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
    name="SAP_ECC" projectName="5. ERP"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2"
>
  <variables>
    <variable name="JCO_FUNCTION" value="RFC_SYSTEM_INFO" />
  </variables>
  <description>
    <![CDATA[ Connection to an SAP ECC System using JCO connector.
Before you run it, please make sure to add the connection credentials (see documentation).
Refer to ProActive's User Guide for help on how to manage third-party credentials. ]]>
  </description>
  <genericInformation>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/sap.png"/>
    <info name="bucketName" value="data-connectors"/>
    <info name="documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_sap_ecc"/>
  </genericInformation>
  <taskFlow>
    <task name="Connect_to_SAP">
      <description>
        <![CDATA[ Connection to an SAP ECC System ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/sap.png"/>
        <info name="task.documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_sap_ecc"/>
      </genericInformation>
      <inputFiles>
        <files  includes="sapjco3.jar" accessMode="transferFromGlobalSpace"/>
        <files  includes="libsapjco3.so" accessMode="transferFromGlobalSpace"/>
        <files  includes="sapjco3.dll" accessMode="transferFromGlobalSpace"/>
        <files  includes="libsapjco3.jnilib" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="sapjco3.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
//set permissions for SAP library in Linux
if (!System.properties['os.name'].toLowerCase().contains('windows')) {
	def executable_file_path = new File(localspace, "libsapjco3.so").absolutePath
	["chmod","+x", executable_file_path].execute().waitForProcessOutput(System.out, System.err)
}
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import com.sap.conn.jco.ext.DestinationDataProvider
import com.sap.conn.jco.*
import java.io.File
import java.io.FileNotFoundException
import java.io.FileOutputStream
import java.io.IOException
import java.util.Properties

String destinationName = "mySAPConnection"

if (createDestinationFile(destinationName)) {
	try {
		JCoDestination destination = JCoDestinationManager.getDestination(destinationName)
		println("SUCCESSFUL CONNECTION!!")
		println("Connection Attributes:")
		println(destination.getAttributes())
		println("----")
		JCoRepository sapRepository = destination.getRepository()
		if (sapRepository != null) {

			//Get the parameters of a SAP remote-enabled function, provided as the variable JCO_FUNCTION
			JCoFunction sapFunction = sapRepository.getFunction(variables.get("JCO_FUNCTION"))
			if (sapFunction != null) {
				println("Function " + variables.get("JCO_FUNCTION")  + " found!")
				if (sapFunction.getImportParameterList() != null) {
					println("Import Parameters")
                    for (JCoParameterField p : sapFunction.getImportParameterList()) {
						println("- " + p.getName() + " : " + p.getTypeAsString())
                    }
                } else {
					println("No Import Parameters found.")
                }
				if (sapFunction.getExportParameterList() != null) {
					println("Export Parameters")
                    for (JCoParameterField p : sapFunction.getExportParameterList()) {
						println("- " + p.getName() + " : " + p.getTypeAsString())
                    }
                } else {
					println("No Export Parameters found.")
                }
				if (sapFunction.getTableParameterList() != null) {
					println("Table Parameters")
                    for (JCoParameterField p : sapFunction.getTableParameterList()) {
						println("- " + p.getName() + " : " + p.getTypeAsString())
                    }
                } else {
					println("No Table Parameters found.")
                }
				println("----")

				//Execute a sample function:
				//RFC_SYSTEM_INFO reads the system's information into a Structure
                if (variables.get("JCO_FUNCTION").equals("RFC_SYSTEM_INFO")) {
					sapFunction.execute(destination)
					JCoStructure structure = sapFunction.getExportParameterList().getStructure("RFCSI_EXPORT")
					if (structure != null) {
						println("System info:")
						for(JCoField field : structure) {
							println(field.getName() + " : " + field.getString())
						}
					} else {
						println("Error reading system info")
					}
				}
			} else {
				println("ERROR: Function " + variables.get("JCO_FUNCTION") + " not found in repository.")
			}
		} else {
			println("ERROR: Could not access the repository.")
		}
	} catch (JCoException e) {
		println("ERROR: Connection FAILED!!")
		e.printStackTrace()
	}
}
else {
	println("ERROR: Could not create configuration file.")
}

boolean createDestinationFile(String fileName)
{
	Properties connectProperties = new Properties()
	connectProperties.setProperty(DestinationDataProvider.JCO_ASHOST, credentials.get("JCO_ASHOST"))
	connectProperties.setProperty(DestinationDataProvider.JCO_SYSNR, credentials.get("JCO_SYSNR"))
	connectProperties.setProperty(DestinationDataProvider.JCO_CLIENT, credentials.get("JCO_CLIENT"))
	connectProperties.setProperty(DestinationDataProvider.JCO_USER, credentials.get("JCO_USER"))
	connectProperties.setProperty(DestinationDataProvider.JCO_PASSWD, credentials.get("JCO_PASSWD"))
	connectProperties.setProperty(DestinationDataProvider.JCO_LANG, credentials.get("JCO_LANG"))
	if (credentials.get("JCO_SAPROUTER") != null) {
		connectProperties.setProperty(DestinationDataProvider.JCO_SAPROUTER, credentials.get("JCO_SAPROUTER"))
	}
	try {
		File destinationFile = new File(fileName + ".jcoDestination")
		FileOutputStream fos = new FileOutputStream(destinationFile, false)
		connectProperties.store(fos, "SAP Connection Parameters")
		fos.close()
		return true
    } catch (FileNotFoundException e) {
		return false
	} catch (IOException e) {
		return false
	}
}
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>