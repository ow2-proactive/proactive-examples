<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.13" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd"  name="Azure_Data_Lake" projectName="4. Cloud" priority="normal" onTaskError="cancelJob"  maxNumberOfExecution="2" >
  <variables>
    <variable name="AZ_CRON_MONITOR" value="* * * * *" />
    <variable name="AZ_DLA_ACCOUNT" value="" />
    <variable name="AZ_DLA_JOB" value="" />
    <variable name="AZ_DLA_OUTPUT" value="" />
    <variable name="AZ_DLA_SCRIPT" value="" />
    <variable name="AZ_SUBSCRIPTION" value="" />
  </variables>
  <description>
    <![CDATA[ This workflow allows to submit a U-SQL job to Azure Data Analytics and retrieve the result file. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="data-connectors"/>
    <info name="Documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_azure_data_lake"/>
    <info name="group" value="public-objects"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_dla.png"/>
  </genericInformation>
  <taskFlow>
    <task name="Submit_job" >
      <description>
        <![CDATA[ Connect and submit a job to Azure Data Lake ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_dla.png"/>
        <info name="task.documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_azure_data_lake"/>
      </genericInformation>
      <inputFiles>
        <files  includes="$AZ_DLA_SCRIPT" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <pre>
        <script>
          <code language="bash">
            <![CDATA[
#Verify installation of Azure CLI
if ! type "az" >/dev/null 2>&1; then
  echo "Installing Azure CLI"

  # Update sources and install Microsoft's generic key
  AZ_REPO=$(lsb_release -cs)
  echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
     sudo tee /etc/apt/sources.list.d/azure-cli.list
  sudo apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893

  # Install new key needed as of May 2018
  curl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -

  #install Azure CLI
  sudo apt-get install apt-transport-https
  sudo apt-get update && sudo apt-get install azure-cli

fi

echo "Azure CLI is installed"
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
//Check all credentials and variables are set
if (!credentials.get("AZ_U") || !credentials.get("AZ_P")) {
  println("Credentials AZ_U and/or AZ_P are not set, please add them.")
  System.exit(1)
} else if (!variables.get("AZ_DLA_ACCOUNT") || !variables.get("AZ_DLA_SCRIPT") || !variables.get("AZ_DLA_JOB") || !variables.get("AZ_DLA_OUTPUT")) {
  println("All the workflow variables are required, please fill them accordingly.")
  System.exit(1)  
}
//Connect to Azure Data Lake
def connection_string
if (credentials.get("AZ_T") == null) {
  connection_string = "az login -u " + credentials.get("AZ_U") + " -p " + credentials.get("AZ_P")
} else {
  connection_string = "az login --service-principal -u " + credentials.get("AZ_U") + " -p " + credentials.get("AZ_P") + " -t " + credentials.get("AZ_T")
}
def conn_exec = connection_string.execute()
conn_exec.waitFor()
if (conn_exec.exitValue() != 0)
{
  println conn_exec.err.text
  System.exit(1)
}
println("Successful connection:")
println conn_exec.in.text
//Set subscription if needed
if (variables.get("AZ_SUBSCRIPTION")) {
  def subscription_string = "az account set --subscription " + variables.get("AZ_SUBSCRIPTION")
  def subscription_exec = subscription_string.execute()
  subscription_exec.waitFor()
  if (subscription_exec.exitValue() != 0)
  {
    println subscription_exec.err.text
    System.exit(1)
  }
}
//Validate accounts
def account_string = "az dla account list"
def account_exec = account_string.execute()
account_exec.waitFor()
if (account_exec.exitValue() != 0)
{
  println account_exec.err.text
  System.exit(1)
}
def dla_list = new groovy.json.JsonSlurper().parseText(account_exec.in.text)
if (!dla_list.name.contains(variables.get("AZ_DLA_ACCOUNT"))) {
  println("'" + variables.get("AZ_DLA_ACCOUNT") + "' account was not found in your Data Lake Analytics repository.")
  System.exit(1)
}
//Obtain default Data Lake Store account
def dls_string = "az dla account show -n " + variables.get("AZ_DLA_ACCOUNT")
def dls_exec = dls_string.execute()
dls_exec.waitFor()
if (dls_exec.exitValue() != 0)
{
  println account_exec.err.text
  System.exit(1)
}
variables.put("AZ_DLS_ACCOUNT", (new groovy.json.JsonSlurper().parseText(dls_exec.in.text)).defaultDataLakeStoreAccount)
//Define output file name in usql script (works in Linux and OSX)
def i = ("sed --version".execute().text.contains("GNU")) ? '--' : '""'
def sed_string =  "sed -i " + i + " s/OUTPUT_FILE/" + variables.get("AZ_DLA_OUTPUT") + "/ " + variables.get("AZ_DLA_SCRIPT")
sed_string.execute()
//Submit job and save ID
def submit_string = "az dla job submit --account " + variables.get("AZ_DLA_ACCOUNT") + " --job-name " + variables.get("AZ_DLA_JOB") + " --script @" + variables.get("AZ_DLA_SCRIPT")
def submit_exec = submit_string.execute()
submit_exec.waitFor()
if (submit_exec.exitValue() != 0)
{
  println submit_exec.err.text
  System.exit(1)
}
def job = new groovy.json.JsonSlurper().parseText(submit_exec.in.text)
println("Submitted job id " + job.jobId)
variables.put("AZ_DLA_JOB_ID", job.jobId)
variables.put("IS_FINISHED","false")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Wait_for_job" >
      <description>
        <![CDATA[ Periodically monitor the status of the submitted job, waiting for it to be finished ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_dla.png"/>
        <info name="task.documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_azure_data_lake"/>
      </genericInformation>
      <depends>
        <task ref="Submit_job"/>
      </depends>
      <pre>
        <script>
          <code language="bash">
            <![CDATA[
#Verify installation of Azure CLI
if ! type "az" >/dev/null 2>&1; then
  echo "Installing Azure CLI"

  # Update sources and install Microsoft's generic key
  AZ_REPO=$(lsb_release -cs)
  echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
     sudo tee /etc/apt/sources.list.d/azure-cli.list
  sudo apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893

  # Install new key needed as of May 2018
  curl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -

  #install Azure CLI
  sudo apt-get install apt-transport-https
  sudo apt-get update && sudo apt-get install azure-cli

fi
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
//Check all credentials and variables are set
if (!credentials.get("AZ_U") || !credentials.get("AZ_P") || !variables.get("AZ_DLA_ACCOUNT") || !variables.get("AZ_DLA_SCRIPT") || !variables.get("AZ_DLA_JOB") || !variables.get("AZ_DLA_OUTPUT")) {
  println("Missing credentials and/or variables, please make sure to set them all.")
  System.exit(1)
}
//Connect to Azure Data Lake
def connection_string
if (credentials.get("AZ_T") == null) {
  connection_string = "az login -u " + credentials.get("AZ_U") + " -p " + credentials.get("AZ_P")
} else {
  connection_string = "az login --service-principal -u " + credentials.get("AZ_U") + " -p " + credentials.get("AZ_P") + " -t " + credentials.get("AZ_T")
}
def conn_exec = connection_string.execute()
conn_exec.waitFor()
if (conn_exec.exitValue() != 0)
{
  println conn_exec.err.text
  System.exit(1)
}
//Set subscription if needed
if (variables.get("AZ_SUBSCRIPTION")) {
  def subscription_string = "az account set --subscription " + variables.get("AZ_SUBSCRIPTION")
  def subscription_exec = subscription_string.execute()
  subscription_exec.waitFor()
  if (subscription_exec.exitValue() != 0)
  {
    println subscription_exec.err.text
    System.exit(1)
  }
}
//Get Job Status
def search_string = "az dla job show --account " + variables.get("AZ_DLA_ACCOUNT") + " --job-identity " + variables.get("AZ_DLA_JOB_ID")
def search_exec = search_string.execute()
search_exec.waitFor()
if (search_exec.exitValue() != 0)
{
  println search_exec.err.text
  System.exit(1)
}
def job = new groovy.json.JsonSlurper().parseText(search_exec.in.text)
//Wait for the job to finish
if (job.endTime != null) {
  variables.put("IS_FINISHED","true")
  if (job.result == "Succeeded") {
    println("Job " + variables.get("AZ_DLA_JOB_ID") + " finished successfully.")
  } else {
    println("Job " + variables.get("AZ_DLA_JOB_ID") + " finished with errors:")
    println job.errorMessage
    System.exit(1)
  }
} else {
  println("Waiting for job to finish...")
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="Wait_for_job">
          <script>
            <code language="javascript">
              <![CDATA[
if(variables.get("IS_FINISHED") ==  "false"){
	loop = variables.get("AZ_CRON_MONITOR");
}else{
	loop = false;
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
    </task>
    <task name="Display_result" >
      <description>
        <![CDATA[ Display the result file ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_dla.png"/>
        <info name="task.documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_azure_data_lake"/>
      </genericInformation>
      <depends>
        <task ref="Wait_for_job"/>
      </depends>
      <inputFiles>
        <files  includes="opencsv-4.1.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="opencsv-4.1.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <pre>
        <script>
          <code language="bash">
            <![CDATA[
#Verify installation of Azure CLI
if ! type "az" >/dev/null 2>&1; then
  echo "Installing Azure CLI"

  # Update sources and install Microsoft's generic key
  AZ_REPO=$(lsb_release -cs)
  echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
     sudo tee /etc/apt/sources.list.d/azure-cli.list
  sudo apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893

  # Install new key needed as of May 2018
  curl -L https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -

  #install Azure CLI
  sudo apt-get install apt-transport-https
  sudo apt-get update && sudo apt-get install azure-cli

fi
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import com.opencsv.CSVReader

//Check all credentials and variables are set
if (!credentials.get("AZ_U") || !credentials.get("AZ_P") || !variables.get("AZ_DLA_ACCOUNT") || !variables.get("AZ_DLA_SCRIPT") || !variables.get("AZ_DLA_JOB") || !variables.get("AZ_DLA_OUTPUT")) {
  println("Missing credentials and/or variables, please make sure to set them all.")
  System.exit(1)
}
//Connect to Azure Data Lake
def connection_string
if (credentials.get("AZ_T") == null) {
  connection_string = "az login -u " + credentials.get("AZ_U") + " -p " + credentials.get("AZ_P")
} else {
  connection_string = "az login --service-principal -u " + credentials.get("AZ_U") + " -p " + credentials.get("AZ_P") + " -t " + credentials.get("AZ_T")
}
def conn_exec =  connection_string.execute()
conn_exec.waitFor()
if (conn_exec.exitValue() != 0)
{
  println conn_exec.err.text
  System.exit(1)
}
//Set subscription if needed
if (variables.get("AZ_SUBSCRIPTION")) {
  def subscription_string = "az account set --subscription " + variables.get("AZ_SUBSCRIPTION")
  def subscription_exec = subscription_string.execute()
  subscription_exec.waitFor()
  if (subscription_exec.exitValue() != 0)
  {
    println subscription_exec.err.text
    System.exit(1)
  }
}
//Download output file
def download_string = "az dls fs download --account " + variables.get("AZ_DLS_ACCOUNT") + " --source-path /" + variables.get("AZ_DLA_OUTPUT") + " --destination-path " + variables.get("AZ_DLA_OUTPUT")
def download_exec = download_string.execute()
download_exec.waitFor()
if (download_exec.exitValue() != 0)
{
  println download_exec.err.text
  System.exit(1)
}
println download_exec.in.text
//Display file
println("Raw output file: " + variables.get("AZ_DLA_OUTPUT"))
println("You can visualize the formatted output in the Preview tab")

def reader = new CSVReader(new FileReader(new File(variables.get("AZ_DLA_OUTPUT"))))
def writer = new StringWriter()
def builder = new groovy.xml.MarkupBuilder(writer)
def nextRecord

builder.html{
  head{
    style(type:"text/css", '''
    table {
      border: 1px solid #999999;
      text-align: center;
      border-collapse: collapse;
      width: 100%;
    }
    td {
      border: 1px solid #999999;
      padding: 3px 2px;
      font-size: 13px;
      border-bottom: 1px solid #999999;
    }
    th {
      font-size: 17px;
      font-weight: bold;
      color: #FFFFFF;
      text-align: center;
      background: #0B6FA4;
      border-left: 2px solid #999999;
    }
    ''')
  }
  body{
    table {
	  while ((nextRecord = reader.readNext()) != null) {
        tr {
          nextRecord.each {
            td("${it}")
          }
        }
      }
    }
  }
}

result = writer.toString().getBytes("UTF-8");
resultMetadata.put("file.extension", ".html")
resultMetadata.put("file.name", "result.html")
resultMetadata.put("content.type", "text/html")
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="$AZ_DLA_OUTPUT" accessMode="transferToUserSpace"/>
      </outputFiles>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1139px;
            height:566px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-205.9875030517578px;left:-497.5px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_1247" style="top: 211px; left: 502.5px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure_dla.png" width="20px">&nbsp;<span class="name">Submit_job</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1250" style="top: 339px; left: 502.5px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure_dla.png" width="20px">&nbsp;<span class="name">Wait_for_job</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1253" style="top: 467px; left: 502.5px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure_dla.png" width="20px">&nbsp;<span class="name">Display_result</span></a></div><svg style="position:absolute;left:536.9817132113825px;top:250.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path></svg><svg style="position:absolute;left:582.0266769263776px;top:288.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_1264" style="position: absolute; transform: translate(-50%, -50%); left: 594px; top: 358.5px;">loop</div><svg style="position:absolute;left:536.9817132113825px;top:378.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 542px; top: 241px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 542px; top: 369px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 542px; top: 329px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 592px; top: 329px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 592px; top: 369px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 542px; top: 497px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 542px; top: 457px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>