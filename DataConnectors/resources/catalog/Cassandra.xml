<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="Cassandra" projectName="3. NoSQL" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="CASSANDRA_HOST" value="localhost" />
    <variable name="CASSANDRA_KEYSPACE" value="" />
    <variable name="CASSANDRA_PORT" value="" />
  </variables>
  <description>
    <![CDATA[ Import data from (or export data to) Cassandra database. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="data-connectors"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/cassandra.png"/>
    <info name="Documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Import_from_Cassandra" >
      <description>
        <![CDATA[ This task allows importing data from Cassandra.
The task requires the following third-party credentials: CASSANDRA_USERNAME and CASSANDRA_PASSWORD. Please refer to the User documentation to learn how to add third-party credentials.
It requires the following variables:
CASSANDRA_KEYSPACE: Keyspace to use.
CASSANDRA_QUERY: Query to fetch data.
CASSANDRA_OUPUT: Relative path in the data space used to save the results in a CSV file. ]]>
      </description>
      <variables>
        <variable name="LABEL" value="" inherited="false" />
        <variable name="CASSANDRA_QUERY" value="" inherited="false" />
        <variable name="CASSANDRA_OUTPUT" value="" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/cassandra.png"/>
        <info name="task.documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
      </genericInformation>
      <depends>
        <task ref="Export_to_Cassandra"/>
      </depends>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_dlm3/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
import numpy as np
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from cassandra.query import dict_factory

print("BEGIN Import_Data from CASSANDRA ...")
AUTHENTICATION = False
HOST = variables.get("CASSANDRA_HOST")
PORT = variables.get("CASSANDRA_PORT")
KEYSPACE = variables.get("CASSANDRA_KEYSPACE")
CASSANDRA_USERNAME = credentials.get("CASSANDRA_USERNAME")
CASSANDRA_PASSWORD = credentials.get("CASSANDRA_PASSWORD")
QUERY = variables.get("CASSANDRA_QUERY")
CASSANDRA_OUTPUT = variables.get("CASSANDRA_OUTPUT")

if HOST is None:
    print("CASSANDRA_HOST not defined by the user.")
    sys.exit(1)
if PORT is None:
    print("CASSANDRA_PORT not defined by the user. Using the default value: 9042")
    PORT = 9042
if KEYSPACE is None: 
    print("CASSANDRA_KEYSPACE not defined by the user.")
    sys.exit(1)
if (CASSANDRA_USERNAME is None and CASSANDRA_PASSWORD is not None) or (CASSANDRA_USERNAME is not None and CASSANDRA_PASSWORD is None):
    print("[ERROR] CASSANDRA_USERNAME and CASSANDRA_PASSWORD are used in junction. They should be either both entered or both blank.")
    sys.exit(1)
if CASSANDRA_USERNAME is not None and CASSANDRA_PASSWORD is not None:
    AUTHENTICATION = True
    print("*******Authentication is enabled*******")
else:
    print("*******Authentication is not enabled*******")
if QUERY is None:
    print("CASSANDRA_QUERY not defined by the user.")
    sys.exit(1)
    
########

def pandas_factory(colnames, rows):
    return pd.DataFrame(rows, columns=colnames)
auth_provider = PlainTextAuthProvider(
                    username=CASSANDRA_USERNAME, password=CASSANDRA_PASSWORD)
cluster = Cluster(contact_points=[HOST], port=PORT, auth_provider=auth_provider)
session = cluster.connect(KEYSPACE)
session.row_factory = pandas_factory
#10000000 needed for large queries, otherwise driver will do pagination. Default is 50000.
session.default_fetch_size = 10000000

print("EXECUTING QUERY...")
print('CASSANDRA_HOST='+HOST)
print('CASSANDRA_PORT=', PORT)
print('CASSANDRA_KEYSPACE='+KEYSPACE)
print('CASSANDRA_QUERY='+QUERY)
if CASSANDRA_OUTPUT:
    print('CASSANDRA_OUTPUT='+CASSANDRA_OUTPUT)

rows = session.execute(QUERY)
dataframe = rows._current_rows

columns_name = dataframe.columns
columns_number = len(columns_name)
data = dataframe.values
data_df = pd.DataFrame(data=data,columns=columns_name)


COLUMNS_NAME_JSON = pd.Series(columns_name).to_json()
DATA_TRAIN_DF_JSON = data_df.to_json(orient='split')
DATA_TEST_DF_JSON = data_df.to_json(orient='split')
DATAFRAME_JSON = dataframe.to_json(orient='split')


try:
    variables.put("DATAFRAME_JSON", DATAFRAME_JSON)
    variables.put("COLUMNS_NAME_JSON", COLUMNS_NAME_JSON)
    variables.put("DATA_TRAIN_DF_JSON", DATA_TRAIN_DF_JSON)
    variables.put("DATA_TEST_DF_JSON", DATA_TEST_DF_JSON)
    
    # Write results to the task result in CSV format
    result = dataframe.to_csv(index=False).encode('utf-8')
    resultMetadata.put("file.extension", ".csv")
    resultMetadata.put("file.name", "result.csv")
    resultMetadata.put("content.type", "text/csv")
    
    # If an CASSANDRA_OUTPUT path in the dataspace is designated, then write to this file.
    if CASSANDRA_OUTPUT:
         dataframe.to_csv(path_or_buf=CASSANDRA_OUTPUT, index=False)
except NameError:
    pass

#***********************************************
print("END Import_Data")
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="$CASSANDRA_OUTPUT" accessMode="transferToGlobalSpace"/>
      </outputFiles>
    </task>
    <task name="Export_to_Cassandra" >
      <description>
        <![CDATA[ This task allows exporting data to Cassandra.
The task requires the following third-party credentials: CASSANDRA_USERNAME and CASSANDRA_PASSWORD. Please refer to the User documentation to learn how to add third-party credentials.
It requires the following variables:
CASSANDRA_TABLE (required) Data is stored in tables containing rows of columns, similar to SQL definitions.. It is created if it does not exist
CASSANDRA_KEY (required) A primary key identifies the location and order of stored data. The primary key is defined when the table is created and cannot be altered.
CASSANDRA_INPUT (required) is the relative path of the CSV file that contains data to be imported. This variable can:
 - An URL. Valid URL schemes include http, ftp, s3, and file. 
 - A relative path in the data space of a csv file. ]]>
      </description>
      <variables>
        <variable name="CASSANDRA_TABLE" value="" inherited="false" />
        <variable name="CASSANDRA_PRIMARY_KEY" value="" inherited="false" />
        <variable name="CASSANDRA_INPUT" value="" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/cassandra.png"/>
        <info name="task.documentation" value="http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_nosql"/>
      </genericInformation>
      <inputFiles>
        <files  includes="$CASSANDRA_INPUT" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_dlm3/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import pandas as pd
import numpy as np
import re
import sys
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
from cassandra.query import dict_factory

print("BEGIN Export_Data to CASSANDRA ...")
AUTHENTICATION = False
HOST = variables.get("CASSANDRA_HOST")
PORT = variables.get("CASSANDRA_PORT")
KEYSPACE = variables.get("CASSANDRA_KEYSPACE")
CASSANDRA_USERNAME = credentials.get("CASSANDRA_USERNAME")
CASSANDRA_PASSWORD = credentials.get("CASSANDRA_PASSWORD")
TABLE = variables.get("CASSANDRA_TABLE")
CASSANDRA_INPUT = variables.get("CASSANDRA_INPUT")
PRIMARY_KEY = variables.get("CASSANDRA_PRIMARY_KEY")

if HOST is None:
    print("CASSANDRA_HOST not defined by the user.")
    sys.exit(1)
if PORT is None:
    print("CASSANDRA_PORT not defined by the user. Using the default value: 9042")
    PORT = 9042
if KEYSPACE is None: 
    print("CASSANDRA_KEYSPACE not defined by the user.")
    sys.exit(1)
if (CASSANDRA_USERNAME is None and CASSANDRA_PASSWORD is not None) or (CASSANDRA_USERNAME is not None and CASSANDRA_PASSWORD is None):
    print("[ERROR] CASSANDRA_USERNAME and CASSANDRA_PASSWORD are used in junction. They should be either both entered or both blank.")
    sys.exit(1)
if CASSANDRA_USERNAME is not None and CASSANDRA_PASSWORD is not None:
    AUTHENTICATION = True
    print("*******Authentication is enabled*******")
else:
    print("*******Authentication is not enabled*******")
if TABLE is None:
    print("CASSANDRA_TABLE not defined by the user.")
    sys.exit(1)
if CASSANDRA_INPUT is None:
    print("CASSANDRA_INPUT not defined by the user.")
    sys.exit(1)
if PRIMARY_KEY is None:
    print("PRIMARY_KEY not defined by the user.")
    sys.exit(1)

########
if AUTHENTICATION:
    auth_provider = PlainTextAuthProvider(
                    username=CASSANDRA_USERNAME, password=CASSANDRA_PASSWORD)
    cluster = Cluster(contact_points=[HOST], port=PORT, auth_provider=auth_provider)
else:
    cluster = Cluster(contact_points=[HOST], port=PORT)

session = cluster.connect(KEYSPACE)

print("INSERTING DATA IN CASSANDRA...")
print('CASSANDRA_HOST='+HOST)
print('CASSANDRA_PORT=', PORT)
print('CASSANDRA_KEYSPACE='+KEYSPACE)
print('CASSANDRA_TABLE=' + TABLE)
print('CASSANDRA_PRIMARY_KEY=' + PRIMARY_KEY)

dataframe = pd.read_csv(CASSANDRA_INPUT, sep='\t|;|,',index_col=None, engine='python')
column_names = list(dataframe.columns.values) 
column_types= re.sub("\d", "",','.join('{}'.format(*k) for k in zip(dataframe.dtypes))).split(',')
TABLE_HEADER = ',\n'.join('{} {}'.format(*t) for t in zip(column_names, column_types))
CREATE_TABLE = """CREATE TABLE IF NOT EXISTS {0}.{1}({2},
  PRIMARY KEY ({3}));""".format(KEYSPACE, TABLE, TABLE_HEADER, PRIMARY_KEY)

session.execute(CREATE_TABLE)
INSERT_STATEMENT = """ INSERT INTO {0} ({1}) VALUES """.format(TABLE, ','.join(map(str, column_names)))
BATCH_SIZE = dataframe.size
BATCH_QUERY = 'BEGIN BATCH\n'
for row in dataframe.itertuples(index = False):
    BATCH_QUERY += """{0}({1})\n""".format(INSERT_STATEMENT ,','.join(map(str, row)))
BATCH_QUERY += 'APPLY BATCH;'
try:
    session.execute(BATCH_QUERY)
except Exception as e:
    print(e)
    sys.exit(1)
print("END Export_Data")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2864px;
            height:3248px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-481px;left:-864px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_238" style="top: 614px; left: 869px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/cassandra.png" width="20px">&nbsp;<span class="name">Import_from_Cassandra</span></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_241" style="top: 486px; left: 869px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/cassandra.png" width="20px">&nbsp;<span class="name">Export_to_Cassandra</span></a></div><svg style="position:absolute;left:924.5px;top:525.5px" width="26.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 5.5 88 C 15.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.868953124999999,66.78168750000002 L12.848095417762192,46.18537370290451 L6.478576933147113,52.85089950918167 L-1.0826925730561543,47.575749894757394 L7.868953124999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M7.868953124999999,66.78168750000002 L12.848095417762192,46.18537370290451 L6.478576933147113,52.85089950918167 L-1.0826925730561543,47.575749894757394 L7.868953124999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 930.5px; top: 644px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 930.5px; top: 604px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 925px; top: 516px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>