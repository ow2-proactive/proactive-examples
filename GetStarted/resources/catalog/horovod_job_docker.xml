<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.12" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Horovod_Job_Docker" onTaskError="continueJobExecution" priority="normal" projectName="2. Advanced Workflows" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd">
  <variables>
    <variable model="" name="NS" value=""/>
    <variable model="" name="NS_BATCH" value=""/>
    <variable model="PA:Integer" name="NUMBER_OF_NODES" value="1"/>
    <variable model="PA:Integer" name="GPUS_PER_NODE" value="1"/>
    <variable model="" name="NODE_ACCESS_TOKEN" value="GPU"/>
    <variable model="PA:Boolean" name="CONTAINER_GPU_ENABLED" value="True"/>
    <variable name="CONTAINER_IMAGE" value="docker://activeeon/horovod"/>
    <variable model="PA:LIST(docker,podman,singularity)" name="CONTAINER_PLATFORM" value="docker"/>
    <variable model="PA:Boolean" name="CONTAINER_ROOTLESS_ENABLED" value="False"/>
  </variables>
  <description>
    <![CDATA[ A Horovod workflow with multi-node multi-gpu support. Horovod is a distributed training framework for TensorFlow, Keras, PyTorch, and MXNet. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="basic-examples"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/horovod.png"/>
<info name="Documentation" value="https://eng.uber.com/horovod/"/>
<info name="NS" value="$NS"/>
<info name="NS_BATCH" value="$NS_BATCH"/>
<info name="NODE_ACCESS_TOKEN" value="$NODE_ACCESS_TOKEN"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Horovod_Task">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <variables>
        <variable inherited="false" name="TASK_FILE_PATH" value="/tmp/main.py"/>
        <variable inherited="false" name="PYTHON_COMMAND" value="python"/>
      </variables>
      <genericInformation>
        <info name="PRE_SCRIPT_AS_FILE" value="$TASK_FILE_PATH"/>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/horovod.png"/>
        <info name="PYTHON_COMMAND" value="$PYTHON_COMMAND"/>
      </genericInformation>
      <parallel numberOfNodes="1">
        <topology>
          <singleHostExclusive/>
        </topology>
      </parallel>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
/*
This script creates a container fork environment for various machine learning usages (CUDA, GPU, RAPIDS ...)
and uses task or job variables for configuration.

Variables:
 - CONTAINER_PLATFORM: docker, podman, singularity or null/empty (none)
 - CONTAINER_IMAGE: container image name (default=activeeon/dlm3)
 - CONTAINER_GPU_ENABLED: true/false, set to false to disable gpu support (default=true)
 - USE_NVIDIA_RAPIDS: true/false, set to true to use activeeon/rapidsai image (default=false)
 - HOST_LOG_PATH: optional host path to store logs
 - CONTAINER_LOG_PATH: mounting point of optional logs in the container
 - CONTAINER_ROOTLESS_ENABLED: true/false, set to false to disable rootless mode (default=true)

If used on windows:
 - currently, only linux containers are supported
 - make sure the drives containing the scheduler installation and TEMP folders are shared with docker containers
 - the container used must have java installed by default in the /usr folder. Change the value of the java home parameter to use a different installation path

On linux, the java installation used by the ProActive Node will be also used inside the container
*/

import org.ow2.proactive.utils.OperatingSystem
import org.ow2.proactive.utils.OperatingSystemFamily
import org.codehaus.groovy.runtime.StackTraceUtils

def CONTAINER_GPU_ENABLED = true
if ("false".equalsIgnoreCase(variables.get("CONTAINER_GPU_ENABLED")) ||
    "false".equalsIgnoreCase(variables.get("DOCKER_GPU_ENABLED"))) {  // backwards compatibility
    CONTAINER_GPU_ENABLED = false
}

def CUDA_ENABLED = false
def CUDA_HOME = System.getenv('CUDA_HOME')
def CUDA_HOME_DEFAULT = "/usr/local/cuda"
if (CUDA_HOME && (new File(CUDA_HOME)).isDirectory()) {
    CUDA_ENABLED = true
} else if ((new File(CUDA_HOME_DEFAULT)).isDirectory()) {
    CUDA_ENABLED = true
}
if (!CUDA_ENABLED) {
    CONTAINER_GPU_ENABLED = false
}

def USE_NVIDIA_RAPIDS = false
if ("true".equalsIgnoreCase(variables.get("USE_NVIDIA_RAPIDS"))) {
    USE_NVIDIA_RAPIDS = true
}

def DEFAULT_CONTAINER_IMAGE = "docker://activeeon/dlm3"

// activate CUDA support if CONTAINER_GPU_ENABLED is True
if (CONTAINER_GPU_ENABLED) {
    if (USE_NVIDIA_RAPIDS) {
        DEFAULT_CONTAINER_IMAGE = "docker://activeeon/rapidsai"
    } else {
        DEFAULT_CONTAINER_IMAGE = "docker://activeeon/cuda"
    }
}

def CONTAINER_IMAGE = DEFAULT_CONTAINER_IMAGE
if (variables.get("CONTAINER_IMAGE") != null && !variables.get("CONTAINER_IMAGE").isEmpty()) {
    CONTAINER_IMAGE = variables.get("CONTAINER_IMAGE")
} else if(variables.get("DOCKER_IMAGE") != null && !variables.get("DOCKER_IMAGE").isEmpty()) {
    CONTAINER_IMAGE = "docker://" + variables.get("DOCKER_IMAGE") // backwards compatibility
} else {
    println "Using the default image: " + CONTAINER_IMAGE
}

def CONTAINER_PLATFORM = variables.get("CONTAINER_PLATFORM")
def SUPPORTED_PLATFORMS = ["docker", "podman", "singularity"]
def CONTAINER_ENABLED = SUPPORTED_PLATFORMS.any{it.equalsIgnoreCase(CONTAINER_PLATFORM)}

if ("true".equalsIgnoreCase(variables.get("DOCKER_ENABLED"))) {
    // backwards compatibility
    CONTAINER_PLATFORM = "docker"
    CONTAINER_ENABLED = true
}
if ((new File("/.dockerenv")).exists() && ! (new File("/var/run/docker.sock")).exists()) {
    println ("Already inside docker container, without host docker access")
    CONTAINER_ENABLED = false
}
if (CONTAINER_ENABLED) {
    try {
        Runtime.getRuntime().exec(CONTAINER_PLATFORM + " --help")
    } catch (Exception e) {
        println CONTAINER_PLATFORM + " does not exists : " + e.getMessage()
        CONTAINER_ENABLED = false
    }
}

def HOST_LOG_PATH = null
if (variables.get("HOST_LOG_PATH") != null && !variables.get("HOST_LOG_PATH").isEmpty()) {
    HOST_LOG_PATH = variables.get("HOST_LOG_PATH")
} else if (variables.get("MOUNT_LOG_PATH") != null && !variables.get("MOUNT_LOG_PATH").isEmpty()) {
    HOST_LOG_PATH = variables.get("MOUNT_LOG_PATH") // backwards compatibility
}

def CONTAINER_LOG_PATH = null
if (variables.get("CONTAINER_LOG_PATH") != null && !variables.get("CONTAINER_LOG_PATH").isEmpty()) {
    CONTAINER_LOG_PATH = variables.get("CONTAINER_LOG_PATH")
} else if (variables.get("DOCKER_LOG_PATH") != null && !variables.get("DOCKER_LOG_PATH").isEmpty()) {
    CONTAINER_LOG_PATH = variables.get("DOCKER_LOG_PATH") // backwards compatibility
}

CONTAINER_ROOTLESS_ENABLED = true
if ("false".equalsIgnoreCase(variables.get("CONTAINER_ROOTLESS_ENABLED"))) {
    CONTAINER_ROOTLESS_ENABLED = false
}

println "Fork environment info..."
println "CONTAINER_PLATFORM:         " + CONTAINER_PLATFORM
println "CONTAINER_ENABLED:          " + CONTAINER_ENABLED
println "CONTAINER_IMAGE:            " + CONTAINER_IMAGE
println "CONTAINER_GPU_ENABLED:      " + CONTAINER_GPU_ENABLED
println "CUDA_ENABLED:               " + CUDA_ENABLED
println "USE_NVIDIA_RAPIDS:          " + USE_NVIDIA_RAPIDS
println "HOST_LOG_PATH:              " + HOST_LOG_PATH
println "CONTAINER_LOG_PATH:         " + CONTAINER_LOG_PATH
println "CONTAINER_ROOTLESS_ENABLED: " + CONTAINER_ROOTLESS_ENABLED

String osName = System.getProperty("os.name")
println "Operating system : " + osName
OperatingSystem operatingSystem = OperatingSystem.resolveOrError(osName)
OperatingSystemFamily family = operatingSystem.getFamily()

// If docker or podman
if (CONTAINER_ENABLED && (
    "docker".equalsIgnoreCase(CONTAINER_PLATFORM) ||
    "podman".equalsIgnoreCase(CONTAINER_PLATFORM))) {

    if (CONTAINER_IMAGE.startsWith("docker://")) {
        CONTAINER_IMAGE = CONTAINER_IMAGE.substring(CONTAINER_IMAGE.indexOf("://") + 3)
    }

    // Prepare Docker parameters
    containerName = CONTAINER_IMAGE
    cmd = []
    cmd.add(CONTAINER_PLATFORM.toLowerCase())
    cmd.add("run")
    cmd.add("--rm")
    cmd.add("--shm-size=256M")
    // cmd.add("--env")
    // cmd.add("HOME=/tmp")

    if (CUDA_ENABLED && CONTAINER_GPU_ENABLED) {
        if ("docker".equalsIgnoreCase(CONTAINER_PLATFORM)) {
            // Versions earlier than 19.03 require nvidia-docker2 and the --runtime=nvidia flag.
            // On versions including and after 19.03, you will use the nvidia-container-toolkit package
            // and the --gpus all flag.
            try {
                def sout = new StringBuffer(), serr = new StringBuffer()
                def proc = 'docker version -f "{{.Server.Version}}"'.execute()
                proc.consumeProcessOutput(sout, serr)
                proc.waitForOrKill(1000)
                docker_version = sout.toString()
                docker_version = docker_version.substring(1, docker_version.length()-2)
                docker_version_major = docker_version.split("\\.")[0].toInteger()
                docker_version_minor = docker_version.split("\\.")[1].toInteger()
                println "Docker version: " + docker_version
                if ((docker_version_major >= 19) && (docker_version_minor >= 3)) {
                    cmd.add("--gpus=all")
                } else {
                    cmd.add("--runtime=nvidia")
                }
            } catch (Exception e) {
                println "Error while getting the docker version: " + e.getMessage()
                println "DOCKER_GPU_ENABLED is off"
            }
        } else {
            cmd.add("--runtime=nvidia")
        }
        // rootless containers leveraging NVIDIA GPUs
        // needed when cgroups is disabled in nvidia-container-runtime
        // /etc/nvidia-container-runtime/config.toml => no-cgroups = true
        cmd.add("--privileged") // https://github.com/NVIDIA/nvidia-docker/issues/1171
    }

    switch (family) {
        case OperatingSystemFamily.WINDOWS:
            isWindows = true
            break
        default:
            isWindows = false
    }
    forkEnvironment.setDockerWindowsToLinux(isWindows)

    // Prepare ProActive home volume
    paHomeHost = variables.get("PA_SCHEDULER_HOME")
    paHomeContainer = (isWindows ? forkEnvironment.convertToLinuxPath(paHomeHost) : paHomeHost)
    cmd.add("-v")
    cmd.add(paHomeHost + ":" + paHomeContainer)
    // Prepare working directory (For Dataspaces and serialized task file)
    workspaceHost = localspace
    workspaceContainer = (isWindows ? forkEnvironment.convertToLinuxPath(workspaceHost) : workspaceHost)
    cmd.add("-v")
    cmd.add(workspaceHost + ":" + workspaceContainer)

    cachespaceHost = cachespace
    cachespaceContainer = (isWindows ? forkEnvironment.convertToLinuxPath(cachespaceHost) : cachespaceHost)
    cachespaceHostFile = new File(cachespaceHost)
    if (cachespaceHostFile.exists() && cachespaceHostFile.canRead()) {
        cmd.add("-v")
        cmd.add(cachespaceHost + ":" + cachespaceContainer)
    } else {
        println cachespaceHost + " does not exist or is not readable, access to cache space will be disabled in the container"
    }

    if (!isWindows) {
        // when not on windows, mount and use the current JRE
        currentJavaHome = System.getProperty("java.home")
        forkEnvironment.setJavaHome(currentJavaHome)
        cmd.add("-v")
        cmd.add(currentJavaHome + ":" + currentJavaHome)

        // when not on windows, mount a shared folder if it exists
        sharedDirectory = new File("/shared")
        if (sharedDirectory.isDirectory() && sharedDirectory.canWrite()) {
            cmd.add("-v")
            cmd.add("/shared:/shared")
        }
    }

    // Prepare log directory
    logPathVolume = ""
    if (HOST_LOG_PATH && CONTAINER_LOG_PATH) {
        mountLogHost = HOST_LOG_PATH
        logPathContainer = CONTAINER_LOG_PATH
        cmd.add("-v")
        cmd.add(mountLogHost + ":" + logPathContainer)
    }

    // Prepare container working directory
    cmd.add("-w")
    cmd.add(workspaceContainer)

    // linux on windows does not allow sharing identities (such as AD identities)
    if (!isWindows && CONTAINER_ROOTLESS_ENABLED) {
        sigar = new org.hyperic.sigar.Sigar()
        try {
            pid = sigar.getPid()
            creds = sigar.getProcCred(pid)
            uid = creds.getUid()
            gid = creds.getGid()
            cmd.add("--user=" + uid + ":" + gid)
        } catch (Exception e) {
            println "Cannot retrieve user or group id : " + e.getMessage()
        } finally {
            sigar.close()
        }
    }

    cmd.add(containerName)
    forkEnvironment.setPreJavaCommand(cmd)

    // Show the generated command
    println "CONTAINER COMMAND : " + forkEnvironment.getPreJavaCommand()
}

// If singularity
if (CONTAINER_ENABLED &&
    "singularity".equalsIgnoreCase(CONTAINER_PLATFORM)) {

    imageUrl = CONTAINER_IMAGE
    imageName = imageUrl.substring(imageUrl.indexOf("://") + 3).replace("/","_").replace(":","_")
    imageLockFileName = imageName + ".lock"
    userHome = System.getProperty("user.home")

    try {
        switch (family) {
            case OperatingSystemFamily.WINDOWS:
            throw new IllegalStateException("Singularity is not supported on Windows operating system")
            case OperatingSystemFamily.MAC:
            throw new IllegalStateException("Singularity is not supported on Mac operating system")
            default:
                isWindows = false;
        }

        process = "singularity --version".execute()
        majorVersion = 0
        if (process.waitFor() == 0) {
            version = process.text
            version = version.replace("singularity version ", "").trim()
            println "Singularity version: " + version
            majorVersion = Integer.parseInt(version.substring(0, version.indexOf(".")))
        } else {
            throw new IllegalStateException("Cannot find singularity command")
        }

        if (majorVersion >= 3) {
            imageFile = imageName + ".sif"
        } else {
            imageFile = imageName + ".simg"
        }

        // synchronization to avoid concurrent NFS conflicts when creating the image
        imageLockPath = new File(userHome, imageLockFileName);
        if (!imageLockPath.exists()) {
            imageLockPath.createNewFile()
        } else {
            while (imageLockPath.exists()) {
                Thread.sleep(1000)
            }
        }

        // pull the container inside the synchronization lock
        if (majorVersion >= 3) {
            pullCmd = "singularity pull --dir " + userHome + " " + imageFile + " " + imageUrl
            println pullCmd
        	def env = System.getenv().collect { k, v -> "$k=$v" }
        	env.push('XDG_RUNTIME_DIR=/run/user/$UID')
        	process = pullCmd.execute(env, new File(userHome))
        } else {
            pullCmd = "singularity pull --name " + imageFile + " " + imageUrl
            def env = System.getenv().collect { k, v -> "$k=$v" }
            env.push("SINGULARITY_PULLFOLDER=" + userHome)
            process = pullCmd.execute(env, new File(userHome))
        }

        process.in.eachLine { line ->
            println line
        }
        process.waitFor()

        (new File(userHome, imageFile)).setReadable(true, false)

        // release lock
        imageLockPath.delete()

        cmd = []
        cmd.add("singularity")
        cmd.add("exec")

        if (CUDA_ENABLED && CONTAINER_GPU_ENABLED) {
            cmd.add("--nv") // add gpu support
        }

        forkEnvironment.setDockerWindowsToLinux(isWindows)

        // Prepare ProActive home volume
        paHomeHost = variables.get("PA_SCHEDULER_HOME")
        paHomeContainer = (isWindows ? forkEnvironment.convertToLinuxPath(paHomeHost) : paHomeHost)
        cmd.add("-B")
        cmd.add(paHomeHost + ":" + paHomeContainer)
        // Prepare working directory (For Dataspaces and serialized task file)
        workspaceHost = localspace
        workspaceContainer = (isWindows ? forkEnvironment.convertToLinuxPath(workspaceHost) : workspaceHost)
        cmd.add("-B")
        cmd.add(workspaceHost + ":" + workspaceContainer)

        cachespaceHost = cachespace
        cachespaceContainer = (isWindows ? forkEnvironment.convertToLinuxPath(cachespaceHost) : cachespaceHost)
        cachespaceHostFile = new File(cachespaceHost)
        if (cachespaceHostFile.exists() && cachespaceHostFile.canRead()) {
            cmd.add("-B")
            cmd.add(cachespaceHost + ":" + cachespaceContainer)
        } else {
            println cachespaceHost + " does not exist or is not readable, access to cache space will be disabled in the container"
        }

        if (!isWindows) {
            // when not on windows, mount and use the current JRE
            currentJavaHome = System.getProperty("java.home")
            forkEnvironment.setJavaHome(currentJavaHome)
            cmd.add("-B")
            cmd.add(currentJavaHome + ":" + currentJavaHome)
        }

        // Prepare container working directory
        cmd.add("--pwd")
        cmd.add(workspaceContainer)
        cmd.add((new File(userHome, imageFile)).getAbsolutePath())
        
        forkEnvironment.setPreJavaCommand(cmd)
        forkEnvironment.addSystemEnvironmentVariable("XDG_RUNTIME_DIR",'/run/user/$UID')

        // Show the generated command
        println "SINGULARITY COMMAND : " + forkEnvironment.getPreJavaCommand()
    } catch (Exception e) {
        StackTraceUtils.deepSanitize(e)
        e.stackTrace.head().lineNumber
        throw e
    } finally {
        (new File(userHome, imageLockFileName)).delete()
    }
}

if (!CONTAINER_ENABLED) {
    println "Fork environment disabled"
}
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="cpython">
            <![CDATA[
from __future__ import print_function
import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
# from keras import backend as K
from tensorflow.compat.v1.keras import backend as K
import math
import tensorflow as tf
import horovod.keras as hvd

# Horovod: initialize Horovod.
hvd.init()

# Horovod: pin GPU to be used to process local rank (one GPU per process)
# config = tf.ConfigProto()
config = tf.compat.v1.ConfigProto()
config.gpu_options.allow_growth = True
config.gpu_options.visible_device_list = str(hvd.local_rank())
# K.set_session(tf.Session(config=config))
K.set_session(tf.compat.v1.Session(config=config))

batch_size = 128
num_classes = 10

# Horovod: adjust number of epochs based on number of GPUs.
epochs = int(math.ceil(12.0 / hvd.size()))

# Input image dimensions
img_rows, img_cols = 28, 28

# The data, shuffled and split between train and test sets
(x_train, y_train), (x_test, y_test) = mnist.load_data()

if K.image_data_format() == 'channels_first':
    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
    input_shape = (1, img_rows, img_cols)
else:
    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
    input_shape = (img_rows, img_cols, 1)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# Convert class vectors to binary class matrices
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=input_shape))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

# Horovod: adjust learning rate based on number of GPUs.
opt = keras.optimizers.Adadelta(1.0 * hvd.size())

# Horovod: add Horovod Distributed Optimizer.
opt = hvd.DistributedOptimizer(opt)

model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=opt,
              metrics=['accuracy'])

callbacks = [
    # Horovod: broadcast initial variable states from rank 0 to all other processes.
    # This is necessary to ensure consistent initialization of all workers when
    # training is started with random weights or restored from a checkpoint.
    hvd.callbacks.BroadcastGlobalVariablesCallback(0),
]

# Horovod: save checkpoints only on worker 0 to prevent other workers from corrupting them.
if hvd.rank() == 0:
    callbacks.append(keras.callbacks.ModelCheckpoint('./checkpoint-{epoch}.h5'))

model.fit(x_train, y_train,
          batch_size=batch_size,
          callbacks=callbacks,
          epochs=epochs,
          verbose=1 if hvd.rank() == 0 else 0,
          validation_data=(x_test, y_test))
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
# Run on a machine with 4 GPUs:
# horovodrun -np 4 python train.py
#
# Equivalent Open MPI command:
# mpirun -np 4 \
#    -bind-to none -map-by slot \
#    -x NCCL_DEBUG=INFO -x LD_LIBRARY_PATH -x PATH \
#    -mca pml ob1 -mca btl ^openib \
#    python train.py
#
# Run on 4 machines with 4 GPUs each:
# horovodrun -np 16 -H server1:4,server2:4,server3:4,server4:4 python train.py
#
# Equivalent Open MPI command:
# mpirun -np 16 \
#    -H server1:4,server2:4,server3:4,server4:4 \
#    -bind-to none -map-by slot \
#    -x NCCL_DEBUG=INFO -x LD_LIBRARY_PATH -x PATH \
#    -mca pml ob1 -mca btl ^openib \
#    python train.py
echo "NUMBER_OF_NODES = $variables_NUMBER_OF_NODES"
echo "GPUS_PER_NODE   = $variables_GPUS_PER_NODE"
echo "PA_NODESNUMBER  = $variables_PA_NODESNUMBER"
echo "PA_NODESFILE    = $variables_PA_NODESFILE"
# export HOROVOD_GLOO_IFACE=enp8s0
# python=/home/proactive/anaconda3/bin/python
cat $variables_PA_NODESFILE
# mpirun -np $variables_GPUS_PER_NODE -hostfile $variables_PA_NODESFILE -bind-to none -map-by slot -x NCCL_DEBUG=INFO -x LD_LIBRARY_PATH -x PATH -mca pml ob1 -mca btl ^openib $python $variables_TASK_FILE_PATH
# echo horovodrun -np $variables_GPUS_PER_NODE -H `hostname`:$variables_GPUS_PER_NODE $python $variables_TASK_FILE_PATH
echo horovodrun -np $variables_GPUS_PER_NODE -H `hostname`:$variables_GPUS_PER_NODE python $variables_TASK_FILE_PATH
horovodrun -np $variables_GPUS_PER_NODE -H `hostname`:$variables_GPUS_PER_NODE python $variables_TASK_FILE_PATH
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            274.4965362548828
        </positionTop>
        <positionLeft>
            147.170166015625
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2350px;
            height:3071px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-269.4965362548828px;left:-142.170166015625px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_195" style="top: 274.51px; left: 147.187px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="The simplest task, ran by a bash engine."><img src="/automation-dashboard/styles/patterns/img/wf-icons/horovod.png" width="20px">&nbsp;<span class="name">Horovod_Task</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 187px; top: 304px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
