<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.12" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Horovod_Job_Docker" onTaskError="continueJobExecution" priority="normal" projectName="2. Advanced Workflows" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd">
  <variables>
    <variable name="NATIVE_SCHEDULER" value=""/>
    <variable name="NATIVE_SCHEDULER_PARAMS" value=""/>
    <variable name="NODE_ACCESS_TOKEN" value=""/>
    <variable model="PA:LIST(docker,podman,singularity)" name="CONTAINER_PLATFORM" value="docker"/>
    <variable name="CONTAINER_IMAGE" value="docker://activeeon/horovod"/>
    <variable model="PA:Boolean" name="CONTAINER_GPU_ENABLED" value="True"/>
    <variable model="PA:Boolean" name="CONTAINER_ROOTLESS_ENABLED" value="False"/>
    <variable model="PA:Integer" name="NUMBER_OF_NODES" value="1"/>
    <variable model="PA:Integer" name="GPUS_PER_NODE" value="1"/>
  </variables>
  <description>
    <![CDATA[ A Horovod workflow with multi-node multi-gpu support. Horovod is a distributed training framework for TensorFlow, Keras, PyTorch, and MXNet. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="basic-examples"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/horovod.png"/>
<info name="Documentation" value="https://eng.uber.com/horovod/"/>
<info name="NS" value="$NATIVE_SCHEDULER"/>
<info name="NS_BATCH" value="$NATIVE_SCHEDULER_PARAMS"/>
<info name="NODE_ACCESS_TOKEN" value="$NODE_ACCESS_TOKEN"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Horovod_Task">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <variables>
        <variable inherited="false" name="TASK_FILE_PATH" value="/tmp/main.py"/>
        <variable inherited="false" name="PYTHON_COMMAND" value="python"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/horovod.png"/>
        <info name="PRE_SCRIPT_AS_FILE" value="$TASK_FILE_PATH"/>
        <info name="PYTHON_COMMAND" value="$PYTHON_COMMAND"/>
      </genericInformation>
      <parallel numberOfNodes="1">
        <topology>
          <singleHostExclusive/>
        </topology>
      </parallel>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_horovod/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="cpython">
            <![CDATA[
from __future__ import print_function
import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
# from keras import backend as K
from tensorflow.compat.v1.keras import backend as K
import math
import tensorflow as tf
import horovod.keras as hvd

# Horovod: initialize Horovod.
hvd.init()

# Horovod: pin GPU to be used to process local rank (one GPU per process)
# config = tf.ConfigProto()
config = tf.compat.v1.ConfigProto()
config.gpu_options.allow_growth = True
config.gpu_options.visible_device_list = str(hvd.local_rank())
# K.set_session(tf.Session(config=config))
K.set_session(tf.compat.v1.Session(config=config))

batch_size = 128
num_classes = 10

# Horovod: adjust number of epochs based on number of GPUs.
epochs = int(math.ceil(12.0 / hvd.size()))

# Input image dimensions
img_rows, img_cols = 28, 28

# The data, shuffled and split between train and test sets
(x_train, y_train), (x_test, y_test) = mnist.load_data()

if K.image_data_format() == 'channels_first':
    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
    input_shape = (1, img_rows, img_cols)
else:
    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
    input_shape = (img_rows, img_cols, 1)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# Convert class vectors to binary class matrices
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=input_shape))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))

# Horovod: adjust learning rate based on number of GPUs.
opt = keras.optimizers.Adadelta(1.0 * hvd.size())

# Horovod: add Horovod Distributed Optimizer.
opt = hvd.DistributedOptimizer(opt)

model.compile(loss=keras.losses.categorical_crossentropy,
              optimizer=opt,
              metrics=['accuracy'])

callbacks = [
    # Horovod: broadcast initial variable states from rank 0 to all other processes.
    # This is necessary to ensure consistent initialization of all workers when
    # training is started with random weights or restored from a checkpoint.
    hvd.callbacks.BroadcastGlobalVariablesCallback(0),
]

# Horovod: save checkpoints only on worker 0 to prevent other workers from corrupting them.
if hvd.rank() == 0:
    callbacks.append(keras.callbacks.ModelCheckpoint('./checkpoint-{epoch}.h5'))

model.fit(x_train, y_train,
          batch_size=batch_size,
          callbacks=callbacks,
          epochs=epochs,
          verbose=1 if hvd.rank() == 0 else 0,
          validation_data=(x_test, y_test))
score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
# Run on a machine with 4 GPUs:
# horovodrun -np 4 python train.py
#
# Equivalent Open MPI command:
# mpirun -np 4 \
#    -bind-to none -map-by slot \
#    -x NCCL_DEBUG=INFO -x LD_LIBRARY_PATH -x PATH \
#    -mca pml ob1 -mca btl ^openib \
#    python train.py
#
# Run on 4 machines with 4 GPUs each:
# horovodrun -np 16 -H server1:4,server2:4,server3:4,server4:4 python train.py
#
# Equivalent Open MPI command:
# mpirun -np 16 \
#    -H server1:4,server2:4,server3:4,server4:4 \
#    -bind-to none -map-by slot \
#    -x NCCL_DEBUG=INFO -x LD_LIBRARY_PATH -x PATH \
#    -mca pml ob1 -mca btl ^openib \
#    python train.py
echo "NUMBER_OF_NODES = $variables_NUMBER_OF_NODES"
echo "GPUS_PER_NODE   = $variables_GPUS_PER_NODE"
echo "PA_NODESNUMBER  = $variables_PA_NODESNUMBER"
echo "PA_NODESFILE    = $variables_PA_NODESFILE"
# export HOROVOD_GLOO_IFACE=enp8s0
# python=/home/proactive/anaconda3/bin/python
cat $variables_PA_NODESFILE
# mpirun -np $variables_GPUS_PER_NODE -hostfile $variables_PA_NODESFILE -bind-to none -map-by slot -x NCCL_DEBUG=INFO -x LD_LIBRARY_PATH -x PATH -mca pml ob1 -mca btl ^openib $python $variables_TASK_FILE_PATH
# echo horovodrun -np $variables_GPUS_PER_NODE -H `hostname`:$variables_GPUS_PER_NODE $python $variables_TASK_FILE_PATH
echo horovodrun -np $variables_GPUS_PER_NODE -H `hostname`:$variables_GPUS_PER_NODE python $variables_TASK_FILE_PATH
horovodrun -np $variables_GPUS_PER_NODE -H `hostname`:$variables_GPUS_PER_NODE python $variables_TASK_FILE_PATH
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            274.4965362548828
        </positionTop>
        <positionLeft>
            147.170166015625
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2350px;
            height:3071px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-269.4965362548828px;left:-142.170166015625px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_195" style="top: 274.51px; left: 147.187px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="The simplest task, ran by a bash engine."><img src="/automation-dashboard/styles/patterns/img/wf-icons/horovod.png" width="20px">&nbsp;<span class="name">Horovod_Task</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 187px; top: 304px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
