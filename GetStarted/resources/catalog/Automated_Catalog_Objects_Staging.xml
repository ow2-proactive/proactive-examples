<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="Automated_Catalog_Objects_Staging" projectName="4. Tools" tags="CI-CD,Workflow Staging" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="1"  >
  <variables>
    <variable name="SOURCE_ENVIRONMENT" value="https://proactive-source-env" model="PA:URL" description="The URL of the source ProActive server" group="Source Parameters" advanced="false" hidden="false"/>
    <variable name="SOURCE_USER" value="my_user" model="PA:NOT_EMPTY_STRING" description="User login needed to access ProActive source environment" group="Source Parameters" advanced="true" hidden="false"/>
    <variable name="SOURCE_PASSWORD" value="${SOURCE_USER}" model="PA:CREDENTIAL" description="User password needed to access ProActive source environment. This password must be added to the third-party credentials vault (the user login is the key and the password is the credential)." group="Source Parameters" advanced="true" hidden="false"/>
    <variable name="TARGET_ENVIRONMENT" value="https://proactive-target-env" model="PA:URL" description="The URL of the target ProActive server" group="Target Parameters" advanced="false" hidden="false"/>
    <variable name="TARGET_USER" value="my_user" model="PA:NOT_EMPTY_STRING" description="User password needed to access ProActive target environment" group="Target Parameters" advanced="true" hidden="false"/>
    <variable name="TARGET_PASSWORD" value="${TARGET_USER}" model="PA:CREDENTIAL" description="User password needed to access ProActive target environment. This password must be added to the third-party credentials vault (the user login is the key and the password is the credential)." group="Target Parameters" advanced="true" hidden="false"/>
    <variable name="COMMIT_MESSAGE" value="new version 1"  description="When promoting an object in the Catalog, users can add a specific commit message. We recommend to always specify commit messages at any commit for an easier differentiation between stored versions." group="Target Parameters" advanced="false" hidden="false"/>
    <variable name="PROMOTION_TAG" value="test-staging" model="PA:NOT_EMPTY_STRING" description="The tag of catalog objects that allows to determine those objects to be staged from the source to the target ProActive environment." group="Source Parameters" advanced="false" hidden="false"/>
    <variable name="PROMOTION_TAG_REMOVAL" value="True" model="PA:BOOLEAN" description="If true, the provided promotion tag will be removed from the catalog objects in both source and target environments" group="Source Parameters" advanced="false" hidden="false"/>
    <variable name="CALLED_SINGLE_CATALOG_OBJECT_STAGING_PATH" value="basic-examples/Single_Catalog_Object_Staging" model="PA:CATALOG_OBJECT" description="single Workflow Staging to submit from the ProActive Catalog" group="Source Parameters" advanced="false" hidden="true"/>
  </variables>
  <description>
    <![CDATA[ A workflow that automates the staging of catalog objects from a source to a target ProActive environment.
The goal of this workflow is to: (i) browse the catalog of objects in the source environment, (ii) detect all objects having a specific tag and (iii) create a copy of these objects in the catalog of the target environment. This workflow calls a basic workflow to handle the copy of each tagged object in the source catalog. ]]>
  </description>
  <genericInformation>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/automated_catalog_objects_staging.png"/>
    <info name="group" value="public-objects"/>
    <info name="bucketName" value="basic-examples"/>
  </genericInformation>
  <taskFlow>
    <task name="Authenticate_Source_Environment"
    fork="true">
      <description>
        <![CDATA[ A task performing a rest POST request to authenticate to the source environment and and acquire a sessionid. ]]>
      </description>
      <variables>
        <variable name="ENDPOINT" value="${SOURCE_ENVIRONMENT}" inherited="false" model="PA:URL"   advanced="false" hidden="false"/>
        <variable name="PATH" value="/rest/scheduler/login" inherited="false"    advanced="false" hidden="false"/>
        <variable name="CONTENT_TYPE" value="application/x-www-form-urlencoded" inherited="false" model="PA:LIST(application/x-www-form-urlencoded,multipart/form-data)"   advanced="false" hidden="false"/>
        <variable name="SSL_DISABLE_CHECK" value="true" inherited="false" model="PA:BOOLEAN"   advanced="false" hidden="false"/>
        <variable name="DEBUG" value="true" inherited="false" model="PA:BOOLEAN"   advanced="false" hidden="false"/>
        <variable name="RESPONSE_FORMAT" value="string" inherited="false" model="PA:LIST(string,json,xml,html,contentView)"   advanced="false" hidden="false"/>
        <variable name="RESPONSE_PATH" value="." inherited="false"    advanced="false" hidden="false"/>
        <variable name="PARAM_username" value="${SOURCE_USER}" inherited="false"    advanced="false" hidden="false"/>
        <variable name="PARAM_password" value="${SOURCE_PASSWORD}" inherited="false"    advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/api-rest.png"/>
      </genericInformation>
      <inputFiles>
        <files  includes="rest-assured-fat-3.3.0.jar" accessMode="cacheFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
def pwdVariable = variables.get("SOURCE_PASSWORD")
def pwd = credentials.get(pwdVariable)
variables.put("PARAM_password", pwd)
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))
contentType = variables.get("CONTENT_TYPE")
isMultiPart = contentType.equals("multipart/form-data")

restCall = given().contentType(contentType + ";charset = UTF-8")

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("PARAM_")}).forEach({entry -> restCall = (isMultiPart ? restCall.multiPart(entry.getKey().replace("PARAM_",""), entry.getValue()) : restCall.formParam(entry.getKey().replace("PARAM_",""), entry.getValue()) )});

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}

response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;

    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
variables.put("SOURCE_SESSIONID", result)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            19.036468505859375
        </positionTop>
        <positionLeft>
            537.4045104980469
        </positionLeft>
      </metadata>
    </task>
    <task name="Get_Source_Bucket_List"




    fork="true">
      <description>
        <![CDATA[ A task that executes a REST GET request to get the list of the buckets in the source environment. ]]>
      </description>
      <variables>
        <variable name="ENDPOINT" value="${SOURCE_ENVIRONMENT}" inherited="false" model="PA:URL" description="Base URL of the server or service that will be queried." group="Http Connection" advanced="false" hidden="false"/>
        <variable name="SSL_DISABLE_CHECK" value="true" inherited="false" model="PA:BOOLEAN" description="If true, disable SSL certificate verification" group="Http Connection" advanced="true" hidden="false"/>
        <variable name="DEBUG" value="false" inherited="false" model="PA:BOOLEAN" description="If true, print the full request and response content in the task output." group="Http Connection" advanced="true" hidden="false"/>
        <variable name="PROXY_HOST" value="" inherited="false"  description="The hostname of the proxy" group="Proxy Connection" advanced="true" hidden="false"/>
        <variable name="PROXY_PORT" value="" inherited="false"  description="The port of the proxy" group="Proxy Connection" advanced="true" hidden="false"/>
        <variable name="PROXY_SCHEME" value="http" inherited="false" model="PA:LIST(http,https)" description="The scheme of the proxy" group="Proxy Connection" advanced="true" hidden="false"/>
        <variable name="PATH" value="/catalog/buckets" inherited="false"  description="Path of the request (relative to the base url)" group="Http Request" advanced="false" hidden="false"/>
        <variable name="RESPONSE_FORMAT" value="string" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;" group="Http Response" advanced="false" hidden="false"/>
        <variable name="RESPONSE_PATH" value="." inherited="false"  description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response" advanced="false" hidden="false"/>
        <variable name="HEADERS" value="{ &quot;sessionID&quot;: &quot;$SOURCE_SESSIONID&quot; }" inherited="false" model="PA:JSON" description="Additional headers of the request, provided as a JSON key/value structure. Headers can also be specified by adding &lt;i&gt;HEADER_headername&lt;/i&gt; variables." group="Http Request" advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/api-rest.png"/>
      </genericInformation>
      <depends>
        <task ref="Authenticate_Source_Environment"/>
      </depends>
      <inputFiles>
        <files  includes="rest-assured-fat-3.3.0.jar" accessMode="cacheFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import com.google.common.base.Strings;
import groovy.json.JsonSlurper;
import io.restassured.specification.ProxySpecification

debug = Boolean.parseBoolean(variables.get("DEBUG"))

if(variables.get("PROXY_HOST")?.trim() && variables.get("PROXY_PORT")?.trim()){
  proxySpecification = new ProxySpecification(variables.get("PROXY_HOST"), variables.get("PROXY_PORT"), variables.get("PROXY_SCHEME"))
  RestAssured.proxy(proxySpecification)
}

restCall = given()

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

def jsonSlurper = new JsonSlurper()
if (variables.get("HEADERS") != null && variables.get("HEADERS").length() > 0) {
    headersObject = jsonSlurper.parseText(variables.get("HEADERS"))
    if (!headersObject instanceof Map) {
        throw new IllegalArgumentException("HEADERS must contain a JSON Map structure")
    } else {
        headersObject.each { restCall = restCall.header(it.key, it.value) }
    }
}

if (variables.get("PARAMETERS") != null && variables.get("PARAMETERS").length() > 0) {
    paramsObject = jsonSlurper.parseText(variables.get("PARAMETERS"))
    if (!paramsObject instanceof Map) {
        throw new IllegalArgumentException("PARAMETERS must contain a JSON Map structure")
    } else {
        paramsObject.each { restCall = restCall.param(it.key, it.value) }
    }
}

if (variables.get("COOKIES") != null && variables.get("COOKIES").length() > 0) {
    cookiesObject = jsonSlurper.parseText(variables.get("COOKIES"))
    if (!cookiesObject instanceof Map) {
        throw new IllegalArgumentException("COOKIES must contain a JSON Map structure")
    } else {
        cookiesObject.each { restCall = restCall.cookie(it.key, it.value) }
    }
}

if (debug) {
    println "-------------- REQUEST ------------------"
	restCall = restCall.log().all()
}

response = restCall.get(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(HttpStatus.SC_OK)
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;

    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
List bucketList = variables.get("BUCKET_LIST") as ArrayList<String>
runs = bucketList.size()
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
import java.util.Arrays;
import groovy.json.JsonSlurperClassic;
import java.util.ArrayList;

def jsonSlurper = new JsonSlurperClassic()
def bucket_list = jsonSlurper.parseText(result.toString()) as ArrayList
def bucket_names = bucket_list.collect { it.name }
variables.put("BUCKET_LIST", bucket_names)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            147.9340362548828
        </positionTop>
        <positionLeft>
            536.4062805175781
        </positionLeft>
      </metadata>
    </task>
    <task name="Filter_Tagged_Catalog_Objects_Per_Bucket"




    fork="true">
      <description>
        <![CDATA[ A task that executes a GET REST request to filter catalog objects of a bucket with respect to a given tag. ]]>
      </description>
      <variables>
        <variable name="ENDPOINT" value="${SOURCE_ENVIRONMENT}" inherited="false" model="PA:URL" description="Base URL of the server or service that will be queried." group="Http Connection" advanced="false" hidden="false"/>
        <variable name="SSL_DISABLE_CHECK" value="true" inherited="false" model="PA:BOOLEAN" description="If true, disable SSL certificate verification" group="Http Connection" advanced="true" hidden="false"/>
        <variable name="DEBUG" value="false" inherited="false" model="PA:BOOLEAN" description="If true, print the full request and response content in the task output." group="Http Connection" advanced="true" hidden="false"/>
        <variable name="PROXY_HOST" value="" inherited="false"  description="The hostname of the proxy" group="Proxy Connection" advanced="true" hidden="false"/>
        <variable name="PROXY_PORT" value="" inherited="false"  description="The port of the proxy" group="Proxy Connection" advanced="true" hidden="false"/>
        <variable name="PROXY_SCHEME" value="http" inherited="false" model="PA:LIST(http,https)" description="The scheme of the proxy" group="Proxy Connection" advanced="true" hidden="false"/>
        <variable name="PATH" value="" inherited="false"  description="Path of the request (relative to the base url)" group="Http Request" advanced="false" hidden="false"/>
        <variable name="RESPONSE_FORMAT" value="string" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;" group="Http Response" advanced="false" hidden="false"/>
        <variable name="RESPONSE_PATH" value="." inherited="false"  description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response" advanced="false" hidden="false"/>
        <variable name="HEADERS" value="{ &quot;sessionID&quot;: &quot;$SOURCE_SESSIONID&quot; }" inherited="false" model="PA:JSON" description="Additional headers of the request, provided as a JSON key/value structure. Headers can also be specified by adding &lt;i&gt;HEADER_headername&lt;/i&gt; variables." group="Http Request" advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/api-rest.png"/>
      </genericInformation>
      <depends>
        <task ref="Get_Source_Bucket_List"/>
      </depends>
      <inputFiles>
        <files  includes="rest-assured-fat-3.3.0.jar" accessMode="cacheFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
List bucketList = variables.get("BUCKET_LIST") as ArrayList<String>
variables.put("PATH", "/catalog/buckets/" + bucketList.get(variables.get("PA_TASK_REPLICATION")) + "/resources")
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import com.google.common.base.Strings;
import groovy.json.JsonSlurper;
import io.restassured.specification.ProxySpecification

debug = Boolean.parseBoolean(variables.get("DEBUG"))

if(variables.get("PROXY_HOST")?.trim() && variables.get("PROXY_PORT")?.trim()){
  proxySpecification = new ProxySpecification(variables.get("PROXY_HOST"), variables.get("PROXY_PORT"), variables.get("PROXY_SCHEME"))
  RestAssured.proxy(proxySpecification)
}

restCall = given()

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

def jsonSlurper = new JsonSlurper()
if (variables.get("HEADERS") != null && variables.get("HEADERS").length() > 0) {
    headersObject = jsonSlurper.parseText(variables.get("HEADERS"))
    if (!headersObject instanceof Map) {
        throw new IllegalArgumentException("HEADERS must contain a JSON Map structure")
    } else {
        headersObject.each { restCall = restCall.header(it.key, it.value) }
    }
}

if (variables.get("PARAMETERS") != null && variables.get("PARAMETERS").length() > 0) {
    paramsObject = jsonSlurper.parseText(variables.get("PARAMETERS"))
    if (!paramsObject instanceof Map) {
        throw new IllegalArgumentException("PARAMETERS must contain a JSON Map structure")
    } else {
        paramsObject.each { restCall = restCall.param(it.key, it.value) }
    }
}

if (variables.get("COOKIES") != null && variables.get("COOKIES").length() > 0) {
    cookiesObject = jsonSlurper.parseText(variables.get("COOKIES"))
    if (!cookiesObject instanceof Map) {
        throw new IllegalArgumentException("COOKIES must contain a JSON Map structure")
    } else {
        cookiesObject.each { restCall = restCall.cookie(it.key, it.value) }
    }
}

if (debug) {
    println "-------------- REQUEST ------------------"
	restCall = restCall.log().all()
}

response = restCall.get(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(HttpStatus.SC_OK)
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    //println result
    break;

    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;

    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
import java.util.Arrays;
import groovy.json.JsonSlurperClassic;
import java.util.ArrayList;

def promotionTag = variables.get("PROMOTION_TAG").toLowerCase()
def jsonSlurper = new JsonSlurperClassic()
def catalog_object_list = jsonSlurper.parseText(result.toString()) as ArrayList
def catalog_object_names = catalog_object_list.findAll { it.tags?.trim() && it.tags.toLowerCase().contains(promotionTag)}.collect { it.bucket_name + "/" + it.name + "#" + it.tags }
result = catalog_object_names
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            276.8402862548828
        </positionTop>
        <positionLeft>
            536.4062805175781
        </positionLeft>
      </metadata>
    </task>
    <task name="Merge_Tagged_Catalog_Objects"




    fork="true">
      <description>
        <![CDATA[ Merge the filtered catalog objects in a single list ]]>
      </description>
      <depends>
        <task ref="Filter_Tagged_Catalog_Objects_Per_Bucket"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import java.net.URLEncoder

List promoted_catalog_objects = []
for (item in results) {
    promoted_catalog_objects.addAll(item.value() as ArrayList)
}
println "Number of catalog objects to be staged: " + promoted_catalog_objects.size()
println "List of catalog objects to be staged: " + promoted_catalog_objects.collect{ it.split('#')[0]}

variables.put("PROMOTED_CATALOG_OBJECTS", promoted_catalog_objects)

promotionTagRemoval = variables.get("PROMOTION_TAG_REMOVAL") as boolean
if(promotionTagRemoval) {
    println ("PROMOTION_TAG_REMOVAL = TRUE")
    println ("---> Promotion Tag to be removed from Catalog objects in both source and target environments")
	sourceSessionid = variables.get("SOURCE_SESSIONID")
	sourceBaseUrl = variables.get("SOURCE_ENVIRONMENT")
	promotionTag = variables.get("PROMOTION_TAG")
	regex = promotionTag + ",*"
	promoted_catalog_objects.each{ catalogObject ->
    	bucketName = catalogObject.split('#')[0].split('/')[0]
    	name = catalogObject.split('#')[0].split('/')[1]
    	tags = catalogObject.split('#')[1]
    	tags = URLEncoder.encode(tags.replaceAll(regex,"").replaceAll(",\$", ""), "UTF-8")
    	path = "/catalog/buckets/" + bucketName + "/resources/"  + name
    	removePromotionTagCmd = ["curl", "-X", "PUT", sourceBaseUrl + path + "?tags=" + tags, "-H", "sessionID:" + sourceSessionid]
    	removePromotionTagCmd.execute().waitForProcessOutput(System.out, System.err)
	}
}

]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
def promoted_catalog_objects = variables.get("PROMOTED_CATALOG_OBJECTS")
runs = promoted_catalog_objects.size()
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
      <metadata>
        <positionTop>
            405.7292022705078
        </positionTop>
        <positionLeft>
            536.4062805175781
        </positionLeft>
      </metadata>
    </task>
    <task name="Submit_Single_Catalog_Object_Staging_Job_And_Wait"




    fork="true">
      <description>
        <![CDATA[ Submit the Single_Catalog_object_Staging workflow and wait for its termination by checking every minute if the job is completed. ]]>
      </description>
      <variables>
        <variable name="CALLED_SINGLE_CATALOG_OBJECT_STAGING_PATH" value="" inherited="true" model="PA:CATALOG_OBJECT?" description="Workflow to submit from the ProActive Catalog"  advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_submit_job_and_wait.png"/>
        <info name="task.documentation" value="user/ProActiveUserGuide.html#_chaining_workflows_submit_a_workflow_from_another_workflow"/>
      </genericInformation>
      <depends>
        <task ref="Merge_Tagged_Catalog_Objects"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// Submit a workflow referenced in the ProActive Catalog (or accessible by url)

// Please add the bucket and workflow names that you want to execute as Task Variables 'CALLED_SINGLE_CATALOG_OBJECT_STAGING_PATH'

// connect to the scheduler
schedulerapi.connect()
sourceEnvironment = variables.get("SOURCE_ENVIRONMENT")
sourceUser = variables.get("SOURCE_USER")
sourcePassword = variables.get("SOURCE_PASSWORD")
targetEnvironment = variables.get("TARGET_ENVIRONMENT")
targetUser = variables.get("TARGET_USER")
targetPassword = variables.get("TARGET_PASSWORD")
commitMessage = variables.get("COMMIT_MESSAGE")
sourceObjectPath = variables.get("PROMOTED_CATALOG_OBJECTS")[variables.get("PA_TASK_REPLICATION") as int].split('#')[0]
def jobid
def jobStatus
def promotionStatus = [:]
if( !variables.get("jobSubmitted") ){
    // get the workflow information from Task Variables
    def calledWorkflow = variables.get("CALLED_SINGLE_CATALOG_OBJECT_STAGING_PATH")

    // variables submitted to the workflow: Empty in the example, modify this map to give parameters to the submitted workflow
    workflow_variables = [SOURCE_ENVIRONMENT: sourceEnvironment, SOURCE_USER: sourceUser, SOURCE_PASSWORD: sourcePassword, TARGET_ENVIRONMENT: targetEnvironment, TARGET_USER: targetUser, TARGET_PASSWORD: targetPassword, SOURCE_OBJECT_PATH: sourceObjectPath, COMMIT_MESSAGE: commitMessage, TARGET_OBJECT_PATH: sourceObjectPath]

    println "Submitting workflow " + calledWorkflow

    // submitting the job
    def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]
    jobid = schedulerapi.submitFromCatalog(variables.get("PA_CATALOG_REST_URL"), calledWorkflow, workflow_variables, generic_infos_map)
    variables.put("jobSubmitted", true)

    // alternatively you can submit a workflow from a direct url

    // // add sessionId to request header map
    // requestHeader = Collections.singletonMap("sessionId", schedulerapi.getSession()
    // jobUrl = "https://try.activeeon.com/catalog/buckets/basic-examples/resources/distributed_computing_Pi/raw"
    // jobid = schedulerapi.submit(jobURL, variables, generic_infos_map, requestHeader)

    println "Job submitted with job id " + jobid
    variables.put("jobID", jobid)
}

if( jobid == null ){
    jobid = variables.get("jobID")
}
isFinished = schedulerapi.isJobFinished(jobid)
jobInfo = schedulerapi.getJobInfo(jobid as String)
jobStatus = jobInfo.getStatus()
promotionStatus[sourceObjectPath] = "Promotion Successful"
isJobFaulty = jobStatus.toString().toUpperCase().equals("FAILED") || jobStatus.toString().toUpperCase().equals("CANCELED") || jobStatus.toString().toUpperCase().equals("KILLED") || (jobStatus.toString().toUpperCase().equals("FINISHED") && jobInfo.getNumberOfFaultyTasks() > 0)
if(isJobFaulty){
    promotionStatus[sourceObjectPath] = "Promotion Failed"
}

variables.put("isFinished", isFinished)
// You can retrieve the result of the submitted job (i.e., the sub-job) once it is finished. This result can be processed or displayed at the parent job level (i.e., in this job), as shown in the following code snippet.
// https://doc.activeeon.com/javadoc/latest/index.html?org/ow2/proactive/scheduler/rest/SchedulerClient.html
/*if(isFinished){
    resultMap = schedulerapi.getJobResult(jobId).getResultMap()
}*/

result = promotionStatus
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="Submit_Single_Catalog_Object_Staging_Job_And_Wait">
          <script>
            <code language="javascript">
              <![CDATA[
// You can use a Cron Expression here
              // examples http://www.sauronsoftware.it/projects/cron4j/manual.php#p02
if(!variables.get("isFinished")){
	loop = '* * * * *';
}else{
    variables.put("jobSubmitted", false);
	loop = false;
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            534.6180572509766
        </positionTop>
        <positionLeft>
            536.4062805175781
        </positionLeft>
      </metadata>
    </task>
    <task name="Staging_Summary"




    fork="true">
      <description>
        <![CDATA[ Produce a textual summary of the automated staging process to be displayed in the output ]]>
      </description>
      <depends>
        <task ref="Submit_Single_Catalog_Object_Staging_Job_And_Wait"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
List successful_catalog_objects_staging = []
List failed_catalog_objects_statging = []
for (item in results) {
     Map.Entry<String,String> entry = (item.value() as Map).entrySet().iterator().next()
    if(entry.getValue() == "Promotion Successful"){
        successful_catalog_objects_staging.add(entry.getKey())
    } else {
        failed_catalog_objects_statging.add(entry.getKey())
    }
}
println "Successful catalog objects staging: " + successful_catalog_objects_staging
println "Failed catalog objects statging: " + failed_catalog_objects_statging
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            663.4983062744141
        </positionTop>
        <positionLeft>
            536.4062805175781
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2354px;
            height:3058px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-14.036468505859375px;left:-531.4062805175781px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_1015" style="top: 19.0449px; left: 537.405px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest POST request to authenticate to the source environment and and acquire a sessionid."><img src="/automation-dashboard/styles/patterns/img/wf-icons/api-rest.png" width="20px">&nbsp;<span class="name">Authenticate_Source_Environment</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1018" style="top: 147.943px; left: 536.406px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task that executes a REST GET request to get the list of the buckets in the source environment."><img src="/automation-dashboard/styles/patterns/img/wf-icons/api-rest.png" width="20px">&nbsp;<span class="name">Get_Source_Bucket_List</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1021" style="top: 276.849px; left: 536.406px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task that executes a GET REST request to filter catalog objects of a bucket with respect to a given tag."><img src="/automation-dashboard/styles/patterns/img/wf-icons/api-rest.png" width="20px">&nbsp;<span class="name">Filter_Tagged_Catalog_Objects_Per_Bucket</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1024" style="top: 405.738px; left: 536.406px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Merge the filtered catalog objects in a single list"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Merge_Tagged_Catalog_Objects</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1027" style="top: 534.627px; left: 536.406px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Submit the single_catalog_object_staging workflow and wait for its termination by checking every minute if the job is terminated."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_submit_job_and_wait.png" width="20px">&nbsp;<span class="name">Submit_Single_Catalog_Object_Staging_Job_And_Wait</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon" class="glyphicon glyphicon-arrow-right"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1030" style="top: 663.507px; left: 536.406px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Produce a textual summary of the automated staging process the is displayed in the output"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Staging_Summary</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><svg style="position:absolute;left:600.5px;top:58.5px" width="44" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 89 C -10 39 33 50 23 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-0.7793772500000016,66.74071675 L12.247520578787043,50.02844781492289 L3.6966339669773154,53.47552456950397 L-1.0176716017089964,45.55243659794558 L-0.7793772500000016,66.74071675" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-0.7793772500000016,66.74071675 L12.247520578787043,50.02844781492289 L3.6966339669773154,53.47552456950397 L-1.0176716017089964,45.55243659794558 L-0.7793772500000016,66.74071675" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:645.5px;top:177.5px" width="90.60000000000002" height="100" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 69.60000000000002 89 C 79.60000000000002 89 -10 -10 0 0 " transform="translate(10.5,10.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#e5db3d" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M63.492262500000024,76.33362500000001 L56.98543383188417,56.167783071536284 L55.033098722579346,65.17824297217264 L45.8300518040568,64.62694684895696 L63.492262500000024,76.33362500000001" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M63.492262500000024,76.33362500000001 L56.98543383188417,56.167783071536284 L55.033098722579346,65.17824297217264 L45.8300518040568,64.62694684895696 L63.492262500000024,76.33362500000001" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_1041" style="position: absolute; transform: translate(-50%, -50%); left: 690.3px; top: 228.25px;">replicate</div><svg style="position:absolute;left:600.5px;top:187.5px" width="64.5" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 43.5 89 C 53.5 39 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M42.055474125,65.80396025 L37.32445920627881,45.149239292339075 L34.59701793102961,53.95611524752699 L25.4766142038058,52.60769548630947 L42.055474125,65.80396025" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M42.055474125,65.80396025 L37.32445920627881,45.149239292339075 L34.59701793102961,53.95611524752699 L25.4766142038058,52.60769548630947 L42.055474125,65.80396025" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:618.5px;top:316.5px" width="46.5" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 89 C -10 39 35.5 50 25.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-0.5543478750000015,66.74071675 L12.955970737946119,50.41676836192056 L4.307884351265317,53.61217159915153 L-0.17257441290235498,45.55453613565524 L-0.5543478750000015,66.74071675" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-0.5543478750000015,66.74071675 L12.955970737946119,50.41676836192056 L4.307884351265317,53.61217159915153 L-0.17257441290235498,45.55453613565524 L-0.5543478750000015,66.74071675" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:674.3px;top:435.5px" width="80.20000000000005" height="100" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 59.200000000000045 89 C 69.20000000000005 89 -10 -10 0 0 " transform="translate(10.5,10.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#e5db3d" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M54.43483750000004,76.33362500000001 L49.3852079622706,55.75447920791985 L46.7941859227437,64.60245099758362 L37.65403395985422,63.3951307851762 L54.43483750000004,76.33362500000001" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M54.43483750000004,76.33362500000001 L49.3852079622706,55.75447920791985 L46.7941859227437,64.60245099758362 L37.65403395985422,63.3951307851762 L54.43483750000004,76.33362500000001" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(10.5,10.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_1053" style="position: absolute; transform: translate(-50%, -50%); left: 713.9px; top: 486.25px;">replicate</div><svg style="position:absolute;left:618.5px;top:445.5px" width="58" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 37 89 C 47 39 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M36.363006,66.269502 L33.15437808828079,45.324223130428074 L29.79050456458924,53.908182293693415 L20.7930583819742,51.89672456583883 L36.363006,66.269502" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M36.363006,66.269502 L33.15437808828079,45.324223130428074 L29.79050456458924,53.908182293693415 L20.7930583819742,51.89672456583883 L36.363006,66.269502" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:785.5px;top:524.5px" width="61" height="61" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C 50 -10 -10 50 0 0 " transform="translate(10.5,10.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.55903999999999,26.37184000000001 L31.950657715430147,15.848133532719785 L22.731266562420885,15.794966176056539 L21.37378389148668,6.67590697029889 L13.55903999999999,26.37184000000001" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,10.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.55903999999999,26.37184000000001 L31.950657715430147,15.848133532719785 L22.731266562420885,15.794966176056539 L21.37378389148668,6.67590697029889 L13.55903999999999,26.37184000000001" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,10.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_1062" style="position: absolute; transform: translate(-50%, -50%); left: 810.5px; top: 554.5px;">loop</div><svg style="position:absolute;left:586.5px;top:574.5px" width="90" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 79 50 69 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.964021999999998,63.554236 L24.215374502276852,54.7006815254921 L15.036918129478272,53.83123422252708 L14.492372724803928,44.627785396013834 L4.964021999999998,63.554236" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.964021999999998,63.554236 L24.215374502276852,54.7006815254921 L15.036918129478272,53.83123422252708 L14.492372724803928,44.627785396013834 L4.964021999999998,63.554236" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 624px; top: 49px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 601px; top: 178px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 601px; top: 138px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint replicate-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 646px; top: 178px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 644.5px; top: 307px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint replicate-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 715.6px; top: 267px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 644.5px; top: 267px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 619px; top: 436px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 619px; top: 396px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint replicate-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 674.8px; top: 436px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 656px; top: 565px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint replicate-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 734px; top: 525px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 656px; top: 525px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 786px; top: 525px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 786px; top: 565px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 587px; top: 693px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 587px; top: 653px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>