<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="Parallel_Image_Processing" tags="Samples,Get started,Building blocks" projectName="2. Advanced Workflows" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
  <variables>
    <variable name="inputFilename" value="neptune_triton_01_3000x3000.jpg" model="PA:GLOBAL_FILE" description="Choose an image file stored in the  &lt;b&gt;Global Data Space&lt;/b&gt;" group="" advanced="false" hidden="false"/>
    <variable name="outputFilename" value="result.jpg" model="PA:NOT_EMPTY_STRING" description="name of the output merge file" group="" advanced="false" hidden="false"/>
    <variable name="nbParts" value="4" model="PA:INTEGER" description="number of image splits" group="" advanced="false" hidden="false"/>
  </variables>
  <description>
    <![CDATA[ A workflow which splits an input image, applies in parallel on each image section the Canny Edge Detector algorithm, and merges. This workflow is an example of the Replicate control flow structure. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="basic-examples"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
    <info name="group" value="public-objects"/>
    <info name="Documentation" value="user/ProActiveUserGuide.html#_replicate"/>
  </genericInformation>
  <taskFlow>
    <task name="split-image"




          fork="true"
    >
      <description>
        <![CDATA[ This task splits the input image in nbParts. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <inputFiles>
        <files  includes="${inputFilename}" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import java.awt.Graphics2D
import java.awt.image.BufferedImage
import javax.imageio.ImageIO

// The image to process
String imgFilename = variables.get("inputFilename")
print 'Input file name ' + imgFilename
int nbParts = variables.get("nbParts") as int

// Load the image
File imgFile = new File(localspace, imgFilename)
BufferedImage img = ImageIO.read(imgFile)

// Split the image into an equal number of parts
int cols = Math.sqrt(nbParts)
int rows = cols
int w = img.getWidth() / cols
int h = img.getHeight() / rows
ArrayList parts = new ArrayList(cols * rows)
for ( int y = 0; y < rows; y++ ) {
 for ( int x = 0; x < cols; x++ ) {
 BufferedImage part = new BufferedImage(w, h, img.getType())
 // Tell the graphics to draw only one block of the image
 Graphics2D g = part.createGraphics()
 g.drawImage(img, 0, 0, w, h, w * x, h * y, w * x + w, h * y + h, null)
 g.dispose()
 // Serialize to a byte array
 ByteArrayOutputStream baos = new ByteArrayOutputStream()
 ImageIO.write(part, "PNG", baos)
 parts.add(baos.toByteArray())
 }
}

result = parts
println("Splitted " + imgFilename + " into " + parts.size() + " parts")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
runs=variables.get("nbParts")
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
      <metadata>
        <positionTop>
          320.78125
        </positionTop>
        <positionLeft>
          649.5
        </positionLeft>
      </metadata>
    </task>
    <task name="process-part"




          fork="true"
    >
      <description>
        <![CDATA[ This task will be replicated according to the 'nbParts' value specified in the replication script. Each replicated task applies the Canny Edge Detector algorithm on its image section. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="split-image"/>
      </depends>
      <inputFiles>
        <files  includes="canny-edge-detector.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="canny-edge-detector.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import java.awt.Graphics2D
import java.awt.image.BufferedImage
import javax.imageio.ImageIO
import org.ow2.proactive.scheduler.common.task.TaskResult
import com.CannyEdgeDetector

int partIndex = variables.get("PA_TASK_REPLICATION")
println "Processing image part: " + partIndex

// Get previous result
TaskResult tr = results[0]
if (tr.hadException()) {
 throw new IllegalStateException("Previous task had an exception", tr.getException())
}
ArrayList previousResult = tr.value()

// Specify the index of the part to process
byte[] partImageBytes = previousResult.get(partIndex)

// Convert byte[] to a BufferedImage
BufferedImage partImage = ImageIO.read(new ByteArrayInputStream(partImageBytes))

CannyEdgeDetector detector = new com.CannyEdgeDetector()
detector.setLowThreshold(0.5)
detector.setHighThreshold(1)
detector.setSourceImage(partImage)
detector.process()

// Convert from BufferedImage to byte[]
ByteArrayOutputStream baos = new ByteArrayOutputStream()
ImageIO.write(detector.getEdgesImage(), "PNG", baos)
result = baos.toByteArray()
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
          448.78125
        </positionTop>
        <positionLeft>
          649.5
        </positionLeft>
      </metadata>
    </task>
    <task name="merge-parts"



          preciousResult="true"
          fork="true"
    >
      <description>
        <![CDATA[ This task merges all image sections as a single one and exposes it. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="process-part"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import java.awt.Graphics2D
import java.awt.image.BufferedImage
import javax.imageio.ImageIO

// Fetch images from previous tasks
def parts = []
for (int i = 0; i < results.length; i++) {
	byte[] partBytes = results[i].value()
	BufferedImage buffImage = ImageIO.read(new ByteArrayInputStream(partBytes))
	parts.push(buffImage)
}

int rows = Math.sqrt(parts.size())
int cols = rows

int type = parts[0].getType()
int partWidth = parts[0].getWidth()
int partHeight = parts[0].getHeight()

// Fill the final image
BufferedImage finalImg = new BufferedImage(partWidth*cols, partHeight*rows, type)
int num = 0
for (int i = 0; i < rows; i++) {
 for (int j = 0; j < cols; j++) {
 finalImg.createGraphics().drawImage(parts[num], partWidth * j, partHeight * i, null)
 num++
 }
}

String filename = variables.get("outputFilename")
File imageFile = new File( localspace, filename )
ImageIO.write( finalImg, "png", imageFile )

println 'Merged parts into ' + filename

// Expose the image
result = imageFile.getBytes()
resultMetadata.put("file.name", imageFile.name)
resultMetadata.put("content.type", "image/png")
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
          576.78125
        </positionTop>
        <positionLeft>
          649.5
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2832px;
            height:3312px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-315.78125px;left:-644.5px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_560" style="top: 320.781px; left: 649.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task splits the input image in nbParts."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">split-image</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_563" style="top: 448.781px; left: 649.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task will be replicated according to the 'nbParts' value specified in the replication script. Each replicated task applies the Canny Edge Detector algorithm on its image section."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">process-part</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_566" style="top: 576.781px; left: 649.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task merges all image sections as a single one and exposes it."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png" width="20px">&nbsp;<span class="name">merge-parts</span></a></div><svg style="position:absolute;left:715.4657867477086px;top:350.5px" width="15.034213252291345" height="99" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 88 -10 -10 0 0 " transform="translate(14.534213252291345,10.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#e5db3d" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.889249999999999,77.41936575 L-0.6632823303137547,56.65542592021898 L-6.785898453911784,63.54843482802241 L-14.534213252291345,58.55207437413076 L-4.889249999999999,77.41936575" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(14.534213252291345,10.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.889249999999999,77.41936575 L-0.6632823303137547,56.65542592021898 L-6.785898453911784,63.54843482802241 L-14.534213252291345,58.55207437413076 L-4.889249999999999,77.41936575" class="" stroke="rgba(229,219,61,0.5)" fill="rgba(229,219,61,0.5)" transform="translate(14.534213252291345,10.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_574" style="position: absolute; transform: translate(-50%, -50%); left: 722px; top: 400.75px;">replicate</div><svg style="position:absolute;left:684.9817132113825px;top:360.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path></svg><svg style="position:absolute;left:684.9817132113825px;top:488.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#666" fill="#666" transform="translate(15.018286788617468,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 690px; top: 351px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint replicate-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 720px; top: 351px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 690px; top: 479px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint replicate-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 720px; top: 439px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#e5db3d" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 690px; top: 439px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 690px; top: 607px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 690px; top: 567px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>