<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.11" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Azure_Model_Deployment_Example" onTaskError="continueJobExecution" priority="normal" projectName="1. Azure Examples" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd">
  <variables>
    <variable model="PA:Boolean" name="DOCKER_ENABLED" value="True"/>
    <variable name="AZURE_SUBSCRIPTION_ID" value="a1c03dc2-0383-4ec9-9c73-fb74aa0de4f6"/>
    <variable name="AZURE_RESOURCE_GROUP" value="test_azure_rs"/>
    <variable name="AZURE_WORKSPACE_NAME" value="docs-ws"/>
    <variable model="" name="SCORING_URI" value=""/>
    <variable name="INPUT_DATA" value="[[9,112,82,24,0,28.2,1282,50],[9,112,82,24,0,28.2,1282,50]]"/>
  </variables>
  <description>
    <![CDATA[ Deploy a ML model on Azure ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="model-as-a-servie"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png"/>
<info name="Documentation" value="MLOS/MLOSUserGuide.html#_machine_learning_workflows_examples"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task name="Deploy_Model_on_Azure">
      <variables>
        <variable inherited="true" name="AZURE_SUBSCRIPTION_ID" value="a1c03dc2-0383-4ec9-9c73-fb74aa0de4f6"/>
        <variable inherited="true" name="AZURE_RESOURCE_GROUP" value="test_azure_rs"/>
        <variable inherited="true" name="AZURE_WORKSPACE_NAME" value="docs-ws"/>
        <variable inherited="false" name="MODEL_NAME" value="mymodel"/>
        <variable inherited="false" name="MODEL_PATH" value="sklearn_mnist_model.pkl"/>
        <variable inherited="false" name="MODEL_DESCRIPTION" value="digit classification"/>
        <variable inherited="false" name="SERVICE_NAME" value="sklearn-mnist-test"/>
        <variable inherited="false" name="SERVICE_DESCRIPTION" value="Predict MNIST with sklearn"/>
        <variable inherited="false" model="PA:Integer" name="MEMORY_GB" value="1"/>
        <variable inherited="false" model="PA:Integer" name="CPU_CORES" value="1"/>
        <variable inherited="false" name="EXECUTION_SCRIPT_PATH" value="score.py"/>
        <variable inherited="false" name="CONDA_FILE_PATH" value="myenv.yml"/>
        <variable inherited="false" name="DOCKER_FILE_PATH" value=""/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png"/>
      </genericInformation>
      <selection>
        <script>
          <code language="python">
            <![CDATA[
selected = True
]]>
          </code>
        </script>
      </selection>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
containerName = 'activeeon/dlm3'
dockerRunCommand =  'docker run '
dockerParameters = '--rm '
paHomeHost = variables.get("PA_SCHEDULER_HOME")
paHomeContainer = variables.get("PA_SCHEDULER_HOME")
workspaceContainer = '/usr/data'
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' '
workspaceHost = localspace
workspaceVolume = '-v '+localspace +':'+localspace+' '
globalspaceVolume = '-v '+globalspace +':'+workspaceContainer+' '
containerWorkingDirectory = '-w '+workspaceContainer+' '
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + globalspaceVolume + workspaceVolume + containerWorkingDirectory + containerName
print(preJavaHomeCmd)
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")
print("BEGIN " + __file__)

import numpy as np
import matplotlib.pyplot as plt
import azureml.core
import os, sys, bz2
import pickle
from sklearn.externals import joblib
from azureml.core import Workspace
from azureml.core.authentication import ServicePrincipalAuthentication
from azureml.core.model import Model
from azureml.core.webservice import AciWebservice
from azureml.core.authentication import InteractiveLoginAuthentication
from azureml.core.webservice import Webservice
from azureml.core.image import ContainerImage

#Define the values by default
AZURE_SUBSCRIPTION_ID = 'a1c03dc2-0383-4ec9-9c73-fb74aa0de4f6'
AZURE_RESOURCE_GROUP = 'test_azure_rs'
AZURE_WORKSPACE_NAME = 'docs-ws'
MODEL_NAME = 'mymodel'
MODEL_PATH = 'sklearn_mnist_model.pkl'
MODEL_DESCRIPTION = 'digit classification'
SERVICE_NAME = 'sklearn-mnist-test'
SERVICE_DESCRIPTION = 'Predict MNIST with sklearn'
MEMORY_GB = 1
CPU_CORES = 1
EXECUTION_SCRIPT_PATH = "score.py"
CONDA_FILE_PATH = "myenv.yml"
DOCKER_FILE_PATH = None

#Get the variables from the Studio
if 'variables' in locals():
    if variables.get("AZURE_SUBSCRIPTION_ID") is not None:
        AZURE_SUBSCRIPTION_ID = variables.get("AZURE_SUBSCRIPTION_ID")
    if variables.get("AZURE_RESOURCE_GROUP") is not None:
        AZURE_RESOURCE_GROUP = variables.get("AZURE_RESOURCE_GROUP")
    if variables.get("AZURE_WORKSPACE_NAME") is not None:
        AZURE_WORKSPACE_NAME = variables.get("AZURE_WORKSPACE_NAME")
    if variables.get("MODEL_NAME") is not None:
        MODEL_NAME = variables.get("MODEL_NAME")
    if variables.get("MODEL_PATH") is not None:
        MODEL_PATH = variables.get("MODEL_PATH")
    if variables.get("MODEL_DESCRIPTION") is not None:
        MODEL_DESCRIPTION = variables.get("MODEL_DESCRIPTION")
    if variables.get("SERVICE_NAME") is not None:
        SERVICE_NAME = variables.get("SERVICE_NAME")
    if variables.get("SERVICE_DESCRIPTION") is not None:
        SERVICE_DESCRIPTION = variables.get("SERVICE_DESCRIPTION")
    if variables.get("MEMORY_GB") is not None:
        MEMORY_GB = int(variables.get("MEMORY_GB"))
    if variables.get("CPU_CORES") is not None:
        CPU_CORES = int(variables.get("CPU_CORES"))
    if variables.get("EXECUTION_SCRIPT_PATH") is not None:
        EXECUTION_SCRIPT_PATH = variables.get("EXECUTION_SCRIPT_PATH")
    if variables.get("CONDA_FILE_PATH") is not None:
        CONDA_FILE_PATH = variables.get("CONDA_FILE_PATH")
    if variables.get("DOCKER_FILE_PATH") is not None:
        DOCKER_FILE_PATH = variables.get("DOCKER_FILE_PATH")
        
input_variables = {'task.model_id': None}
for key in input_variables.keys():
  for res in results:
    value = res.getMetadata().get(key)
    if value is not None:
      input_variables[key] = value
      break

model_id = input_variables['task.model_id']

if 'variables' in locals():
    if variables.get(model_id) is not None:
        model_compressed = variables.get(model_id)
        model_bin = bz2.decompress(model_compressed)
        with bz2.open("sklearn_mnist.pkl", "wb") as f:
            model = f.write(model_bin)
        #pickle.dump(model_bin,open("sklearn_mnist.pkl","wb"))
        print('model size (original):   ', sys.getsizeof("sklearn_mnist.pkl"), " bytes")
        MODEL_PATH = os.path.join(os.getcwd(),"sklearn_mnist.pkl")

#Set the inetractive authentification
interactive_auth = InteractiveLoginAuthentication()

#Get the chosen workspace
ws = Workspace.get(name=AZURE_WORKSPACE_NAME, auth=interactive_auth, subscription_id=AZURE_SUBSCRIPTION_ID,resource_group=AZURE_RESOURCE_GROUP)

print(ws.name, ws.location, ws.resource_group, ws.location, sep = '\t')

# register model
model = Model.register(model_name=MODEL_NAME, model_path=MODEL_PATH, workspace=ws, description = MODEL_DESCRIPTION)
print(model.name, model.id, model.version, sep = '\t')

#Set the image
aciconfig = AciWebservice.deploy_configuration(cpu_cores=CPU_CORES, memory_gb=MEMORY_GB, description=SERVICE_DESCRIPTION)

if CONDA_FILE_PATH is None and DOCKER_FILE_PATH is None:
    from azureml.core.conda_dependencies import CondaDependencies
    myenv = CondaDependencies()
    myenv.add_conda_package("scikit-learn")
	#myenv.add_pip_package("joblib")
    with open("myenv.yml","w") as f:
        f.write(myenv.serialize_to_string())
    # configure the image
    image_config = ContainerImage.image_configuration(execution_script=EXECUTION_SCRIPT_PATH, runtime="python", conda_file="myenv.yml")
elif CONDA_FILE_PATH is not None and DOCKER_FILE_PATH is None:
    image_config = ContainerImage.image_configuration(execution_script=EXECUTION_SCRIPT_PATH, runtime="python", conda_file=CONDA_FILE_PATH)
elif DOCKER_FILE_PATH is not None:
    image_config = ContainerImage.image_configuration(execution_script=EXECUTION_SCRIPT_PATH, runtime="python", docker_file=DOCKER_FILE_PATH)
    
image_config = ContainerImage.image_configuration(execution_script=EXECUTION_SCRIPT_PATH, runtime="python", conda_file=CONDA_FILE_PATH)

#Deploy the service
service = Webservice.deploy_from_model(workspace=ws, name=SERVICE_NAME, deployment_config=aciconfig, models=[model], image_config=image_config)

service.wait_for_deployment(show_output=True)

print("SERVICE_ENDPOINT")
print(service.scoring_uri)

variables.put("SCORING_URI",service.scoring_uri)

print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            188.59375
        </positionTop>
        <positionLeft>
            460.78125
        </positionLeft>
      </metadata>
    </task>
    <task name="Call_Deployed_Service">
      <description>
        <![CDATA[ Send requests and get responses from a service deployed on Azure. ]]>
      </description>
      <variables>
        <variable inherited="true" name="SCORING_URI" value="http://705492df-3699-40fd-b434-abb5ecb33c63.uksouth.azurecontainer.io/score"/>
        <variable inherited="true" model="PA:JSON" name="INPUT_DATA" value="[[9,112,82,24,0,28.2,1282,50],[9,112,82,24,0,28.2,1282,50]]"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png"/>
      </genericInformation>
      <depends>
        <task ref="Deploy_Model_on_Azure"/>
      </depends>
      <selection>
        <script>
          <code language="python">
            <![CDATA[
selected = True
]]>
          </code>
        </script>
      </selection>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
containerName = 'activeeon/dlm3'
dockerRunCommand =  'docker run '
dockerParameters = '--rm '
paHomeHost = variables.get("PA_SCHEDULER_HOME")
paHomeContainer = variables.get("PA_SCHEDULER_HOME")
workspaceContainer = '/usr/data'
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' '
workspaceHost = localspace
workspaceVolume = '-v '+localspace +':'+localspace+' '
globalspaceVolume = '-v '+globalspace +':'+workspaceContainer+' '
containerWorkingDirectory = '-w '+workspaceContainer+' '
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + globalspaceVolume + workspaceVolume + containerWorkingDirectory + containerName
print(preJavaHomeCmd)
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")
print("BEGIN " + __file__)

import requests
import json, bz2
import numpy as np
import pandas as pd

#Default variables initialization
headers = {'Content-Type':'application/json'}
scoring_uri = 'http://705492df-3699-40fd-b434-abb5ecb33c63.uksouth.azurecontainer.io/score'

#Get Studio variables
if 'variables' in locals():
    if variables.get("SCORING_URI") is not None:
        scoring_uri = variables.get("SCORING_URI")

#Get Data from previous tasks
input_variables = {
  'task.dataframe_id_test': None,
  'task.dataframe_id': None
}
for key in input_variables.keys():
  for res in results:
    value = res.getMetadata().get(key)
    if value is not None:
      input_variables[key] = value
      break
if input_variables['task.dataframe_id_test'] is not None:
  dataframe_id = input_variables['task.dataframe_id_test']
  dataframe_json = variables.get(dataframe_id)
  dataframe_json = bz2.decompress(dataframe_json).decode()
  assert dataframe_json is not None
  dataframe = pd.read_json(dataframe_json, orient='split')
  dataframe_test = dataframe.drop(['class'], axis=1, inplace=False)
  dataframe_json = dataframe_test.to_json(orient='values')
elif input_variables['task.dataframe_id'] is not None:
  dataframe_id = input_variables['task.dataframe_id']
  dataframe_json = variables.get(dataframe_id)
  dataframe_json = bz2.decompress(dataframe_json).decode()
  assert dataframe_json is not None
  dataframe = pd.read_json(dataframe_json, orient='split')
  dataframe_test = dataframe.drop(['class'], axis=1, inplace=False)
  dataframe_json = dataframe_test.to_json(orient='values')
elif variables.get("INPUT_DATA") is not None:
  dataframe_json = variables.get("INPUT_DATA")
else:
  print("there is no input data")

#Call the deployed service
response = requests.post(scoring_uri, data=dataframe_json, headers=headers)

#Print the service response
print(response.status_code)
print(response.elapsed)
print(response.text)

print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            316.59375
        </positionTop>
        <positionLeft>
            460.78125
        </positionLeft>
      </metadata>
    </task>
    <task name="Update_Deployed_Service">
      <description>
        <![CDATA[ Update the Deployed Service on Azure. ]]>
      </description>
      <variables>
        <variable inherited="true" name="AZURE_SUBSCRIPTION_ID" value="a1c03dc2-0383-4ec9-9c73-fb74aa0de4f6"/>
        <variable inherited="true" name="AZURE_RESOURCE_GROUP" value="test_azure_rs"/>
        <variable inherited="true" name="AZURE_WORKSPACE_NAME" value="docs-ws"/>
        <variable inherited="false" name="MODEL_NAME" value="mymodel"/>
        <variable inherited="false" name="MODEL_PATH" value="sklearn_mnist_model.pkl"/>
        <variable inherited="false" name="MODEL_DESCRIPTION" value="digit classification"/>
        <variable inherited="false" name="SERVICE_NAME" value="sklearn-mnist-test"/>
        <variable inherited="false" name="SERVICE_DESCRIPTION" value="Predict MNIST with sklearn"/>
        <variable inherited="false" name="EXECUTION_SCRIPT_PATH" value="score.py"/>
        <variable inherited="false" name="CONDA_FILE_PATH" value="myenv.yml"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png"/>
      </genericInformation>
      <depends>
        <task ref="Call_Deployed_Service"/>
      </depends>
      <selection>
        <script>
          <code language="python">
            <![CDATA[
selected = True
]]>
          </code>
        </script>
      </selection>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
containerName = 'activeeon/dlm3'
dockerRunCommand =  'docker run '
dockerParameters = '--rm '
paHomeHost = variables.get("PA_SCHEDULER_HOME")
paHomeContainer = variables.get("PA_SCHEDULER_HOME")
workspaceContainer = '/usr/data'
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' '
workspaceHost = localspace
workspaceVolume = '-v '+localspace +':'+localspace+' '
globalspaceVolume = '-v '+globalspace +':'+workspaceContainer+' '
containerWorkingDirectory = '-w '+workspaceContainer+' '
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + globalspaceVolume + workspaceVolume + containerWorkingDirectory + containerName
print(preJavaHomeCmd)
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")
print("BEGIN " + __file__)

from azureml.core.webservice import Webservice
from azureml.core.authentication import InteractiveLoginAuthentication
from azureml.core import Workspace
from azureml.core.model import Model
from azureml.core.model import InferenceConfig
from azureml.core.image import ContainerImage

#Define default variables
WORKSPACE_NAME = 'docs-ws'
SUBSCRIPTION_ID = 'a1c03dc2-0383-4ec9-9c73-fb74aa0de4f6'
RESOURCE_GROUP = 'test_azure_rs'
SERVICE_NAME = 'sklearn-mnist-test'
MODEL_PATH = "myModel.pkl"
MODEL_NAME = "test_model"
MODEL_DESCRIPTION = " test a new update of the service"

#Get variables from the Studio
if 'variables' in locals():
    if variables.get("AZURE_SUBSCRIPTION_ID") is not None:
        AZURE_SUBSCRIPTION_ID = variables.get("AZURE_SUBSCRIPTION_ID")
    if variables.get("AZURE_RESOURCE_GROUP") is not None:
        AZURE_RESOURCE_GROUP = variables.get("AZURE_RESOURCE_GROUP")
    if variables.get("AZURE_WORKSPACE_NAME") is not None:
        AZURE_WORKSPACE_NAME = variables.get("AZURE_WORKSPACE_NAME")
    if variables.get("MODEL_NAME") is not None:
        MODEL_NAME = variables.get("MODEL_NAME")
    if variables.get("MODEL_PATH") is not None:
        MODEL_PATH = variables.get("MODEL_PATH")
    if variables.get("MODEL_DESCRIPTION") is not None:
        MODEL_DESCRIPTION = variables.get("MODEL_DESCRIPTION")
    if variables.get("SERVICE_NAME") is not None:
        SERVICE_NAME = variables.get("SERVICE_NAME")
    if variables.get("EXECUTION_SCRIPT_PATH") is not None:
        EXECUTION_SCRIPT_PATH = variables.get("EXECUTION_SCRIPT_PATH")
    if variables.get("CONDA_FILE_PATH") is not None:
        CONDA_FILE_PATH = variables.get("CONDA_FILE_PATH")

#Set the interactive authentification
interactive_auth = InteractiveLoginAuthentication()

#Set the interactive authentification
ws = Workspace.get(name=AZURE_WORKSPACE_NAME, auth=interactive_auth, subscription_id=SUBSCRIPTION_ID,resource_group=RESOURCE_GROUP)
service = Webservice(workspace=ws, name=SERVICE_NAME)

#Register a new model
new_model = Model.register(model_path = MODEL_PATH,
                       model_name = MODEL_NAME,
                       description = MODEL_DESCRIPTION,
                       workspace = ws)

#Create a new image
if CONDA_FILE_PATH is None:
    # Define the Conda environment
    from azureml.core.conda_dependencies import CondaDependencies
    myenv = CondaDependencies()
    myenv.add_conda_package("scikit-learn")
	#myenv.add_pip_package("joblib")
    with open("myenv.yml","w") as f:
        f.write(myenv.serialize_to_string())
    inference_config = InferenceConfig(entry_script=EXECUTION_SCRIPT_PATH, runtime="python", conda_file="myenv.yml")
else:
    inference_config = InferenceConfig(entry_script=EXECUTION_SCRIPT_PATH, runtime="python", conda_file=CONDA_FILE_PATH)

#Update the service
#service.update(image=None, tags=None, properties=None, description=None, auth_enabled=None, ssl_enabled=None, ssl_cert_pem_file=None, ssl_key_pem_file=None, ssl_cname=None, enable_app_insights=None, models=None, inference_config=None)
service.update(models=[new_model],inference_config=inference_config)
print(service.state)
print(service.get_logs())
print("service ",SERVICE_NAME," was updated successefuly")

variables.put("SCORING_URI",service.scoring_uri)

print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            444.59375
        </positionTop>
        <positionLeft>
            460.78125
        </positionLeft>
      </metadata>
    </task>
    <task name="Delete_Deployed_Service">
      <description>
        <![CDATA[ Delete a deployed service on Azure. ]]>
      </description>
      <variables>
        <variable inherited="true" name="AZURE_SUBSCRIPTION_ID" value="a1c03dc2-0383-4ec9-9c73-fb74aa0de4f6"/>
        <variable inherited="true" name="AZURE_RESOURCE_GROUP" value="test_azure_rs"/>
        <variable inherited="true" name="AZURE_WORKSPACE_NAME" value="docs-ws"/>
        <variable inherited="false" name="SERVICE_NAME" value="sklearn-mnist-test"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png"/>
      </genericInformation>
      <depends>
        <task ref="Update_Deployed_Service"/>
      </depends>
      <selection>
        <script>
          <code language="python">
            <![CDATA[
selected = True
]]>
          </code>
        </script>
      </selection>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
containerName = 'activeeon/dlm3'
dockerRunCommand =  'docker run '
dockerParameters = '--rm '
paHomeHost = variables.get("PA_SCHEDULER_HOME")
paHomeContainer = variables.get("PA_SCHEDULER_HOME")
workspaceContainer = '/usr/data'
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' '
workspaceHost = localspace
workspaceVolume = '-v '+localspace +':'+localspace+' '
globalspaceVolume = '-v '+globalspace +':'+workspaceContainer+' '
containerWorkingDirectory = '-w '+workspaceContainer+' '
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + globalspaceVolume + workspaceVolume + containerWorkingDirectory + containerName
print(preJavaHomeCmd)
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")
print("BEGIN " + __file__)

from azureml.core.webservice import Webservice
from azureml.core.authentication import InteractiveLoginAuthentication
from azureml.core import Workspace

#Define Default values
WORKSPACE_NAME = 'docs-ws'
SUBSCRIPTION_ID = 'a1c03dc2-0383-4ec9-9c73-fb74aa0de4f6'
RESOURCE_GROUP = 'test_azure_rs'
SERVICE_NAME = 'sklearn-mnist-test'

#Get variables from the Studio
if 'variables' in locals():
    if variables.get("AZURE_SUBSCRIPTION_ID") is not None:
        AZURE_SUBSCRIPTION_ID = variables.get("AZURE_SUBSCRIPTION_ID")
    if variables.get("AZURE_RESOURCE_GROUP") is not None:
        AZURE_RESOURCE_GROUP = variables.get("AZURE_RESOURCE_GROUP")
    if variables.get("AZURE_WORKSPACE_NAME") is not None:
        AZURE_WORKSPACE_NAME = variables.get("AZURE_WORKSPACE_NAME")
    if variables.get("SERVICE_NAME") is not None:
        SERVICE_NAME = variables.get("SERVICE_NAME")

#Set the interactive authetification
interactive_auth = InteractiveLoginAuthentication()

#Access to the chosen workspace
ws = Workspace.get(name=AZURE_WORKSPACE_NAME, auth=interactive_auth, subscription_id=AZURE_SUBSCRIPTION_ID,resource_group=AZURE_RESOURCE_GROUP)

#Delete the chosen service
service = Webservice(workspace=ws, name=SERVICE_NAME)
service.delete()

print("service ",SERVICE_NAME,"was deleted successefuly")
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            572.59375
        </positionTop>
        <positionLeft>
            460.78125
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2864px;
            height:3432px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-183.59375px;left:-455.78125px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_4" style="top: 188.594px; left: 460.781px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png" width="20px">&nbsp;<span class="name">Deploy_Model_on_Azure</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_7" style="top: 316.594px; left: 460.781px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png" width="20px">&nbsp;<span class="name">Call_Deployed_Service</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_10" style="top: 444.594px; left: 460.781px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png" width="20px">&nbsp;<span class="name">Update_Deployed_Service</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_13" style="top: 572.594px; left: 460.781px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png" width="20px">&nbsp;<span class="name">Delete_Deployed_Service</span></a></div><svg style="position:absolute;left:520px;top:228.5px" width="25" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 88 C -10 38 14 50 4 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.4906875000000004,66.78168750000002 L6.088432834392776,47.40647926142854 L-1.3695665952116438,52.82664941632405 L-7.866605249283188,46.28535835664018 L-2.4906875000000004,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.4906875000000004,66.78168750000002 L6.088432834392776,47.40647926142854 L-1.3695665952116438,52.82664941632405 L-7.866605249283188,46.28535835664018 L-2.4906875000000004,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:520px;top:356.5px" width="28.5" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 7.5 88 C 17.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M9.6924,66.303232 L14.047579150003148,45.56600907668218 L7.882160168186493,52.42075989481225 L0.1651070448154046,47.37624890849568 L9.6924,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M9.6924,66.303232 L14.047579150003148,45.56600907668218 L7.882160168186493,52.42075989481225 L0.1651070448154046,47.37624890849568 L9.6924,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:525.5px;top:484.5px" width="23" height="89" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 12 50 2 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.6529999999999996,66.78168750000002 L5.422684726887218,47.19129913754225 L-1.8927913941925154,52.80234263424697 L-8.556660138865833,46.431090531734775 L-2.6529999999999996,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-2.6529999999999996,66.78168750000002 L5.422684726887218,47.19129913754225 L-1.8927913941925154,52.80234263424697 L-8.556660138865833,46.431090531734775 L-2.6529999999999996,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 524.5px; top: 219px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 520.5px; top: 347px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 520.5px; top: 307px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 528px; top: 475px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 528px; top: 435px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 526px; top: 603px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 526px; top: 563px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>
