<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.14" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Train_Deploy_Iris_Flowers_Classification_Model" onTaskError="continueJobExecution" priority="normal" projectName="5. MLOps Workflows Example" tags="Samples,Big Data,Machine Learning,Analytics" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd">
  <variables>
    <variable advanced="true" description="Working directory for the data space used to transfer files automatically between the workflow tasks." hidden="false" model="PA:LIST(.,$HOME/,$WORK/,$SCRATCH/)" name="WORK_DIR" value="."/>
    <variable advanced="true" description="Container platform used for executing the workflow tasks." group="Container Parameters" hidden="false" model="PA:LIST(no-container,docker,podman,singularity)" name="CONTAINER_PLATFORM" value="docker"/>
    <variable advanced="true" description="If True, it will activate the use of GPU for the workflow tasks on the selected container platform." group="Container Parameters" hidden="false" model="PA:Boolean" name="CONTAINER_GPU_ENABLED" value="false"/>
    <variable advanced="true" description="Name of the container image being used." group="Container Parameters" hidden="false" model="PA:LIST(,docker://activeeon/dlm3,docker://activeeon/cuda,docker://activeeon/cuda2,docker://activeeon/rapidsai,docker://activeeon/nvidia:rapidsai)" name="CONTAINER_IMAGE" value=""/>
    <variable advanced="false" description="Name of the model to be deployed" hidden="false" name="MODEL_NAME" value="iris-classification-model-${PA_JOB_ID}"/>
    <variable advanced="false" description="Version of the model to be deployed." hidden="false" model="PA:Integer" name="MODEL_VERSION" value="1"/>
    <variable advanced="false" description="ID of the model server used to deploy the trained model" hidden="false" model="PA:Integer?" name="MODEL_SERVER_ID" value=""/>
    <variable advanced="false" description="The MLOps Dashboard instance where the model will be deployed" hidden="false" model="PA:MODEL_FROM_URL(${PA_SCHEDULER_REST_PUBLIC_URL}/rm/model/tokens?name=PSA_mlops-dashboard.*)" name="MLOPS_DASHBOARD_INSTANCE" value="PSA_mlops-dashboard-1"/>
  </variables>
  <description>
    <![CDATA[ Train a Iris flowers classification model using the logistic regression and deploy it to the MLOps Model Server. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="ai-mlops-dashboard"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/scikit_learn.png"/>
<info name="Documentation" value="PAIO/PAIOUserGuide.html#_mlops_dashboard"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Load_Iris_Dataset" preciousResult="true">
      <description>
        <![CDATA[ Load and return the iris dataset classification. ]]>
      </description>
      <variables>
        <variable advanced="false" description="If False, the task will be ignored, it will not be executed." inherited="false" model="PA:Boolean" name="TASK_ENABLED" value="True"/>
        <variable advanced="false" description="Method/protocol to import the data source." inherited="false" model="PA:LIST(PA:URL,PA:URI,PA:USER_FILE,PA:GLOBAL_FILE)" name="IMPORT_FROM" value="PA:URL"/>
        <variable advanced="false" description="Path or name of the file that contains the dataset." inherited="false" model="$IMPORT_FROM" name="FILE_PATH" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/datasets/iris.csv"/>
        <variable advanced="false" description="Delimiter to use." inherited="false" name="FILE_DELIMITER" value=","/>
        <variable advanced="false" description="Maximum number of rows displayed in the output" inherited="false" model="PA:Integer" name="LIMIT_OUTPUT_VIEW" value="-1"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/load_dataset.png"/>
        <info name="task.documentation" value="PAIO/PAIOUserGuide.html#_load_iris_dataset"/>
      </genericInformation>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <file language="cpython" url="${PA_CATALOG_REST_URL}/buckets/ai-machine-learning/resources/Load_Iris_Dataset_Script/raw"/>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            25
        </positionTop>
        <positionLeft>
            426.5
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Split_Data">
      <description>
        <![CDATA[ Separate data into training and testing sets. ]]>
      </description>
      <variables>
        <variable advanced="false" description="Float number within the range (0.0, 1.0), not including the values 0.0 and 1.0." inherited="false" name="TRAIN_SIZE" value="0.7"/>
        <variable advanced="false" description="If False, the task will be ignored, it will not be executed." inherited="false" model="PA:Boolean" name="TASK_ENABLED" value="True"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/data-processing.png"/>
        <info name="task.documentation" value="PAIO/PAIOUserGuide.html#_split_data"/>
      </genericInformation>
      <depends>
        <task ref="Encode_Data"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <file language="cpython" url="${PA_CATALOG_REST_URL}/buckets/ai-machine-learning/resources/Split_Data_Script/raw"/>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            281
        </positionTop>
        <positionLeft>
            426.5
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Model_Packaging" preciousResult="true">
      <description>
        <![CDATA[ Download a trained model. ]]>
      </description>
      <variables>
        <variable advanced="false" description="If False, the task will be ignored, it will not be executed." inherited="false" model="PA:Boolean" name="TASK_ENABLED" value="True"/>
        <variable advanced="false" hidden="false" inherited="false" name="CONTAINER_IMAGE" value="activeeon/dlm4"/>
        <variable advanced="false" hidden="false" inherited="true" name="MODEL_NAME" value="model-${PA_JOB_ID}"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/download_model.png"/>
        <info name="task.documentation" value="PAIO/PAIOUserGuide.html#_download_model"/>
      </genericInformation>
      <depends>
        <task ref="Train_Model"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import os
import sys
import zipfile
import requests
import json
import ssl
import urllib.request
import joblib
import pickle
import bz2
import onnx
import uuid
import pandas as pd

from os import remove, listdir, makedirs
from os.path import basename, splitext, exists, join, isfile
from urllib.parse import urlparse
from sklearn.model_selection import train_test_split
from skl2onnx import convert_sklearn
from skl2onnx.common.data_types import FloatTensorType

__file__ = variables.get("PA_TASK_NAME")
print("BEGIN " + __file__)

# -------------------------------------------------------------
# Get schedulerapi access and acquire session id
schedulerapi.connect()
sessionid = schedulerapi.getSession()
connection_info = schedulerapi.getConnectionInfo()
ci_url = connection_info.getUrl()
url = urlparse(ci_url)
proactive_url = url.scheme + "://" + url.hostname + ":" + str(url.port)
print("proactive_url: ", proactive_url)

# -------------------------------------------------------------
# Import an external python script containing a collection of
# common utility Python functions and classes
PA_CATALOG_REST_URL = variables.get("PA_CATALOG_REST_URL")
PA_PYTHON_UTILS_URL = PA_CATALOG_REST_URL + "/buckets/ai-machine-learning/resources/Utils_Script/raw"
req = urllib.request.Request(PA_PYTHON_UTILS_URL)
req.add_header('sessionid', sessionid)
if PA_PYTHON_UTILS_URL.startswith('https'):
    content = urllib.request.urlopen(req, context=ssl._create_unverified_context()).read()
else:
    content = urllib.request.urlopen(req).read()
exec(content, globals())

# -------------------------------------------------------------
# Check if the Python task is enabled or not
check_task_is_enabled()

# -------------------------------------------------------------
# Get data from the propagated variables
#
input_variables = {'task.model_id': None}
get_input_variables(input_variables)

model_id = input_variables['task.model_id']
model = get_and_decompress_model(model_id)

# Load the trained model from disk
#loaded_model = joblib.load('logitic_regression.pkl')
#print(loaded_model)
NVIDIA_RAPIDS_ENABLED = is_nvidia_rapids_enabled()
print('NVIDIA_RAPIDS_ENABLED: ', NVIDIA_RAPIDS_ENABLED)

if NVIDIA_RAPIDS_ENABLED:
    import cudf
    # import cuml
    # import cupy as cp

input_variables = {
    'task.dataframe_id': None,
    'task.dataframe_id_train': None,
    'task.algorithm_json': None,
    'task.label_column': None,
    'task.feature_names': None,
    'task.encode_map_json': None,
    'task.model_id': None
}
get_input_variables(input_variables)

# get algorithm name
algorithm_json = input_variables['task.algorithm_json']
assert algorithm_json is not None
algorithm = json.loads(algorithm_json)
alg = dict_to_obj(algorithm)

MODEL_NAME = variables.get("MODEL_NAME")
assert_not_none_not_empty(MODEL_NAME, "MODEL_NAME should be defined!")

MODEL_VERSION = variables.get("MODEL_VERSION")
assert_not_none_not_empty(MODEL_VERSION, "MODEL_VERSION should be defined!")

MODEL_SERVER_ID = variables.get("MODEL_SERVER_ID")
assert_not_none_not_empty(MODEL_VERSION, "MODEL_SERVER_ID should be defined!")

def get_instance_name_and_model_registry_path(sessionid, proactive_url, instance_id):
    headers = {'sessionid': sessionid}
    url = f"{proactive_url}/cloud-automation-service/serviceInstances/{instance_id}"
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = json.loads(response.text)
        instance_name = data.get('variables', {}).get('INSTANCE_NAME')
        model_registry_path = data.get('variables', {}).get('MODEL_REGISTRY_PATH')
        return instance_name, model_registry_path
    else:
        print(f"Failed to get data, status code: {response.status_code}")
        return None, None
instance_name, model_registry_path = get_instance_name_and_model_registry_path(sessionid, proactive_url, MODEL_SERVER_ID)
MODEL_SERVER_TOKEN = "PSA_" + instance_name
print('MODEL_SERVER_TOKEN: ', MODEL_SERVER_TOKEN)
print('MODEL_SERVER_REGISTRY: ', model_registry_path)
variables.put('MODEL_SERVER_TOKEN', MODEL_SERVER_TOKEN)
variables.put('MODEL_SERVER_REGISTRY', model_registry_path)

dataframe_id = None
if input_variables['task.dataframe_id'] is not None:
    dataframe_id = input_variables['task.dataframe_id']
if input_variables['task.dataframe_id_train'] is not None:
    dataframe_id = input_variables['task.dataframe_id_train']
print("dataframe id (in): ", dataframe_id)

dataframe_json = get_and_decompress_json_dataframe(dataframe_id)

if NVIDIA_RAPIDS_ENABLED:
    dataframe = cudf.read_json(dataframe_json, orient='split')
else:
    dataframe = pd.read_json(dataframe_json, orient='split')

is_labeled_data = False
LABEL_COLUMN = variables.get("LABEL_COLUMN")
if is_not_none_not_empty(LABEL_COLUMN):
    is_labeled_data = True
else:
    LABEL_COLUMN = input_variables['task.label_column']
    if is_not_none_not_empty(LABEL_COLUMN):
        is_labeled_data = True

dataframe_train = None
dataframe_label = None
model_explainer = None
loss = 0
if model is not None:
    print('-' * 30)
    print(model)
    print('-' * 30)
    if is_labeled_data:
        dataframe_train = dataframe.drop([LABEL_COLUMN], axis=1)
        dataframe_label = dataframe[LABEL_COLUMN]
    else:
        dataframe_train = dataframe
    if NVIDIA_RAPIDS_ENABLED:
        for colname in dataframe_train.columns:
            dataframe_train[colname] = dataframe_train[colname].astype('float32')
        dataframe_label = dataframe_label.astype('float32') if dataframe_label is not None else None     

model_id = input_variables['task.model_id']
model_compressed = variables.get(model_id)
model_bin = bz2.decompress(model_compressed)
assert model_bin is not None
print("model id (in): ", model_id)
print("model size: ", sys.getsizeof(model_compressed), " bytes")
print("model size (decompressed): ", sys.getsizeof(model_bin), " bytes")

loaded_model = pickle.loads(model_bin)

if loaded_model is not None:
    print('-' * 30)
    print(loaded_model)
    print('-' * 30)

def prepare_onnx_conversion_params(X, target_opset, model):
    if target_opset in {9, 17}:
        tensor = FloatTensorType([None, 4])
    else:
        tensor = FloatTensorType([None, X.shape[1]])
    if target_opset == 9:
        options = {id(model): {'zipmap': False}}
    elif target_opset == 12:
        options = {type(model): {'zipmap': False}}
    else:
        options = None
    return tensor, options

def convert2onnx(model, initial_type, options, target_opset):
    try:
        # Try to convert the trained model to ONNX format
        onnx_model = convert_sklearn(model, initial_types=initial_type, options=options, target_opset=target_opset)
    except Exception as e:
        print("Error occurred while converting model to ONNX format:", e)
    return onnx_model

def create_triton_config(model, config_path, model_name, max_batch_size=0):
    # Define a map from TensorProto.DataType to the corresponding string
    tensor_type_to_string = {
        1: "TYPE_FP32",  
        2: "TYPE_UINT8",
        3: "TYPE_INT8",
        4: "TYPE_UINT16",
        5: "TYPE_INT16",
        6: "TYPE_INT32",
        7: "TYPE_INT64",
        8: "TYPE_STRING",
        9: "TYPE_BOOL",
        10: "TYPE_FP16",  
        11: "TYPE_FP64",  
        12: "TYPE_UINT32",
        13: "TYPE_UINT64",
        14: "TYPE_COMPLEX64",
        15: "TYPE_COMPLEX128",
        16: "TYPE_BFLOAT16"
    }
    # Extract input and output information
    input_tensors = []
    for i in model.graph.input:
        shape = [dim.dim_value if dim.dim_value != 0 else -1 for dim in i.type.tensor_type.shape.dim]
        data_type = tensor_type_to_string.get(i.type.tensor_type.elem_type, "TYPE_UNDEFINED")
        input_tensors.append({"name": i.name, "data_type": data_type, "dims": shape})
    output_tensors = []
    for o in model.graph.output:
        shape = [dim.dim_value if dim.dim_value != 0 else -1 for dim in o.type.tensor_type.shape.dim]
        data_type = tensor_type_to_string.get(o.type.tensor_type.elem_type, "TYPE_UNDEFINED")
        output_tensors.append({"name": o.name, "data_type": data_type, "dims": shape})
    # Create the Triton configuration
    config = {
        "name": model_name,
        "platform": "onnxruntime_onnx",
        "max_batch_size": max_batch_size,
        "input": input_tensors,
        "output": output_tensors,
        "instance_group": [{"count": 1, "kind": "KIND_CPU"}],
    }
    # Save the configuration as a JSON file
    with open(config_path, 'w') as f:
        f.write("name: \"" + config['name'] + "\"\n")
        f.write("platform: \"" + config['platform'] + "\"\n")
        # f.write("max_batch_size: " + str(config['max_batch_size']) + "\n")
        f.write("input [\n")
        for input_tensor in config['input']:
            f.write("  {\n")
            f.write("    name: \"" + input_tensor['name'] + "\"\n")
            f.write("    data_type: " + input_tensor['data_type'] + "\n")
            f.write("    dims: [ " + ", ".join([str(dim) for dim in input_tensor['dims']]) + " ]\n")
            f.write("  }\n")
        f.write("]\n")
        f.write("output [\n")
        for i, output_tensor in enumerate(config['output']):
            f.write("  {\n")
            f.write("    name: \"" + output_tensor['name'] + "\"\n")
            f.write("    data_type: " + output_tensor['data_type'] + "\n")
            f.write("    dims: [ " + ", ".join([str(dim) for dim in output_tensor['dims']]) + " ]\n")
            f.write("  }\n")
            if i != len(config['output']) - 1:  # If not the last output tensor, add a comma
                f.write(",\n")
        f.write("]\n")
        f.write("instance_group [\n")
        for instance_group in config['instance_group']:
            f.write("  {\n")
            f.write("    count: " + str(instance_group['count']) + "\n")
            f.write("    kind: " + instance_group['kind'] + "\n")
            f.write("  }\n")
        f.write("]\n")
    print(f"The configuration file has been saved to '{config_path}'")

# Prepare the ONNX conversion parameters
target_opset = 12  # Update this value based on your model type
tensor, options = prepare_onnx_conversion_params(dataframe_train, target_opset, loaded_model)

input_name = 'float_input'
initial_type = [(input_name, tensor)]

# Convert the model to ONNX format
onnx_model = convert2onnx(loaded_model, initial_type, options, target_opset)

# Get an unique ID
ID = str(uuid.uuid4())

# Define localspace
# LOCALSPACE = os.path.join(alg.name, MODEL_NAME)
LOCALSPACE = MODEL_NAME
os.makedirs(LOCALSPACE, exist_ok=True)

MODEL_VERSION_DIR = os.path.join(LOCALSPACE, MODEL_VERSION)
os.makedirs(MODEL_VERSION_DIR, exist_ok=True)

config_path = os.path.join(LOCALSPACE, "config.pbtxt")
create_triton_config(onnx_model, config_path, MODEL_NAME, max_batch_size=0)

model_path = os.path.join(MODEL_VERSION_DIR, "model.onnx")
with open(model_path, "wb") as f:
    f.write(onnx_model.SerializeToString())

def zip_directory(directory_path):
    # Create a zipfile object and write files to it
    zip_file_path = directory_path + ".zip"
    with zipfile.ZipFile(zip_file_path, "w", zipfile.ZIP_DEFLATED) as zip_file:
        for root, dirs, files in os.walk(directory_path):
            for file in files:
                # Keep the directory_path inside the zip so when unzipped it creates a folder and extracts the files inside it
                zip_file.write(os.path.join(root, file), 
                               os.path.relpath(os.path.join(root, file), 
                               os.path.dirname(directory_path)))
                # zip_file.write(os.path.join(root, file), 
                #                os.path.relpath(os.path.join(root, file), 
                #                directory_path))
    print(f"The zip file '{zip_file_path}' has been created.")
    return zip_file_path

# Test the function
zip_file_path = zip_directory(LOCALSPACE) # replace with your directory

# Read the whole file at once
FILE_BIN = None
with open(zip_file_path, "rb") as binary_file:
    FILE_BIN = binary_file.read()
assert FILE_BIN is not None  

result = FILE_BIN
resultMetadata.put("file.extension", ".zip")
resultMetadata.put("file.name", MODEL_NAME + ".zip")
resultMetadata.put("content.type", "application/octet-stream") 
# -------------------------------------------------------------
print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <outputFiles>
        <files accessMode="transferToUserSpace" includes="${MODEL_NAME}.zip"/>
      </outputFiles>
      <metadata>
        <positionTop>
            537
        </positionTop>
        <positionLeft>
            503
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Logistic_Regression">
      <description>
        <![CDATA[ Logistic Regression is a regression model where the Dependent Variable (DV) is categorical. ]]>
      </description>
      <variables>
        <variable advanced="false" description="If False, the task will be ignored, it will not be executed." inherited="false" model="PA:Boolean" name="TASK_ENABLED" value="True"/>
        <variable description="A set of specific variables (usecase-related) that are used in the model training process." inherited="true" name="INPUT_VARIABLES" value="{}"/>
        <variable advanced="false" description="Function used to evaluate the quality of a given pipeline for the clustering problem." inherited="false" model="PA:List(accuracy,balanced_accuracy, average_precision, brier_score_loss, f1, f1_micro, f1_macro, f1_weighted, f1_samples, neg_log_loss, precision, recall, roc_auc)" name="SCORING" value="accuracy"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ml_classification.png"/>
        <info name="task.documentation" value="PAIO/PAIOUserGuide.html#_logistic_regression"/>
      </genericInformation>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/ai-auto-ml-optimization/resources/get_automl_params/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <file language="cpython" url="${PA_CATALOG_REST_URL}/buckets/ai-machine-learning/resources/Logistic_Regression_Script/raw"/>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            281
        </positionTop>
        <positionLeft>
            579.5
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Train_Model">
      <description>
        <![CDATA[ Train a classification/clustering/anomaly detection model ]]>
      </description>
      <variables>
        <variable advanced="false" description="If False, the task will be ignored, it will not be executed." inherited="false" name="TASK_ENABLED" value="True"/>
        <variable advanced="false" description="Label/class column name." inherited="false" name="LABEL_COLUMN" value="species"/>
        <variable advanced="false" description="Number of splits you want to perform on the data." inherited="false" model="PA:Integer" name="N_SPLITS" value="5"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/train.png"/>
        <info name="task.documentation" value="PAIO/PAIOUserGuide.html#_train_model"/>
      </genericInformation>
      <depends>
        <task ref="Split_Data"/>
        <task ref="Logistic_Regression"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/ai-auto-ml-optimization/resources/get_automl_token/raw"/>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <file language="cpython" url="${PA_CATALOG_REST_URL}/buckets/ai-machine-learning/resources/Train_Model_Script/raw"/>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            409
        </positionTop>
        <positionLeft>
            503
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Deploy_Model">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <genericInformation>
        <info name="NODE_ACCESS_TOKEN" value="${MODEL_SERVER_TOKEN}"/>
      </genericInformation>
      <depends>
        <task ref="Model_Packaging"/>
      </depends>
      <inputFiles>
        <files accessMode="transferFromUserSpace" includes="${MODEL_NAME}.zip"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
# Assign variables
MODEL_NAME=$variables_MODEL_NAME
MODEL_VERSION=$variables_MODEL_VERSION
MODEL_SERVER_REGISTRY=$variables_MODEL_SERVER_REGISTRY

echo "MODEL_NAME: $MODEL_NAME"
echo "MODEL_VERSION: $MODEL_VERSION"
echo "MODEL_SERVER_REGISTRY: $MODEL_SERVER_REGISTRY"

# Construct the target path
TARGET_PATH="$MODEL_SERVER_REGISTRY/$MODEL_NAME/$MODEL_VERSION"

# Check if the MODEL_NAME directory exists in the MODEL_SERVER_REGISTRY
if [ ! -d "$MODEL_SERVER_REGISTRY/$MODEL_NAME" ]; then
    # If not, unzip the full content
    unzip $MODEL_NAME.zip -d $MODEL_SERVER_REGISTRY
else
    # If MODEL_NAME directory exists, check if MODEL_VERSION directory exists
    if [ ! -d "$TARGET_PATH" ]; then
        # If MODEL_VERSION directory does not exist, create it
        mkdir -p $TARGET_PATH
    fi
    # Extract the model.onnx file to the target directory, overwrite if exists
    unzip -o $MODEL_NAME.zip $MODEL_NAME/$MODEL_VERSION/model.onnx -d $MODEL_SERVER_REGISTRY
fi
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            665
        </positionTop>
        <positionLeft>
            503
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Encode_Data" preciousResult="true">
      <description>
        <![CDATA[ Encode the specified columns from the data. ]]>
      </description>
      <variables>
        <variable advanced="false" description="If False, the task will be ignored, it will not be executed." hidden="false" inherited="false" model="PA:Boolean" name="TASK_ENABLED" value="True"/>
        <variable advanced="false" description="List of columns to restrict to. Columns names should be separated by a comma." hidden="false" inherited="false" name="COLUMNS_NAME" value="species"/>
        <variable advanced="false" description="Number of rows that will be previewed in the browser." hidden="false" inherited="false" model="PA:Integer" name="LIMIT_OUTPUT_VIEW" value="5"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/data-processing.png"/>
        <info name="task.documentation" value="PAIO/PAIOUserGuide.html#_encode_data"/>
      </genericInformation>
      <depends>
        <task ref="Load_Iris_Dataset"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <file language="cpython" url="${PA_CATALOG_REST_URL}/buckets/ai-machine-learning/resources/Encode_Data_Script/raw"/>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            153
        </positionTop>
        <positionLeft>
            426.5
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Update_Deployment_Time">
      <description>
        <![CDATA[ Update the deployment time in the dashboard for the model that was just deployed. ]]>
      </description>
      <depends>
        <task ref="Deploy_Model"/>
      </depends>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.io.FileType
import com.google.common.base.Splitter
import org.ow2.proactive.scheduler.common.job.JobVariable
import groovy.json.JsonSlurper
import java.net.URL

def getMLOpsDashboardEndpointUrl(String sessionid, String proactiveUrl, String mlopsDashboardToken, String instanceId) {
    // Define headers
    def headers = ['sessionid': sessionid]

    // Define base URL
    def baseUrl = "$proactiveUrl/cloud-automation-service/serviceInstances/active"

    // Create URL object
    def url = new URL(baseUrl)

    // Open connection
    def connection = url.openConnection()

    // Set headers
    headers.each { key, value ->
        connection.setRequestProperty(key, value)
    }

    // Get response
    def response
    try {
        response = connection.getInputStream()
    } catch (Exception e) {
        println "Error: Unable to connect to $baseUrl"
        return [null, null]
    }

    // Parse JSON response
    def json = new JsonSlurper().parseText(response.text)
    // println "json: $json"
    
    // Get instance name given its id
    def instance_name = ""
    if (instanceId != "-1") {
        instance_name = json.find{it.instance_id == instanceId.toInteger()}?.variables.INSTANCE_NAME
    }

    // Fetch MLOPS_ENDPOINT_ID
    def mlopsDashboardEndpointID = json.variables.find{ it.PSA_TOKEN == mlopsDashboardToken }?.ENDPOINT_ID
    // println "mlops endpoint id: $mlopsDashboardEndpointID"
    
    // Fetch MLOPS_DASHBOARD_URL
    def mlopsEndpointUrl = json.deployments.endpoint.flatten().find{ it.id.contains(mlopsDashboardEndpointID) }?.url
    println "mlopsEndpointUrl: $mlopsEndpointUrl"
    
    // Remove "dashboard" from the URL if it exists
    if (mlopsEndpointUrl) {
        mlopsEndpointUrl = mlopsEndpointUrl.replace("/dashboard/", "")
    }
    
    return mlopsEndpointUrl
}

// Usage example
schedulerapi.connect()
connectionInfo = schedulerapi.getConnectionInfo()
ciLogin = connectionInfo.getLogin()
ciPasswd = connectionInfo.getPassword()
String ciUrl = connectionInfo.getUrl()
def sessionId = schedulerapi.getSession()

user_credentials = [
    sessionId: sessionId,
    ciLogin: ciLogin,
    ciPasswd: ciPasswd,
    ciUrl: ciUrl
]

def url = new URL(ciUrl)
def proactiveUrl = url.getProtocol() + "://" + url.getHost() + ":" + url.getPort()
def mlopsDashboardToken = variables.get("MLOPS_DASHBOARD_INSTANCE")

println "mlopsDashboardToken: $mlopsDashboardToken"

def instanceId = variables.get("MODEL_SERVER_ID")
println "MODEL_SERVER_ID: $instanceId"

results = getMLOpsDashboardEndpointUrl(sessionId, proactiveUrl, mlopsDashboardToken, instanceId)
println "results: $results"

mlopsEndpointUrl = results
println "mlopsEndpointUrl: $mlopsEndpointUrl"
variables.put("MLOPS_DASHBOARD_ENDPOINT_URL", mlopsEndpointUrl)
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.JsonSlurper
import java.net.URL
import java.net.URLEncoder
import java.net.HttpURLConnection

// Print task beginning
def taskName = variables.get("PA_TASK_NAME")
println("BEGIN " + taskName)

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionid = schedulerapi.getSession()
def connectionInfo = schedulerapi.getConnectionInfo()
def ciUrl = connectionInfo.getUrl()
def url = new URL(ciUrl)
def proactiveUrl = url.protocol + "://" + url.host + ":" + url.port
println("proactive_url: " + proactiveUrl)

// Get variables from workflow
def MODEL_NAME = variables.get("MODEL_NAME")
def MODEL_VERSION = variables.get("MODEL_VERSION")
def MODEL_SERVER_ID = variables.get("MODEL_SERVER_ID")
def MODEL_SERVER_TOKEN = variables.get("MODEL_SERVER_TOKEN")

def MLOPS_DASHBOARD_ENDPOINT_URL = variables.get('MLOPS_DASHBOARD_ENDPOINT_URL')
println("MLOPS_DASHBOARD_ENDPOINT_URL: " + MLOPS_DASHBOARD_ENDPOINT_URL)

// Extract model server name from token
def MODEL_SERVER_NAME = MODEL_SERVER_TOKEN.replace("PSA_", "")
println("MODEL_SERVER_NAME: " + MODEL_SERVER_NAME)

// Determine dashboard API URL
def dashboard_url = variables.get('MLOPS_DASHBOARD_ENDPOINT_URL')

// Call the API to update the deployment time
def api_url = "${dashboard_url}/api/update_model_deployment_time"
def params = [
    model_server_name: MODEL_SERVER_NAME,
    model_name: MODEL_NAME,
    model_version: MODEL_VERSION
]

// Build query string
def queryString = params.collect { k, v -> 
    URLEncoder.encode(k, "UTF-8") + "=" + URLEncoder.encode(v.toString(), "UTF-8")
}.join("&")

def fullUrl = "${api_url}?${queryString}"
println("Making API call to: " + fullUrl)

try {
    // Create connection
    def apiConnection = new URL(fullUrl).openConnection() as HttpURLConnection
    apiConnection.requestMethod = "GET"
    
    // Get response
    def responseCode = apiConnection.responseCode
    def responseText = apiConnection.inputStream.text
    println("Response status code: " + responseCode)
    println("Response body: " + responseText)
    
    if (responseCode == 200) {
        println("Successfully updated deployment time")
    } else {
        println("Failed to update deployment time")
    }
} catch (Exception e) {
    println("Error making API call: " + e.toString())
}

println("END " + taskName)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            793
        </positionTop>
        <positionLeft>
            503
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2464px;
            height:3428px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-20px;left:-421.5px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_820" style="top: 25px; left: 426.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Load and return the iris dataset classification."><img src="/automation-dashboard/styles/patterns/img/wf-icons/load_dataset.png" width="20px">&nbsp;<span class="name">Load_Iris_Dataset</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_823" style="top: 281px; left: 426.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Separate data into training and testing sets."><img src="/automation-dashboard/styles/patterns/img/wf-icons/data-processing.png" width="20px">&nbsp;<span class="name">Split_Data</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_826" style="top: 537px; left: 503px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Download a trained model."><img src="/automation-dashboard/styles/patterns/img/wf-icons/download_model.png" width="20px">&nbsp;<span class="name">Model_Packaging</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_829" style="top: 281px; left: 579.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Logistic Regression is a regression model where the Dependent Variable (DV) is categorical."><img src="/automation-dashboard/styles/patterns/img/wf-icons/ml_classification.png" width="20px">&nbsp;<span class="name">Logistic_Regression</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_832" style="top: 409px; left: 503px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Train a classification/clustering/anomaly detection model"><img src="/automation-dashboard/styles/patterns/img/wf-icons/train.png" width="20px">&nbsp;<span class="name">Train_Model</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_835" style="top: 665px; left: 503px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="The simplest task, ran by a bash engine."><img src="/studio/images/LinuxBash.png" width="20px">&nbsp;<span class="name">Deploy_Model</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_838" style="top: 153px; left: 426.5px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Encode the specified columns from the data."><img src="/automation-dashboard/styles/patterns/img/wf-icons/data-processing.png" width="20px">&nbsp;<span class="name">Encode_Data</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_841" style="top: 793px; left: 503px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Update the deployment time in the dashboard for the model that was just deployed."><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Update_Deployment_Time</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><svg style="position:absolute;left:466.5px;top:192.5px" width="21.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 10.5 50 0.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.7747343749999995,66.78168750000002 L4.918836648297567,47.038107153227145 L-2.286251050858403,52.790212093809444 L-9.072638757893003,46.54962382908555 L-2.7747343749999995,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.7747343749999995,66.78168750000002 L4.918836648297567,47.038107153227145 L-2.286251050858403,52.790212093809444 L-9.072638757893003,46.54962382908555 L-2.7747343749999995,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);"></path></svg><svg style="position:absolute;left:542.5px;top:448.5px" width="31" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 10 88 C 20 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M11.97856,66.303232 L15.663632585537552,45.43650633353954 L9.722170709660112,52.486260285096634 L1.846660870634195,47.69289562387942 L11.97856,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M11.97856,66.303232 L15.663632585537552,45.43650633353954 L9.722170709660112,52.486260285096634 L1.846660870634195,47.69289562387942 L11.97856,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);"></path></svg><svg style="position:absolute;left:466.5px;top:320.5px" width="97" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 76 88 C 86 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M69.8573855,63.115491500000005 L59.3333862576084,44.72404131394505 L59.28036566458122,53.94343331215811 L50.161328069766505,55.30106114936383 L69.8573855,63.115491500000005" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M69.8573855,63.115491500000005 L59.3333862576084,44.72404131394505 L59.28036566458122,53.94343331215811 L50.161328069766505,55.30106114936383 L69.8573855,63.115491500000005" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);"></path></svg><svg style="position:absolute;left:542.5px;top:320.5px" width="113" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 102 50 92 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M8.999437499999999,62.2538125 L29.391382914682087,56.49459708428355 L20.458995641137577,54.21151635960033 L21.349086774282416,45.03503894314597 L8.999437499999999,62.2538125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M8.999437499999999,62.2538125 L29.391382914682087,56.49459708428355 L20.458995641137577,54.21151635960033 L21.349086774282416,45.03503894314597 L8.999437499999999,62.2538125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);"></path></svg><svg style="position:absolute;left:544.5px;top:576.5px" width="29" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 18 50 8 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.149632,66.303232 L7.49984351657956,47.438247975227235 L-0.24966605297428535,52.43275510120006 L-6.370633382220376,45.538282028201515 L-2.149632,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.149632,66.303232 L7.49984351657956,47.438247975227235 L-0.24966605297428535,52.43275510120006 L-6.370633382220376,45.538282028201515 L-2.149632,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);"></path></svg><svg style="position:absolute;left:467px;top:64.5px" width="31.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 20.5 50 10.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.9357920000000004,66.303232 L8.31507669701995,47.75816012210056 L0.4090324791346134,52.50099311777328 L-5.487162185206769,45.41333564296595 L-1.9357920000000004,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.9357920000000004,66.303232 L8.31507669701995,47.75816012210056 L0.4090324791346134,52.50099311777328 L-5.487162185206769,45.41333564296595 L-1.9357920000000004,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);"></path></svg><svg style="position:absolute;left:544.5px;top:704.5px" width="48.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 27.5 88 C 37.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style="--darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);" data-darkreader-inline-stroke=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M27.874324375,65.8307285 L26.909461410455734,44.66308717037495 L22.65251929621236,52.841011346838144 L13.919744257293866,49.88489224916259 L27.874324375,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M27.874324375,65.8307285 L26.909461410455734,44.66308717037495 L22.65251929621236,52.841011346838144 L13.919744257293866,49.88489224916259 L27.874324375,65.8307285" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)" data-darkreader-inline-fill="" data-darkreader-inline-stroke="" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: var(--darkreader-text-666666, #a8a095);"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 478px; top: 55px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 467px; top: 311px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 467px; top: 271px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 553px; top: 567px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 553px; top: 527px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 635px; top: 311px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 543px; top: 439px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 543px; top: 399px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 545px; top: 695px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 545px; top: 655px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 467.5px; top: 183px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 467.5px; top: 143px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 572.5px; top: 823px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 572.5px; top: 783px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style="--darkreader-inline-fill: var(--darkreader-text-666666, #a8a095); --darkreader-inline-stroke: none;" data-darkreader-inline-fill="" data-darkreader-inline-stroke=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
