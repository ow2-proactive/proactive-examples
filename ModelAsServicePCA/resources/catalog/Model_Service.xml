<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.12" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd"  name="Model_Service" projectName="Cloud Automation - Deployment" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
  <variables>
    <variable name="DEBUG_ENABLED" value="True" model="PA:Boolean"/>
    <variable name="TRACE_ENABLED" value="True" model="PA:Boolean"/>
    <variable name="DRIFT_ENABLED" value="True" model="PA:Boolean"/>
    <variable name="DRIFT_THRESHOLD" value="1.9" />
    <variable name="HTTPS_ENABLED" value="False" model="PA:Boolean"/>
    <variable name="PROXYFIED" value="False" model="PA:Boolean"/>
    <variable name="DOCKER_IMAGE" value="activeeon/model_as_a_service" />
    <variable name="INSTANCE_NAME" value="model-server" />
    <variable name="NODE_NAME" value="" />
    <variable name="ENDPOINT_ID" value="maas-gui" />
    <variable name="YAML_FILE" value="ml_service-api" />
    <variable name="PYTHON_ENTRYPOINT" value="ml_service" />
  </variables>
  <description>
    <![CDATA[ Deploy a server to deploy and call ML models.
The service can be started using the following variable:
$INSTANCE_NAME (Required): service instance name ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="cloud-automation"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
    <info name="pca.states" value="(VOID,RUNNING)"/>
    <info name="Documentation" value="../doc/MLOS/MLOSUserGuide.html#"/>
    <info name="pca.service.id" value="Model_Service"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Start_Model_Service" onTaskError="cancelJob" fork="true">
      <description>
        <![CDATA[ Pull Elasticsearch image and start a container ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
        <info name="task.documentation" value="../doc/MLOS/MLOSUserGuide.html#"/>
      </genericInformation>
      <inputFiles>
        <files  includes="certificate_mas.pem" accessMode="transferFromGlobalSpace"/>
        <files  includes="key_mas.pem" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <selection>
        <script type="static">
          <code language="groovy">
            <![CDATA[
/**
 * Script which verifies that the current node name matches the given regular expression
 *
 * Arguments:
 * node name (regexp)
 */

import com.google.common.base.Strings;
import java.util.regex.Pattern;

if (args.length != 1) {
    println "Incorrect number of arguments, expected 1, received " + args.length;
    selected = false;
    return;
}

providedNodeName = variables.get("NODE_NAME")

if (Strings.isNullOrEmpty(providedNodeName)) {
    println "Given node name was empty";
    selected = true;
    return;
}

providedNodeName = providedNodeName.trim()

println "Node name " + nodename + " (expected :  " + providedNodeName + ")";

regex = Pattern.compile(providedNodeName, Pattern.CASE_INSENSITIVE);
regexMatcher = regex.matcher(nodename);

selected = regexMatcher.find()
]]>
          </code>
          <arguments>
            <argument value="$NODE_NAME"/>
          </arguments>
        </script>
      </selection>
      <pre>
        <script>
          <code language="cpython">
            <![CDATA[
import ssl
import subprocess
import sys
import json
import cryptography

def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

# Install required Python libraries if they are not already installed
try:
    if sys.version_info[0] < 3:
        from urllib import urlopen
    else:
        from urllib.request import urlopen
except ImportError:
    install('request')
    if sys.version_info[0] < 3:
        from urllib import urlopen
    else:
        from urllib.request import urlopen

# Get user credentials and convert to json
schedulerapi.connect()
sessionId = str(schedulerapi.getSession())
connectionInfo = schedulerapi.getConnectionInfo()
ciLogin = str(connectionInfo.getLogin())
ciPasswd = str(connectionInfo.getPassword())
ciUrl = str(connectionInfo.getUrl())
user_credentials = {
  'sessionId': sessionId,
  'ciLogin': ciLogin,
  'ciPasswd': ciPasswd,
  'ciUrl': ciUrl
}
user_credentials_json = json.dumps(user_credentials)

# Encrypt user data into a binary file
from cryptography.fernet import Fernet
key = Fernet.generate_key()
f = Fernet(key)
message = user_credentials_json.encode()
encrypted = f.encrypt(message)
user_data_file = 'user_data.enc'
with open(user_data_file, 'wb') as f:
    f.write(encrypted)
variables.put("USER_KEY", key.decode())
variables.put("USER_DATA_FILE", user_data_file)

# Get workflows variables
PA_CATALOG_REST_URL = variables.get("PA_CATALOG_REST_URL")
PYTHON_ENTRYPOINT = variables.get("PYTHON_ENTRYPOINT")
YAML_FILE = variables.get("YAML_FILE")

PA_MAAS_RESOURCES_URL = "/buckets/model-as-a-service-resources/resources/"
python_file_url = PA_CATALOG_REST_URL + PA_MAAS_RESOURCES_URL + PYTHON_ENTRYPOINT + "/raw"
yaml_file_url   = PA_CATALOG_REST_URL + PA_MAAS_RESOURCES_URL + YAML_FILE + "/raw"
print("python_file_url: ", python_file_url)
print("yaml_file_url:   ", yaml_file_url)

# Download the two configuration file "ml_service" for the service definition
context = ssl._create_unverified_context()
python_file = urlopen(python_file_url, context=context).read()
python_content = python_file.decode('utf-8')
python_file_name = PYTHON_ENTRYPOINT + ".py"
with open(python_file_name, 'w') as f:
    f.write(python_content)

# Download the configuration file "ml_service-api" for the swagger specification
yaml_file = urlopen(yaml_file_url, context=context).read()
yaml_file_content = yaml_file.decode('utf-8')
yaml_file_name = YAML_FILE + ".yaml"
with open(yaml_file_name, 'w') as f:
    f.write(yaml_file_content)
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo BEGIN "$variables_PA_TASK_NAME"

################################################################################
### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
PORT=9090
DOCKER_IMAGE=$variables_DOCKER_IMAGE
HTTPS_ENABLED=$variables_HTTPS_ENABLED
DEBUG_ENABLED=$variables_DEBUG_ENABLED
TRACE_ENABLED=$variables_TRACE_ENABLED
DRIFT_ENABLED=$variables_DRIFT_ENABLED
DRIFT_THRESHOLD=$variables_DRIFT_THRESHOLD
USER_KEY=$variables_USER_KEY
USER_DATA_FILE="${PWD}/${variables_USER_DATA_FILE}"
PYTHON_ENTRYPOINT_FILE="${PWD}/${variables_PYTHON_ENTRYPOINT}.py"
YAML_FILE="${PWD}/${variables_YAML_FILE}.yaml"
chmod +x $PYTHON_ENTRYPOINT_FILE $YAML_FILE
################################################################################

imagedecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }
DOCKER_IMAGE=$(imagedecode "$DOCKER_IMAGE")

echo "Pulling $DOCKER_IMAGE"
docker pull $DOCKER_IMAGE

GET_RANDOM_PORT(){
    read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
    while :
    do
        RND_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
        ss -lpn | grep -q ":$RND_PORT " || break
    done
    echo $RND_PORT
}

INSTANCE_NAME=$variables_INSTANCE_NAME

if [ -z "$INSTANCE_NAME" ]; then
    echo [ERROR] The INSTANCE_NAME is not provided by the user. Empty value is not allowed.
    exit 1
fi

if [ "$(docker ps -a --format '{{.Names}}' | grep "^$INSTANCE_NAME$")" ]; then
    echo [ERROR] "$INSTANCE_NAME" is already used by another service instance.
    exit 128
else
    ################################################################################
    ### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
    echo "Running $INSTANCE_NAME container"
    F_PORT=$(GET_RANDOM_PORT)
    echo "docker run -dit --name $INSTANCE_NAME -e HTTPS_ENABLED=$HTTPS_ENABLED -e DEBUG_ENABLED=$DEBUG_ENABLED -e TRACE_ENABLED=$TRACE_ENABLED -e USER_KEY=$USER_KEY -e DRIFT_ENABLED=$DRIFT_ENABLED -e DRIFT_THRESHOLD=$DRIFT_THRESHOLD -p $F_PORT:$PORT $DOCKER_IMAGE"
    docker run -dit --name $INSTANCE_NAME -e HTTPS_ENABLED=$HTTPS_ENABLED -e DEBUG_ENABLED=$DEBUG_ENABLED -e TRACE_ENABLED=$TRACE_ENABLED -e USER_KEY=$USER_KEY -e DRIFT_ENABLED=$DRIFT_ENABLED -e DRIFT_THRESHOLD=$DRIFT_THRESHOLD -p $F_PORT:$PORT $DOCKER_IMAGE
    echo "docker exec $INSTANCE_NAME mkdir /model_as_a_service"
    docker exec $INSTANCE_NAME mkdir /model_as_a_service
    #Copy the needed files to launch the service
    echo "Copying the needed files to launch the service"
    docker cp $USER_DATA_FILE $INSTANCE_NAME:/model_as_a_service/user_data.enc
    docker cp $PYTHON_ENTRYPOINT_FILE $INSTANCE_NAME:/model_as_a_service/ml_service.py
    docker cp $YAML_FILE $INSTANCE_NAME:/model_as_a_service/ml_service_swagger.yaml
    docker cp key_mas.pem $INSTANCE_NAME:/model_as_a_service/key_mas.pem
    docker cp certificate_mas.pem $INSTANCE_NAME:/model_as_a_service/certificate_mas.pem
    echo "docker exec $INSTANCE_NAME ls -la /model_as_a_service"
    docker exec $INSTANCE_NAME ls -la /model_as_a_service
    echo "docker exec -dit $INSTANCE_NAME bash -c python /model_as_a_service/ml_service.py >> /proc/1/fd/1"
    docker exec -dit $INSTANCE_NAME bash -c "python /model_as_a_service/ml_service.py >> /proc/1/fd/1"
    ################################################################################
    if [ "$(docker ps -a --format '{{.Names}}' | grep "^$INSTANCE_NAME$")" ]; then
        RUNNING=$(docker inspect --format="{{ .State.Running }}" $INSTANCE_NAME 2> /dev/null)
        if [ "$RUNNING" == "true" ]; then
            echo $INSTANCE_NAME > $INSTANCE_NAME"_status"
        fi
    else
        echo $INSTANCE_STATUS > $INSTANCE_NAME"_status"
    fi
fi

port=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "'$PORT'/tcp") 0).HostPort}}' $INSTANCE_NAME)
echo "$port" > $INSTANCE_NAME"_port"

containerID=$(docker ps -aqf "name=^$INSTANCE_NAME$")
echo "$containerID" > $INSTANCE_NAME"_containerID"

# Endpoint added to the job variables using a groovy post-script
echo END "$variables_PA_TASK_NAME"
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
/*********************************************************************************
* THIS POSTSCRIPT PROPAGATES USEFUL INFORMATION SUCH AS:                         *
* 1) SERVICE ENDPOINT (PROTOCOL://HOSTNAME:PORT)                                 *
* 2) CREDENTIALS (IF THERE ARE ANY) BY ADDING THEM TO 3RD PARTY CREDENTIALS      *
*********************************************************************************/

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.Container
import org.ow2.proactive.pca.service.client.model.Endpoint
import org.ow2.proactive.pca.service.client.model.Deployment
import org.ow2.proactive.pca.service.client.model.Node
import java.net.URLEncoder;

// Acquire variables
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def instanceName = variables.get("INSTANCE_NAME")
def proxyfied = variables.get("PROXYFIED")    
def hostname = variables.get("PA_NODE_HOST")
def endpointID = variables.get("ENDPOINT_ID")+"-"+instanceId
def httpsEnabled = variables.get("HTTPS_ENABLED")
def userKey = variables.get("USER_KEY")
def traceEnabled = variables.get("TRACE_ENABLED")

//def ENDPOINT_PATH = "/api/ui"
//if (traceEnabled.toLowerCase()=="true"){
//    ENDPOINT_PATH = "/api/trace_preview?key=" + userKey
//}
def ENDPOINT_PATH = "/api/trace_preview?key=" + userKey

// Handle service parameters
def port = new File(instanceName+"_port").text.trim()
def containerID = new File(instanceName+"_containerID").text.trim()
def containerUrl = hostname+":"+port
if (httpsEnabled.toLowerCase()=="true"){
    containerUrl = "https://"+containerUrl+ENDPOINT_PATH
    containerUrl = URLDecoder.decode( containerUrl, "UTF-8" );
}
else{
    containerUrl = "http://"+containerUrl+ENDPOINT_PATH
    containerUrl = URLDecoder.decode( containerUrl, "UTF-8" );
}

// Determine Cloud Automation URL
def paSchedulerRestUrl = variables.get('PA_SCHEDULER_REST_URL') 
def pcaUrl = paSchedulerRestUrl.replaceAll("/rest\\z", "/cloud-automation-service")

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()

// Connect to Cloud Automation API
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

// Implement service model

// Container
def Container container = new Container()
container.setId(containerID)
container.setName(instanceName)

// Endpoint
def Endpoint endpoint = new Endpoint();
endpoint.setId(endpointID);
endpoint.setUrl(containerUrl);
// Set the endpoint parameters according to the Proxy settings
if (proxyfied.toLowerCase()=="true"){
    proxyfiedURL = pcaUrl+"/services/"+instanceId+"/endpoints/"+endpointID+"?key="+userKey
    endpoint.setProxyfied(true);
    endpoint.setProxyfiedUrl(proxyfiedURL)
}else{
    endpoint.setProxyfied(false)
}

// Node
def Node node = new Node();
node.setName(variables.get("PA_NODE_NAME"))
node.setHost(variables.get("PA_NODE_HOST"))
node.setNodeSourceName(variables.get("PA_NODE_SOURCE"))
node.setUrl(variables.get("PA_NODE_URL"))

// Deployment
def Deployment deployment = new Deployment()
deployment.setNode(node)
deployment.setContainer(container)
deployment.setEndpoint(endpoint)

// Update service instance model (add Deployment, Groups)
def serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(sessionId, instanceId)
serviceInstanceData.setInstanceStatus("RUNNING")
serviceInstanceData = serviceInstanceData.addDeploymentsItem(deployment)
if (proxyfied.toLowerCase()=="true"){
    serviceInstanceData = serviceInstanceData.addGroupsItem("scheduleradmins")
    serviceInstanceData = serviceInstanceData.addGroupsItem("rmcoreadmins")
}
serviceInstanceData = serviceInstanceRestApi.updateServiceInstanceUsingPUT(sessionId, instanceId, serviceInstanceData)
println(serviceInstanceData)

// Inform other platforms that service is running through Synchronization API
channel = "Service_Instance_" + instanceId
synchronizationapi.createChannelIfAbsent(channel, false)
synchronizationapi.put(channel, "RUNNING", true)
synchronizationapi.put(channel, "INSTANCE_NAME", instanceName)

// Add token to the current node
token = instanceName
nodeUrl = variables.get("PA_NODE_URL")
println("Current nodeUrl: " + nodeUrl)
println("Adding token:    " + token)
rmapi.connect()
rmapi.addNodeToken(nodeUrl, token)

// Log output
println(variables.get("PA_JOB_NAME") + "_INSTANCE_ID: " + instanceId)
println(variables.get("PA_JOB_NAME") + "_ENDPOINT: " + endpoint)

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </post>
      <cleaning>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Clean_Start_Service/raw" language="groovy"></file>
        </script>
      </cleaning>
      <metadata>
        <positionTop>
            186
        </positionTop>
        <positionLeft>
            415
        </positionLeft>
      </metadata>
    </task>
    <task name="Loop_Over_Instance_Status" fork="true">
      <description>
        <![CDATA[ Loop over service instance status and fetch docker container logs.
It will run every minute. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
        <info name="task.documentation" value="../doc/MLOS/MLOSUserGuide.html#"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <depends>
        <task ref="Start_Model_Service"/>
      </depends>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Check_Instance_Status/raw" language="groovy"></file>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="Loop_Over_Instance_Status">
          <script>
            <code language="groovy">
              <![CDATA[
// Check if loop task has ordered to finish the loop
def isFinished = variables.get('IS_FINISHED') as boolean
loop = isFinished ? false : '*/1 * * * *'

// Set a time marker to fetch logs since this marker.
variables.put("LAST_TIME_MARKER",new Date().format("yyyy-MM-dd'T'HH:mm:ssXXX"))
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            314
        </positionTop>
        <positionLeft>
            415
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2080px;
            height:2672px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-181px;left:-410px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable active-task" id="jsPlumb_1_1" style="top: 186px; left: 415px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Pull Elasticsearch image and start a container"><img src="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png" width="20px">&nbsp;<span class="name">Start_Model_Service</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_4" style="top: 314px; left: 415px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Loop over service instance status and fetch docker container logs.
It will run every minute."><img src="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png" width="20px">&nbsp;<span class="name">Loop_Over_Instance_Status</span></a></div><svg style="position:absolute;left:468.5px;top:225.5px" width="38" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 17 88 C 27 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M18.379808,66.303232 L20.2120063325601,45.19297266312391 L14.914797127178112,52.7388042696744 L6.6475786022345025,48.6579835359458 L18.379808,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M18.379808,66.303232 L20.2120063325601,45.19297266312391 L14.914797127178112,52.7388042696744 L6.6475786022345025,48.6579835359458 L18.379808,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:557.0266769263776px;top:263.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_15" style="position: absolute; transform: translate(-50%, -50%); left: 569px; top: 333.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 469px; top: 216px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 486px; top: 344px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 486px; top: 304px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 567px; top: 304px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 567px; top: 344px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
