<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.12" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Deploy_Model_Service" onTaskError="continueJobExecution" priority="normal" projectName="Cloud Automation - Lifecycle" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd">
  <variables>
    <variable name="USER_NAME" value="user"/>
    <variable name="MODEL_URL" value="https://activeeon-public.s3.eu-west-2.amazonaws.com/models/model.pkl"/>
    <variable name="MODEL_METADATA" value="[[5.8216666667,3.0658333333,3.695,1.1766666667],[0.8128364419,0.4385797999,1.7614380107,0.7581194484]]"/>
    <variable model="PA:Boolean" name="DEVIATION_DETECTION" value="True"/>
    <variable model="PA:Float" name="DEVIATION_TRESHOLD" value="1.9"/>
    <variable model="PA:Boolean" name="LOGGING_PREDICTION" value="True"/>
  </variables>
  <description>
    <![CDATA[ Deploy Model_Service instance. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="cloud-automation"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
<info name="pca.states" value="(RUNNING,RUNNING)"/>
<info name="pca.service.id" value="Model_Service"/>
<info name="Documentation" value="../doc/PCA/PCAUserGuide.html#_model_service"/>
<info name="NS" value="$NATIVE_SCHEDULER"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Deploy_Model_Service">
      <description>
        <![CDATA[ Deploy Model_Service instance ]]>
      </description>
      <variables>
        <variable inherited="true" name="MODEL_URL" value=""/>
        <variable inherited="true" name="USER_NAME" value=""/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png"/>
        <info name="NODE_ACCESS_TOKEN" value="$INSTANCE_NAME"/>
      </genericInformation>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
/*********************************************************************************
 * THIS PRESCRIPT INFORMS PLATFORM THAT PCA SERVICE ACTION IS TRIGGERED                   *
 *********************************************************************************/
println("BEGIN " + variables.get("PA_TASK_NAME"))

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

action = args[0]

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()

// Connect to Cloud Automation API
def apiClient = new ApiClient()
def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')
apiClient.setBasePath(pcaUrl)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

// Acquire service instance id and instance name from synchro channel
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def channel = "Service_Instance_" + instanceId
def instanceName = synchronizationapi.get(channel, "INSTANCE_NAME")
def serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(sessionId, instanceId)
    
// endpoint Extraction
def api_endpoint = serviceInstanceData.getDeployments().iterator().next().getEndpoint().getUrl()
//def ENDPOINT_PATH = "/api/ui"
//api_endpoint = api_endpoint - ENDPOINT_PATH
api_endpoint = api_endpoint.split("/api")[0]
variables.put("INSTANCE_NAME", instanceName)
variables.put("API_ENDPOINT", api_endpoint)

// Inform other platforms that service is running through Synchronization API
if(action.equals("RESUME_LAUNCHED")){
    synchronizationapi.put(channel, "RUNNING", true)
    synchronizationapi.put(channel, "RESUMED", true)
    synchronizationapi.put(channel, "DEPLOY_LAUNCHED", false)
}
else{
    synchronizationapi.put(channel, action, true)
}
]]>
          </code>
          <arguments>
            <argument value="DEPLOY_LAUNCHED"/>
          </arguments>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import os, sys, bz2, uuid, json, time
import subprocess


def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])


# Install required Python libraries if they are not already installed
try:
    if sys.version_info[0] < 3:
        from urllib import unquote
    else:
        from urllib.parse import unquote
except ImportError:
    install('request')
    if sys.version_info[0] < 3:
        from urllib import unquote
    else:
        from urllib.parse import unquote

try:
    import pickle
except ImportError:
    install('pickle')
    import pickle

try:
    import wget
except ImportError:
    install('wget')
    import wget

try:
    import requests
except ImportError:
    install('requests')
    import requests


# Define failure procedure that will be executed if something goes wrong
def failure(error_msg):
    current_status = "ERROR"
    variables.put("CURRENT_STATUS", current_status)
    print(error_msg)
    print("CURRENT_STATUS: ", current_status)
    sys.exit(0)


# Set default variables
current_status = "RUNNING"
model_path = os.path.join(os.getcwd(), "model.pkl")

# Edit these variables if they don't correspond to your service endpoints
api_token = "/api/get_token"
api_deploy = "/api/deploy"

# Save Status File
instance_name = variables.get("INSTANCE_NAME")
file_name = instance_name + "_status"
file = open(file_name, "w")
file.write(instance_name)
file.close()

# Get variables
user_name = variables.get("USER_NAME") if variables.get(
    "USER_NAME") else failure("USER_NAME must be defined!")
api_endpoint = variables.get("API_ENDPOINT")
api_token_endpoint = api_endpoint + api_token
api_deploy_endpoint = api_endpoint + api_deploy
print("USER_NAME: ", user_name)
print("API_TOKEN_ENDPOINT:  ", api_token_endpoint)
print("API_DEPLOY_ENDPOINT: ", api_deploy_endpoint)

# Get a token to be able to deploy the model
try:
    data = {'user': user_name}
    req = requests.post(api_token_endpoint, data=data, verify=False)
    token = req.text
    if token.lower() == "Invalid user".lower():
        failure("USER_NAME is invalid")
    print("TOKEN: ", token)
except requests.exceptions.RequestException as e:
    failure(e)

# Download the model that will be deployed
model_url = variables.get("MODEL_URL") if variables.get(
    "MODEL_URL") else failure("MODEL_URL must be defined!")
model_url = unquote(model_url)
try:
    wget.download(model_url, model_path)
except Exception as e:
    failure(e)

# Deploy the downloaded model
model_file = open(model_path, 'rb')
files = {'model_file': model_file}
data = {'api_token': token}

model_metadata_json = variables.get("MODEL_METADATA") if variables.get(
    "MODEL_METADATA") else None
if model_metadata_json is not None:
    data['model_metadata_json'] = unquote(model_metadata_json)

deviation_detection = variables.get("DEVIATION_DETECTION")
if deviation_detection is not None and deviation_detection.lower() == "true":
    data['drift_enabled'] = True
    data['drift_notification'] = True
else:
    data['drift_enabled'] = False
    data['drift_notification'] = False

deviation_treshold = variables.get("DEVIATION_TRESHOLD")
deviation_treshold = float(
    deviation_treshold) if deviation_treshold is not None else 0
data['drift_threshold'] = deviation_treshold

logging_prediction = variables.get("LOGGING_PREDICTION")
if logging_prediction is not None and logging_prediction.lower() == "true":
    data['log_predictions'] = True
else:
    data['log_predictions'] = False

try:
    req = requests.post(
        api_deploy_endpoint, files=files, data=data, verify=False)
    model_deployment_status = req.text
    if model_deployment_status.lower() != "Model deployed".lower():
        current_status = "ERROR"
    print("MODEL DEPLOYMENT STATUS: ", model_deployment_status)
except Exception as e:
    failure(e)
finally:
    model_file.close()

# Propagate the status of the deployment to the Post_Scrpit
variables.put("CURRENT_STATUS", current_status)
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
/*********************************************************************************
* THIS POSTSCRIPT INFORMS PLATFORM THAT PCA SERVICE ACION IS TRIGGERED                   *
*********************************************************************************/

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

def action = variables.get("CURRENT_STATUS")
def pcaUrl = variables.get('PA_CLOUD_AUTOMATION_REST_URL')
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def instanceName = variables.get("INSTANCE_NAME")

def ALREADY_REMOVED_MESSAGE = "Error: No such container: " + instanceName    

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()

// Connect to Cloud Automation API
def serviceInstanceRestApi = new ServiceInstanceRestApi(new ApiClient().setBasePath(pcaUrl))

// Update service instance data : (status, endpoint)
def status = new File(instanceName+"_status").text.trim()
def currentStatus = (!status.equals(ALREADY_REMOVED_MESSAGE) && !status.equals(instanceName)) ? "ERROR" : action

def serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(sessionId, instanceId)
serviceInstanceData.setInstanceStatus(currentStatus)
serviceInstanceRestApi.updateServiceInstanceUsingPUT(sessionId, instanceId, serviceInstanceData)

if(action.equals("FINISHED")){
    // Inform other jobs that the service is finished and deleted.
	def channel = "Service_Instance_" + instanceId
	synchronizationapi.put(channel, "FINISH_DONE", true)
}

// Print warning or error messages and force job to exit with error if there are any.
if (status.equals(ALREADY_REMOVED_MESSAGE)){
    println("[WARNING] docker container: " + instanceName + " is already removed.")
} else if (!status.equals(instanceName)){
    println("[ERROR] Could not remove docker container: " + instanceName + ". Docker output: " + status)
    System.exit(1)
}

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            291.796875
        </positionTop>
        <positionLeft>
            550.17578125
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2683px;
            height:3491px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-286.796875px;left:-545.17578125px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_278" style="top: 291.797px; left: 550.176px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Deploy Model_Service instance"><img src="/automation-dashboard/styles/patterns/img/wf-icons/model_as_service.png" width="20px">&nbsp;<span class="name">Deploy_Model_Service</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 597px; top: 321px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
