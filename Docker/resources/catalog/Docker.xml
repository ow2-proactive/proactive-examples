<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.10"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
    name="Docker" projectName="Cloud Automation - Deployment"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="DOCKER_COMMAND" value="" />
    <variable name="DOCKER_CONTAINER" value="some-container" />
    <variable name="DOCKER_OPTIONS" value="" />
    <variable name="DOCKER_IMAGE" value="" />
    <variable name="DOCKER_PORT" value="" />
  </variables>
  <description>
    <![CDATA[ Deploy a Docker image as a PCA service.
The underlying docker command is the following:

docker run -- name $DOCKER_CONTAINER_NAME -p $DOCKER_PORT $DOCKER_OPTIONS -d $DOCKER_IMAGE $DOCKER_COMMAND

The service can be started using the following variables:
$DOCKER_IMAGE: Docker image name. It can include a tag as well.
$DOCKER_PORT: The main image port. Please note that it will be forwarded to a random port that will be returned by this service.
$DOCKER_CONTAINER: If you desire to stop this container and restart it later.
$DOCKER_OPTIONS (OPTIONAL): options like environment variables, etc.
$DOCKER_COMMAND (OPTIONAL) ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="cloud-automation"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/docker.png"/>
    <info name="pca.states" value="(VOID,RUNNING)"/>
    <info name="Documentation" value="https://doc.activeeon.com/latest/PCA/PCAUserGuide.html"/>
    <info name="pca.service.id" value="Docker"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Start_Docker"  onTaskError="cancelJob" >
      <description>
        <![CDATA[ Pull the given $DOCKER_IMAGE and start a container as a PCA Service.
The underlying docker command is the following:

docker run -- name $DOCKER_CONTAINER_NAME -p $DOCKER_PORT $DOCKER_OPTIONS -d $DOCKER_IMAGE $DOCKER_COMMAND

The service can be started using the following variables:
$DOCKER_IMAGE: Docker image name. It can include a tag as well.
$DOCKER_PORT: The main image port. Please note that it will be forwarded to a random port that will be returned by this service.
$DOCKER_CONTAINER: If you desire to stop this container and restart it later.
$DOCKER_OPTIONS (OPTIONAL): options like environment variables, etc.
$DOCKER_COMMAND (OPTIONAL) ]]>
      </description>
      <variables>
        <variable name="DOCKER_IMAGE" value="" inherited="true" />
        <variable name="DOCKER_PORT" value="" inherited="true" />
        <variable name="DOCKER_OPTIONS" value="" inherited="true" />
        <variable name="DOCKER_COMMAND" value="" inherited="true" />
        <variable name="DOCKER_CONTAINER" value="" inherited="true" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/docker.png"/>
        <info name="Documentation" value="https://doc.activeeon.com/latest/PCA/PCAUserGuide.html"/>
      </genericInformation>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
variables.put("INSTANCE_NAME",variables.get("DOCKER_CONTAINER"))
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo BEGIN "$variables_PA_TASK_NAME"

# Manually find a free random port to preserve it in case if docker (re)start (Pause/Resume)
GET_RANDOM_PORT(){
    read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
    while :
    do
        RND_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
        ss -lpn | grep -q ":$RND_PORT " || break
    done
    echo $RND_PORT
}

F_PORT=$(GET_RANDOM_PORT)

################################################################################
### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
DOCKER_IMAGE="$variables_DOCKER_IMAGE"
PORT="$variables_DOCKER_PORT"
DOCKER_OPTIONS="$variables_DOCKER_OPTIONS"
DOCKER_COMMAND="$variables_DOCKER_COMMAND"

if [ -z "$DOCKER_IMAGE" ]; then
    echo [ERROR] The DOCKER_IMAGE is not provided by the user. Empty value is not allowed.
    exit 1
fi

if [ -z "$PORT" ]; then
    echo [ERROR] The PORT is not provided by the user. Empty value is not allowed.
    exit 1
fi

echo DOCKER_IMAGE = "$DOCKER_IMAGE"
echo DOCKER_PORT = "$PORT"
echo DOCKER_OPTIONS = "$DOCKER_OPTIONS"
echo DOCKER_COMMAND = "$DOCKER_COMMAND"
################################################################################

echo "Pulling "$variables_PA_JOB_NAME" image"
docker pull $DOCKER_IMAGE

INSTANCE_NAME=$variables_INSTANCE_NAME

if [ -z "$INSTANCE_NAME" ]; then
    echo ERROR: The INSTANCE_NAME is not provided by the user. Empty value is not allowed.
    exit 1
fi

if [ "$(docker ps -a | grep $INSTANCE_NAME)" ]; then
    RUNNING=$(docker inspect --format="{{ .State.Running }}" $INSTANCE_NAME 2> /dev/null)
    STOPPED=$(docker inspect --format="{{ .State.Status }}" $INSTANCE_NAME 2> /dev/null)
    if [ "$RUNNING" == "true" ]; then
        echo "$INSTANCE_NAME" container is running
        echo $INSTANCE_NAME > $INSTANCE_NAME"_status"
	elif [ "$STOPPED" == "exited" ]; then
		echo Starting docker container: "$INSTANCE_NAME"
        INSTANCE_STATUS=$(docker start $INSTANCE_NAME 2>&1)
        echo $INSTANCE_STATUS > $INSTANCE_NAME"_status"
    fi
else
    ################################################################################
    ### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
    echo "Running docker container: $INSTANCE_NAME"
    echo "docker run --name $INSTANCE_NAME -p $F_PORT:$PORT "$DOCKER_OPTIONS" -d $DOCKER_IMAGE "$DOCKER_COMMAND""
    if [ -z "$DOCKER_OPTIONS" -a -z "$DOCKER_COMMAND" ]; then
        INSTANCE_STATUS=$( eval "docker run --name $INSTANCE_NAME -p $F_PORT:$PORT -d $DOCKER_IMAGE" 2>&1)
    elif [ ! -z "$DOCKER_OPTIONS" -a -z "$DOCKER_COMMAND" ]; then
        INSTANCE_STATUS=$(eval "docker run --name $INSTANCE_NAME -p $F_PORT:$PORT "$DOCKER_OPTIONS" -d $DOCKER_IMAGE" 2>&1)
    elif [ -z "$DOCKER_OPTIONS" -a ! -z "$DOCKER_COMMAND" ]; then
        INSTANCE_STATUS=$(eval "docker run --name $INSTANCE_NAME -p $F_PORT:$PORT -d $DOCKER_IMAGE "$DOCKER_COMMAND""  2>&1)
    else
        INSTANCE_STATUS=$(eval "docker run --name $INSTANCE_NAME -p $F_PORT:$PORT "$DOCKER_OPTIONS" -d $DOCKER_IMAGE "$DOCKER_COMMAND"" 2>&1)
    fi
    if [ "$(docker ps -a | grep $INSTANCE_NAME)" ]; then
        RUNNING=$(docker inspect --format="{{ .State.Running }}" $INSTANCE_NAME 2> /dev/null)
        if [ "$RUNNING" == "true" ]; then
            echo $INSTANCE_NAME > $INSTANCE_NAME"_status"
        fi
    else
        echo $INSTANCE_STATUS > $INSTANCE_NAME"_status"
    fi
    ################################################################################
fi
port=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "'$PORT'/tcp") 0).HostPort}}' $INSTANCE_NAME)
echo $port > $INSTANCE_NAME"_port"

# Endpoint added to the job variables using a groovy post-script
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
/*********************************************************************************
* THIS POSTSCRIPT PROPAGATES USEFUL INFORMATION SUCH AS:                         *
* 1) SERVICE ENDPOINT (PROTOCOL://HOSTNAME:PORT)                                 *
* 2) CREDENTIALS (IF THERE ARE ANY) BY ADDING THEM TO 3RD PARTY CREDENTIALS      *
*********************************************************************************/

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

def paSchedulerRestUrl = variables.get('PA_SCHEDULER_REST_URL')
def pcaUrl = paSchedulerRestUrl.replaceAll("/rest\\z", "/cloud-automation-service")
// Acquire service instance id and instance name
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def instanceName = variables.get("INSTANCE_NAME")

def hostname = new URL(paSchedulerRestUrl).getHost()
def port = new File(instanceName+"_port").text.trim()
def endpoint = 'http://'+ hostname + ":" + port

/*********************************************************************************
* THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE       *
/********************************************************************************/

/********************************************************************************/

// Connect to Cloud Automation API
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

// Update service instance data : (status, endpoint)
def serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(instanceId)
def status = new File(instanceName+"_status").text.trim()
def currentStatus = (!status.equals(instanceName)) ? "ERROR" : "RUNNING"
serviceInstanceData.setInstanceStatus(currentStatus)
serviceInstanceData = serviceInstanceData.putInstanceEndpointsItem(instanceName, endpoint)
serviceInstanceData = serviceInstanceRestApi.updateServiceInstanceUsingPUT(instanceId, serviceInstanceData)

// Print warning or error messages and force job to exit with error if there are any.
if (!status.equals(instanceName)){
    println("[ERROR] Could not start docker container: " + instanceName + ". Docker output: " + status)
    System.exit(1)
}

// Inform other platforms that service is running through Synchronization API
def channel = "Service_Instance_" + instanceId
synchronizationapi.createChannelIfAbsent(channel, false)
synchronizationapi.put(channel, "RUNNING", true)
synchronizationapi.put(channel, "INSTANCE_NAME", instanceName)

// LOG OUTPUT
println(variables.get("PA_JOB_NAME") + "_INSTANCE_ID: " + instanceId)
println(variables.get("PA_JOB_NAME") + "_ENDPOINT: " + endpoint)

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </post>
    </task>
    <task name="Loop_Over_Instance_Status">
      <description>
        <![CDATA[ Loop over service instance status and fetch docker container logs ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/docker.png"/>
        <info name="Documentation" value="https://doc.activeeon.com/latest/PCA/PCAUserGuide.html"/>
      </genericInformation>
      <depends>
        <task ref="Start_Docker"/>
      </depends>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

def paSchedulerRestUrl = variables.get('PA_SCHEDULER_REST_URL')
def pcaUrl = paSchedulerRestUrl.replaceAll("/rest\\z", "/cloud-automation-service")
def instanceId = variables.get("PCA_INSTANCE_ID") as long
def instanceName = variables.get("INSTANCE_NAME")
def channel = "Service_Instance_" + instanceId

// Connect to Cloud Automation API
def serviceInstanceRestApi = new ServiceInstanceRestApi(new ApiClient().setBasePath(pcaUrl))

// If service instance is FINISHED or PAUSED then stop this loop and job and delete the sync channel
def currentStatus = serviceInstanceRestApi.getServiceInstanceUsingGET(instanceId).getInstanceStatus()
if (currentStatus.equals("FINISHED") || currentStatus.equals("PAUSED") || synchronizationapi.get(channel, "RESUMED")){
    variables.put("IS_FINISHED",true)
    if (currentStatus.equals("FINISHED")){
        synchronizationapi.deleteChannel(channel)
    }
} else {
    // Check if container has been stopped abnormally
    def isContainerRunning = ["docker", "inspect", "--format", "{{ .State.Running }}", "${instanceName}"].execute().getText().trim().toBoolean()
    if ((!isContainerRunning) && (!synchronizationapi.get(channel, "FINISH_LAUNCHED")) && (!synchronizationapi.get(channel, "PAUSE_LAUNCHED"))){
        currentStatus = 'ERROR'
        println("[ERROR] An internal error occured in docker container: " + instanceName)
        // Update docker container is not running
        def serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(instanceId)
        serviceInstanceData.setInstanceStatus(currentStatus)
        serviceInstanceRestApi.updateServiceInstanceUsingPUT(instanceId, serviceInstanceData)
        // Tell the CRON loop to stop
        variables.put("IS_FINISHED",true)
        // Exit with error
        System.exit(1)
    } else {
        // Fetch all logs or only new logs since last fetch time mark
        def lastTime=variables.get('LAST_TIME_MARKER')
        def fetchLogsCmd = lastTime ? ["docker", "logs", "--since", lastTime, instanceName] : ["docker", "logs", instanceName]
        fetchLogsCmd.execute().waitForProcessOutput(System.out, System.err)
    }
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="Loop_Over_Instance_Status">
          <script>
            <code language="groovy">
              <![CDATA[
// Check if loop task has ordered to finish the loop
def isFinished = variables.get('IS_FINISHED') as boolean
loop = isFinished ? false : '*/1 * * * *'

// Set a time marker to fetch logs since this marker.
variables.put("LAST_TIME_MARKER",new Date().format("yyyy-MM-dd'T'HH:mm:ssXXX"))
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
    </task>
  </taskFlow>
</job>