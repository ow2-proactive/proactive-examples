<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.8"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
    name="real_time_apache_intrusion_detection" projectName="Log Analysis"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="WORKSPACE" value="/root" />
    <variable name="PROJECT" value="log_analyzer" />
    <variable name="DATASPACE" value="data" />
    <variable name="STREAM_SIZE" value="1000" />
    <variable name="CONTAINER_NAME" value="ml" />
    <variable name="DOCKER_IMAGE" value="activeeon/dlm3" />
  </variables>
  <description>
    <![CDATA[ Performs real-time intrusion detection on Apache log files. ]]>
  </description>
    <genericInformation>
    <info name="bucketName" value="machine-learning-workflows-tmp"/>
    <info name="pca.action.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/log_analysis.png"/>
    <info name="Documentation" value="https://www.activeeon.com/resources/activeeon-machine-learning-log-analysis.pdf"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="log_streaming">
      <description>
        <![CDATA[ Will run every minutes ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/log_analysis.png"/>
      </genericInformation>
      <depends>
        <task ref="setup"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
# ./run_log_producer_stream.sh
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd '$variables_WORKSPACE'/'$variables_PROJECT/bash' && ./run_log_producer_stream.sh'

docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE/$variables_PROJECT/$variables_DATASPACE/log_space
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE/$variables_PROJECT/$variables_DATASPACE/shared_space
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE/$variables_PROJECT/$variables_DATASPACE/preview_space
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="log_streaming">
          <script>
            <code language="javascript">
              <![CDATA[
// You can use a Cron Expression here
// examples https://www.freeformatter.com/cron-expression-generator-quartz.html
              loop = '* * * * *';
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
    </task>
    <task name="setup"
    
    preciousLogs="true" >
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/log_analysis.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo "Start real time anomaly detection"

docker pull $variables_DOCKER_IMAGE
export RUN_DOCKER="docker run -dit -h dlm -w /root --name=$variables_CONTAINER_NAME $variables_DOCKER_IMAGE"
echo "Checking if docker container is running"
if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
then 
  echo "OK. The $variables_CONTAINER_NAME container is running!"
else 
  echo "$variables_CONTAINER_NAME container is not running."
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "false" ]; 
  then 
    echo "Starting it..."
    docker start $variables_CONTAINER_NAME
  else 
    echo "Running it..."
    echo $RUN_DOCKER
    $($RUN_DOCKER)
    sleep 5
  fi
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
  then 
    echo "OK. The $variables_CONTAINER_NAME container is running now!"
  else 
    echo "$variables_CONTAINER_NAME container is not running."
    echo "An error occurred while running the container."
    exit
  fi
fi

# export variables_WORKSPACE=/root && export variables_PROJECT=log_analyzer && export variables_DATASPACE=data && export variables_CONTAINER_NAME=ml && export variables_STREAM_SIZE=1000

# docker exec ml /bin/bash -c 'rm -r -f log_analyzer'
# docker exec ml /bin/bash -c 'wget https://s3.eu-central-1.amazonaws.com/activeeonpublic/log_analyzer/log_analyzer.zip'
# docker exec ml /bin/bash -c 'ls'
# docker exec ml /bin/bash -c 'unzip log_analyzer.zip'
# docker exec ml /bin/bash -c 'rm -r -f log_analyzer.zip'
# docker exec ml /bin/bash -c 'cd /root/log_analyzer && ls'

docker exec $variables_CONTAINER_NAME /bin/bash -c 'rm -r -f '$variables_PROJECT
docker exec $variables_CONTAINER_NAME /bin/bash -c 'wget https://s3.eu-central-1.amazonaws.com/activeeonpublic/log_analyzer/log_analyzer.zip'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'unzip -uo log_analyzer.zip'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'rm -r -f log_analyzer.zip'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd '$variables_WORKSPACE'/'$variables_PROJECT' && ls'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'split -l '$variables_STREAM_SIZE' '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/log.csv'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'mv x* '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/log_space'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/log_space'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'rm -f -r '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/preview_space/output.txt'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'rm -f -r '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/preview_space/notification.txt'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/preview_space'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'touch '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/preview_space/notification.txt'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'rm -f -r '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/shared_space/empty'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/shared_space'

#split -l $variables_STREAM_SIZE log.csv
#mv x* log_space/
#cd preview_space
#pwd
#rm -f -r output.txt
#rm -f -r notification.txt
#touch notification.txt
#cd ../shared_space
#rm -f -r empty

# split -l 1000 ../data/log.csv && mv x* ../data/log_space && rm -f -r ../data/preview_space/output.txt && rm -f -r ../data/preview_space/notification.txt && touch ../data/preview_space/notification.txt && rm -f -r ../data/shared_space/empty
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="anomaly_detection">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/log_analysis.png"/>
      </genericInformation>
      <depends>
        <task ref="setup"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
# ./run_log_consumer_stream.sh
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd '$variables_WORKSPACE'/'$variables_PROJECT/bash' && ./run_log_consumer_stream.sh'

docker cp $variables_CONTAINER_NAME:$variables_WORKSPACE'/'$variables_PROJECT/data/preview_space/notification.txt /tmp
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="output_preview">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/log_analysis.png"/>
      </genericInformation>
      <depends>
        <task ref="anomaly_detection"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def file_name = "notification.txt"

file_path = "/tmp/" + file_name

println "file_path: " + file_path  

def file = new File(file_path)
println "file exists? " + file.exists()

if(file.exists())
{
  result = file.text
  resultMetadata.put("file.name", "notification.txt")
  resultMetadata.put("content.type", "text/plain")
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
  </taskFlow>
</job>