<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.8"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
    name="supervised_learning" projectName="Log Analysis"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="WORKSPACE" value="/root" />
    <variable name="PROJECT" value="log_analyzer" />
    <variable name="DATASPACE" value="data" />
    <variable name="ALGORITHM" value="decision_tree" />
    <variable name="CONTAINER_NAME" value="ml" />
    <variable name="DOCKER_IMAGE" value="activeeon/dlm3" />
  </variables>
  <description>
    <![CDATA[ Trains a supervised anomaly detection on HDFS log files. ]]>
  </description>
    <genericInformation>
    <info name="bucketName" value="machine-learning-workflows-tmp"/>
    <info name="pca.action.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/log_analysis.png"/>
    <info name="Documentation" value="https://www.activeeon.com/resources/activeeon-machine-learning-log-analysis.pdf"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Setup">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/log_analysis.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo "Start Unsupervised anomaly detection"

docker pull $variables_DOCKER_IMAGE
export RUN_DOCKER="docker run -dit -h dlm -w /root --name=$variables_CONTAINER_NAME $variables_DOCKER_IMAGE"
echo "Checking if docker container is running"
if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
then 
  echo "OK. The $variables_CONTAINER_NAME container is running!"
else 
  echo "$variables_CONTAINER_NAME container is not running."
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "false" ]; 
  then 
    echo "Starting it..."
    docker start $variables_CONTAINER_NAME
  else 
    echo "Running it..."
    echo $RUN_DOCKER
    $($RUN_DOCKER)
    sleep 5
  fi
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
  then 
    echo "OK. The $variables_CONTAINER_NAME container is running now!"
  else 
    echo "$variables_CONTAINER_NAME container is not running."
    echo "An error occurred while running the container."
    exit
  fi
fi

docker exec $variables_CONTAINER_NAME /bin/bash -c 'rm -r -f '$variables_PROJECT
docker exec $variables_CONTAINER_NAME /bin/bash -c 'if [ ! -d "'$variables_PROJECT'" ]; then git clone https://bitbucket.org/activeeon/log_analysis_public.git '$variables_PROJECT' ; else echo '$variables_PROJECT' already exists ; fi'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_PROJECT
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd '$variables_PROJECT' && git pull'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd '$variables_PROJECT' && ./download_data.sh'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_PROJECT'/data'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd '$variables_PROJECT' && ./download_model.sh'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_PROJECT'/model'
docker cp $variables_CONTAINER_NAME:$variables_WORKSPACE'/'$variables_PROJECT/data/HDFS_2k.log /tmp

docker exec $variables_CONTAINER_NAME /bin/bash -c 'pip install pandas graphviz'

echo "Download_Data task finished"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Log_Parse">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/log_analysis.png"/>
      </genericInformation>
      <depends>
        <task ref="Setup"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo "Parsing log file"
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd '$variables_WORKSPACE'/'$variables_PROJECT/python' && python log_parser.py --log=../data/HDFS_2k.log --out=../data/log_structured_HDFS_2K.csv'
docker cp $variables_CONTAINER_NAME:$variables_WORKSPACE'/'$variables_PROJECT/data/log_structured_HDFS_2K.csv.html /tmp
echo "Log_Parse task finished"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Feature_Extraction">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/log_analysis.png"/>
      </genericInformation>
      <depends>
        <task ref="Log_Parse"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo "Performing log feature extraction"
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd '$variables_WORKSPACE'/'$variables_PROJECT/python' && python dynamic_feature_extractor.py --structured_logs=../data/log_structured_HDFS_2K.csv --features=../data/features_TFV_HDFS_2K.txt --idx=../data/idx_HDFS_2K.txt'
docker cp $variables_CONTAINER_NAME:$variables_WORKSPACE'/'$variables_PROJECT/data/features_TFV_HDFS_2K.txt /tmp
echo "Feature_Extraction task finished"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Supervised_Training">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/log_analysis.png"/>
      </genericInformation>
      <depends>
        <task ref="Feature_Extraction"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo "Supervised train"
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd '$variables_WORKSPACE'/'$variables_PROJECT/python' && python supervised_learning.py --model '$variables_ALGORITHM' --features ../data/X_train.txt --label ../data/Y_train.txt'
echo "Supervised_Train task finished"
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Preview_Raw_Data">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/log_analysis.png"/>
      </genericInformation>
      <depends>
        <task ref="Setup"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
file_path = "/tmp/HDFS_2k.log"
println "file_path: " + file_path  

def file = new File(file_path)
println "file exists? " + file.exists()

if(file.exists())
{
  result = file.text
  resultMetadata.put("content.type", "text/plain")
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Preview_Structured_Data">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/log_analysis.png"/>
      </genericInformation>
      <depends>
        <task ref="Log_Parse"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
file_path = "/tmp/log_structured_HDFS_2K.csv.html"
println "file_path: " + file_path  

def file = new File(file_path)
println "file exists? " + file.exists()

if(file.exists())
{
  result = file.text
  resultMetadata.put("file.name", "log_structured.html")
  resultMetadata.put("content.type", "text/html")
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Preview_Features">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="https://s3.eu-west-2.amazonaws.com/activeeon-public/icons/log_analysis.png"/>
      </genericInformation>
      <depends>
        <task ref="Feature_Extraction"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
file_path = "/tmp/features_TFV_HDFS_2K.txt"
println "file_path: " + file_path  

def file = new File(file_path)
println "file exists? " + file.exists()

if(file.exists())
{
  result = file.text
  resultMetadata.put("file.name", "log_features.txt")
  resultMetadata.put("content.type", "text/plain")
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
  </taskFlow>
</job>