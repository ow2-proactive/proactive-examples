<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.10"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
    name="PostgreSQL" projectName="Cloud Automation - Deployment"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="INSTANCE_NAME" value="postgres-server" />
    <variable name="USER" value="" />
    <variable name="PASSWORD" value="" />
    <variable name="DATABASE" value="" />
  </variables>
  <description>
    <![CDATA[ Deploy a PostgreSQL Database server.
The service can be started using the following variables:
$INSTANCE_NAME (Required): service instance name
$USER: (Optional) change it if you want a different root username . Default "postgres" is used if left empty.
$PASSWORD (Required) : Password for the root user.
$DATABASE (Optional) : Name of a database to be created on start. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="cloud-automation"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/postgresql.png"/>
    <info name="pca.states" value="(VOID,RUNNING)"/>
    <info name="Documentation" value="https://doc.activeeon.com/latest/PCA/PCAUserGuide.html"/>
    <info name="pca.service.id" value="PostgreSQL"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Loop_Over_Instance_Status">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/postgresql.png"/>
        <info name="Documentation" value="https://doc.activeeon.com/latest/PCA/PCAUserGuide.html"/>
      </genericInformation>
      <depends>
        <task ref="Start_PostgreSQL"/>
      </depends>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

println("BEGIN " + variables.get("PA_TASK_NAME"))

def paSchedulerRestUrl = variables.get('PA_SCHEDULER_REST_URL')
def pcaUrl = paSchedulerRestUrl.replaceAll("/rest\\z", "/cloud-automation-service")
def instanceId = variables.get("PCA_INSTANCE_ID") as int
def instanceName = variables.get("INSTANCE_NAME")

println("INSTANCE_NAME="+instanceName)

// Connect to Cloud Automation API
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

// Inform other platforms that other actions are canceled through Synchronization API
def channel = "Service_Instance_" + instanceId
synchronizationapi.put(channel, "DELETE_LAUNCHED", false)
synchronizationapi.put(channel, "DELETE_INSTANCE", false)

// Loop over service instance status
def currentStatus = "RUNNING"
def exitWithError = false
while(currentStatus=="RUNNING") {
    sleep(10000);
    // Check docker container status
    def ByteArrayOutputStream sout = new ByteArrayOutputStream();
    def ByteArrayOutputStream serr = new ByteArrayOutputStream();
    def proc = ["docker", "inspect", "--format", "{{ .State.Running }}", "${instanceName}"].execute().waitForProcessOutput(sout, serr)
    def isContainerRunning = new String(sout.toByteArray()).trim().toBoolean()

    if ((!isContainerRunning) && (!synchronizationapi.get(channel, "DELETE_LAUNCHED")) && (!synchronizationapi.get(channel, "STOP_LAUNCHED"))){
        currentStatus = 'ERROR'
        exitWithError = true
        println("[ERROR] An internal error occured in docker container: " + instanceName)
        // Update docker container is not running
        def serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(instanceId)
        serviceInstanceData.setInstanceStatus(currentStatus)
        serviceInstanceData = serviceInstanceRestApi.updateServiceInstanceUsingPUT(instanceId, serviceInstanceData)
        break
    }
    // Check service instance status
    currentStatus = serviceInstanceRestApi.getServiceInstanceUsingGET(instanceId).getInstanceStatus()
}

// Allow the Delete workflow to be fulfilled
synchronizationapi.put(channel, "DELETE_INSTANCE", true)
if (exitWithError){
    System.exit(1)
}
println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Start_PostgreSQL"
    
    
    onTaskError="cancelJob" >
      <description>
        <![CDATA[ Pull PostgreSQL image and start a container ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/postgresql.png"/>
        <info name="Documentation" value="https://doc.activeeon.com/latest/PCA/PCAUserGuide.html"/>
      </genericInformation>
      <inputFiles>
        <files  includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[

]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo BEGIN "$variables_PA_TASK_NAME"

################################################################################
### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
DOCKER_IMAGE=activeeon/postgres
PORT=5432
USER="$variables_USER"

if [ -z "$USER" ]; then
  USER="postgres"
  echo "[WARNING] USER not provided by the user. Using the default username: postgres"
fi

PASSWORD="$variables_PASSWORD"

if [ -z "$PASSWORD" ]; then
	echo [ERROR] PASSWORD cannot be empty.
    exit 1
fi

DATABASE="$variables_DATABASE"
# Check whether USER and PASSWORD have been well entered
if [ \( ! -z "$USER" -a -z "$PASSWORD" \) -o \( -z "$USER" -a ! -z "$PASSWORD" \) ]; then
    echo [ERROR] "$variables_PA_JOB_NAME"_USER and "$variables_PA_JOB_NAME"_PASSWORD are used in junction. They should be either both entered or both blank.
    exit 1
fi
################################################################################

echo "Pulling "$variables_PA_JOB_NAME" image"
docker pull $DOCKER_IMAGE

INSTANCE_NAME=$variables_INSTANCE_NAME

if [ -z "$INSTANCE_NAME" ]; then
    echo [ERROR] The INSTANCE_NAME is not provided by the user. Empty value is not allowed.
    exit 1
fi

if [ "$(docker ps -a | grep $INSTANCE_NAME)" ]; then
    RUNNING=$(docker inspect --format="{{ .State.Running }}" $INSTANCE_NAME 2> /dev/null)
    STOPPED=$(docker inspect --format="{{ .State.Status }}" $INSTANCE_NAME 2> /dev/null)
    if [ "$RUNNING" == "true" ]; then
        echo "$INSTANCE_NAME" container is running
        echo $INSTANCE_NAME > $INSTANCE_NAME"_status"
	elif [ "$STOPPED" == "exited" ]; then
		echo Starting docker container: "$INSTANCE_NAME"
        INSTANCE_STATUS=$(docker start $INSTANCE_NAME 2>&1)
        echo $INSTANCE_STATUS > $INSTANCE_NAME"_status"
    fi
else
    ################################################################################
    ### THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE ###
    echo "Running docker container: $INSTANCE_NAME"
    if [ "$DATABASE" == null ] && [ "$USER" == null ]; then
        docker run --name "$INSTANCE_NAME" -p "$PORT" -e POSTGRES_PASSWORD="$PASSWORD" -d "$DOCKER_IMAGE" -c 'listen_addresses=0.0.0.0'
    elif [ "$DATABASE" == null ] && [ "$USER" != null ]; then
        docker run --name "$INSTANCE_NAME" -p "$PORT" -e POSTGRES_USER="$USER" -e POSTGRES_PASSWORD="$PASSWORD" -d "$DOCKER_IMAGE" -c 'listen_addresses=0.0.0.0'
    elif [ "$DATABASE" != null ] && [ "$USER" == null ]; then
        docker run --name "$INSTANCE_NAME" -p "$PORT" -e POSTGRES_DATABASE="$DATABASE" -d "$DOCKER_IMAGE" -c 'listen_addresses=0.0.0.0'
    else 
        docker run --name "$INSTANCE_NAME" -p "$PORT" -e POSTGRES_USER="$USER" -e POSTGRES_PASSWORD="$PASSWORD" -e POSTGRES_DB="$DATABASE" -d "$DOCKER_IMAGE" -c 'listen_addresses=0.0.0.0'
    fi
    if [ "$(docker ps -a | grep $INSTANCE_NAME)" ]; then
        RUNNING=$(docker inspect --format="{{ .State.Running }}" $INSTANCE_NAME 2> /dev/null)
        if [ "$RUNNING" == "true" ]; then
            echo $INSTANCE_NAME > $INSTANCE_NAME"_status"
        fi
    else
        echo $INSTANCE_STATUS > $INSTANCE_NAME"_status"
    fi
    ################################################################################
fi
port=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "'$PORT'/tcp") 0).HostPort}}' $INSTANCE_NAME)
echo $port > $INSTANCE_NAME"_port"

# Endpoint added to the job variables using a groovy post-script
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
/*********************************************************************************
* THIS POSTSCRIPT PROPAGATES USEFUL INFORMATION SUCH AS:                         *
* 1) SERVICE ENDPOINT (PROTOCOL://HOSTNAME:PORT)                                 *
* 2) CREDENTIALS (IF THERE ARE ANY) BY ADDING THEM TO 3RD PARTY CREDENTIALS      *
*********************************************************************************/

import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

def paSchedulerRestUrl = variables.get('PA_SCHEDULER_REST_URL')
def pcaUrl = paSchedulerRestUrl.replaceAll("/rest\\z", "/cloud-automation-service")
// Acquire service instance id and instance name
def instanceId = variables.get("PCA_INSTANCE_ID") as int
def instanceName = variables.get("INSTANCE_NAME")

def hostname = new URL(paSchedulerRestUrl).getHost()
def port = new File(instanceName+"_port").text.trim()
def endpoint = 'http://'+ hostname + ":" + port

/*********************************************************************************
* THIS PART IS IMAGE SPECIFIC. IF YOU NEED TO MODIFY SOMETHING, DO IT HERE       *
/********************************************************************************/
def username = variables.get("USER")
def password = variables.get("PASSWORD")

// Add any credentials to 3rd party credentials if they apply:
if (!username.isEmpty()){
    def PASSWORD_KEY = "postgres://" + username + "@" + hostname+ ":" + port
    schedulerapi.connect()
    schedulerapi.putThirdPartyCredential(PASSWORD_KEY, password)
}
/********************************************************************************/

// Connect to Cloud Automation API
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

// Inform other platforms that service is running through Synchronization API
def channel = "Service_Instance_" + instanceId
synchronizationapi.createChannelIfAbsent(channel, false)
synchronizationapi.put(channel, "RUNNING", true)
synchronizationapi.put(channel, "INSTANCE_NAME", instanceName)

// Update service instance data : (status, endpoint)
def serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(instanceId)
def status = new File(instanceName+"_status").text.trim()
def currentStatus = (!status.equals(instanceName)) ? "ERROR" : "RUNNING"
serviceInstanceData.setInstanceStatus(currentStatus)
serviceInstanceData = serviceInstanceData.putInstanceEndpointsItem(instanceName, endpoint)
serviceInstanceData = serviceInstanceRestApi.updateServiceInstanceUsingPUT(instanceId, serviceInstanceData)

// Print warning or error messages and force job to exit with error if there are any.
if (!status.equals(instanceName)){
    println("[ERROR] Could not start docker container: " + instanceName + ". Docker output: " + status)
    System.exit(1)
}

// LOG OUTPUT
println(variables.get("PA_JOB_NAME") + "_INSTANCE_ID: " + instanceId)
println(variables.get("PA_JOB_NAME") + "_ENDPOINT: " + endpoint)

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </post>
    </task>
  </taskFlow>
</job>