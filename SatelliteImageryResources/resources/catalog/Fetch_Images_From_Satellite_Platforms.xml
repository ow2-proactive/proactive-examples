<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.12" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Fetch_Images_From_Satellite_Platforms" onTaskError="continueJobExecution" priority="normal" projectName="Satellite Imagery Datasets" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd">
  <variables>
    <variable model="PA:LIST(Peps, Copernicus, All)" name="HOST_SITES" value="Peps"/>
    <variable name="OUTPUT_PATH" value="/tmp/"/>
  </variables>
  <description>
    <![CDATA[ Searching satellite images using the Peps and Copernicus platforms. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="basic-examples"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/sentinel_image.jpg"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Condition">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
print('Checking platform...')
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <if continuation="Continuation" else="Else" target="Fetch_Satellite_Images_From_PEPS">
          <script>
            <code language="cpython">
              <![CDATA[
HOST_SITES  = variables.get("HOST_SITES") 		 # Option host sites

if HOST_SITES.lower() == "peps" or HOST_SITES.lower() == "all":
    branch = "if"
else:
    branch = "else"
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            166.5
        </positionTop>
        <positionLeft>
            219
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Fetch_Satellite_Images_From_PEPS">
      <description>
        <![CDATA[ Load and return a peps dataset.
Warning:
See bellow some prerequisites to have this workflow working:
1: Two third party credentials to connect to PEPS (USER_NAME_PEPS and USER_PASS_PEPS)
2: Support the versions of Python > 3.2
3: Use a PYTHON_COMMAND  in the Generic Information (GI) field to specify the full path of your python3.

Note that the workflow does not work on try, trydev and tryqa servers, only in local.

Parameter description
##################################
LOCATION: town name. Type: String
COLLECTION: collection within theia collections. Options=[S1, S2, S2ST, S3]. Type: String
PRODUCT_TYPE: product type. Options=GRD, SLC, OCN (for S1) or S2MSI1C S2MSI2A S2MSI2Ap (for S2). Type: String
SENSOR_MODE: sensor mode. Options=EW, IW , SM, WV (for S1) or INS-NOBS, INS-RAW (for S3). Type: String
START_DATE: start date. Type: String
END_DATE: end date. Type: String
TILE:  sentinel tile number. Type: String
LATITUDE: latitude in decimal degrees. Type: Float
LONGITUDE: longitude in decimal degrees. Type: Float
OUTPUT_PATH: address path to save downloaded images. ]]>
      </description>
      <variables>
        <variable inherited="false" name="LOCATION" value="Indonesia"/>
        <variable inherited="false" model="PA:LIST(S1, S2, S2ST, S3)" name="COLLECTION" value="S2"/>
        <variable inherited="false" model="PA:LIST(GRD, SLC, OCN, S2MSI1C)" name="PRODUCT_TYPE" value="S2MSI1C"/>
        <variable inherited="false" model="PA:LIST(EW, IW , SM, WV, INS-NOBS, INS-RAW)" name="SENSOR_MODE" value="INS-NOBS"/>
        <variable inherited="false" name="START_DATE" value="2016-12-06"/>
        <variable inherited="false" name="END_DATE" value="2016-12-10"/>
        <variable inherited="false" name="TILE" value=""/>
        <variable inherited="false" name="LATITUDE" value=""/>
        <variable inherited="false" name="LONGITUDE" value=""/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/peps-logo.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")

import sys
import uuid
import json
import time
import shutil
import zipfile
import optparse 
import random as r
from datetime import date
from zipfile import ZipFile 
from os.path import join, exists, os, isfile


if 'variables' in locals():
  LOCATION      = variables.get("LOCATION") 		 # location 
  COLLECTION    = variables.get("COLLECTION")        # Collection within theia collections  ----- choices=['S1', 'S2', 'S2ST', 'S3']  
  PRODUCT_TYPE  = variables.get("PRODUCT_TYPE")      # GRD, SLC, OCN (for S1) | S2MSI1C S2MSI2A S2MSI2Ap (for S2) 
  SENSOR_MODE   = variables.get("SENSOR_MODE")		 # EW, IW , SM, WV (for S1) | INS-NOBS, INS-RAW (for S3)
  START_DATE = variables.get("START_DATE")			 # Start date, fmt('2015-12-22')  
  END_DATE = variables.get("END_DATE")				 # End date, fmt('2015-12-23') 
  TILE = variables.get("TILE")						 # Sentinel-2 tile number type= string 
  LATITUDE = variables.get("LATITUDE")               # Latitude in decimal degrees 
  LONGITUDE = variables.get("LONGITUDE")             # Longitude in decimal degrees 
  EMAIL = credentials.get("USER_NAME_PEPS")              # User email
  PASSWD = credentials.get("USER_PASS_PEPS")              # User password
  OUTPUT_PATH = variables.get("OUTPUT_PATH")         # Folder output path 
    

COLLECTION =   COLLECTION.upper()
PRODUCT_TYPE = PRODUCT_TYPE.upper()
SENSOR_MODE =  SENSOR_MODE.upper()

if LOCATION == "": LOCATION = None
if TILE == "": TILE = None
LATITUDE = None if LATITUDE == "" else float(LATITUDE)
LONGITUDE = None if LONGITUDE == "" else float(LONGITUDE)  

 
NO_DOWNLOAD = False  # Do not download products, just print curl command
LATMIN = None		 # Min latitude in decimal degrees  
LATMAX = None		 # Max latitude in decimal degreess 
LONMIN = None        # Min longitude in decimal degrees
LONMAX = None        # Max longitude in decimal degrees
ORBIT = None         # Orbit Path number # type int
SEARCH_JSON_FILE = None   
WINDOWS = False

# Get an unique ID
ID = str(uuid.uuid4())

# Define the current 'dataset_path'
os.getcwd() if OUTPUT_PATH == "" else os.chdir(OUTPUT_PATH)

dataset_path = join(OUTPUT_PATH, ID, 'dataset')
output_path = join(OUTPUT_PATH, ID, 'peps')
output_path_metadata = join(OUTPUT_PATH, ID, 'peps', 'metadata')

os.makedirs(dataset_path, exist_ok=True)
os.makedirs(output_path, exist_ok=True)
os.makedirs(output_path_metadata, exist_ok=True)

print('The path input PEPS dataset', dataset_path)
print('The path output PEPS dataset', output_path)

class OptionParser (optparse.OptionParser):

    def check_required(self, opt):
        option = self.get_option(opt)

        # Assumes the option's 'default' is set to None!
        if getattr(self.values, option.dest) is None:
            self.error("%s option not supplied" % option)


###########################################################################
def check_rename(tmpfile, prodsize):
    print(os.path.getsize(tmpfile), prodsize)
    if os.path.getsize(tmpfile) != prodsize:
        with open(tmpfile) as f_tmp:
            try:
                tmp_data = json.load(f_tmp)
                print("Result is a json file (might come from a wrong password file)")
                print(tmp_data)
                sys.exit(-1)
            except ValueError:
                print("\ndownload was not complete, tmp file removed")
                os.remove(tmpfile)
                pass
    else:
        os.rename("%s" % tmpfile, "%s/%s.zip" % (dataset_path, prod))
        print("product saved as : %s/%s.zip" % (dataset_path, prod))

###########################################################################

def parse_catalog(SEARCH_JSON_FILE):
    # Filter catalog result
    with open(SEARCH_JSON_FILE) as data_file:
        data = json.load(data_file)

    if 'ErrorCode' in data:
        print(data['ErrorMessage'])
        sys.exit(-2)

    # Sort data
    download_dict = {}
    storage_dict = {}
    size_dict = {}
    if len(data["features"])>0:
        for i in range(len(data["features"])):
            prod = data["features"][i]["properties"]["productIdentifier"]
            print(prod, data["features"][i]["properties"]["storage"]["mode"])
            feature_id = data["features"][i]["id"]
            try:
                storage = data["features"][i]["properties"]["storage"]["mode"]
                platform = data["features"][i]["properties"]["platform"]
                resourceSize = int(data["features"][i]["properties"]["resourceSize"])
                # recup du numero d'orbite
                orbitN = data["features"][i]["properties"]["orbitNumber"]
                if platform == 'S1A':
                    # calcul de l'orbite relative pour Sentinel 1A
                    relativeOrbit = ((orbitN - 73) % 175) + 1
                elif platform == 'S1B':
                    # calcul de l'orbite relative pour Sentinel 1B
                    relativeOrbit = ((orbitN - 27) % 175) + 1

            # print data["features"][i]["properties"]["productIdentifier"],data["features"][i]["id"],data["features"][i]["properties"]["startDate"],storage

                if ORBIT is not None:
                    if platform.startswith('S2'):
                        if prod.find("_R%03d" % ORBIT) > 0:
                            download_dict[prod] = feature_id
                            storage_dict[prod] = storage
                            size_dict[prod] = resourceSize
                    elif platform.startswith('S1'):
                        if relativeOrbit == ORBIT:
                            download_dict[prod] = feature_id
                            storage_dict[prod] = storage
                            size_dict[prod] = resourceSize
                else:
                    download_dict[prod] = feature_id
                    storage_dict[prod] = storage
                    size_dict[prod] = resourceSize
            except:
                pass
    else:
        print(">>> no product corresponds to selection criteria")
        sys.exit(-1)

    return(prod, download_dict, storage_dict, size_dict)
  
    
    
if SEARCH_JSON_FILE is None or SEARCH_JSON_FILE == "":
    SEARCH_JSON_FILE = 'search.json'

if TILE is None:
    if LOCATION is None:
        if LATITUDE is None or LONGITUDE is None:
            if (LATMIN is None) or (LONMIN is None) or (LATMAX is None) or (LONMAX is None):
                print("provide at least a point or rectangle or tile number")
                sys.exit(-1)
            else:
                geom = 'rectangle'
        else:
            if (LATMIN is None) and (LONMIN is None) and (LATMAX is None) and (LONMAX is None):
                geom = 'point'
            else:
                print("please choose between point and rectangle, but not both")
                sys.exit(-1)
    else:
        if (LATMIN is None) and (LONMIN is None) and (LATMAX is None) and (LONMAX is None) and (LATITUDE is None) or (LONGITUDE is None):
            geom = 'LOCATION'
        else:
            print("please choose location and coordinates, but not both")
            sys.exit(-1)

# geometric parameters of catalog request

if TILE is not None:
    if TILE.startswith('T') and len(TILE)==6:
        tileid = TILE[1:6]
    elif len(TILE)==5:
        tileid = TILE[0:5]
    else:
        print("tile name is ill-formated : 31TCJ or T31TCJ are allowed")
        sys.exit(-4)
    query_geom="tileid=%s"%(tileid)
elif geom == 'point':
    query_geom = 'LATITUDE=%f\&LONGITUDE=%f' % (LATITUDE, LONGITUDE)
elif geom == 'rectangle':
    query_geom = 'box={LONMIN},{LATMIN},{LONMAX},{LATMAX}'.format(
        LATMIN=LATMIN, LATMAX=LATMAX, LONMIN=LONMIN, LONMAX=LONMAX)
elif geom == 'LOCATION':
    query_geom = "q=%s" % LOCATION
    
# date parameters of catalog request
if START_DATE is not None:
    START_DATE = START_DATE
    if END_DATE is not None:
        END_DATE = END_DATE
    else:
        END_DATE = date.today().isoformat()

# special case for Sentinel-2     

if COLLECTION == 'S2':
    if START_DATE >= '2016-12-05':
        print("**** products after '2016-12-05' are stored in Tiled products collection")
        print("**** please use option -c S2ST")
    elif END_DATE >= '2016-12-05':
        print("**** products after '2016-12-05' are stored in Tiled products collection")
        print("**** please use option -c S2ST to get the products after that date")
        print("**** products before that date will be downloaded")
 
if COLLECTION == 'S2ST':
    if END_DATE < '2016-12-05':
        print("**** products before '2016-12-05' are stored in non-tiled products collection")
        print("**** please use option -c S2")
    elif START_DATE < '2016-12-05':
        print("**** products before '2016-12-05' are stored in non-tiled products collection")
        print("**** please use option -c S2 to get the products before that date")
        print("**** products after that date will be downloaded")
        

# ====================
# search in catalog
# ====================
if (PRODUCT_TYPE == "") and (SENSOR_MODE == ""):
    search_catalog = 'curl -k -o %s https://peps.cnes.fr/resto/api/collections/%s/search.json?%s\&startDate=%s\&completionDate=%s\&maxRecords=500' % (
        SEARCH_JSON_FILE, COLLECTION, query_geom, START_DATE, END_DATE)
else:
    search_catalog = 'curl -k -o %s https://peps.cnes.fr/resto/api/collections/%s/search.json?%s\&startDate=%s\&completionDate=%s\&maxRecords=500\&productType=%s\&sensorMode=%s' % (
        SEARCH_JSON_FILE, COLLECTION, query_geom, START_DATE, END_DATE, PRODUCT_TYPE, SENSOR_MODE)

if WINDOWS :
    search_catalog = search_catalog.replace('\&','^&')

print(search_catalog)
os.system(search_catalog)
time.sleep(5)

prod, download_dict, storage_dict, size_dict = parse_catalog(SEARCH_JSON_FILE)


# ====================
# Download
# ====================

if len(download_dict) == 0:
    print("No product matches the criteria")
else:
    # first try for the products on tape
    if dataset_path == None:
        dataset_path = os.getcwd()

    for prod in list(download_dict.keys()):
        file_exists = os.path.exists(("%s/%s.SAFE") % (dataset_path, prod)
                                     ) or os.path.exists(("%s/%s.zip") % (dataset_path, prod))
        if (not(NO_DOWNLOAD) and not(file_exists)):
            if storage_dict[prod] == "tape":
                tmticks = time.time()
                tmpfile = ("%s/tmp_%s.tmp") % (dataset_path, tmticks)
                print("\nStage tape product: %s" % prod)
                get_product = 'curl -o %s -k -u "%s:%s" https://peps.cnes.fr/resto/collections/%s/%s/download/?issuerId=peps &>/dev/null' % (
                    tmpfile, EMAIL, PASSWD, COLLECTION, download_dict[prod])
                os.system(get_product)
                if os.path.exists(tmpfile):
                    os.remove(tmpfile)

    NbProdsToDownload = len(list(download_dict.keys()))
    print("##########################")
    print("%d  products to download" % NbProdsToDownload)
    print("##########################")
    while (NbProdsToDownload > 0):
       # redo catalog search to update disk/tape status
        if (PRODUCT_TYPE == "") and (SENSOR_MODE == ""):
            search_catalog = 'curl -k -o %s https://peps.cnes.fr/resto/api/collections/%s/search.json?%s\&startDate=%s\&completionDate=%s\&maxRecords=500' % (
                SEARCH_JSON_FILE, COLLECTION, query_geom, START_DATE, END_DATE)
        else:
            search_catalog = 'curl -k -o %s https://peps.cnes.fr/resto/api/collections/%s/search.json?%s\&startDate=%s\&completionDate=%s\&maxRecords=500\&productType=%s\&sensorMode=%s' % (
                SEARCH_JSON_FILE, COLLECTION, query_geom, START_DATE, END_DATE, PRODUCT_TYPE, SENSOR_MODE)

        if WINDOWS :
            search_catalog = search_catalog.replace('\&','^&')

        os.system(search_catalog)
        time.sleep(2)

        prod, download_dict, storage_dict, size_dict = parse_catalog(SEARCH_JSON_FILE)

        NbProdsToDownload = 0
        # download all products on disk
        for prod in list(download_dict.keys()):
            file_exists = os.path.exists(("%s/%s.SAFE") % (dataset_path, prod)) or os.path.exists(("%s/%s.zip") % (dataset_path, prod))
            if (not(NO_DOWNLOAD) and not(file_exists)):
                if storage_dict[prod] == "disk":
                    tmticks = time.time()
                    tmpfile = ("%s/tmp_%s.tmp") % (dataset_path, tmticks)
                    print("\nDownload of product : %s" % prod)
                    get_product = 'curl -o %s -k -u "%s:%s" https://peps.cnes.fr/resto/collections/%s/%s/download/?issuerId=peps' % (
                        tmpfile, EMAIL, PASSWD, COLLECTION, download_dict[prod])
                    print(get_product)
                    os.system(get_product)
                    # check binary product, rename tmp file
                    if not os.path.exists(("%s/tmp_%s.tmp") % (dataset_path, tmticks)):
                        NbProdsToDownload += 1
                    else:
                         check_rename(tmpfile, size_dict[prod])

            elif file_exists:
                print("%s already exists" % prod)

        # download all products on tape
        for prod in list(download_dict.keys()):
            file_exists = os.path.exists(("%s/%s.SAFE") % (dataset_path, prod)
                                         ) or os.path.exists(("%s/%s.zip") % (dataset_path, prod))
            if (not(NO_DOWNLOAD) and not(file_exists)):
                if storage_dict[prod] == "tape" or storage_dict[prod] == "staging" :
                    NbProdsToDownload += 1

        if NbProdsToDownload > 0:
            print("##############################################################################")
            print("%d remaining products are on tape, lets's wait 1 minute before trying again" % NbProdsToDownload)
            print("##############################################################################")
            time.sleep(60)
            
            
# List all .zip folders
folder_zip = [i for i in [os.path.relpath(os.path.join(dataset_path, p)) for p in os.listdir(dataset_path)] if i.endswith('.zip')]

# Unzip folders 
print('Extracting all the files...')
for file_name in folder_zip: 
    with ZipFile(file_name, 'r') as zip: 
        zip.printdir() 
        # extracting all the files 
        print('Unzip File name:', file_name) 
        zip.extractall(dataset_path) 
print('Finished!')            
            
# List all .safe folders
folder_safe = [i for i in [os.path.relpath(os.path.join(dataset_path, p)) for p in os.listdir(dataset_path)] if i.endswith('.SAFE')]

# Copy and organize files
def folder_copy(image_path, path_dst):          
    for root, dirs, files in os.walk(image_path, path_dst): 
        os.makedirs(path_dst, exist_ok=True)
        for file in files:   
            fullpath = join(root, file)
            shutil.copy(fullpath, path_dst)
            #print('Image Name:', fullpath) 
            print('Image Name:', join(path_dst, file))  
            
# Looking for the "measurement" and  "IMG_DATA" directories (S1 and S2 sensors)
def folder_search():
    print('Copying the images to the peps directory...')
    for foldername in folder_safe:
        for path, dirs, filename in os.walk(foldername): #omit files, loop through later
            for dirname in dirs:
                fullpath = os.path.join(path, dirname)
                if "measurement" in dirname:
                    path_dst = os.path.join(output_path, 'measurement')
                    folder_copy(fullpath, path_dst)
                if "IMG_DATA" in dirname:
                    path_dst = os.path.join(output_path, 'IMG_DATA')
                    folder_copy(fullpath, path_dst)
    print('Finished!')
    
# Searching for metadata files
def metadata_search(output_path_metadata, folder_safe):
    print('Searching for metadata files...')
    for file_xml in folder_safe:
        file_rename = r.randint(0,9999)
        for fn in os.listdir(file_xml):
            if fn.endswith(('.xml')):
                shutil.copy(os.path.join(file_xml,fn), os.path.join(output_path_metadata, fn))
                new_file_rename =  str(file_rename) + '_' +  fn 
                os.rename(os.path.join(output_path_metadata, fn), os.path.join(output_path_metadata, new_file_rename)) 
                print('Metadata Name:', join(output_path_metadata, new_file_rename))   
    print('Finished')
    
# Call folder_search function
folder_search()

# Call  metadata_search function
metadata_search(output_path_metadata, folder_safe)
                
# Remove the "dataset_path" directory
shutil.rmtree(dataset_path)
while os.path.exists(dataset_path):
  pass
print('Remove all directory in the', dataset_path)
print('Finished!')  


if 'variables' in locals():
	variables.put("DATASET_PATH", output_path)
  
print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            367.5
        </positionTop>
        <positionLeft>
            29
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Else">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            366.5
        </positionTop>
        <positionLeft>
            262
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Continuation">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            366.5
        </positionTop>
        <positionLeft>
            400
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Condition2">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
print('Searching satellite images...')
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <if continuation="Continuation2" else="Else2" target="Fetch_Satellite_Images_From_Copernicus">
          <script>
            <code language="cpython">
              <![CDATA[
HOST_SITES  = variables.get("HOST_SITES") 		 # Option host sites

if HOST_SITES.lower() == "copernicus" or HOST_SITES.lower() == "all":
    branch = "if"
else:
    branch = "else"
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            166.5
        </positionTop>
        <positionLeft>
            663
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Fetch_Satellite_Images_From_Copernicus">
      <description>
        <![CDATA[ Load and return a copernicus dataset.
You can see more details in: https://pypi.org/project/sentinelsat/

Warning:
See bellow some prerequisites to have this workflow working:
Two third party credentials to connect to Copernicus  (USER_NAME_COP and USER_PASS_COP)

Parameter description
##################################
PLATFORM_NAME: specific instrument on a Sentinel satellite. Type: String. Options=[Sentinel-1, Sentinel-2, Sentinel-3, Sentinel-4, Sentinel-5,  Sentinel-5, Precursor, Sentinel-6].
FOOTPRINT: type: geojson file search_footprints.geojson with footprints of the query result. Type: String.
START_DATE:  Start date of the query in the format YYYYMMDD. Type: String.
end date of the query in the format YYYYMMDD. Type: String.
USER_NAME: User email. Type: String.
LONGITUDE: User password. Type: String.
OUTPUT_PATH: address path to save downloaded images. Type: String. ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:LIST(Sentinel-1, Sentinel-2, Sentinel-3, Sentinel-4, Sentinel-5,  Sentinel-5 Precursor, Sentinel-6)" name="PLATFORM_NAME" value="Sentinel-2"/>
        <variable inherited="false" name="FOOTPRINT" value="expected_search_footprints_s1"/>
        <variable inherited="false" name="START_DATE" value="2018-12-19"/>
        <variable inherited="false" name="END_DATE" value="2018-12-21"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/copernicus.png"/>
      </genericInformation>
      <pre>
        <script>
          <code language="cpython">
            <![CDATA[
import ssl, sys

if sys.version_info[0] < 3:
    try:
        from urllib2 import urlopen
    except ImportError:
        import pip
        pip.main(['install', 'request'])
        from urllib2 import urlopen
else:
    try:
        from urllib.request import urlopen
    except ImportError:
        import pip
        pip.main(['install', 'request'])
        from urllib.request import urlopen

PA_CATALOG_REST_URL = variables.get("PA_CATALOG_REST_URL")
FOOTPRINT = variables.get("FOOTPRINT")

satellite_imagery_resources_url = PA_CATALOG_REST_URL +"/buckets/satellite-imagery/resources/"+FOOTPRINT+"/raw"
print("satellite-imagery-resources-url: ", satellite_imagery_resources_url)

# This restores the same behavior as before.
context        = ssl._create_unverified_context()
json_file      = urlopen(satellite_imagery_resources_url, context=context).read()
json_content   = json_file.decode('utf-8')
json_file_name = FOOTPRINT + ".geojson"

f = open(json_file_name, "w")
f.write(json_content)
f.close()
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")

import os
import sys
import uuid
import shutil
import zipfile
import datetime
import subprocess
import random as r
from zipfile import ZipFile
from os.path import join, exists, os, isfile

try:
    from sentinelsat.sentinel import SentinelAPI, read_geojson, geojson_to_wkt
except ImportError:
    subprocess.call([sys.executable, "-m", "pip", "install", 'sentinelsat'])
finally:
    from sentinelsat.sentinel import SentinelAPI, read_geojson, geojson_to_wkt


if 'variables' in locals():
  PLATFORM_NAME  = variables.get("PLATFORM_NAME")     # Specific instrument a satellite [Sentinel-1, Sentinel-2, Sentinel-3, Sentinel-4, Sentinel-5,  Sentinel-5, Precursor, Sentinel-6]
  FOOTPRINT      = variables.get("FOOTPRINT")         # Geojson file search_footprints.geojson with footprints of the query result
  FOOTPRINT      = FOOTPRINT + ".geojson"
  FOOTPRINT_FILE = os.path.join(os.getcwd(), FOOTPRINT)
  START_DATE     = variables.get("START_DATE")        # Start date of the query in the format YYYYMMDD
  END_DATE       = variables.get("END_DATE")          # End date of the query in the format YYYYMMDD
  USER_NAME      = credentials.get("USER_NAME_COP")   # User email
  USER_PASS      = credentials.get("USER_PASS_COP")   # User password
  OUTPUT_PATH    = variables.get("OUTPUT_PATH")       # Folder output path 

# Get an unique ID
ID = str(uuid.uuid4())

# Define the current 'dataset_path'
os.chdir(OUTPUT_PATH)

dataset_path = join(OUTPUT_PATH, ID, 'dataset')
output_path = join(OUTPUT_PATH, ID, 'copernicus')
output_path_metadata = join(OUTPUT_PATH, ID, 'copernicus', 'metadata')

# Create the folders
os.makedirs(dataset_path, exist_ok=True)
os.makedirs(output_path, exist_ok=True)
os.makedirs(output_path_metadata, exist_ok=True)

# Define path to download the dataset
os.chdir(dataset_path)

print('The path input Copernicus dataset', dataset_path)
print('The path output Copernicus dataset', output_path)

# Data format
start_date_format = START_DATE.replace('-', '')
end_date_format =  END_DATE.replace('-', '')

#  SentinelAPI
api = SentinelAPI(USER_NAME, USER_PASS)
footprint = geojson_to_wkt(read_geojson(FOOTPRINT_FILE))
products = api.query(footprint, date=(start_date_format, end_date_format), platformname=PLATFORM_NAME)
api.download_all(products)

#print(os.listdir(dataset_path))

# List all .zip folders
folder_zip = [i for i in [os.path.relpath(os.path.join(dataset_path, p)) for p in os.listdir(dataset_path)] if i.endswith('.zip')]

# Unzip folders 
print('Extracting all the files...')
for file_name in folder_zip: 
    with ZipFile(file_name, 'r') as zip: 
        zip.printdir() 
        # extracting all the files 
        print('Unzip file name:', file_name) 
        zip.extractall(dataset_path) 
print('Finished!')               
            
# List all .safe folders
folder_safe = [i for i in [os.path.relpath(os.path.join(dataset_path, p)) for p in os.listdir(dataset_path)] if i.endswith('.SAFE')]

# Copy and organize files
def folder_copy(image_path):
    for root, dirs, files in os.walk(image_path):
        for dire in dirs:
            os.makedirs(os.path.join(output_path, dire) , exist_ok=True)
            fullpath = os.path.join(root, dire)
            files2 = os.listdir(fullpath) 
            for filefull in files2:
                filepath = os.path.join(fullpath, filefull)
                #print('Image Name:', filefull) 
                print('Image Name:', os.path.join(output_path, dire,  filefull)) 
                shutil.copy(filepath, os.path.join(output_path, dire))

# Looking for the "IMG_DATA" directory 
def images_search():
    print('Copying the images to the copernicus directory...')
    for foldername in folder_safe:
        for path, dirs, filename in os.walk(foldername): #omit files, loop through later
            for dirname in dirs:
                fullpath = os.path.join(path, dirname)
                if "IMG_DATA" in dirname:
                    folder_copy(fullpath)
    print('Finished!')
    
# Searching for metadata files
def metadata_search(output_path_metadata, folder_safe):
    print('Searching for metadata files...')
    for file_xml in folder_safe:
        file_rename = r.randint(0,9999)
        for fn in os.listdir(file_xml):
            if fn.endswith(('.xml')):
                shutil.copy(os.path.join(file_xml,fn), os.path.join(output_path_metadata, fn))
                new_file_rename =  str(file_rename) + '_' +  fn 
                os.rename(os.path.join(output_path_metadata, fn), os.path.join(output_path_metadata, new_file_rename)) 
                print('Metadata Name:', join(output_path_metadata, new_file_rename))     
            
    print('Finished')
    
    
# Call folder_search function
images_search()
 
# Call metadata_search function 
metadata_search(output_path_metadata, folder_safe)
    
# Remove the "dataset_path" directory
shutil.rmtree(dataset_path)
while os.path.exists(dataset_path):
  pass
print('Remove all directory in the', dataset_path)
print('Finished!')  



if 'variables' in locals():
  variables.put("DATASET_PATH", output_path)

print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            366.5
        </positionTop>
        <positionLeft>
            538
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Else2">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            360.5
        </positionTop>
        <positionLeft>
            787
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Continuation2">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            353.5
        </positionTop>
        <positionLeft>
            947
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2144px;
            height:2436px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-161.5px;left:-24px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_209" style="top: 166.5px; left: 219px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Condition</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_212" style="top: 367.5px; left: 29px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Load and return a peps dataset.
Warning:
See bellow some prerequisites to have this workflow working:
1: Two third party credentials to connect to PEPS (USER_NAME_PEPS and USER_PASS_PEPS)
2: Support the versions of Python > 3.2
3: Use a PYTHON_COMMAND  in the Generic Information (GI) field to specify the full path of your python3.

Note that the workflow does not work on try, trydev and tryqa servers, only in local.

Parameter description
##################################
LOCATION: town name. Type: String
COLLECTION: collection within theia collections. Options=[S1, S2, S2ST, S3]. Type: String
PRODUCT_TYPE: product type. Options=GRD, SLC, OCN (for S1) or S2MSI1C S2MSI2A S2MSI2Ap (for S2). Type: String
SENSOR_MODE: sensor mode. Options=EW, IW , SM, WV (for S1) or INS-NOBS, INS-RAW (for S3). Type: String
START_DATE: start date. Type: String
END_DATE: end date. Type: String
TILE:  sentinel tile number. Type: String
LATITUDE: latitude in decimal degrees. Type: Float
LONGITUDE: longitude in decimal degrees. Type: Float
OUTPUT_PATH: address path to save downloaded images."><img src="/automation-dashboard/styles/patterns/img/wf-icons/peps-logo.png" width="20px">&nbsp;<span class="name">Fetch_Satellite_Images_From_PEPS</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_215" style="top: 366.5px; left: 262px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Else</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_218" style="top: 366.5px; left: 400px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Continuation</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_221" style="top: 166.5px; left: 663px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Condition2</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_224" style="top: 366.5px; left: 538px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Load and return a copernicus dataset.
You can see more details in: https://pypi.org/project/sentinelsat/

Warning:
See bellow some prerequisites to have this workflow working:
Two third party credentials to connect to Copernicus  (USER_NAME_COP and USER_PASS_COP)

Parameter description
##################################
PLATFORM_NAME: specific instrument on a Sentinel satellite. Type: String. Options=[Sentinel-1, Sentinel-2, Sentinel-3, Sentinel-4, Sentinel-5,  Sentinel-5, Precursor, Sentinel-6].
FOOTPRINT: type: geojson file search_footprints.geojson with footprints of the query result. Type: String.
START_DATE:  Start date of the query in the format YYYYMMDD. Type: String.
end date of the query in the format YYYYMMDD. Type: String.
USER_NAME: User email. Type: String.
LONGITUDE: User password. Type: String.
OUTPUT_PATH: address path to save downloaded images. Type: String."><img src="/automation-dashboard/styles/patterns/img/wf-icons/copernicus.png" width="20px">&nbsp;<span class="name">Fetch_Satellite_Images_From_Copernicus</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_227" style="top: 360.5px; left: 787px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Else2</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_230" style="top: 353.5px; left: 947px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Continuation2</span></a></div><svg style="position:absolute;left:18.5px;top:206.5px" width="211" height="162" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 161 C -10 111 200 50 190 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M30.210265000000007,119.34198674999999 L50.6545115267424,113.77127907917561 L41.743582763356535,111.40583016324814 L42.71835493999055,102.23796131581908 L30.210265000000007,119.34198674999999" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M30.210265000000007,119.34198674999999 L50.6545115267424,113.77127907917561 L41.743582763356535,111.40583016324814 L42.71835493999055,102.23796131581908 L30.210265000000007,119.34198674999999" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_238" style="position: absolute; transform: translate(-50%, -50%); left: 123.5px; top: 287px;">if</div><svg style="position:absolute;left:208.5px;top:206.5px" width="64" height="161" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 43 160 C 53 110 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M39.60390400000001,122.54848000000003 L39.654625150801444,101.35892060474923 L35.010641419799164,109.32343032639476 L26.429575477196174,105.95218318495007 L39.60390400000001,122.54848000000003" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M39.60390400000001,122.54848000000003 L39.654625150801444,101.35892060474923 L35.010641419799164,109.32343032639476 L26.429575477196174,105.95218318495007 L39.60390400000001,122.54848000000003" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_242" style="position: absolute; transform: translate(-50%, -50%); left: 240px; top: 286.5px;">else</div><svg style="position:absolute;left:208.5px;top:206.5px" width="202" height="161" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 181 160 C 191 110 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M153.42627199999998,119.32351999999997 L141.28811199723424,101.95501195390524 L142.06591879445057,111.14168798967596 L133.10627998691024,113.31536515945466 L153.42627199999998,119.32351999999997" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M153.42627199999998,119.32351999999997 L141.28811199723424,101.95501195390524 L142.06591879445057,111.14168798967596 L133.10627998691024,113.31536515945466 L153.42627199999998,119.32351999999997" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_246" style="position: absolute; transform: translate(-50%, -50%); left: 309px; top: 286.5px;">continuation</div><svg style="position:absolute;left:527.5px;top:206.5px" width="146" height="161" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 160 C -10 110 135 50 125 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M17.44639875,120.1308775 L36.370129031870704,110.59712523664587 L27.166525157828712,110.05520667291206 L26.294458204782764,100.87699882881716 L17.44639875,120.1308775" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M17.44639875,120.1308775 L36.370129031870704,110.59712523664587 L27.166525157828712,110.05520667291206 L26.294458204782764,100.87699882881716 L17.44639875,120.1308775" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_252" style="position: absolute; transform: translate(-50%, -50%); left: 600px; top: 286.5px;">if</div><svg style="position:absolute;left:652.5px;top:206.5px" width="145" height="155" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 124 154 C 134 104 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M107.4375,115.875 L98.29150685140202,96.7608479307661 L97.56207687217737,105.95149164627419 L88.3679984976762,106.63627105858872 L107.4375,115.875" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M107.4375,115.875 L98.29150685140202,96.7608479307661 L97.56207687217737,105.95149164627419 L88.3679984976762,106.63627105858872 L107.4375,115.875" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_256" style="position: absolute; transform: translate(-50%, -50%); left: 724.5px; top: 283.5px;">else</div><svg style="position:absolute;left:652.5px;top:206.5px" width="305" height="148" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 284 147 C 294 97 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M235.789124,107.038002 L219.98339274238592,92.92492794038844 L222.85218411141673,101.68677911927605 L214.63216986166194,105.8618678289717 L235.789124,107.038002" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M235.789124,107.038002 L219.98339274238592,92.92492794038844 L222.85218411141673,101.68677911927605 L214.63216986166194,105.8618678289717 L235.789124,107.038002" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_260" style="position: absolute; transform: translate(-50%, -50%); left: 804.5px; top: 280px;">continuation</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 259px; top: 197px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 209px; top: 197px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 119px; top: 398px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 19px; top: 358px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 302px; top: 397px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 252px; top: 357px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 440px; top: 397px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 390px; top: 357px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 703px; top: 197px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 653px; top: 197px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 640px; top: 397px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 528px; top: 357px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 827px; top: 391px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 777px; top: 351px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 987px; top: 384px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 937px; top: 344px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>
