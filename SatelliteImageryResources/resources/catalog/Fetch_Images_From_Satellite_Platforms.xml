<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.12" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Fetch_Images_From_Satellite_Platforms" onTaskError="continueJobExecution" priority="normal" projectName="Satellite Imagery Datasets" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd">
  <variables>
    <variable model="PA:LIST(Peps, Copernicus, All)" name="SEARCH_ENGINE" value="Peps"/>
    <variable name="OUTPUT_PATH" value="/tmp/"/>
  </variables>
  <description>
    <![CDATA[ The satellite-imagery bucket contains some tasks that enable you to search, download and retrieve the metadata of Sentinel satellite images from the PEPS website (https://peps.cnes.fr/rocket/#/home) and Copernicus Open Access Hub (https://scihub.copernicus.eu/). ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="satellite-imagery"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/sentinel_image.jpg"/>
<info name="Documentation" value="MLOS/MLOSUserGuide.html#_satellite_imagery_bucket"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Condition">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
print('Checking platform...')
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <if continuation="Continuation" else="Else" target="Fetch_Satellite_Images_From_PEPS">
          <script>
            <code language="cpython">
              <![CDATA[
SEARCH_ENGINE  = variables.get("SEARCH_ENGINE") 		 # Option host sites

if SEARCH_ENGINE.lower() == "peps" or SEARCH_ENGINE.lower() == "all":
    branch = "if"
else:
    branch = "else"
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            200.34375
        </positionTop>
        <positionLeft>
            385.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Fetch_Satellite_Images_From_PEPS">
      <description>
        <![CDATA[ Load and return a PEPS dataset including a
'metadata folder' with metadata files and 'images folder' containing satellite images.

Please access https://peps.cnes.fr/rocket/#/register to create a new user account from Peps website.

Please add third party credentials (USER_NAME_PEPS and USER_PASS_PEPS) in the Scheduling & Orchestration interface â†’ Manage Third-Party Credentials to connect to PEPS. ]]>
      </description>
      <variables>
        <variable inherited="false" name="LOCATION" value="Toulouse"/>
        <variable inherited="false" model="PA:LIST(S1, S2, S2B, S2ST, S3)" name="COLLECTION" value="S1"/>
        <variable inherited="false" model="PA:LIST(GRD, SLC, OCN, S2MSI1C)" name="PRODUCT_TYPE" value="GRD"/>
        <variable inherited="false" model="PA:LIST(EW, IW , SM, WV, INS-NOBS, INS-RAW, MSI)" name="SENSOR_MODE" value="IW"/>
        <variable inherited="false" model="PA:DATETIME(yyyy-MM-dd)" name="START_DATE" value="2015-11-01"/>
        <variable inherited="false" model="PA:DATETIME(yyyy-MM-dd)" name="END_DATE" value="2015-12-01"/>
        <variable inherited="false" name="TILE" value=""/>
        <variable inherited="false" name="LATITUDE" value=""/>
        <variable inherited="false" name="LONGITUDE" value=""/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/peps-logo.png"/>
        <info name="task.documentation" value="MLOS/MLOSUserGuide.html#_satellite_imagery_bucket"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")

import sys
import uuid
import json
import time
import shutil
import zipfile
import optparse 
import random as r
from datetime import date
from zipfile import ZipFile 
from os.path import join, exists, os, isfile


if 'variables' in locals():
  LOCATION      = variables.get("LOCATION") 		 # location 
  COLLECTION    = variables.get("COLLECTION")        # Collection within theia collections  ----- choices=['S1', 'S2', 'S2ST', 'S3']  
  PRODUCT_TYPE  = variables.get("PRODUCT_TYPE")      # GRD, SLC, OCN (for S1) | S2MSI1C S2MSI2A S2MSI2Ap (for S2) 
  SENSOR_MODE   = variables.get("SENSOR_MODE")		 # EW, IW , SM, WV (for S1) | INS-NOBS, INS-RAW (for S3)
  START_DATE = variables.get("START_DATE")			 # Start date, fmt('2015-12-22')  
  END_DATE = variables.get("END_DATE")				 # End date, fmt('2015-12-23') 
  TILE = variables.get("TILE")						 # Sentinel-2 tile number type= string 
  LATITUDE = variables.get("LATITUDE")               # Latitude in decimal degrees 
  LONGITUDE = variables.get("LONGITUDE")             # Longitude in decimal degrees 
  EMAIL = credentials.get("USER_NAME_PEPS")              # User email
  PASSWD = credentials.get("USER_PASS_PEPS")              # User password
  OUTPUT_PATH = variables.get("OUTPUT_PATH")         # Folder output path 
    
COLLECTION =   COLLECTION.upper()
PRODUCT_TYPE = PRODUCT_TYPE.upper()
SENSOR_MODE =  SENSOR_MODE.upper()

if LOCATION == "": LOCATION = None
if TILE == "": TILE = None
LATITUDE = None if LATITUDE == "" else float(LATITUDE)
LONGITUDE = None if LONGITUDE == "" else float(LONGITUDE)  

 
NO_DOWNLOAD = False  # Do not download products, just print curl command
LATMIN = None		 # Min latitude in decimal degrees  
LATMAX = None		 # Max latitude in decimal degreess 
LONMIN = None        # Min longitude in decimal degrees
LONMAX = None        # Max longitude in decimal degrees
ORBIT = None         # Orbit Path number # type int
SEARCH_JSON_FILE = None   
WINDOWS = False

# Get an unique ID
ID = str(uuid.uuid4())

# Define the current 'dataset_path'
os.getcwd() if OUTPUT_PATH == "" else os.chdir(OUTPUT_PATH)

dataset_path = join(OUTPUT_PATH, ID, 'dataset')
output_path = join(OUTPUT_PATH, ID, 'peps')
output_path_metadata = join(OUTPUT_PATH, ID, 'peps', 'metadata')

os.makedirs(dataset_path, exist_ok=True)
os.makedirs(output_path, exist_ok=True)
os.makedirs(output_path_metadata, exist_ok=True)

print('The path input PEPS dataset', dataset_path)
print('The path output PEPS dataset', output_path)

class OptionParser (optparse.OptionParser):

    def check_required(self, opt):
        option = self.get_option(opt)

        # Assumes the option's 'default' is set to None!
        if getattr(self.values, option.dest) is None:
            self.error("%s option not supplied" % option)


###########################################################################
def check_rename(tmpfile, prodsize):
    print(os.path.getsize(tmpfile), prodsize)
    if os.path.getsize(tmpfile) != prodsize:
        with open(tmpfile) as f_tmp:
            try:
                tmp_data = json.load(f_tmp)
                print("Result is a json file (might come from a wrong password file)")
                print(tmp_data)
                sys.exit(-1)
            except ValueError:
                print("\ndownload was not complete, tmp file removed")
                os.remove(tmpfile)
                pass
    else:
        os.rename("%s" % tmpfile, "%s/%s.zip" % (dataset_path, prod))
        print("product saved as : %s/%s.zip" % (dataset_path, prod))

###########################################################################

def parse_catalog(SEARCH_JSON_FILE):
    # Filter catalog result
    with open(SEARCH_JSON_FILE) as data_file:
        data = json.load(data_file)

    if 'ErrorCode' in data:
        print(data['ErrorMessage'])
        sys.exit(-2)

    # Sort data
    download_dict = {}
    storage_dict = {}
    size_dict = {}
    if len(data["features"])>0:
        for i in range(len(data["features"])):
            prod = data["features"][i]["properties"]["productIdentifier"]
            print(prod, data["features"][i]["properties"]["storage"]["mode"])
            feature_id = data["features"][i]["id"]
            try:
                storage = data["features"][i]["properties"]["storage"]["mode"]
                platform = data["features"][i]["properties"]["platform"]
                resourceSize = int(data["features"][i]["properties"]["resourceSize"])
                # recup du numero d'orbite
                orbitN = data["features"][i]["properties"]["orbitNumber"]
                if platform == 'S1A':
                    # calcul de l'orbite relative pour Sentinel 1A
                    relativeOrbit = ((orbitN - 73) % 175) + 1
                elif platform == 'S1B':
                    # calcul de l'orbite relative pour Sentinel 1B
                    relativeOrbit = ((orbitN - 27) % 175) + 1

            # print data["features"][i]["properties"]["productIdentifier"],data["features"][i]["id"],data["features"][i]["properties"]["startDate"],storage

                if ORBIT is not None:
                    if platform.startswith('S2'):
                        if prod.find("_R%03d" % ORBIT) > 0:
                            download_dict[prod] = feature_id
                            storage_dict[prod] = storage
                            size_dict[prod] = resourceSize
                    elif platform.startswith('S1'):
                        if relativeOrbit == ORBIT:
                            download_dict[prod] = feature_id
                            storage_dict[prod] = storage
                            size_dict[prod] = resourceSize
                else:
                    download_dict[prod] = feature_id
                    storage_dict[prod] = storage
                    size_dict[prod] = resourceSize
            except:
                pass
    else:
        print(">>> no product corresponds to selection criteria")
        sys.exit(-1)

    return(prod, download_dict, storage_dict, size_dict)
  
    
    
if SEARCH_JSON_FILE is None or SEARCH_JSON_FILE == "":
    SEARCH_JSON_FILE = 'search.json'

if TILE is None:
    if LOCATION is None:
        if LATITUDE is None or LONGITUDE is None:
            if (LATMIN is None) or (LONMIN is None) or (LATMAX is None) or (LONMAX is None):
                print("provide at least a point or rectangle or tile number")
                sys.exit(-1)
            else:
                geom = 'rectangle'
        else:
            if (LATMIN is None) and (LONMIN is None) and (LATMAX is None) and (LONMAX is None):
                geom = 'point'
            else:
                print("please choose between point and rectangle, but not both")
                sys.exit(-1)
    else:
        if (LATMIN is None) and (LONMIN is None) and (LATMAX is None) and (LONMAX is None) and (LATITUDE is None) or (LONGITUDE is None):
            geom = 'LOCATION'
        else:
            print("please choose location and coordinates, but not both")
            sys.exit(-1)

# geometric parameters of catalog request

if TILE is not None:
    if TILE.startswith('T') and len(TILE)==6:
        tileid = TILE[1:6]
    elif len(TILE)==5:
        tileid = TILE[0:5]
    else:
        print("tile name is ill-formated : 31TCJ or T31TCJ are allowed")
        sys.exit(-4)
    query_geom="tileid=%s"%(tileid)
elif geom == 'point':
    query_geom = 'LATITUDE=%f\&LONGITUDE=%f' % (LATITUDE, LONGITUDE)
elif geom == 'rectangle':
    query_geom = 'box={LONMIN},{LATMIN},{LONMAX},{LATMAX}'.format(
        LATMIN=LATMIN, LATMAX=LATMAX, LONMIN=LONMIN, LONMAX=LONMAX)
elif geom == 'LOCATION':
    query_geom = "q=%s" % LOCATION
    
# date parameters of catalog request
if START_DATE is not None:
    START_DATE = START_DATE
    if END_DATE is not None:
        END_DATE = END_DATE
    else:
        END_DATE = date.today().isoformat()

# special case for Sentinel-2     

if COLLECTION == 'S2':
    if START_DATE >= '2016-12-05':
        print("**** products after '2016-12-05' are stored in Tiled products collection")
        print("**** please use option -c S2ST")
    elif END_DATE >= '2016-12-05':
        print("**** products after '2016-12-05' are stored in Tiled products collection")
        print("**** please use option -c S2ST to get the products after that date")
        print("**** products before that date will be downloaded")
 
if COLLECTION == 'S2ST':
    if END_DATE < '2016-12-05':
        print("**** products before '2016-12-05' are stored in non-tiled products collection")
        print("**** please use option -c S2")
    elif START_DATE < '2016-12-05':
        print("**** products before '2016-12-05' are stored in non-tiled products collection")
        print("**** please use option -c S2 to get the products before that date")
        print("**** products after that date will be downloaded")
        

# ====================
# search in catalog
# ====================
if (PRODUCT_TYPE == "") and (SENSOR_MODE == ""):
    search_catalog = 'curl -k -o %s https://peps.cnes.fr/resto/api/collections/%s/search.json?%s\&startDate=%s\&completionDate=%s\&maxRecords=500' % (
        SEARCH_JSON_FILE, COLLECTION, query_geom, START_DATE, END_DATE)
else:
    search_catalog = 'curl -k -o %s https://peps.cnes.fr/resto/api/collections/%s/search.json?%s\&startDate=%s\&completionDate=%s\&maxRecords=500\&productType=%s\&sensorMode=%s' % (
        SEARCH_JSON_FILE, COLLECTION, query_geom, START_DATE, END_DATE, PRODUCT_TYPE, SENSOR_MODE)

if WINDOWS :
    search_catalog = search_catalog.replace('\&','^&')

print(search_catalog)
os.system(search_catalog)
time.sleep(5)

prod, download_dict, storage_dict, size_dict = parse_catalog(SEARCH_JSON_FILE)


# ====================
# Download
# ====================

if len(download_dict) == 0:
    print("No product matches the criteria")
else:
    # first try for the products on tape
    if dataset_path == None:
        dataset_path = os.getcwd()

    for prod in list(download_dict.keys()):
        file_exists = os.path.exists(("%s/%s.SAFE") % (dataset_path, prod)
                                     ) or os.path.exists(("%s/%s.zip") % (dataset_path, prod))
        if (not(NO_DOWNLOAD) and not(file_exists)):
            if storage_dict[prod] == "tape":
                tmticks = time.time()
                tmpfile = ("%s/tmp_%s.tmp") % (dataset_path, tmticks)
                print("\nStage tape product: %s" % prod)
                get_product = 'curl -o %s -k -u "%s:%s" https://peps.cnes.fr/resto/collections/%s/%s/download/?issuerId=peps &>/dev/null' % (
                    tmpfile, EMAIL, PASSWD, COLLECTION, download_dict[prod])
                os.system(get_product)
                if os.path.exists(tmpfile):
                    os.remove(tmpfile)

    NbProdsToDownload = len(list(download_dict.keys()))
    print("##########################")
    print("%d  products to download" % NbProdsToDownload)
    print("##########################")
    while (NbProdsToDownload > 0):
       # redo catalog search to update disk/tape status
        if (PRODUCT_TYPE == "") and (SENSOR_MODE == ""):
            search_catalog = 'curl -k -o %s https://peps.cnes.fr/resto/api/collections/%s/search.json?%s\&startDate=%s\&completionDate=%s\&maxRecords=500' % (
                SEARCH_JSON_FILE, COLLECTION, query_geom, START_DATE, END_DATE)
        else:
            search_catalog = 'curl -k -o %s https://peps.cnes.fr/resto/api/collections/%s/search.json?%s\&startDate=%s\&completionDate=%s\&maxRecords=500\&productType=%s\&sensorMode=%s' % (
                SEARCH_JSON_FILE, COLLECTION, query_geom, START_DATE, END_DATE, PRODUCT_TYPE, SENSOR_MODE)

        if WINDOWS :
            search_catalog = search_catalog.replace('\&','^&')

        os.system(search_catalog)
        time.sleep(2)

        prod, download_dict, storage_dict, size_dict = parse_catalog(SEARCH_JSON_FILE)

        NbProdsToDownload = 0
        # download all products on disk
        for prod in list(download_dict.keys()):
            file_exists = os.path.exists(("%s/%s.SAFE") % (dataset_path, prod)) or os.path.exists(("%s/%s.zip") % (dataset_path, prod))
            if (not(NO_DOWNLOAD) and not(file_exists)):
                if storage_dict[prod] == "disk":
                    tmticks = time.time()
                    tmpfile = ("%s/tmp_%s.tmp") % (dataset_path, tmticks)
                    print("\nDownload of product : %s" % prod)
                    get_product = 'curl -o %s -k -u "%s:%s" https://peps.cnes.fr/resto/collections/%s/%s/download/?issuerId=peps' % (
                        tmpfile, EMAIL, PASSWD, COLLECTION, download_dict[prod])
                    print(get_product)
                    os.system(get_product)
                    # check binary product, rename tmp file
                    if not os.path.exists(("%s/tmp_%s.tmp") % (dataset_path, tmticks)):
                        NbProdsToDownload += 1
                    else:
                         check_rename(tmpfile, size_dict[prod])

            elif file_exists:
                print("%s already exists" % prod)

        # download all products on tape
        for prod in list(download_dict.keys()):
            file_exists = os.path.exists(("%s/%s.SAFE") % (dataset_path, prod)
                                         ) or os.path.exists(("%s/%s.zip") % (dataset_path, prod))
            if (not(NO_DOWNLOAD) and not(file_exists)):
                if storage_dict[prod] == "tape" or storage_dict[prod] == "staging" :
                    NbProdsToDownload += 1

        if NbProdsToDownload > 0:
            print("##############################################################################")
            print("%d remaining products are on tape, lets's wait 1 minute before trying again" % NbProdsToDownload)
            print("##############################################################################")
            time.sleep(60)
            
            
# List all .zip folders
folder_zip = [i for i in [os.path.relpath(os.path.join(dataset_path, p)) for p in os.listdir(dataset_path)] if i.endswith('.zip')]

# Unzip folders 
print('Extracting all the files...')
for file_name in folder_zip: 
    with ZipFile(file_name, 'r') as zip: 
        zip.printdir() 
        # extracting all the files 
        print('Unzip File name:', file_name) 
        zip.extractall(dataset_path) 
print('Finished!')            
            
# List all .safe folders
folder_safe = [i for i in [os.path.relpath(os.path.join(dataset_path, p)) for p in os.listdir(dataset_path)] if i.endswith('.SAFE')]

# Copy and organize files
def folder_copy(image_path, path_dst):          
    for root, dirs, files in os.walk(image_path, path_dst): 
        os.makedirs(path_dst, exist_ok=True)
        for file in files:   
            fullpath = join(root, file)
            shutil.copy(fullpath, path_dst)
            #print('Image Name:', fullpath) 
            print('Image Name:', join(path_dst, file))  
            
# Looking for the "measurement" and  "IMG_DATA" directories (S1 and S2 sensors)
def folder_search():
    print('Copying the images to the peps directory...')
    for foldername in folder_safe:
        for path, dirs, filename in os.walk(foldername): #omit files, loop through later
            for dirname in dirs:
                fullpath = os.path.join(path, dirname)
                if "measurement" in dirname:
                    path_dst = os.path.join(output_path, 'measurement')
                    folder_copy(fullpath, path_dst)
                if "IMG_DATA" in dirname:
                    path_dst = os.path.join(output_path, 'IMG_DATA')
                    folder_copy(fullpath, path_dst)
    print('Finished!')
    
# Searching for metadata files
def metadata_search(output_path_metadata, folder_safe):
    print('Searching for metadata files...')
    for file_xml in folder_safe:
        file_rename = r.randint(0,9999)
        for fn in os.listdir(file_xml):
            if fn.endswith(('.xml')):
                shutil.copy(os.path.join(file_xml,fn), os.path.join(output_path_metadata, fn))
                new_file_rename =  str(file_rename) + '_' +  fn 
                os.rename(os.path.join(output_path_metadata, fn), os.path.join(output_path_metadata, new_file_rename)) 
                print('Metadata Name:', join(output_path_metadata, new_file_rename))   
    print('Finished')
    
# Call folder_search function
folder_search()

# Call  metadata_search function
metadata_search(output_path_metadata, folder_safe)
                
# Remove the "dataset_path" directory
shutil.rmtree(dataset_path)
while os.path.exists(dataset_path):
  pass
print('Remove all directory in the', dataset_path)
print('Finished!')  


if 'variables' in locals():
	variables.put("DATASET_PATH", output_path)
  
print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            328.34375
        </positionTop>
        <positionLeft>
            257.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Else">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            328.34375
        </positionTop>
        <positionLeft>
            385.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Continuation">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            328.34375
        </positionTop>
        <positionLeft>
            513.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Condition2">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
print('Searching satellite images...')
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <if continuation="Continuation2" else="Else2" target="Fetch_Satellite_Images_From_Copernicus">
          <script>
            <code language="cpython">
              <![CDATA[
SEARCH_ENGINE  = variables.get("SEARCH_ENGINE") 		 # Option host sites

if SEARCH_ENGINE.lower() == "copernicus" or SEARCH_ENGINE.lower() == "all":
    branch = "if"
else:
    branch = "else"
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            200.34375
        </positionTop>
        <positionLeft>
            769.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Fetch_Satellite_Images_From_Copernicus">
      <description>
        <![CDATA[ Load and return a Copernicus dataset including a 'metadata folder' with metadata files and 'images folder' containing satellite images according to the resolution & image band selected by user.

Please access https://peps.cnes.fr/rocket/#/register to create a new user account from Copernicus website.

Please add third party credentials (USER_NAME_COP and USER_PASS_COP) in the Scheduling & Orchestration interface â†’ Manage Third-Party Credentials to connect to Copernicus. ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:LIST(Sentinel-1, Sentinel-2, Sentinel-3, Sentinel-4, Sentinel-5,  Sentinel-5 Precursor, Sentinel-6)" name="PLATFORM_NAME" value="Sentinel-2"/>
        <variable inherited="false" name="FOOTPRINT" value="expected_search_footprints_s1"/>
        <variable inherited="false" model="PA:DATETIME(yyyy-MM-dd)" name="START_DATE" value="2019-12-30"/>
        <variable inherited="false" model="PA:DATETIME(yyyy-MM-dd)" name="END_DATE" value="2020-01-05"/>
        <variable inherited="false" model="PA:Boolean" name="USE_START_AND_END_DATE" value="True"/>
        <variable inherited="false" model="PA:LIST(10m, 20m, 60m)" name="SPATIAL_RESOLUTION" value="10m"/>
        <variable inherited="false" model="PA:LIST(All, B01, B02, B03, B04, B05, B06, B07, B08, B8A, B09, B10, B11, B12, TCI)" name="IMAGE_BAND" value="All"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/copernicus.png"/>
        <info name="task.documentation" value="MLOS/MLOSUserGuide.html#_satellite_imagery_bucket"/>
      </genericInformation>
      <pre>
        <script>
          <code language="cpython">
            <![CDATA[
import ssl, sys

if sys.version_info[0] < 3:
    try:
        from urllib2 import urlopen
    except ImportError:
        import pip
        pip.main(['install', 'request'])
        from urllib2 import urlopen
else:
    try:
        from urllib.request import urlopen
    except ImportError:
        import pip
        pip.main(['install', 'request'])
        from urllib.request import urlopen

PA_CATALOG_REST_URL = variables.get("PA_CATALOG_REST_URL")
FOOTPRINT = variables.get("FOOTPRINT")

satellite_imagery_resources_url = PA_CATALOG_REST_URL +"/buckets/satellite-imagery/resources/"+FOOTPRINT+"/raw"
print("satellite-imagery-resources-url: ", satellite_imagery_resources_url)

# This restores the same behavior as before.
context        = ssl._create_unverified_context()
json_file      = urlopen(satellite_imagery_resources_url, context=context).read()
json_content   = json_file.decode('utf-8')
json_file_name = FOOTPRINT + ".geojson"

f = open(json_file_name, "w")
f.write(json_content)
f.close()
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
__file__ = variables.get("PA_TASK_NAME")

import os
import sys
import uuid
import shutil
import zipfile
import datetime
import subprocess
import random as r
from zipfile import ZipFile
from os.path import join, exists, os, isfile

try:
    from sentinelsat.sentinel import SentinelAPI, read_geojson, geojson_to_wkt
except ImportError:
    subprocess.call([sys.executable, "-m", "pip", "install", 'sentinelsat'])
finally:
    from sentinelsat.sentinel import SentinelAPI, read_geojson, geojson_to_wkt


if 'variables' in locals():
  PLATFORM_NAME  = variables.get("PLATFORM_NAME")                        # Specific platform [Sentinel-1, Sentinel-2, Sentinel-3, Sentinel-4, Sentinel-5,  Sentinel-5, Precursor, Sentinel-6]
  FOOTPRINT      = variables.get("FOOTPRINT")                            # Geojson file search_footprints.geojson with footprints of the query result
  FOOTPRINT      = FOOTPRINT + ".geojson"
  FOOTPRINT_FILE = os.path.join(os.getcwd(), FOOTPRINT)
  START_DATE     = variables.get("START_DATE")                           # Start date of the query in the format YYYYMMDD
  END_DATE       = variables.get("END_DATE")                             # End date of the query in the format YYYYMMDD
  USER_NAME      = credentials.get("USER_NAME_COP")                      # User email
  USER_PASS      = credentials.get("USER_PASS_COP")                      # User password
  OUTPUT_PATH    = variables.get("OUTPUT_PATH")                          # Folder output path 
  USE_START_AND_END_DATE = bool(variables.get("USE_START_AND_END_DATE")) # True or False to use start and end data
  SPATIAL_RESOLUTION = variables.get("SPATIAL_RESOLUTION")               # Spatial resolutions of 10m, 20m and 60m
  IMAGE_BAND = variables.get("IMAGE_BAND")                               # Image band (TC1,  B01, B02, B03, 0B4, 0B5, 0B6,B07, B08, B8A, B09, B10, B11, B12)																
    
# Get an unique ID
ID = str(uuid.uuid4())

# Define the current 'dataset_path'
os.chdir(OUTPUT_PATH)

dataset_path = join(OUTPUT_PATH, ID, 'dataset')
output_path = join(OUTPUT_PATH, ID, 'copernicus')
output_path_metadata = join(OUTPUT_PATH, ID, 'copernicus', 'metadata')

# Create the folders
os.makedirs(dataset_path, exist_ok=True)
os.makedirs(output_path, exist_ok=True)
os.makedirs(output_path_metadata, exist_ok=True)

# Define path to download the dataset
os.chdir(dataset_path)

print('The path input Copernicus dataset', dataset_path)
print('The path output Copernicus dataset', output_path)

# Data format
start_date_format = START_DATE.replace('-', '')
end_date_format =  END_DATE.replace('-', '')

#  SentinelAPI
api = SentinelAPI(USER_NAME, USER_PASS)
footprint = geojson_to_wkt(read_geojson(FOOTPRINT_FILE))

if USE_START_AND_END_DATE == True:
    products = api.query(footprint, date=(start_date_format, end_date_format), platformname=PLATFORM_NAME)
else:
    #products = api.query(footprint, platformname=PLATFORM_NAME)
    products = api.query(footprint)
api.download_all(products)

#print(os.listdir(dataset_path))

# List all .zip folders
folder_zip = [i for i in [os.path.relpath(os.path.join(dataset_path, p)) for p in os.listdir(dataset_path)] if i.endswith('.zip')]

# Unzip folders 
print('**********************************************************************************************************')
print('Extracting all the files...')
print('**********************************************************************************************************')
for file_name in folder_zip: 
    with ZipFile(file_name, 'r') as zip: 
        zip.printdir() 
        print('Unzip file name: {} '.format(file_name))
        zip.extractall(dataset_path) 
                       
# List all .safe folders
folder_safe = [i for i in [os.path.relpath(os.path.join(dataset_path, p)) for p in os.listdir(dataset_path)] if i.endswith('.SAFE')]

# Rename SPATIAL_RESOLUTION variable
spatial_resolution_check = 'R' + SPATIAL_RESOLUTION
    
# Copy and organize files
def folder_copy(image_path):
    for root, dirs, files in os.walk(image_path):
        for dire in dirs:
            os.makedirs(os.path.join(output_path, dire) , exist_ok=True)
            fullpath = os.path.join(root, dire)
            files2 = os.listdir(fullpath) 
            for filefull in files2:
                filepath = os.path.join(fullpath, filefull)
                print('Image name: {} '.format(os.path.join(output_path, dire,  filefull)))
                shutil.copy(filepath, os.path.join(output_path, dire))

# Looking for the "IMG_DATA" directory 
def images_search():
    print('**********************************************************************************************************')
    print('Copying the images to the copernicus directory...')
    print('**********************************************************************************************************')
    for foldername in folder_safe:
        for path, dirs, filename in os.walk(foldername): #omit files, loop through later
            for dirname in dirs:
                fullpath = os.path.join(path, dirname)
                if "IMG_DATA" in dirname:
                    folder_copy(fullpath)
    
# Searching for metadata files
def metadata_search(output_path_metadata, folder_safe):
    print('**********************************************************************************************************')
    print('Searching for  metadata files...')
    print('**********************************************************************************************************')
    for file_xml in folder_safe:
        file_rename = r.randint(0,9999)
        for fn in os.listdir(file_xml):
            if fn.endswith(('.xml')):
                shutil.copy(os.path.join(file_xml,fn), os.path.join(output_path_metadata, fn))
                new_file_rename =  str(file_rename) + '_' +  fn 
                os.rename(os.path.join(output_path_metadata, fn), os.path.join(output_path_metadata, new_file_rename)) 
                print('Metadata name: {} '.format(join(output_path_metadata, new_file_rename)))
                
# Searching for spatial resolutions (R10m, R20m and R60m)
def resolution_search():
    print('**********************************************************************************************************')
    print('Selecting image by resolution and metadata files')
    print('**********************************************************************************************************')
    image_resolution  = [name for name in os.listdir(output_path) if not name.endswith('DS_Store')] 
    for foldername in image_resolution:
        fullpath = os.path.join(output_path, foldername)
        print('File name: {} '.format(fullpath)) if spatial_resolution_check in foldername or "metadata" in foldername else shutil.rmtree(fullpath)
    
# Searching for image band (All,  B01, B02, B03, B04, B05, B06,B07, B08, B8A, B09, B10, B11, B12, TC1)
def image_band(image_band_check):
    print('**********************************************************************************************************')
    print('Selecting {} image band..."'.format(image_band_check)) 
    print('**********************************************************************************************************')
    resolution_path = join(output_path, spatial_resolution_check)
    image_band_list  = [name for name in os.listdir(resolution_path) if not name.endswith('DS_Store')]
    for foldername in image_band_list:
        fullpath = os.path.join(resolution_path, foldername)
        print('Image name: {} '.format(fullpath)) if image_band_check in foldername or image_band_check == 'All' else os.remove(fullpath)
        
if PLATFORM_NAME == 'Sentinel-2':
	# Call folder_search function
	images_search()
 
	# Call metadata_search function 
	metadata_search(output_path_metadata, folder_safe)

	# Call resolution_search function
	resolution_search()

	# Call image_search function
	image_band(IMAGE_BAND)
    
	# Remove the "dataset_path" directory
	shutil.rmtree(dataset_path)
	while os.path.exists(dataset_path):
  		pass

if 'variables' in locals():
  variables.put("DATASET_PATH", output_path)

print("END " + __file__)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            328.34375
        </positionTop>
        <positionLeft>
            641.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Else2">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            328.34375
        </positionTop>
        <positionLeft>
            769.984375
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Continuation2">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            328.34375
        </positionTop>
        <positionLeft>
            897.984375
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2080px;
            height:2236px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-195.34375px;left:-252.984375px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_157" style="top: 200.344px; left: 385.984px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Condition</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_160" style="top: 328.344px; left: 257.984px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Load and return a PEPS dataset including a
'metadata folder' with metadata files and 'images folder' containing satellite images.

Please access https://peps.cnes.fr/rocket/#/register to create a new user account from Peps website.

Please add third party credentials (USER_NAME_PEPS and USER_PASS_PEPS) in the Scheduling &amp; Orchestration interface â†’ Manage Third-Party Credentials to connect to PEPS."><img src="/automation-dashboard/styles/patterns/img/wf-icons/peps-logo.png" width="20px">&nbsp;<span class="name">Fetch_Satellite_Images_From_PEPS</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_163" style="top: 328.344px; left: 385.984px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Else</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_166" style="top: 328.344px; left: 513.984px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Continuation</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_169" style="top: 200.344px; left: 769.984px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Condition2</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_ active-task" id="jsPlumb_1_172" style="top: 328.344px; left: 641.984px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Load and return a Copernicus dataset including a 'metadata folder' with metadata files and 'images folder' containing satellite images according to the resolution &amp; image band selected by user.

Please access https://peps.cnes.fr/rocket/#/register to create a new user account from Copernicus website.

Please add third party credentials (USER_NAME_COP and USER_PASS_COP) in the Scheduling &amp; Orchestration interface â†’ Manage Third-Party Credentials to connect to Copernicus."><img src="/automation-dashboard/styles/patterns/img/wf-icons/copernicus.png" width="20px">&nbsp;<span class="name">Fetch_Satellite_Images_From_Copernicus</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_175" style="top: 328.344px; left: 769.984px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Else2</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_178" style="top: 328.344px; left: 897.984px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Continuation2</span></a></div><svg style="position:absolute;left:247.5px;top:239.5px" width="149" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 138 50 128 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M15.734015999999999,60.999424000000005 L36.77298385959016,58.47715688426225 L28.30356794508451,54.834493838204 L30.608053697794155,45.90760493917774 L15.734015999999999,60.999424000000005" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M15.734015999999999,60.999424000000005 L36.77298385959016,58.47715688426225 L28.30356794508451,54.834493838204 L30.608053697794155,45.90760493917774 L15.734015999999999,60.999424000000005" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_186" style="position: absolute; transform: translate(-50%, -50%); left: 321.5px; top: 283.5px;">if</div><svg style="position:absolute;left:370.98171321138256px;top:239.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#00f" fill="#00f" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#00f" fill="#00f" transform="translate(15.018286788617468,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_190" style="position: absolute; transform: translate(-50%, -50%); left: 378px; top: 283.5px;">else</div><svg style="position:absolute;left:375.5px;top:239.5px" width="149" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 128 88 C 138 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M112.265984,60.999424000000005 L97.39194630220584,45.90760493917774 L99.69643205491549,54.834493838204 L91.22701614040983,58.47715688426225 L112.265984,60.999424000000005" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M112.265984,60.999424000000005 L97.39194630220584,45.90760493917774 L99.69643205491549,54.834493838204 L91.22701614040983,58.47715688426225 L112.265984,60.999424000000005" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_194" style="position: absolute; transform: translate(-50%, -50%); left: 449.5px; top: 283.5px;">continuation</div><svg style="position:absolute;left:631.5px;top:239.5px" width="149" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 138 50 128 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M15.734015999999999,60.999424000000005 L36.77298385959016,58.47715688426225 L28.30356794508451,54.834493838204 L30.608053697794155,45.90760493917774 L15.734015999999999,60.999424000000005" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M15.734015999999999,60.999424000000005 L36.77298385959016,58.47715688426225 L28.30356794508451,54.834493838204 L30.608053697794155,45.90760493917774 L15.734015999999999,60.999424000000005" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_200" style="position: absolute; transform: translate(-50%, -50%); left: 705.5px; top: 283.5px;">if</div><svg style="position:absolute;left:754.9817132113825px;top:239.5px" width="15.518286788617468" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 -10 50 0 0 " transform="translate(15.018286788617468,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#00f" fill="#00f" transform="translate(15.018286788617468,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-4.427999999999998,66.303232 L-1.2615185838583702,45.35154005301801 L-7.026331880366543,52.546463795240896 L-15.018286788617468,47.94987193338456 L-4.427999999999998,66.303232" class="" stroke="#00f" fill="#00f" transform="translate(15.018286788617468,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_204" style="position: absolute; transform: translate(-50%, -50%); left: 762px; top: 283.5px;">else</div><svg style="position:absolute;left:759.5px;top:239.5px" width="149" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 128 88 C 138 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M112.265984,60.999424000000005 L97.39194630220584,45.90760493917774 L99.69643205491549,54.834493838204 L91.22701614040983,58.47715688426225 L112.265984,60.999424000000005" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M112.265984,60.999424000000005 L97.39194630220584,45.90760493917774 L99.69643205491549,54.834493838204 L91.22701614040983,58.47715688426225 L112.265984,60.999424000000005" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_208" style="position: absolute; transform: translate(-50%, -50%); left: 833.5px; top: 283.5px;">continuation</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 426px; top: 230px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 376px; top: 230px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 348px; top: 358px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 248px; top: 318px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 426px; top: 358px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 376px; top: 318px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 554px; top: 358px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 504px; top: 318px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 810px; top: 230px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 760px; top: 230px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 744px; top: 358px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 632px; top: 318px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 810px; top: 358px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 760px; top: 318px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 938px; top: 358px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 888px; top: 318px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
