<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.11"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"
    name="ocr" projectName="demo"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2"
>
  <variables>
    <variable name="pdf_file" value="http://conorlastowka.com/book/CitationNeededBook-Sample.pdf" />
  </variables>
  <description>
    <![CDATA[ an ocr workflow working on ProActive platform try showing an ocr job on a pdf. this workflow will use the try platform node and can burst on Azure node source (if installed) ]]>
  </description>
  <genericInformation>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ocr_icon.png"/>
    <info name="NODESOURCENAME" value="OCRNodeSourceAzure"/>
    <info name="PYTHON_COMMAND" value="python2"/>
  </genericInformation>
  <taskFlow>
    <task name="Linux_Bash_Task" >
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <selection>
        <script type="static">
          <code language="groovy">
            <![CDATA[
if ((java.net.InetAddress.getLocalHost().toString() == "try.activeeon.com/127.0.1.1") || (System.getProperty("proactive.node.nodesource") == "OCRNodeSourceAzure")){
selected = true;
print('true');
} else {
selected = false;
print('false');
}
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
# pip install pdf2image
# echo O | sudo apt install poppler-utils
# wget 'https://www.activeeon.com/resources/activeeon-productsheet-proactive-workflows-scheduling-en.pdf'
wget $variables_pdf_file
# pip install pillow
# sudo pip install pytesseract
# sudo pip install opencv-python
# echo O | sudo apt install tesseract-ocr
# echo O | sudo apt install libtesseract-dev

cd /usr/local/lib/python3.4/dist-packages
ls -l
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="*.pdf" accessMode="transferToGlobalSpace"/>
      </outputFiles>
      <metadata>
        <positionTop>
            211
        </positionTop>
        <positionLeft>
            952.75
        </positionLeft>
      </metadata>
    </task>
    <task name="Python_Task" >
      <description>
        <![CDATA[ The simplest task, ran by a python engine. ]]>
      </description>
      <depends>
        <task ref="Linux_Bash_Task"/>
      </depends>
      <inputFiles>
        <files  includes="*.pdf" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <selection>
        <script type="static">
          <code language="groovy">
            <![CDATA[
if ((java.net.InetAddress.getLocalHost().toString() == "try.activeeon.com/127.0.1.1") || (System.getProperty("proactive.node.nodesource") == "OCRNodeSourceAzure")){
selected = true;
print('true');
} else {
selected = false;
print('false');
}
]]>
          </code>
        </script>
      </selection>
      <pre>
        <script>
          <code language="bash">
            <![CDATA[
sudo apt install poppler-utils -y
sudo pip install pdf2image
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
# Add 'PYTHON_COMMAND' Generic Info to run a specific Python version
# Go to http://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_python_script_engine for more info
import platform
import os
import ntpath
from pdf2image import convert_from_path

# print("The current version of python you are using is: " + platform.python_version())
# print("Hello World")

# images = convert_from_path('activeeon-productsheet-proactive-workflows-scheduling-en.pdf')
# filename = os.path.splitext('activeeon-productsheet-proactive-workflows-scheduling-en.pdf')[0]

def path_leaf(path):
    head, tail = ntpath.split(path)
    return tail or ntpath.basename(head)

images = convert_from_path(path_leaf(variables.get("pdf_file")))
filename = os.path.splitext(path_leaf(variables.get("pdf_file")))[0]

print (filename)
images_name = []

for idx, image in enumerate(images):
    image.save('out'+ str(idx) +'.jpg', 'JPEG')
    images_name.append('out'+ str(idx) +'.jpg')
    
variables.put("image_name_array", images_name)    
variables.put("num_imgs", idx + 1)
variables.put("filename", filename)
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="out*" accessMode="transferToUserSpace"/>
      </outputFiles>
      <metadata>
        <positionTop>
            341
        </positionTop>
        <positionLeft>
            948.75
        </positionLeft>
      </metadata>
    </task>
    <task name="Split" >
      <description>
        <![CDATA[ This task defines some input, here strings to be processed. ]]>
      </description>
      <genericInformation>
        <info name="TASK.ICON" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="Python_Task"/>
      </depends>
      <selection>
        <script type="static">
          <code language="groovy">
            <![CDATA[
if ((java.net.InetAddress.getLocalHost().toString() == "try.activeeon.com/127.0.1.1") || (System.getProperty("proactive.node.nodesource") == "OCRNodeSourceAzure")){
selected = true;
print('true');
} else {
selected = false;
print('false');
}
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
image_name = variables.get("image_name_array")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <replicate>
          <script>
            <code language="groovy">
              <![CDATA[
runs=variables.get("num_imgs")
]]>
            </code>
          </script>
        </replicate>
      </controlFlow>
      <metadata>
        <positionTop>
            471
        </positionTop>
        <positionLeft>
            949.75
        </positionLeft>
      </metadata>
    </task>
    <task name="Process" >
      <description>
        <![CDATA[ This task will be replicated according to the 'runs' value specified in
				the replication script.
				The replication index is used in each task's instance to select the
				input. ]]>
      </description>
      <genericInformation>
        <info name="TASK.ICON" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="OCR_task"/>
      </depends>
      <inputFiles>
        <files  includes="*.jpg" accessMode="transferFromUserSpace"/>
      </inputFiles>
      <selection>
        <script type="static">
          <code language="groovy">
            <![CDATA[
if ((java.net.InetAddress.getLocalHost().toString() == "try.activeeon.com/127.0.1.1") || (System.getProperty("proactive.node.nodesource") == "OCRNodeSourceAzure")){
selected = true;
print('true');
} else {
selected = false;
print('false');
}
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import com.google.common.net.MediaType

int replication = variables.get('PA_TASK_REPLICATION')

file_name = variables.get("image_name_array")[replication]

file = new File(file_name)
result = file.getBytes()
resultMetadata.put("file.extension", ".jpg")
resultMetadata.put("content.type", MediaType.JPEG.toString())
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            727
        </positionTop>
        <positionLeft>
            949.75
        </positionLeft>
      </metadata>
    </task>
    <task name="Merge" >
      <description>
        <![CDATA[ As a merge operation, we simply print the results from previous tasks. ]]>
      </description>
      <genericInformation>
        <info name="TASK.ICON" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_replicate.png"/>
      </genericInformation>
      <depends>
        <task ref="Process"/>
      </depends>
      <inputFiles>
        <files  includes="*.jpg" accessMode="transferFromUserSpace"/>
        <files  includes="*.txt" accessMode="transferFromUserSpace"/>
      </inputFiles>
      <selection>
        <script type="static">
          <code language="groovy">
            <![CDATA[
if ((java.net.InetAddress.getLocalHost().toString() == "try.activeeon.com/127.0.1.1") || (System.getProperty("proactive.node.nodesource") == "OCRNodeSourceAzure")){
selected = true;
print('true');
} else {
selected = false;
print('false');
}
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
filenames=[]
for x in range (variables.get("num_imgs")):
	filenames.append(str(variables.get('filename') + "_" + str(x) + ".txt"))
    



with open(variables.get('filename') + "_merged.txt", 'w') as outfile:
    for fname in filenames:
        with open(fname) as infile:
            for line in infile:
                outfile.write(line)
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="*merged.txt" accessMode="transferToUserSpace"/>
      </outputFiles>
      <metadata>
        <positionTop>
            855
        </positionTop>
        <positionLeft>
            949.75
        </positionLeft>
      </metadata>
    </task>
    <task name="OCR_task" >
      <description>
        <![CDATA[ The simplest task, ran by a python engine. ]]>
      </description>
      <depends>
        <task ref="Split"/>
      </depends>
      <inputFiles>
        <files  includes="*.jpg" accessMode="transferFromUserSpace"/>
      </inputFiles>
      <selection>
        <script type="static">
          <code language="groovy">
            <![CDATA[
if ((java.net.InetAddress.getLocalHost().toString() == "try.activeeon.com/127.0.1.1") || (System.getProperty("proactive.node.nodesource") == "OCRNodeSourceAzure")){
selected = true;
print('true');
} else {
selected = false;
print('false');
}
]]>
          </code>
        </script>
      </selection>
      <pre>
        <script>
          <code language="bash">
            <![CDATA[

]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import cv2
import sys
import pytesseract

replication = variables.get('PA_TASK_REPLICATION')

#file_name = variables.get("image_name_array")[replication]
print (variables.get("image_name_array")[replication])
# Read image path from command line
imPath = variables.get("image_name_array")[replication]

# imPath = 'out1.jpg'
# Uncomment the line below to provide path to tesseract manually
# pytesseract.pytesseract.tesseract_cmd = ' /usr/local/lib/python2.7/dist-packages/tesseract'

# Define config parameters.
# '-l eng'  for using the English language
# '--oem 1' for using LSTM OCR Engine
config = ('-l eng --oem 1 --psm 3')

# Read image from disk
im = cv2.imread(imPath, cv2.IMREAD_COLOR)

# Run tesseract OCR on image
text = pytesseract.image_to_string(im, config=config).encode('utf-8')

# Print recognized text
#print(text)

filetxt = variables.get('filename')+ "_" + str(replication) + ".txt"
print (filetxt)
#Create file 
f = open(filetxt, "w")
f.write(text)
]]>
          </code>
        </script>
      </scriptExecutable>
      <outputFiles>
        <files  includes="*.txt" accessMode="transferToUserSpace"/>
      </outputFiles>
      <metadata>
        <positionTop>
            599
        </positionTop>
        <positionLeft>
            948.75
        </positionLeft>
      </metadata>
    </task>
    <task name="download_result" >
      <depends>
        <task ref="Merge"/>
      </depends>
      <inputFiles>
        <files  includes="*merged.txt" accessMode="transferFromUserSpace"/>
      </inputFiles>
      <selection>
        <script type="static">
          <code language="groovy">
            <![CDATA[
if ((java.net.InetAddress.getLocalHost().toString() == "try.activeeon.com/127.0.1.1") || (System.getProperty("proactive.node.nodesource") == "OCRNodeSourceAzure")){
selected = true;
print('true');
} else {
selected = false;
print('false');
}
]]>
          </code>
        </script>
      </selection>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import com.google.common.net.MediaType

// int replication = variables.get('PA_TASK_REPLICATION')

// file_name = variables.get("image_name_array")[replication]
file_name = variables.get("filename") + "_merged.txt"

file = new File(file_name)
result = file.getBytes()
resultMetadata.put("file.extension", ".txt")
resultMetadata.put("content.type", MediaType.ANY_TEXT_TYPE.toString())
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            983
        </positionTop>
        <positionLeft>
            949.75
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
</job>