<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.13" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd"  name="Scala_Spark_Pi" projectName="01. Basic MapReduce Examples" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
  <variables>
    <variable name="nb_random_points" value="10000" model=""/>
    <variable name="spark_service_instance_id" value="xx"  model="PA:NOT_EMPTY_STRING"/>
  </variables>
  <description>
    <![CDATA[ A workflow to submit a Spark job from a docker container, to estimate Pi. This workflow requires to start the PaaS Service Docker_Swarm and Spark before. Set the spark_service_instance_id parameter to the running Spark service instance id (also exposed in the results of the running Spark platform job). ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="big-data"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>

    <task name="retrieve_service_variables"
          fork="true">
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Retrieve_variables_from_service_instance_id/raw" language="groovy">
            <arguments>
              <argument value="$spark_service_instance_id"/>
              <argument value="spark_network_name"/>
              <argument value="spark_network_name"/>
              <argument value="spark_master_url"/>
              <argument value="spark_master_url"/>
              <argument value="spark_token_name"/>
              <argument value="INSTANCE_NAME"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
    </task>


    <task name="Spark_Pi" 
         fork="true">
      <description>
        <![CDATA[ A Scala Spark task to estimate Pi. ]]>
      </description>
      <genericInformation>
        <info name="PRE_SCRIPT_AS_FILE" value="script.scala"/>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
        <info name="NODE_ACCESS_TOKEN" value="$spark_token_name"/>
      </genericInformation>
      <depends>
        <task ref="retrieve_service_variables"/>
      </depends>
      <pre>
        <script>
          <code language="scalaw">
            <![CDATA[
import scala.math.random
import org.apache.spark.sql.SparkSession

/** Computes an approximation to pi */
object SparkPi {
  def main() {
    val spark = SparkSession
      .builder
      .appName("Spark Pi")
      .getOrCreate()
    val sc = spark.sparkContext

    // Get args
    val args = sc.getConf.get("spark.driver.args").split("\\s+")
    val n = args(0).toInt

    // Compute
    val partitions = 2
    val count = sc.parallelize(1 until (n + 1), partitions).map { i =>
      val x = random * 2 - 1
      val y = random * 2 - 1
      if (x*x + y*y <= 1) 1 else 0
    }.reduce(_ + _)

    // Print
    println(s"Pi is roughly ${4.0 * count / n}")
    spark.stop()
  }
}

SparkPi.main()
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// Retrieve variables
def spark_network_name = variables.get("spark_network_name")
def spark_master_url = variables.get("spark_master_url")
def nb_random_points = variables.get("nb_random_points")

// Submit the Spark job
def spark_shell_command = "/usr/local/spark/bin/spark-shell --driver-memory 800m --executor-memory 800m --master " + spark_master_url + " --jars /usr/local/spark/jars/* -I /localspace/script.scala --conf spark.driver.args='" + nb_random_points + "'"
cmd = ["docker", "run", "--rm", "--net", spark_network_name, "-v", localspace + ":/localspace", "activeeon/hdfs-spark:latest", "bash", "-c", spark_shell_command]
println cmd

cmd.execute().waitForProcessOutput(System.out, System.err)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            308.125
        </positionTop>
        <positionLeft>
            514
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2830px;
            height:3392px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-303.125px;left:-509px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable active-task" id="jsPlumb_1_49" style="top: 308.133px; left: 514px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A workflow to submit a Spark job from a docker container, to estimate Pi. This workflow requires a Spark platform."><img src="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" width="20px">&nbsp;<span class="name">Spark_Pi</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 554px; top: 338px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
