<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="Spark_Pi" projectName="Basic Big Data" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="slices" value="100" />
    <variable name="service_instance_id" value="1" model="PA:LONG"/>
  </variables>
  <description>
    <![CDATA[ A workflow to submit a Spark job from a docker container, to estimate Pi. This workflow requires a Spark platform. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="big-data"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
    <info name="Documentation" value="https://ow2-proactive.github.io/proactive-examples/DockerSwarm/resources/doc/V1/activeeon-deploy-swarm-hdfs-spark.pdf"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Spark_Pi" >
      <description>
        <![CDATA[ A workflow to submit a Spark job from a docker container, to estimate Pi. This workflow requires a Spark platform. ]]>
      </description>
      <genericInformation>
        <info name="PRE_SCRIPT_AS_FILE" value="script.scala"/>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
      </genericInformation>
      <pre>
        <script>
          <code language="scalaw">
            <![CDATA[
import scala.math.random
import org.apache.spark.sql.SparkSession

/** Computes an approximation to pi */
object SparkPi {
  def main() {
    val spark = SparkSession
      .builder
      .appName("Spark Pi")
      .getOrCreate()
    val sc = spark.sparkContext

    // Get args
    val args = sc.getConf.get("spark.driver.args").split("\\s+")
    val slices = if (args.length > 0) args(0).toInt else 2

    // Compute
    val n = math.min(100000L * slices, Int.MaxValue).toInt // avoid overflow
    val count = sc.parallelize(1 until n, slices).map { i =>
      val x = random * 2 - 1
      val y = random * 2 - 1
      if (x*x + y*y <= 1) 1 else 0
    }.reduce(_ + _)

    // Print
    println(s"Pi is roughly ${4.0 * count / (n - 1)}")
    spark.stop()
  }
}

SparkPi.main()
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData

// Retrieve variables
def service_instance_id = variables.get("service_instance_id") as Long
def slices = variables.get("slices")

// Define other variables
def pca_url = variables.get('PA_CLOUD_AUTOMATION_REST_URL')

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()

// Connect to APIs
def api_client = new ApiClient()
api_client.setBasePath(pca_url)
def service_instance_rest_api = new ServiceInstanceRestApi(api_client)

// Get the service instance variables
def service_instance_data = service_instance_rest_api.getServiceInstanceUsingGET(sessionId, service_instance_id)
def service_instance_variables = service_instance_data.getVariables()
def network_name = service_instance_variables.get("network_name")
def instance_name = service_instance_variables.get("instance_name")

// Submit the Spark job
def spark_shell_command = "/usr/local/spark/bin/spark-shell --driver-memory 800m --executor-memory 800m --master spark://" + instance_name + "-spark-master:7077 --jars /usr/local/spark/jars/* -I /localspace/script.scala --conf spark.driver.args='" + slices + "'"
cmd = ["docker", "run", "--rm", "--net", network_name, "-v", localspace + ":/localspace", "activeeon/hdfs-spark:2.0", "bash", "-c", spark_shell_command]

cmd.execute().waitForProcessOutput(System.out, System.err)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
          308.1333312988281
        </positionTop>
        <positionLeft>
          514
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2735px;
            height:2924px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-303.1333312988281px;left:-509px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" style="top: 308.133px; left: 514px;" id="jsPlumb_1_190"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" width="20px">&nbsp;<span class="name">Spark_Pi</span></a></div><div style="position: absolute; height: 20px; width: 20px; left: 554px; top: 338px;" class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>