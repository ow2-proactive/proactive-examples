<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.11" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="1" name="Tensorboard_Realtime_CIFAR10_Training" onTaskError="cancelJob" priority="normal" projectName="4. Tensorboard Workflows" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd">
  <variables>
    <variable model="PA:Boolean" name="DOCKER_ENABLED" value="True"/>
    <variable model="PA:LIST(activeeon/dlm3,activeeon/cuda,activeeon/tensorflow:latest,activeeon/tensorflow:latest-gpu)" name="DOCKER_IMAGE" value="activeeon/dlm3"/>
    <variable model="PA:Boolean" name="DOCKER_GPU_ENABLED" value="False"/>
    <variable name="MOUNT_LOG_PATH" value="/shared/$INSTANCE_NAME"/>
    <variable name="DOCKER_LOG_PATH" value="/graphs/$INSTANCE_NAME"/>
    <variable name="INSTANCE_NAME" value="tensorboard-server"/>
    <variable name="NODE_SOURCE_NAME" value=""/>
    <variable name="NODE_ACCESS_TOKEN" value=""/>
  </variables>
  <description>
    <![CDATA[ Show an example of real-time using Tensorboard for training a CNN using CIFAR10 database. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="data-visualization"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
<info name="Documentation" value="https://doc.activeeon.com/latest/PCA/PCAUserGuide.html"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task name="Start_Tensorboard" onTaskError="cancelJob">
      <description>
        <![CDATA[ Start the Tensorboard server as a service. ]]>
      </description>
      <variables>
        <variable inherited="false" name="SERVICE_ID" value="Tensorboard"/>
        <variable inherited="true" name="INSTANCE_NAME" value="tensorboard-server"/>
        <variable inherited="true" name="MOUNT_LOG_PATH" value="/shared"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/PCA/PCAUserGuide.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Service_Start/raw">
            <arguments>
              <argument value="MOUNT_LOG_PATH"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            205.546875
        </positionTop>
        <positionLeft>
            461.796875
        </positionLeft>
      </metadata>
    </task>
    <task name="CIFAR10_Training">
      <description>
        <![CDATA[ Train a simple Tensorflow/Tensorboard script ]]>
      </description>
      <variables>
        <variable inherited="true" name="DOCKER_LOG_PATH" value="/graphs"/>
        <variable inherited="true" name="MOUNT_LOG_PATH" value="/shared"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/keras.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/MLOS/MLOSUserGuide.html#_segnet"/>
        <info name="NODE_ACCESS_TOKEN" value="$NODE_ACCESS_TOKEN"/>
      </genericInformation>
      <depends>
        <task ref="Start_Tensorboard"/>
      </depends>
      <selection>
        <script type="static">
          <code language="groovy">
            <![CDATA[
selected = false
NODE_SOURCE_NAME = variables.get("NODE_SOURCE_NAME")
if (NODE_SOURCE_NAME) {
	selected = (System.getProperty("proactive.node.nodesource").equals(NODE_SOURCE_NAME));
} else {
    selected = true
}
]]>
          </code>
        </script>
      </selection>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
#%% fork environment (python)
import os

DOCKER_ENABLED = True
if variables.get("DOCKER_ENABLED") is not None:
    if str(variables.get("DOCKER_ENABLED")).lower() == 'false':
        DOCKER_ENABLED = False

DOCKER_IMAGE = 'activeeon/dlm3'
if variables.get("DOCKER_IMAGE") is not None:
    DOCKER_IMAGE = variables.get("DOCKER_IMAGE")

MOUNT_LOG_PATH = None
if variables.get("MOUNT_LOG_PATH") is not None:
    MOUNT_LOG_PATH = variables.get("MOUNT_LOG_PATH")

DOCKER_LOG_PATH = None
if variables.get("DOCKER_LOG_PATH") is not None:
    DOCKER_LOG_PATH = variables.get("DOCKER_LOG_PATH")

DOCKER_GPU_ENABLED = False
if variables.get("DOCKER_GPU_ENABLED") is not None:
    if str(variables.get("DOCKER_GPU_ENABLED")).lower() == 'true':
        DOCKER_GPU_ENABLED = True

CUDA_ENABLED = False
CUDA_HOME = os.getenv('CUDA_HOME', None)
CUDA_HOME_DEFAULT = '/usr/local/cuda'
if CUDA_HOME is not None:
    if os.path.isdir(CUDA_HOME) == True:
        CUDA_ENABLED = True
else:
    if os.path.isdir(CUDA_HOME_DEFAULT) == True:
        CUDA_ENABLED = True

DOCKER_RUN_CMD = 'docker run '
if DOCKER_GPU_ENABLED and CUDA_ENABLED:
    DOCKER_RUN_CMD += '--runtime=nvidia '

print('Fork environment info...')
print('DOCKER_ENABLED:     ' + str(DOCKER_ENABLED))
print('DOCKER_IMAGE:       ' + DOCKER_IMAGE)
print('DOCKER_GPU_ENABLED: ' + str(DOCKER_GPU_ENABLED))
print('DOCKER_RUN_CMD:     ' + DOCKER_RUN_CMD)

if DOCKER_ENABLED == True:
    # Prepare Docker parameters
    containerName = DOCKER_IMAGE
    dockerRunCommand =  DOCKER_RUN_CMD
    dockerParameters = '--rm '
    # Prepare ProActive home volume
    paHomeHost = variables.get("PA_SCHEDULER_HOME")
    paHomeContainer = variables.get("PA_SCHEDULER_HOME")
    proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' '
    # Prepare working directory (For Dataspaces and serialized task file)
    workspaceHost = localspace
    workspaceContainer = localspace
    workspaceVolume = '-v '+localspace +':'+localspace+' '
    # Prepare working directory (For Tensorboard)
    logPathVolume = ''
    if MOUNT_LOG_PATH is not None and DOCKER_LOG_PATH is not None:
        logPathVolume = '-v '+MOUNT_LOG_PATH+':'+DOCKER_LOG_PATH+' '
    # Prepare container working directory
    containerWorkingDirectory = '-w '+workspaceContainer+' '
    # Specify the user
    #user_param = '--user 1000:1000 '
    # Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node
    preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + logPathVolume + containerWorkingDirectory + containerName

    print('DOCKER_FULL_CMD:    ' + preJavaHomeCmd)
else:
    print("Fork environment disabled")
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="bash">
            <![CDATA[
#install your required Tensorflow version
pip install tensorflow==1.5
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
# import the required libraries
import os
import keras
import numpy as np

from keras.datasets import cifar10
from keras.models import Sequential
from keras.layers import Dense, Flatten, Dropout, Activation
from keras.layers import Conv2D, MaxPooling2D
from keras.callbacks import TensorBoard

# https://github.com/tensorflow/tensorflow/issues/24828
from tensorflow.compat.v1 import ConfigProto
from tensorflow.compat.v1 import InteractiveSession
config = ConfigProto()
config.gpu_options.allow_growth = True
session = InteractiveSession(config=config)

# Check if docker is enabled
DOCKER_ENABLED = True
if variables.get("DOCKER_ENABLED") is not None:
    if str(variables.get("DOCKER_ENABLED")).lower() == 'false':
        DOCKER_ENABLED = False

# Define the log path for Tensorboard
if DOCKER_ENABLED:
    LOG_PATH = variables.get("DOCKER_LOG_PATH")
else:
    LOG_PATH = variables.get("MOUNT_LOG_PATH")
PA_JOB_ID = "job_ID_" + variables.get("PA_JOB_ID")
PATH = os.path.join(LOG_PATH, PA_JOB_ID)
os.mkdir(PATH)

# Define the number of classes
num_classes = 10

# Split the data into train and test sets
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

# Preprocess data
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

# Convert class vectors to binary class matrices
y_train_cat = np.squeeze(keras.utils.to_categorical(y_train, num_classes))
y_test_cat = np.squeeze(keras.utils.to_categorical(y_test, num_classes))

#Define the model
model = Sequential()
model.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=x_train.shape[1:]))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation('softmax'))

model.summary()

# Compile the model
model.compile(loss='categorical_crossentropy',
             optimizer='adam',
             metrics=['accuracy'])

# Create a TensorBoard instance with the path to the logs directory
tensorboard = TensorBoard(log_dir=PATH)

#Train the model using tensorboard instance in the callbacks
model.fit(x_train, y_train_cat,
         epochs=3,
         validation_data=(x_test, y_test_cat),
         callbacks=[tensorboard])
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            350.99609375
        </positionTop>
        <positionLeft>
            447.96875
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2646px;
            height:3493px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-200.546875px;left:-442.96875px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_879" style="top: 205.547px; left: 461.797px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Start_Tensorboard</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_882" style="top: 350.996px; left: 447.969px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/keras.png" width="20px">&nbsp;<span class="name">CIFAR10_Training</span></a></div><svg style="position:absolute;left:501.5px;top:244.5px" width="34" height="107" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 106 C -10 56 23 50 13 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-1.5280000000000007,80.57600000000001 L8.909734573595061,62.135455079331905 L0.9561698850359523,66.79815909576975 L-4.868106330635197,59.65128519429595 L-1.5280000000000007,80.57600000000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-1.5280000000000007,80.57600000000001 L8.909734573595061,62.135455079331905 L0.9561698850359523,66.79815909576975 L-4.868106330635197,59.65128519429595 L-1.5280000000000007,80.57600000000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 515px; top: 235px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 502px; top: 381px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 502px; top: 341px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>
