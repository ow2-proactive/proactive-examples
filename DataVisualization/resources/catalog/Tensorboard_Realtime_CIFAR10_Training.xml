<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Copyright Activeeon 2007-2021. All rights reserved. --><job xmlns="urn:proactive:jobdescriptor:3.12" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Tensorboard_Realtime_CIFAR10_Training" onTaskError="continueJobExecution" priority="normal" projectName="4. Tensorboard Workflows" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd">
  <variables>
    <variable name="NATIVE_SCHEDULER" value=""/>
    <variable name="NATIVE_SCHEDULER_PARAMS" value=""/>
    <variable name="NODE_ACCESS_TOKEN" value=""/>
    <variable name="NODE_SOURCE_NAME" value=""/>
    <variable model="PA:LIST(no-container,docker,podman,singularity)" name="CONTAINER_PLATFORM" value="docker"/>
    <variable model="PA:Boolean" name="CONTAINER_GPU_ENABLED" value="True"/>
    <variable model="PA:Boolean" name="CONTAINER_ROOTLESS_ENABLED" value="False"/>
    <variable model="PA:LIST(,docker://activeeon/dlm3,docker://activeeon/cuda,docker://activeeon/cuda2)" name="CONTAINER_IMAGE" value=""/>
    <variable model="PA:NOT_EMPTY_STRING" name="TENSORBOARD_INSTANCE_NAME" value="tensorboard-server-${PA_JOB_ID}"/>
    <variable model="PA:NOT_EMPTY_STRING" name="TENSORBOARD_CONTAINER_LOG_PATH" value="/tmp/$TENSORBOARD_INSTANCE_NAME"/>
    <variable model="PA:NOT_EMPTY_STRING" name="TENSORBOARD_HOST_LOG_PATH" value="/shared/$TENSORBOARD_INSTANCE_NAME"/>
    <variable model="PA:Boolean" name="TENSORBOARD_PROXYFIED" value="False"/>
  </variables>
  <description>
    <![CDATA[ Show an example of real-time using Tensorboard for training a CNN using CIFAR10 database. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="data-visualization"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
<info name="NS" value="$NATIVE_SCHEDULER"/>
<info name="Documentation" value="PML/PMLUserGuide.html#_tensorboard_workflows"/>
<info name="NODE_ACCESS_TOKEN" value="$NODE_ACCESS_TOKEN"/>
<info name="NS_BATCH" value="$NATIVE_SCHEDULER_PARAMS"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Start_Tensorboard" onTaskError="cancelJob">
      <description>
        <![CDATA[ Start the Tensorboard server as a service. ]]>
      </description>
      <variables>
        <variable inherited="false" name="SERVICE_ID" value="Tensorboard"/>
        <variable inherited="false" name="INSTANCE_NAME" value="$TENSORBOARD_INSTANCE_NAME"/>
        <variable inherited="false" name="PROXYFIED" value="$TENSORBOARD_PROXYFIED"/>
        <variable inherited="false" name="ENGINE" value="$CONTAINER_PLATFORM"/>
        <variable inherited="false" name="MOUNT_LOG_PATH" value="$TENSORBOARD_HOST_LOG_PATH"/>
        <variable inherited="true" name="NATIVE_SCHEDULER" value=""/>
        <variable inherited="true" name="NATIVE_SCHEDULER_PARAMS" value=""/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="task.documentation" value="PML/PMLUserGuide.html#_tensorboard_service_start"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw">
            <arguments>
              <argument value="true"/>
              <argument value="NATIVE_SCHEDULER"/>
              <argument value="NATIVE_SCHEDULER_PARAMS"/>
              <argument value="ENGINE"/>
              <argument value="PROXYFIED"/>
              <argument value="MOUNT_LOG_PATH"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            810.484375
        </positionTop>
        <positionLeft>
            456.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="CIFAR10_Training">
      <description>
        <![CDATA[ Train a simple Tensorflow/Tensorboard script ]]>
      </description>
      <variables>
        <variable inherited="false" name="HOST_LOG_PATH" value="$TENSORBOARD_HOST_LOG_PATH"/>
        <variable inherited="false" name="CONTAINER_LOG_PATH" value="$TENSORBOARD_CONTAINER_LOG_PATH"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/keras.png"/>
        <info name="task.documentation" value="PML/PMLUserGuide.html"/>
      </genericInformation>
      <depends>
        <task ref="Start_Tensorboard"/>
      </depends>
      <selection>
        <script type="static">
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/check_node_source_name/raw"/>
        </script>
      </selection>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
# import the required libraries
import os
import keras
import numpy as np

from keras.datasets import cifar10
from keras.models import Sequential
from keras.layers import Dense, Flatten, Dropout, Activation
from keras.layers import Conv2D, MaxPooling2D
from keras.callbacks import TensorBoard

try:
    # https://github.com/tensorflow/tensorflow/issues/24828
    from tensorflow.compat.v1 import ConfigProto
    from tensorflow.compat.v1 import InteractiveSession
    config = ConfigProto()
    config.gpu_options.allow_growth = True
    session = InteractiveSession(config=config)
except:
    pass

# Check if a container platform is enabled
CONTAINER_ENABLED = False
if variables.get("CONTAINER_PLATFORM"):
    CONTAINER_ENABLED = True

# Define the log path for Tensorboard
if CONTAINER_ENABLED:
    LOG_PATH = variables.get("CONTAINER_LOG_PATH")
else:
    LOG_PATH = variables.get("HOST_LOG_PATH")

PA_JOB_ID = "job_ID_" + variables.get("PA_JOB_ID")
PATH = os.path.join(LOG_PATH, PA_JOB_ID)
os.mkdir(PATH)

# Define the number of classes
num_classes = 10

# Split the data into train and test sets
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

# Preprocess data
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

# Convert class vectors to binary class matrices
y_train_cat = np.squeeze(keras.utils.to_categorical(y_train, num_classes))
y_test_cat = np.squeeze(keras.utils.to_categorical(y_test, num_classes))

#Define the model
model = Sequential()
model.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=x_train.shape[1:]))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation('softmax'))

model.summary()

# Compile the model
model.compile(loss='categorical_crossentropy',
             optimizer='adam',
             metrics=['accuracy'])

# Create a TensorBoard instance with the path to the logs directory
tensorboard = TensorBoard(log_dir=PATH)

#Train the model using tensorboard instance in the callbacks
model.fit(x_train, y_train_cat,
         epochs=3,
         validation_data=(x_test, y_test_cat),
         callbacks=[tensorboard])
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            937.484375
        </positionTop>
        <positionLeft>
            456.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Wait_for_Signal">
      <description>
        <![CDATA[ A template task that sends a ready notification for all the signals specified in the variable SIGNALS, then loops until one signal among those specified is received by the job. ]]>
      </description>
      <variables>
        <variable inherited="false" name="SIGNALS" value="Terminate_Job_and_Service"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/signal-wait.png"/>
        <info name="TASK.DOCUMENTATION" value="user/ProActiveUserGuide.html#_task_signal_api"/>
      </genericInformation>
      <depends>
        <task ref="CIFAR10_Training"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import com.google.common.base.Splitter;

if (variables.get("PA_TASK_ITERATION")==0){
    
    // Read the variable SIGNALS
	signals = variables.get("SIGNALS")

	// Split the value of the variable SIGNALS and transform it into a list
	Set signalsSet = new HashSet<>(Splitter.on(',').trimResults().omitEmptyStrings().splitToList(signals))
    
    // Send a ready notification for each signal in the set
    println("Ready for signals "+ signalsSet)
    signalsSet.each { 
        signal -> signalapi.readyForSignal(signal)
    }
    
    // Add the signals set as a variable to be used by next tasks
    variables.put("SIGNALS_SET", signalsSet)
}

//Read the variable SIGNALS_SET
Set signalsSet =  variables.get("SIGNALS_SET")

// Check whether one signal among those specified as input is received
println("Checking whether one signal in the set "+ signalsSet +" is received")
receivedSignal = signalapi.checkForSignals(signalsSet)

// If a signal is received, remove ready signals and break the loop, else sleep 10 seconds then restart
if (receivedSignal != null){
    
    // remove ready signals
	signalapi.removeManySignals(new HashSet<>(signalsSet.collect { signal -> "ready_"+signal }))    
    
    // print the received signal
    println("Received signal: "+ receivedSignal)
    result = receivedSignal
    
} else {
    result = null    
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <loop target="Wait_for_Signal">
          <script>
            <code language="groovy">
              <![CDATA[
if (result!=null){
    loop = false
} else {
    loop = "* * * * *"
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            1066.484375
        </positionTop>
        <positionLeft>
            456.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Stop_Tensorboard" onTaskError="cancelJob">
      <variables>
        <variable inherited="false" name="INSTANCE_ID" value=""/>
        <variable inherited="false" name="INSTANCE_NAME" value="$TENSORBOARD_INSTANCE_NAME"/>
        <variable inherited="false" model="PA:LIST(Finish_Tensorboard)" name="ACTION" value="Finish_Tensorboard"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="task.documentation" value="PML/PMLUserGuide.html#_tensorboard_service_actions"/>
      </genericInformation>
      <depends>
        <task ref="Wait_for_Signal"/>
      </depends>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Action/raw">
            <arguments>
              <argument value="INSTANCE_NAME"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            1194.484375
        </positionTop>
        <positionLeft>
            456.25
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2144px;
            height:2820px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-805.484375px;left:-451.25px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable active-task" id="jsPlumb_1_287" style="top: 810.5px; left: 456.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Start the Tensorboard server as a service."><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Start_Tensorboard</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_290" style="top: 937.484px; left: 456.25px; z-index: 24;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Train a simple Tensorflow/Tensorboard script"><img src="/automation-dashboard/styles/patterns/img/wf-icons/keras.png" width="20px">&nbsp;<span class="name">CIFAR10_Training</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_293" style="top: 1066.5px; left: 456.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A template task that sends a ready notification for all the signals specified in the variable SIGNALS, then loops until one signal among those specified is received by the job."><img src="/automation-dashboard/styles/patterns/img/wf-icons/signal-wait.png" width="20px">&nbsp;<span class="name">Wait_for_Signal</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_296" style="top: 1194.5px; left: 456.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Stop_Tensorboard</span></a></div><svg style="position:absolute;left:504px;top:849.5px" width="21.25" height="88.484375" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0.25 87.484375 C 10.25 37.484375 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M3.0450234374999994,66.30790869140627 L9.404159908330254,46.09500728301473 L2.598907343535859,52.31501833841964 L-4.588730444656371,46.54112337697887 L3.0450234374999994,66.30790869140627" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M3.0450234374999994,66.30790869140627 L9.404159908330254,46.09500728301473 L2.598907343535859,52.31501833841964 L-4.588730444656371,46.54112337697887 L3.0450234374999994,66.30790869140627" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:498px;top:976.984375px" width="27.25" height="89.515625" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 88.515625 C -10 38.515625 16.25 50 6.25 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.2993200000000003,66.77475249999999 L6.905423380663252,47.68882314625523 L-0.7249167262389227,52.863560806562276 L-7.005768312774459,46.11441987249415 L-2.2993200000000003,66.77475249999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.2993200000000003,66.77475249999999 L6.905423380663252,47.68882314625523 L-0.7249167262389227,52.863560806562276 L-7.005768312774459,46.11441987249415 L-2.2993200000000003,66.77475249999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:541.0266769263776px;top:1015.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_310" style="position: absolute; transform: translate(-50%, -50%); left: 553px; top: 1085.5px;">loop</div><svg style="position:absolute;left:498px;top:1105.5px" width="27" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 6 88 C 16 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M8.328375,66.78168750000002 L13.175164621094911,46.153826962153474 L6.848577140751924,52.86011437424426 L-0.7464085046608426,47.633624821401554 L8.328375,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M8.328375,66.78168750000002 L13.175164621094911,46.153826962153474 L6.848577140751924,52.86011437424426 L-0.7464085046608426,47.633624821401554 L8.328375,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 504.5px; top: 840px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 504.75px; top: 967.484px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 504.75px; top: 927.484px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 498.5px; top: 1096px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 498.5px; top: 1056px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 551px; top: 1056px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 551px; top: 1096px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 504.5px; top: 1224px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 504.5px; top: 1184px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
