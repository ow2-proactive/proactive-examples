<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.8"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
	name="Visdom_Plot_Example" projectName="Visdom Workflows" priority="normal"
	onTaskError="continueJobExecution" maxNumberOfExecution="2">
	<variables>
		<variable name="instance_name" value="visdom-server-1" />
	</variables>
	<description>
    <![CDATA[ Shows an example of several types of plot using the Visdom server. ]]>
  </description>
	<genericInformation>
		<info name="bucketName" value="data-visualization" />
		<info name="pca.action.icon"
			value="/automation-dashboard/styles/patterns/img/wf-icons/visdom.png" />
		<info name="Documentation"
			value="https://doc.activeeon.com/latest/MLOS/MLOSUserGuide.html#_visdom" />
		<info name="group" value="public-objects" />
	</genericInformation>
	<taskFlow>
		<task name="Visdom_Plot_Demo">
			<description>
        <![CDATA[ Example of Visdom plots. ]]>
      </description>
			<depends>
				<task ref="Bind_or_Start_Visdom_Service" />
			</depends>
			<forkEnvironment javaHome="${PA_SCHEDULER_HOME}/jre/">
				<envScript>
					<script>
						<code language="python">
              <![CDATA[
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters 
containerName = 'activeeon/dlm3' 
dockerRunCommand =  'docker run ' 
dockerParameters = '--rm ' 
# Prepare ProActive home volume 
paHomeHost = variables.get("PA_SCHEDULER_HOME") 
paHomeContainer = variables.get("PA_SCHEDULER_HOME") 
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' 
# Prepare working directory (For Dataspaces and serialized task file) 
workspaceHost = localspace 
workspaceContainer = localspace 
workspaceVolume = '-v '+localspace +':'+localspace+' ' 
# Prepare container working directory 
containerWorkingDirectory = '-w '+workspaceContainer+' ' 
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node 
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
						</code>
					</script>
				</envScript>
			</forkEnvironment>
			<pre>
				<script>
					<code language="bash">
            <![CDATA[
pip install py4j
]]>
					</code>
				</script>
			</pre>
			<scriptExecutable>
				<script>
					<code language="cpython">
            <![CDATA[
import os
import math
import numpy as np
import urllib3

from io import BytesIO
from PIL import Image
from argparse import ArgumentParser
from visdom import Visdom

VISDOM_HOST,VISDOM_PORT = variables.get("endpoint").split(":")

print("Connecting to %s" % VISDOM_PORT)
vis = Visdom(server="http://"+VISDOM_HOST,port=int(VISDOM_PORT))
assert vis.check_connection()

# text plot
textwindow = vis.text('Hello World!')
#updatetextwindow = vis.text('Hello World! More text should be here')
#vis.text('And here it is', win=updatetextwindow, append=True)

# show ActiveEon logo
url_image = 'http://s3.eu-west-2.amazonaws.com/activeeon-public/images/logo.jpg'
http = urllib3.PoolManager()
r = http.request('GET', url_image)
image = np.asarray(Image.open(BytesIO(r.data))).astype(np.uint8)
vis_image = image.transpose((2, 0, 1)).astype(np.float64)
vis.image(vis_image,opts=dict(title='ActiveEon', caption='ActiveEon'))

# boxplot
X = np.random.rand(100, 2)
X[:, 1] += 2
vis.boxplot(X=X,opts=dict(legend=['Men', 'Women']))

# stemplot
Y = np.linspace(0, 2 * math.pi, 70)
X = np.column_stack((np.sin(Y), np.cos(Y)))
vis.stem(X=X,Y=Y,opts=dict(legend=['Sine', 'Cosine']))

# quiver plot
X = np.arange(0, 2.1, .2)
Y = np.arange(0, 2.1, .2)
X = np.broadcast_to(np.expand_dims(X, axis=1), (len(X), len(X)))
Y = np.broadcast_to(np.expand_dims(Y, axis=0), (len(Y), len(Y)))
U = np.multiply(np.cos(X), Y)
V = np.multiply(np.sin(X), Y)
vis.quiver(X=U,Y=V,opts=dict(normalize=0.9))

# pie chart
X = np.asarray([19, 26, 55])
vis.pie(X=X,opts=dict(legend=['Residential', 'Non-Residential', 'Utility']))

# mesh plot
x = [0, 0, 1, 1, 0, 0, 1, 1]
y = [0, 1, 1, 0, 0, 1, 1, 0]
z = [0, 0, 0, 0, 1, 1, 1, 1]
X = np.c_[x, y, z]
i = [7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2]
j = [3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3]
k = [0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6]
Y = np.c_[i, j, k]
vis.mesh(X=X, Y=Y, opts=dict(opacity=0.5))

# contour
x = np.tile(np.arange(1, 101), (100, 1))
y = x.transpose()
X = np.exp((((x - 50) ** 2) + ((y - 50) ** 2)) / -(20.0 ** 2))
vis.contour(X=X, opts=dict(colormap='Viridis'))

# surface
vis.surf(X=X, opts=dict(colormap='Hot'))

# line plots
vis.line(Y=np.random.rand(10))
Y = np.linspace(-5, 5, 100)
vis.line(Y=np.column_stack((Y * Y, np.sqrt(Y + 5))),X=np.column_stack((Y, Y)),opts=dict(markers=False))
 
 # heatmap
vis.heatmap(X=np.outer(np.arange(1, 6), np.arange(1, 11)),
  opts=dict(
    columnnames=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'],
    rownames=['y1', 'y2', 'y3', 'y4', 'y5'],
    colormap='Electric'
  )
)
  
# histogram
vis.histogram(X=np.random.rand(10000), opts=dict(numbins=20))

# bar plots
vis.bar(X=np.random.rand(20))
vis.bar(X=np.abs(np.random.rand(5, 3)),
  opts=dict(
    stacked=True,
    legend=['Facebook', 'Google', 'Twitter'],
    rownames=['2012', '2013', '2014', '2015', '2016']
  )
)
vis.bar(X=np.random.rand(20, 3),
  opts=dict(stacked=False,legend=['The Netherlands', 'France', 'United States'])
)

# scatter plots
Y = np.random.rand(100)
vis.scatter(X=np.random.rand(100, 2),Y=(Y[Y > 0] + 1.5).astype(int),
  opts=dict(
    legend=['Apples', 'Pears'],
    xtickmin=-5,
    xtickmax=5,
    xtickstep=0.5,
    ytickmin=-5,
    ytickmax=5,
    ytickstep=0.5,
    markersymbol='cross-thin-open'
  )
)
vis.scatter(X=np.random.rand(100, 3),Y=(Y + 1.5).astype(int),
  opts=dict(legend=['Men', 'Women'],markersize=5)
)

# image demo
#vis.image(
#    np.random.rand(3, 512, 256),
#    opts=dict(title='Random!', caption='How random.'),
#)

# grid of images
vis.images(np.random.randn(20, 3, 64, 64),
  opts=dict(title='Random images', caption='How random.')
)
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="Bind_or_Start_Visdom_Service" onTaskError="cancelJob">
			<description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
			<variables>
				<variable name="service_model" value="http://models.activeeon.com/pca/visdom"
					inherited="false" />
				<variable name="instance_name" value="visdom-server-1"
					inherited="true" />
			</variables>
			<inputFiles>
				<files includes="cloud-automation-service-client-1.0.0-all.jar"
					accessMode="transferFromGlobalSpace" />
			</inputFiles>
			<forkEnvironment>
				<additionalClasspath>
					<pathElement path="cloud-automation-service-client-1.0.0-all.jar" />
				</additionalClasspath>
			</forkEnvironment>
			<scriptExecutable>
				<script>
					<code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.client.api.CloudAutomationApi;

schedulerapi.connect()

pcaUrl = variables.get("PA_SCHEDULER_REST_URL").replaceAll("/rest\\z", "/cloud-automation-service");
sessionId = schedulerapi.getSession();

api = new CloudAutomationApi(pcaUrl, sessionId);

endpoint = api.getServiceEndpointOrCreate(variables.get("service_model"), variables.get("instance_name"));
endpoint = endpoint.replaceAll("\n",'');

println "Service " + variables.get("service_model") + " is available on " + endpoint

variables.put("endpoint", endpoint)
result = '<meta http-equiv="refresh" content="1; url=http://' + endpoint + '/" />'
result+= '<h2><span style="color:black">Please wait while redirecting...</span></h2>'
resultMetadata.put("content.type", "text/html")
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="Wait_Until_Validation" onTaskError="pauseJob">
			<description>
        <![CDATA[ Task to pause the job and send a validation message to the notification service ]]>
      </description>
			<depends>
				<task ref="Visdom_Plot_Demo" />
			</depends>
			<scriptExecutable>
				<script>
					<code language="python">
            <![CDATA[
# Please fill variables
notification_message = 'Please validate to terminate the service'

# Don't change code below unless you know what you are doing
from org.ow2.proactive.addons.webhook import Webhook

jobid = variables.get("PA_JOB_ID")
schedulerURL =  variables.get("PA_SCHEDULER_REST_URL")

print schedulerURL
# get sessionid
schedulerapi.connect()

# pause job
schedulerapi.pauseJob(jobid)


# send web validation
print "Sending web validation..."
url = schedulerURL.replace("/rest", "") +'/notification-service/notifications'
headers = '{\"Content-Type\" : \"application/json\" }'
notification_content = '{\"description\": \"'+notification_message+'\", \"jobId\": \"'+jobid+'\" , \"validation\": \"true\"}'
Webhook.execute ( 'POST', url, headers, notification_content);
print "Web Validation sent"
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
		<task name="Terminate_Visdom_Service" onTaskError="cancelJob">
			<description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
			<variables>
				<variable name="service_model" value="http://models.activeeon.com/pca/visdom"
					inherited="false" />
				<variable name="instance_name" value="visdom-server-1"
					inherited="true" />
			</variables>
			<depends>
				<task ref="Wait_Until_Validation" />
			</depends>
			<inputFiles>
				<files includes="cloud-automation-service-client-1.0.0-all.jar"
					accessMode="transferFromGlobalSpace" />
			</inputFiles>
			<forkEnvironment>
				<additionalClasspath>
					<pathElement path="cloud-automation-service-client-1.0.0-all.jar" />
				</additionalClasspath>
			</forkEnvironment>
			<scriptExecutable>
				<script>
					<code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.client.api.CloudAutomationApi;

schedulerapi.connect()
pcaUrl = variables.get("PA_SCHEDULER_REST_URL").replaceAll("/rest\\z", "/cloud-automation-service");
sessionId = schedulerapi.getSession();

api = new CloudAutomationApi(pcaUrl, sessionId);

println "Terminating " + variables.get("service_model") + " / " + variables.get("instance_name");
try{
  api.terminateServiceFromInstanceName(variables.get("service_model"), variables.get("instance_name"));
}catch(Exception ex){
  println "Service was already terminated"
}
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
	</taskFlow>
</job>