<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.8"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
    name="Visdom_Realtime_Apache_Log_Intrusion_Detection" projectName="Data Visualization"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="WORKSPACE" value="/root" />
    <variable name="PROJECT" value="log_analyzer" />
    <variable name="DATASPACE" value="data" />
    <variable name="STREAM_SIZE" value="1000" />
    <variable name="DLM_DOCKER_IMAGE" value="activeeon/dlm3" />
    <variable name="DLM_CONTAINER_NAME" value="ml" />
    <variable name="VISDOM_DOCKER_IMAGE" value="activeeon/visdom_server" />
    <variable name="VISDOM_CONTAINER_NAME" value="visdom" />
    <variable name="VISDOM_PORT" value="8097" />
  </variables>
  <description>
    <![CDATA[ Performs real-time intrusion detection on Apache log files and plot results using Visdom. ]]>
  </description>
    <genericInformation>
    <info name="bucketName" value="data-visualization"/>
    <info name="Documentation" value="https://www.activeeon.com/resources/activeeon-machine-learning-visualization-with-visdom.pdf"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Log_Streaming">
      <description>
        <![CDATA[ Will run every minutes ]]>
      </description>
      <depends>
        <task ref="Setup"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
export variables_CONTAINER_NAME=$variables_DLM_CONTAINER_NAME

echo "Visdom server status: $variables_VISDOM_STATUS"
if [ $variables_VISDOM_STATUS -eq 0 ]
then
  echo "Visdom server is down...exiting"
  exit
fi

# ./run_log_producer_stream.sh
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd '$variables_WORKSPACE'/'$variables_PROJECT/bash' && ./run_log_producer_stream.sh'

docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE/$variables_PROJECT/$variables_DATASPACE/log_space
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE/$variables_PROJECT/$variables_DATASPACE/shared_space
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE/$variables_PROJECT/$variables_DATASPACE/preview_space
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="Log_Streaming">
          <script>
            <code language="javascript">
              <![CDATA[
// You can use a Cron Expression here
// examples https://www.freeformatter.com/cron-expression-generator-quartz.html
              loop = '* * * * *';
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
    </task>
    <task name="Setup"
    
    preciousLogs="true" >
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <depends>
        <task ref="StartDLM"/>
        <task ref="VisdomUI"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo "Start real time anomaly detection"

# export variables_WORKSPACE=/root && export variables_PROJECT=log_analyzer && export variables_DATASPACE=data && export variables_CONTAINER_NAME=ml && export variables_STREAM_SIZE=1000
export variables_CONTAINER_NAME=$variables_DLM_CONTAINER_NAME

# docker exec ml /bin/bash -c 'rm -r -f log_analyzer'
# docker exec ml /bin/bash -c 'wget https://s3.eu-central-1.amazonaws.com/activeeonpublic/log_analyzer/log_analyzer.zip'
# docker exec ml /bin/bash -c 'ls'
# docker exec ml /bin/bash -c 'unzip log_analyzer.zip'
# docker exec ml /bin/bash -c 'rm -r -f log_analyzer.zip'
# docker exec ml /bin/bash -c 'cd /root/log_analyzer && ls'

docker exec $variables_CONTAINER_NAME /bin/bash -c 'rm -r -f '$variables_PROJECT
#docker exec $variables_CONTAINER_NAME /bin/bash -c 'wget https://s3.eu-central-1.amazonaws.com/activeeonpublic/log_analyzer/log_analyzer.zip'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'wget https://s3.eu-west-2.amazonaws.com/activeeon-public/log_analysis/log_analyzer.zip'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'unzip -uo log_analyzer.zip'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'rm -r -f log_analyzer.zip'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd '$variables_WORKSPACE'/'$variables_PROJECT' && ls'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'split -l '$variables_STREAM_SIZE' '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/log.csv'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'mv x* '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/log_space'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/log_space'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'rm -f -r '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/preview_space/output.txt'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'rm -f -r '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/preview_space/notification.txt'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/preview_space'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'touch '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/preview_space/notification.txt'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'rm -f -r '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/shared_space/empty'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/shared_space'

docker exec $variables_CONTAINER_NAME /bin/bash -c 'if [ ! -d "visdom" ]; then git clone https://github.com/andrewssobral/visdom.git ; else echo visdom already exists ; fi'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd visdom && git pull && pip install -e . && python setup.py install'

#split -l $variables_STREAM_SIZE log.csv
#mv x* log_space/
#cd preview_space
#pwd
#rm -f -r output.txt
#rm -f -r notification.txt
#touch notification.txt
#cd ../shared_space
#rm -f -r empty

# split -l 1000 ../data/log.csv && mv x* ../data/log_space && rm -f -r ../data/preview_space/output.txt && rm -f -r ../data/preview_space/notification.txt && touch ../data/preview_space/notification.txt && rm -f -r ../data/shared_space/empty
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Anomaly_Detection">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <depends>
        <task ref="Setup"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo "Visdom server status: $variables_VISDOM_STATUS"
if [ $variables_VISDOM_STATUS -eq 0 ]
then
  echo "Visdom server is down...exiting"
  exit
fi

#export variables_DLM_CONTAINER_NAME=ml
export variables_CONTAINER_NAME=$variables_DLM_CONTAINER_NAME
# export variables_VISDOM_PORT=8097
# export variables_VISDOM_CONTAINER_NAME=visdom
export variables_VISDOM_CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $variables_VISDOM_CONTAINER_NAME)
echo "Visdom server container IP ($variables_VISDOM_CONTAINER_NAME): $variables_VISDOM_CONTAINER_IP:$variables_VISDOM_PORT"
#export variables_VISDOM_CONTAINER_IP=$variables_VISDOM_HOST
#echo "Visdom server container IP ($variables_VISDOM_CONTAINER_NAME): $variables_VISDOM_CONTAINER_IP:$variables_VISDOM_PORT"

# ./run_log_consumer_stream.sh
echo docker exec $variables_CONTAINER_NAME /bin/bash -c "cd $variables_WORKSPACE/$variables_PROJECT/bash && ./run_log_consumer_stream_visdom.sh $variables_VISDOM_CONTAINER_IP $variables_VISDOM_PORT"
docker exec $variables_CONTAINER_NAME /bin/bash -c "cd $variables_WORKSPACE/$variables_PROJECT/bash && ./run_log_consumer_stream_visdom.sh $variables_VISDOM_CONTAINER_IP $variables_VISDOM_PORT"

docker cp $variables_CONTAINER_NAME:$variables_WORKSPACE'/'$variables_PROJECT/data/preview_space/notification.txt /tmp
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Output_Preview">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="Anomaly_Detection"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
file_path = "/tmp/notification.txt"
println "file_path: " + file_path  

def file = new File(file_path)
println "file exists? " + file.exists()

if(file.exists())
{
  result = file.text
  resultMetadata.put("file.name", "notification.txt")
  resultMetadata.put("content.type", "text/plain")
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <cleaning>
        <script>
          <code language="bash">
            <![CDATA[
docker stop $variables_DLM_CONTAINER_NAME
]]>
          </code>
        </script>
      </cleaning>
    </task>
    <task name="StartVisdom">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo "Starting visdom server"

export variables_DOCKER_IMAGE=$variables_VISDOM_DOCKER_IMAGE
export variables_CONTAINER_NAME=$variables_VISDOM_CONTAINER_NAME
#export variables_DOCKER_IMAGE=activeeon/visdom_server
#export variables_CONTAINER_NAME=visdom
#export variables_VISDOM_PORT=8097

docker pull $variables_DOCKER_IMAGE
#export RUN_DOCKER="docker run -dit -h dlm -w /root --name=$variables_CONTAINER_NAME $variables_DOCKER_IMAGE"
#docker run -d -p 8097:8097 -h visdom -w /root --name=visdom activeeon/visdom_server python -m visdom.server -port 8097
export RUN_DOCKER="docker run -d -p $variables_VISDOM_PORT:$variables_VISDOM_PORT -h visdom -w /root --name=$variables_CONTAINER_NAME $variables_DOCKER_IMAGE python -m visdom.server -port $variables_VISDOM_PORT"
echo "Checking if docker container is running"
if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
then 
  echo "OK. The $variables_CONTAINER_NAME container is running!"
else 
  echo "$variables_CONTAINER_NAME container is not running."
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "false" ]; 
  then 
    echo "Starting it..."
    docker start $variables_CONTAINER_NAME
  else 
    echo "Running it..."
    echo $RUN_DOCKER
    $($RUN_DOCKER)
    sleep 5
  fi
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
  then 
    echo "OK. The $variables_CONTAINER_NAME container is running now!"
  else 
    echo "$variables_CONTAINER_NAME container is not running."
    echo "An error occurred while running the container."
    exit
  fi
fi
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="VisdomUI">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="StartVisdom"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.time.*

//def visdom_host = InetAddress.localHost.hostName
def visdom_host = new URL("http://checkip.amazonaws.com").getText()
def visdom_port = variables.get("VISDOM_PORT").toInteger()
def server_started = 0
def limit = 1
def i = 0

if(visdom_host.endsWith(".local"))
  visdom_host = "127.0.0.1"

println GroovySystem.version
while(true){
  i = i + 1
  try{
    Socket socket = new Socket(visdom_host, visdom_port)
    println("Host ${visdom_host} Port ${visdom_port}: IS OPEN")
    server_started = 1
    break
  }
  catch(e){
    println("(try ${i}) Host ${visdom_host} Port ${visdom_port}: IS CLOSED, waiting server for startup...")
  }
  if(i == limit)
    break
  else
    sleep(2000)
}

if(server_started){
  result = "<meta http-equiv=\"refresh\" content=\"1; url=http://"+visdom_host+":"+visdom_port+"/\" /> \n"
  //result+= "<img src=\"https://s3.eu-central-1.amazonaws.com/activeeonpublic/public/images/please_wait.jpg\" />" 
  result+= "<h2><span style=\"color:black\">Please wait while redirecting...</span></h2>"
}
else
  result+= "<h2><span style=\"color:red\">Visdom server is down.</span></h2>"
  //result = "<img src=\"https://s3.eu-central-1.amazonaws.com/activeeonpublic/public/images/server_down.jpg\" />"
println(result)

variables.put("VISDOM_HOST", visdom_host)
variables.put("VISDOM_STATUS", server_started)
//if(!server_started)
  //throw new Exception("Visdom server could not be started!")

resultMetadata.put("content.type", "text/html")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="StartDLM">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
export variables_DOCKER_IMAGE=$variables_DLM_DOCKER_IMAGE
export variables_CONTAINER_NAME=$variables_DLM_CONTAINER_NAME
#export variables_DOCKER_IMAGE=activeeon/dlm3
#export variables_CONTAINER_NAME=ml

echo "Updating local docker image"
docker pull $variables_DOCKER_IMAGE
export RUN_DOCKER="docker run -dit -h dlm -w /root --name=$variables_CONTAINER_NAME $variables_DOCKER_IMAGE"
echo "Checking if docker container is running"
if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
then 
  echo "OK. The $variables_CONTAINER_NAME container is running!"
else 
  echo "$variables_CONTAINER_NAME container is not running."
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "false" ]; 
  then 
    echo "Starting it..."
    docker start $variables_CONTAINER_NAME
  else 
    echo "Running it..."
    echo $RUN_DOCKER
    $($RUN_DOCKER)
    sleep 5
  fi
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
  then 
    echo "OK. The $variables_CONTAINER_NAME container is running now!"
  else 
    echo "$variables_CONTAINER_NAME container is not running."
    echo "An error occurred while running the container."
    exit
  fi
fi
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>