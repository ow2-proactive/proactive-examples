<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.12" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Tensorboard_Plots_Example" onTaskError="continueJobExecution" priority="normal" projectName="4. Tensorboard Workflows" xsi:schemaLocation="urn:proactive:jobdescriptor:3.12 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.12/schedulerjob.xsd">
  <variables>
    <variable name="NATIVE_SCHEDULER" value=""/>
    <variable name="NATIVE_SCHEDULER_PARAMS" value=""/>
    <variable name="NODE_ACCESS_TOKEN" value=""/>
    <variable model="PA:LIST(no-container,docker,podman,singularity)" name="CONTAINER_PLATFORM" value="docker"/>
    <variable model="PA:Boolean" name="CONTAINER_GPU_ENABLED" value="False"/>
    <variable model="PA:Boolean" name="CONTAINER_ROOTLESS_ENABLED" value="False"/>
    <variable model="PA:LIST(,docker://activeeon/dlm3,docker://activeeon/cuda,docker://activeeon/cuda2)" name="CONTAINER_IMAGE" value=""/>
    <variable model="PA:NOT_EMPTY_STRING" name="TENSORBOARD_INSTANCE_NAME" value="tensorboard-server-${PA_JOB_ID}"/>
    <variable model="PA:NOT_EMPTY_STRING" name="TENSORBOARD_CONTAINER_LOG_PATH" value="/tmp/$TENSORBOARD_INSTANCE_NAME"/>
    <variable model="PA:NOT_EMPTY_STRING" name="TENSORBOARD_HOST_LOG_PATH" value="/shared/$TENSORBOARD_INSTANCE_NAME"/>
    <variable model="PA:Boolean" name="TENSORBOARD_PROXYFIED" value="False"/>
  </variables>
  <description>
    <![CDATA[ Show an example exposing the different plots available in Tensorboard ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="data-visualization"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
<info name="NS" value="$NATIVE_SCHEDULER"/>
<info name="Documentation" value="PML/PMLUserGuide.html#_tensorboard_workflows"/>
<info name="NODE_ACCESS_TOKEN" value="$NODE_ACCESS_TOKEN"/>
<info name="NS_BATCH" value="$NATIVE_SCHEDULER_PARAMS"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Start_Tensorboard" onTaskError="cancelJob">
      <description>
        <![CDATA[ Start the Tensorboard server as a service. ]]>
      </description>
      <variables>
        <variable inherited="false" name="SERVICE_ID" value="Tensorboard"/>
        <variable inherited="false" name="INSTANCE_NAME" value="$TENSORBOARD_INSTANCE_NAME"/>
        <variable inherited="false" name="PROXYFIED" value="$TENSORBOARD_PROXYFIED"/>
        <variable inherited="false" name="ENGINE" value="$CONTAINER_PLATFORM"/>
        <variable inherited="false" name="MOUNT_LOG_PATH" value="$TENSORBOARD_HOST_LOG_PATH"/>
        <variable inherited="true" name="NATIVE_SCHEDULER" value=""/>
        <variable inherited="true" name="NATIVE_SCHEDULER_PARAMS" value=""/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png"/>
        <info name="task.documentation" value="PML/PMLUserGuide.html#_tensorboard_service_start"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw">
            <arguments>
              <argument value="true"/>
              <argument value="NATIVE_SCHEDULER"/>
              <argument value="NATIVE_SCHEDULER_PARAMS"/>
              <argument value="ENGINE"/>
              <argument value="PROXYFIED"/>
              <argument value="MOUNT_LOG_PATH"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            108.3203125
        </positionTop>
        <positionLeft>
            123.8671875
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Tensorboard_Plot_Examples">
      <description>
        <![CDATA[ Tensorboard plot examples ]]>
      </description>
      <variables>
        <variable inherited="false" name="HOST_LOG_PATH" value="$TENSORBOARD_HOST_LOG_PATH"/>
        <variable inherited="false" name="CONTAINER_LOG_PATH" value="$TENSORBOARD_CONTAINER_LOG_PATH"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/pytorch-logo-dark.png"/>
        <info name="task.documentation" value="PML/PMLUserGuide.html"/>
      </genericInformation>
      <depends>
        <task ref="Start_Tensorboard"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_ai/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="bash">
            <![CDATA[
# fix from https://twitter.com/marc_lelarge/status/1370340616215859203
# wget www.di.ens.fr/~lelarge/MNIST.tar.gz
# wget -O MNIST.tar.gz https://activeeon-public.s3.eu-west-2.amazonaws.com/datasets/MNIST.new.tar.gz
wget -O MNIST.tar.gz https://activeeon-public.s3.eu-west-2.amazonaws.com/datasets/MNIST.old.tar.gz
tar -zxvf MNIST.tar.gz
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import torch
import torchvision.utils as vutils
import numpy as np
import torchvision.models as models
from torchvision import datasets
from tensorboardX import SummaryWriter

# Check if a container platform is enabled
CONTAINER_ENABLED = False
if variables.get("CONTAINER_PLATFORM"):
    CONTAINER_ENABLED = True

# Define the log path for Tensorboard
if CONTAINER_ENABLED:
    LOG_PATH = variables.get("CONTAINER_LOG_PATH")
else:
    LOG_PATH = variables.get("HOST_LOG_PATH")

PA_JOB_ID = "job_ID_" + variables.get("PA_JOB_ID")
PATH = os.path.join(LOG_PATH, PA_JOB_ID)
os.mkdir(PATH)

resnet18 = models.resnet18(False)
writer = SummaryWriter(PATH)
sample_rate = 44100
freqs = [262, 294, 330, 349, 392, 440, 440, 440, 440, 440, 440]

for n_iter in range(100):

    dummy_s1 = torch.rand(1)
    dummy_s2 = torch.rand(1)
    dummy_img = torch.rand(32, 3, 64, 64)  # output from network
    if n_iter % 10 == 0:
        x = vutils.make_grid(dummy_img, normalize=True, scale_each=True)
        writer.add_image('Image', x, n_iter)

        dummy_audio = torch.zeros(sample_rate * 2)
        for i in range(x.size(0)):
            # amplitude of sound should in [-1, 1]
            dummy_audio[i] = np.cos(freqs[n_iter // 10] * np.pi * float(i) / float(sample_rate))
        writer.add_audio('myAudio', dummy_audio, n_iter, sample_rate=sample_rate)

        writer.add_text('Text', 'text logged at step:' + str(n_iter), n_iter)

        for name, param in resnet18.named_parameters():
            writer.add_histogram(name, param.clone().cpu().data.numpy(), n_iter)

        # needs tensorboard 0.4RC or later
        writer.add_pr_curve('xoxo', np.random.randint(2, size=100), np.random.rand(100), n_iter)

dataset = datasets.MNIST('./', train=False, download=False)
images = dataset.test_data[:100].float()
label = dataset.test_labels[:100]

features = images.view(100, 784)
writer.add_embedding(features, metadata=label, label_img=images.unsqueeze(1))

writer.close()
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            236.328125
        </positionTop>
        <positionLeft>
            123.8671875
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2645px;
            height:3500px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-103.3203125px;left:-118.8671875px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_52" style="top: 108.32px; left: 123.867px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Start the Tensorboard server as a service."><img src="/automation-dashboard/styles/patterns/img/wf-icons/tensorboard.png" width="20px">&nbsp;<span class="name">Start_Tensorboard</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_55" style="top: 236.328px; left: 123.867px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Tensorboard plot examples"><img src="/automation-dashboard/styles/patterns/img/wf-icons/pytorch-logo-dark.png" width="20px">&nbsp;<span class="name">Tensorboard_Plot_Examples</span></a></div><svg style="position:absolute;left:172.5px;top:148.5px" width="44" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 23 87 C 33 37 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M23.866592,65.388768 L24.07706021817132,44.20019317465746 L19.373163866824946,52.12946546887149 L10.817757687042807,48.693621307832515 L23.866592,65.388768" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M23.866592,65.388768 L24.07706021817132,44.20019317465746 L19.373163866824946,52.12946546887149 L10.817757687042807,48.693621307832515 L23.866592,65.388768" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 173px; top: 139px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 196px; top: 266px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 196px; top: 226px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
