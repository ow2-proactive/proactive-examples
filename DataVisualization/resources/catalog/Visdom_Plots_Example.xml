<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.11" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Visdom_Plots_Example" onTaskError="continueJobExecution" priority="normal" projectName="2. Visdom Workflows" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd">
  <variables>
    <variable model="PA:Boolean" name="DOCKER_ENABLED" value="True"/>
  </variables>
  <description>
    <![CDATA[ Show an example of several types of plot using the Visdom server. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="data-visualization"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/visdom.png"/>
<info name="Documentation" value="https://doc.activeeon.com/latest/MLOS/MLOSUserGuide.html#_visdom"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task name="Visdom_Plots">
      <description>
        <![CDATA[ This task shows how to use Visdom for different plots ]]>
      </description>
      <variables>
        <variable inherited="true" model="PA:Boolean" name="DOCKER_ENABLED" value="True"/>
        <variable inherited="false" name="VISDOM_ENDPOINT" value=""/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/visdom.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/MLOS/MLOSUserGuide.html#_visdom_client_example"/>
      </genericInformation>
      <depends>
        <task ref="Start_Visdom_Service"/>
      </depends>
      <forkEnvironment javaHome="/usr">
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
if str(variables.get("DOCKER_ENABLED")).lower() == 'true':
  #Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
  # Prepare Docker parameters
  containerName = 'activeeon/dlm3'
  dockerRunCommand =  'docker run '
  dockerParameters = '--rm '
  # Prepare ProActive home volume
  paHomeHost = variables.get("PA_SCHEDULER_HOME")
  paHomeContainer = variables.get("PA_SCHEDULER_HOME")
  proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' '
  # Prepare working directory (For Dataspaces and serialized task file)
  workspaceHost = localspace
  workspaceContainer = localspace
  workspaceVolume = '-v '+localspace +':'+localspace+' '
  # Prepare container working directory
  containerWorkingDirectory = '-w '+workspaceContainer+' '
  # Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node
  preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
else:
  print("Fork environment disabled")
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import os
import math
import numpy as np
import urllib3

from io import BytesIO
from PIL import Image
from argparse import ArgumentParser
from visdom import Visdom
visdom_endpoint = variables.get("VISDOM_ENDPOINT") if variables.get("VISDOM_ENDPOINT") else results[0].__str__()
print("VISDOM_ENDPOINT = ",visdom_endpoint)

if visdom_endpoint is not None:
  visdom_endpoint = visdom_endpoint.replace("http://", "")
  print(visdom_endpoint)

(VISDOM_HOST, VISDOM_PORT) = visdom_endpoint.split(":")

print("Connecting to %s:%s" % (VISDOM_HOST, VISDOM_PORT))
vis = Visdom(server="http://"+VISDOM_HOST,port=int(VISDOM_PORT))
assert vis.check_connection()

# text plot
textwindow = vis.text('Hello World!')
#updatetextwindow = vis.text('Hello World! More text should be here')
#vis.text('And here it is', win=updatetextwindow, append=True)

# show ActiveEon logo
url_image = 'http://s3.eu-west-2.amazonaws.com/activeeon-public/images/logo.jpg'
http = urllib3.PoolManager()
r = http.request('GET', url_image)
image = np.asarray(Image.open(BytesIO(r.data))).astype(np.uint8)
vis_image = image.transpose((2, 0, 1)).astype(np.float64)
vis.image(vis_image,opts=dict(title='ActiveEon', caption='ActiveEon'))

# boxplot
X = np.random.rand(100, 2)
X[:, 1] += 2
vis.boxplot(X=X,opts=dict(legend=['Men', 'Women']))

# stemplot
Y = np.linspace(0, 2 * math.pi, 70)
X = np.column_stack((np.sin(Y), np.cos(Y)))
vis.stem(X=X,Y=Y,opts=dict(legend=['Sine', 'Cosine']))

# quiver plot
X = np.arange(0, 2.1, .2)
Y = np.arange(0, 2.1, .2)
X = np.broadcast_to(np.expand_dims(X, axis=1), (len(X), len(X)))
Y = np.broadcast_to(np.expand_dims(Y, axis=0), (len(Y), len(Y)))
U = np.multiply(np.cos(X), Y)
V = np.multiply(np.sin(X), Y)
vis.quiver(X=U,Y=V,opts=dict(normalize=0.9))

# pie chart
X = np.asarray([19, 26, 55])
vis.pie(X=X,opts=dict(legend=['Residential', 'Non-Residential', 'Utility']))

# mesh plot
x = [0, 0, 1, 1, 0, 0, 1, 1]
y = [0, 1, 1, 0, 0, 1, 1, 0]
z = [0, 0, 0, 0, 1, 1, 1, 1]
X = np.c_[x, y, z]
i = [7, 0, 0, 0, 4, 4, 6, 6, 4, 0, 3, 2]
j = [3, 4, 1, 2, 5, 6, 5, 2, 0, 1, 6, 3]
k = [0, 7, 2, 3, 6, 7, 1, 1, 5, 5, 7, 6]
Y = np.c_[i, j, k]
vis.mesh(X=X, Y=Y, opts=dict(opacity=0.5))

# contour
x = np.tile(np.arange(1, 101), (100, 1))
y = x.transpose()
X = np.exp((((x - 50) ** 2) + ((y - 50) ** 2)) / -(20.0 ** 2))
vis.contour(X=X, opts=dict(colormap='Viridis'))

# surface
vis.surf(X=X, opts=dict(colormap='Hot'))

# line plots
vis.line(Y=np.random.rand(10))
Y = np.linspace(-5, 5, 100)
vis.line(Y=np.column_stack((Y * Y, np.sqrt(Y + 5))),X=np.column_stack((Y, Y)),opts=dict(markers=False))

 # heatmap
vis.heatmap(X=np.outer(np.arange(1, 6), np.arange(1, 11)),
  opts=dict(
    columnnames=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'],
    rownames=['y1', 'y2', 'y3', 'y4', 'y5'],
    colormap='Electric'
  )
)

# histogram
vis.histogram(X=np.random.rand(10000), opts=dict(numbins=20))

# bar plots
vis.bar(X=np.random.rand(20))
vis.bar(X=np.abs(np.random.rand(5, 3)),
  opts=dict(
    stacked=True,
    legend=['Facebook', 'Google', 'Twitter'],
    rownames=['2012', '2013', '2014', '2015', '2016']
  )
)
vis.bar(X=np.random.rand(20, 3),
  opts=dict(stacked=False,legend=['The Netherlands', 'France', 'United States'])
)

# scatter plots
Y = np.random.rand(100)
vis.scatter(X=np.random.rand(100, 2),Y=(Y[Y > 0] + 1.5).astype(int),
  opts=dict(
    legend=['Apples', 'Pears'],
    xtickmin=-5,
    xtickmax=5,
    xtickstep=0.5,
    ytickmin=-5,
    ytickmax=5,
    ytickstep=0.5,
    markersymbol='cross-thin-open'
  )
)
vis.scatter(X=np.random.rand(100, 3),Y=(Y + 1.5).astype(int),
  opts=dict(legend=['Men', 'Women'],markersize=5)
)

# image demo
#vis.image(
#    np.random.rand(3, 512, 256),
#    opts=dict(title='Random!', caption='How random.'),
#)

# grid of images
vis.images(np.random.randn(20, 3, 64, 64),
  opts=dict(title='Random images', caption='How random.')
)
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            274.4270935058594
        </positionTop>
        <positionLeft>
            301.71875
        </positionLeft>
      </metadata>
    </task>
    <task name="Start_Visdom_Service" onTaskError="cancelJob">
      <description>
        <![CDATA[ Start the Visdom server as a service. ]]>
      </description>
      <variables>
        <variable inherited="false" name="SERVICE_ID" value="Visdom"/>
        <variable inherited="true" name="INSTANCE_NAME" value="visdom-server"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/visdom.png"/>
        <info name="task.documentation" value="https://doc.activeeon.com/latest/MLOS/MLOSUserGuide.html"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/cloud-automation-scripts/resources/Service_Start/raw"/>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
variables.put("ENDPOINT_VISDOM",variables.get("ENDPOINT_" + variables.get("INSTANCE_NAME")))
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            141.52780151367188
        </positionTop>
        <positionLeft>
            300.90277099609375
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2351px;
            height:3002px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-136.52780151367188px;left:-295.90277099609375px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_317" style="top: 274.427px; left: 301.736px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/visdom.png" width="20px">&nbsp;<span class="name">Visdom_Plots</span></a></div><div class="task ui-draggable" id="jsPlumb_1_320" style="top: 141.531px; left: 300.917px; z-index: 24;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/visdom.png" width="20px">&nbsp;<span class="name">Start_Visdom_Service</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 342px; top: 304px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable endpointDrag _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 358.917px; top: 171.531px; visibility: visible;" dragid="jsPlumb_1_324" elid="jsPlumb_1_320"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><svg style="position:absolute;left:341.5px;top:181.03125px" width="37.91668701171875" height="93.46875" pointer-events="none" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 92.46875 C -10 42.46875 26.91668701171875 50 16.91668701171875 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" d="M-1.326946897872926,69.8972384921875 L10.248839795942798,52.14896639546555 L2.018018823262156,56.30271002208485 L-3.3456886741598435,48.80400067433047 L-1.326946897872926,69.8972384921875" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected connected" style="position: absolute; height: 20px; width: 20px; left: 342px; top: 264px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>
