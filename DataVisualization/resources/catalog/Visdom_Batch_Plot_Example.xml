<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.8"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
    name="Visdom_Batch_Plot_Example" projectName="Data Visualization"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="DLM_DOCKER_IMAGE" value="activeeon/dlm3" />
    <variable name="DLM_CONTAINER_NAME" value="ml" />
    <variable name="VISDOM_DOCKER_IMAGE" value="activeeon/visdom_server" />
    <variable name="VISDOM_CONTAINER_NAME" value="visdom" />
    <variable name="VISDOM_PORT" value="8097" />
  </variables>
  <description>
    <![CDATA[ Shows an example of several types of plot using the Visdom server. ]]>
  </description>
    <genericInformation>
    <info name="bucketName" value="data-visualization"/>
    <info name="Documentation" value="https://www.activeeon.com/resources/activeeon-machine-learning-visualization-with-visdom.pdf"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="VisdomUI">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="StartVisdom"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.time.*

//def visdom_host = InetAddress.localHost.hostName
def visdom_host = new URL("http://checkip.amazonaws.com").getText()
def visdom_port = variables.get("VISDOM_PORT").toInteger()
def server_started = 0
def limit = 1
def i = 0

if(visdom_host.endsWith(".local"))
  visdom_host = "127.0.0.1"

println GroovySystem.version
while(true){
  i = i + 1
  try{
    Socket socket = new Socket(visdom_host, visdom_port)
    println("Host ${visdom_host} Port ${visdom_port}: IS OPEN")
    server_started = 1
    break
  }
  catch(e){
    println("(try ${i}) Host ${visdom_host} Port ${visdom_port}: IS CLOSED, waiting server for startup...")
  }
  if(i == limit)
    break
  else
    sleep(2000)
}

if(server_started){
  result = "<meta http-equiv=\"refresh\" content=\"1; url=http://"+visdom_host+":"+visdom_port+"/\" /> \n"
  //result+= "<img src=\"https://s3.eu-central-1.amazonaws.com/activeeonpublic/public/images/please_wait.jpg\" />" 
  result+= "<h2><span style=\"color:black\">Please wait while redirecting...</span></h2>"
}
else
  result+= "<h2><span style=\"color:red\">Visdom server is down.</span></h2>"
  //result = "<img src=\"https://s3.eu-central-1.amazonaws.com/activeeonpublic/public/images/server_down.jpg\" />"
println(result)

variables.put("VISDOM_HOST", visdom_host)
variables.put("VISDOM_STATUS", server_started)
//if(!server_started)
  //throw new Exception("Visdom server could not be started!")

resultMetadata.put("content.type", "text/html")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="StartVisdom">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo "Starting visdom server"

export variables_DOCKER_IMAGE=$variables_VISDOM_DOCKER_IMAGE
export variables_CONTAINER_NAME=$variables_VISDOM_CONTAINER_NAME
#export variables_DOCKER_IMAGE=activeeon/visdom_server
#export variables_CONTAINER_NAME=visdom
#export variables_VISDOM_PORT=8097

docker pull $variables_DOCKER_IMAGE
#export RUN_DOCKER="docker run -dit -h dlm -w /root --name=$variables_CONTAINER_NAME $variables_DOCKER_IMAGE"
#docker run -d -p 8097:8097 -h visdom -w /root --name=visdom activeeon/visdom_server python -m visdom.server -port 8097
export RUN_DOCKER="docker run -d -p $variables_VISDOM_PORT:$variables_VISDOM_PORT -h visdom -w /root --name=$variables_CONTAINER_NAME $variables_DOCKER_IMAGE python -m visdom.server -port $variables_VISDOM_PORT"
echo "Checking if docker container is running"
if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
then 
  echo "OK. The $variables_CONTAINER_NAME container is running!"
else 
  echo "$variables_CONTAINER_NAME container is not running."
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "false" ]; 
  then 
    echo "Starting it..."
    docker start $variables_CONTAINER_NAME
  else 
    echo "Running it..."
    echo $RUN_DOCKER
    $($RUN_DOCKER)
    sleep 5
  fi
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
  then 
    echo "OK. The $variables_CONTAINER_NAME container is running now!"
  else 
    echo "$variables_CONTAINER_NAME container is not running."
    echo "An error occurred while running the container."
    exit
  fi
fi
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="StartDLM">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
export variables_DOCKER_IMAGE=$variables_DLM_DOCKER_IMAGE
export variables_CONTAINER_NAME=$variables_DLM_CONTAINER_NAME
#export variables_DOCKER_IMAGE=activeeon/dlm3
#export variables_CONTAINER_NAME=ml

echo "Updating local docker image"
docker pull $variables_DOCKER_IMAGE
export RUN_DOCKER="docker run -dit -h dlm -w /root --name=$variables_CONTAINER_NAME $variables_DOCKER_IMAGE"
echo "Checking if docker container is running"
if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
then 
  echo "OK. The $variables_CONTAINER_NAME container is running!"
else 
  echo "$variables_CONTAINER_NAME container is not running."
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "false" ]; 
  then 
    echo "Starting it..."
    docker start $variables_CONTAINER_NAME
  else 
    echo "Running it..."
    echo $RUN_DOCKER
    $($RUN_DOCKER)
    sleep 5
  fi
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
  then 
    echo "OK. The $variables_CONTAINER_NAME container is running now!"
  else 
    echo "$variables_CONTAINER_NAME container is not running."
    echo "An error occurred while running the container."
    exit
  fi
fi
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="RunDemo">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <depends>
        <task ref="StartDLM"/>
        <task ref="VisdomUI"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo "Visdom server status: $variables_VISDOM_STATUS"
if [ $variables_VISDOM_STATUS -eq 0 ]
then
  echo "Visdom server is down...exiting"
  exit
fi

#export variables_DLM_CONTAINER_NAME=ml
export variables_CONTAINER_NAME=$variables_DLM_CONTAINER_NAME
# export variables_VISDOM_PORT=8097
# export variables_VISDOM_CONTAINER_NAME=visdom
export variables_VISDOM_CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $variables_VISDOM_CONTAINER_NAME)
echo "Visdom server container IP ($variables_VISDOM_CONTAINER_NAME): $variables_VISDOM_CONTAINER_IP"

docker exec $variables_CONTAINER_NAME /bin/bash -c 'if [ ! -d "visdom" ]; then git clone https://github.com/andrewssobral/visdom.git ; else echo visdom already exists ; fi'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd visdom && git pull && pip install -e . && python setup.py install'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'if [ ! -d "test_visdom" ]; then git clone https://gist.github.com/5f1c7388eaebdd74971366f5571ce9e4.git test_visdom ; else echo visdom_test already exists ; fi'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd test_visdom && git pull'
docker exec $variables_CONTAINER_NAME /bin/bash -c "python test_visdom/test_visdom.py --host=$variables_VISDOM_CONTAINER_IP --port=$variables_VISDOM_PORT"
]]>
          </code>
        </script>
      </scriptExecutable>
      <cleaning>
        <script>
          <code language="bash">
            <![CDATA[
docker stop $variables_DLM_CONTAINER_NAME
]]>
          </code>
        </script>
      </cleaning>
    </task>
  </taskFlow>
</job>