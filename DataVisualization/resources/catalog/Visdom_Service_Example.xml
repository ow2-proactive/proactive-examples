<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.10"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
    name="Visdom_Service_Example" projectName="Visdom Workflows"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2"
>
  <variables>
    <variable name="instance_name" value="visdom-server-1" />
  </variables>
  <description>
    <![CDATA[ This workflow shows how to use PCA to ease deployment of service dependencies.
Here, VisdomTask needs Visdom service.
First, a bind_or_start_service task (Examples/5. Cloud Automation Task Templates), specifies the service we want to start, and an instance name, which is inherited by a job variable.
Thus, VisdomTask can use a "endpoint" variable where service is running. Everything is handled by the previous bind_or_start_service task.
Also, opening result of bind_or_start_service in a browser, you are automatically redirected your Visdom dashboard. You can also retrieve this URL from PCA portal.
Once VisdomTask is finished, job goes through a Validation step so the Visdom keeps running and the user can still visualize his results.
Go to the notification portal and validate to terminate the service with the task terminate_service and then the, job properly.
You can share Visdom service reusing the same instance name. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="data-visualization"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/visdom.png"/>
    <info name="Documentation" value="https://doc.activeeon.com/latest/MLOS/MLOSUserGuide.html#_visdom"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Bind_or_Start_Visdom_Service"
    
    
    onTaskError="cancelJob" >
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <variables>
        <variable name="service_model" value="http://models.activeeon.com/pca/visdom" inherited="false" />
        <variable name="instance_name" value="visdom-server-1" inherited="true" />
      </variables>
      <inputFiles>
        <files  includes="cloud-automation-service-client-1.0.0-all.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-1.0.0-all.jar"/>
        </additionalClasspath>
        <envScript>
          <script>
            <code language="python">
              <![CDATA[

]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.client.api.CloudAutomationApi;

schedulerapi.connect()

pcaUrl = variables.get("PA_SCHEDULER_REST_URL").replaceAll("/rest\\z", "/cloud-automation-service");
sessionId = schedulerapi.getSession();

api = new CloudAutomationApi(pcaUrl, sessionId);

endpoint = api.getServiceEndpointOrCreate(variables.get("service_model"), variables.get("instance_name"));
endpoint = endpoint.replaceAll("\n",'');

println "Service " + variables.get("service_model") + " is available on " + endpoint

variables.put("endpoint", endpoint)
result = '<meta http-equiv="refresh" content="1; url=http://' + endpoint + '/" />'
result+= '<h2><span style="color:black">Please wait while redirecting...</span></h2>'
resultMetadata.put("content.type", "text/html")
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="Wait_Until_Validation"
    
    
    onTaskError="pauseJob" >
      <description>
        <![CDATA[ Task to pause the job and send a validation message to the notification service ]]>
      </description>
      <depends>
        <task ref="Visdom_Client_Example"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="python">
            <![CDATA[
# Please fill variables
notification_message = 'Please validate to terminate the service'

# Don't change code below unless you know what you are doing
from org.ow2.proactive.addons.webhook import Webhook

jobid = variables.get("PA_JOB_ID")
schedulerURL =  variables.get("PA_SCHEDULER_REST_URL")

print schedulerURL
# get sessionid
schedulerapi.connect()

# pause job
schedulerapi.pauseJob(jobid)


# send web validation
print "Sending web validation..."
url = schedulerURL.replace("/rest", "") +'/notification-service/notifications'
headers = '{\"Content-Type\" : \"application/json\" }'
notification_content = '{\"description\": \"'+notification_message+'\", \"jobId\": \"'+jobid+'\" , \"validation\": \"true\"}'
Webhook.execute ( 'POST', url, headers, notification_content);
print "Web Validation sent"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Terminate_Visdom_Service"
    
    
    onTaskError="cancelJob" >
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <variables>
        <variable name="service_model" value="http://models.activeeon.com/pca/visdom" inherited="false" />
        <variable name="instance_name" value="visdom-server-1" inherited="true" />
      </variables>
      <depends>
        <task ref="Wait_Until_Validation"/>
      </depends>
      <inputFiles>
        <files  includes="cloud-automation-service-client-1.0.0-all.jar" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="cloud-automation-service-client-1.0.0-all.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.client.api.CloudAutomationApi;

schedulerapi.connect()
pcaUrl = variables.get("PA_SCHEDULER_REST_URL").replaceAll("/rest\\z", "/cloud-automation-service");
sessionId = schedulerapi.getSession();

api = new CloudAutomationApi(pcaUrl, sessionId);

println "Terminating " + variables.get("service_model") + " / " + variables.get("instance_name");
try{
  api.terminateServiceFromInstanceName(variables.get("service_model"), variables.get("instance_name"));
}catch(Exception ex){
  println "Service was already terminated"
}
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Visdom_Client_Example">
      <description>
        <![CDATA[ The simplest task, ran by a python engine. ]]>
      </description>
      <depends>
        <task ref="Bind_or_Start_Visdom_Service"/>
      </depends>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters 
containerName = 'activeeon/dlm3' 
dockerRunCommand =  'docker run ' 
dockerParameters = '--rm ' 
# Prepare ProActive home volume 
paHomeHost = variables.get("PA_SCHEDULER_HOME") 
paHomeContainer = variables.get("PA_SCHEDULER_HOME") 
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' 
# Prepare working directory (For Dataspaces and serialized task file) 
workspaceHost = localspace 
workspaceContainer = localspace 
workspaceVolume = '-v '+localspace +':'+localspace+' ' 
# Prepare container working directory 
containerWorkingDirectory = '-w '+workspaceContainer+' ' 
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node 
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
from visdom import Visdom

VISDOM_HOST,VISDOM_PORT = variables.get("endpoint").split(":")

print("Connecting to %s" % VISDOM_PORT)
vis = Visdom(server="http://"+VISDOM_HOST,port=int(VISDOM_PORT))
assert vis.check_connection()

textwindow = vis.text('Hello World!')
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>