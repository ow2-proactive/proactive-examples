<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="Body_Patch" projectName="Body" tags="REST,API,Web Service" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2"  >
  <variables>
    <variable name="ENDPOINT" value="https://postman-echo.com" model="PA:URL" description="Base URL of the server or service that will be queried." group="Http Connection" advanced="false" hidden="false"/>
    <variable name="USER" value=""  description="If the service requires basic http authentication, enter a username." group="Http Connection" advanced="true" hidden="false"/>
    <variable name="PASSWORD" value="" model="PA:HIDDEN" description="If the service requires basic http authentication, enter a password." group="Http Connection" advanced="true" hidden="false"/>
  </variables>
  <description>
    <![CDATA[ A workflow that executes a REST request using the method PATCH in order to partially update some data. ] ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="communication-rest"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/api-rest.png"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Rest_Body_Patch" 
    
    
    
    
    fork="true">
      <description>
        <![CDATA[ A task that executes a REST request using the method PATCH in order to partially update some data.

This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication ]]>
      </description>
      <variables>
        <variable name="ENDPOINT" value="https://postman-echo.com" inherited="true" model="PA:URL" description="Base URL of the server or service that will be queried." group="Http Connection" advanced="false" hidden="false"/>
        <variable name="USER" value="" inherited="true"  description="If the service requires basic http authentication, enter a username." group="Http Connection" advanced="true" hidden="false"/>
        <variable name="PASSWORD" value="" inherited="true" model="PA:HIDDEN" description="If the service requires basic http authentication, enter a password." group="Http Connection" advanced="true" hidden="false"/>
        <variable name="SSL_DISABLE_CHECK" value="true" inherited="false" model="PA:BOOLEAN" description="If true, disable SSL certificate verification" group="Http Connection" advanced="true" hidden="false"/>
        <variable name="DEBUG" value="false" inherited="false" model="PA:BOOLEAN" description="If true, print the full request and response content in the task output." group="Http Connection" advanced="true" hidden="false"/>
        <variable name="PROXY_HOST" value="" inherited="false"  description="The hostname of the proxy" group="Proxy Connection" advanced="true" hidden="false"/>
        <variable name="PROXY_PORT" value="" inherited="false"  description="The port of the proxy" group="Proxy Connection" advanced="true" hidden="false"/>
        <variable name="PROXY_SCHEME" value="http" inherited="false" model="PA:LIST(http,https)" description="The scheme of the proxy" group="Proxy Connection" advanced="true" hidden="false"/>
        <variable name="PATH" value="/patch" inherited="false"  description="Path of the request (relative to the base url)" group="Http Request" advanced="false" hidden="false"/>
        <variable name="CONTENT_TYPE" value="application/json;charset = UTF-8" inherited="false"  description="Content-Type of the request, should be &quot;application/json&quot; with eventual encoding." group="Http Request" advanced="true" hidden="false"/>
        <variable name="REQUEST_BODY" value="{ &quot;param1&quot;:&quot;value1&quot; }" inherited="false" model="PA:JSON" description="A JSON parameter containing the request body." group="Http Request" advanced="false" hidden="false"/>
        <variable name="RESPONSE_FORMAT" value="string" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;" group="Http Response" advanced="false" hidden="false"/>
        <variable name="RESPONSE_PATH" value="." inherited="false"  description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response" advanced="false" hidden="false"/>
        <variable name="HEADERS" value="{ &quot;head1&quot;: &quot;val1&quot; }" inherited="false" model="PA:JSON" description="Additional headers of the request, provided as a JSON key/value structure. Headers can also be specified by adding &lt;i&gt;HEADER_headername&lt;/i&gt; variables." group="Http Request" advanced="false" hidden="false"/>
        <variable name="QUERY_PARAMETERS" value="{ &quot;param2&quot;: &quot;value2&quot; }" inherited="false" model="PA:JSON" description="Query parameters of the request, provided as a JSON key/value structure. Parameters can also be specified by adding &lt;i&gt;QUERY_PARAM_paramname&lt;/i&gt; variables." group="Http Request" advanced="false" hidden="false"/>
        <variable name="COOKIES" value="{ &quot;cookie1&quot;: &quot;val1&quot; }" inherited="false" model="PA:JSON" description="Additional cookies of the request, provided as a JSON key/value structure. Cookies can also be specified by adding &lt;i&gt;COOKIE_cookiename&lt;/i&gt; variables." group="Http Request" advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/api-rest.png"/>
      </genericInformation>
      <inputFiles>
        <files  includes="rest-assured-fat-3.3.0.jar" accessMode="cacheFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;
import groovy.json.JsonSlurper;
import io.restassured.specification.ProxySpecification

debug = Boolean.parseBoolean(variables.get("DEBUG"))

if(variables.get("PROXY_HOST")?.trim() && variables.get("PROXY_PORT")?.trim()){
  proxySpecification = new ProxySpecification(variables.get("PROXY_HOST"), variables.get("PROXY_PORT"), variables.get("PROXY_SCHEME"))
  RestAssured.proxy(proxySpecification)
}

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

def jsonSlurper = new JsonSlurper()
if (variables.get("HEADERS") != null && variables.get("HEADERS").length() > 0) {
    headersObject = jsonSlurper.parseText(variables.get("HEADERS"))
    if (!headersObject instanceof Map) {
        throw new IllegalArgumentException("HEADERS must contain a JSON Map structure")
    } else {
        headersObject.each { restCall = restCall.header(it.key, it.value) }
    }
}

if (variables.get("QUERY_PARAMETERS") != null && variables.get("QUERY_PARAMETERS").length() > 0) {
    paramsObject = jsonSlurper.parseText(variables.get("QUERY_PARAMETERS"))
    if (!paramsObject instanceof Map) {
        throw new IllegalArgumentException("QUERY_PARAMETERS must contain a JSON Map structure")
    } else {
        paramsObject.each { restCall = restCall.queryParam(it.key, it.value) }
    }
}

if (variables.get("COOKIES") != null && variables.get("COOKIES").length() > 0) {
    cookiesObject = jsonSlurper.parseText(variables.get("COOKIES"))
    if (!cookiesObject instanceof Map) {
        throw new IllegalArgumentException("COOKIES must contain a JSON Map structure")
    } else {
        cookiesObject.each { restCall = restCall.cookie(it.key, it.value) }
    }
}

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.patch(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;

    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            448
        </positionTop>
        <positionLeft>
            649
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2736px;
            height:3132px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-443px;left:-644px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_22" style="top: 448px; left: 649px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task that executes a REST request using the method PATCH in order to partially update some data.

This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication"><img src="/automation-dashboard/styles/patterns/img/wf-icons/api-rest.png" width="20px">&nbsp;<span class="name">Rest_Body_Patch</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 699px; top: 478px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>