<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.13" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd"  name="ServiceNow_Mark_Task_As_Resolved" projectName="ServiceNow" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2">
  <description>
    <![CDATA[ A workflow that runs a REST request to mark a Task such as an incident, problem, ticket or a change request as resolved in a ServiceNow instance using the Table API.]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="servicenow"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ServiceNow.png"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="ServiceNow_Mark_Task_As_Resolved" fork="true">
      <description>
        <![CDATA[
A task performing a rest PUT request to Mark a ServiceNow task as resolved or closed.
It accepts the following parameters:

ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user for ServiceNow (inherited from job variable)
PASSWORD: basic auth password for ServiceNow (inherited from job variable)
TASK_TYPE: the type of task to update in ServiceNow. It corresponds to a table in ServiceNow. It can be incident, ticket, problem, change_request.
STATE_NOTE: The note that will be bound to the task resolution
STATE: The future state of the ServiceNow Task. Can be 6 = Resolved, or 7 = Closed
CLOSED_BY: The user that resolved the Task, must be a ServiceNow user.
SYS_ID: The System id of the Task in ServiceNow.
By default, it will read it in the script variables. It means that if the ServiceNow Task is created
in the same workflow and execution chain as this one, there is nothing to do as the Task creation workflow saves the SYS_ID.
If the resolution (this task) is executed elsewhere, the SYS_ID field must be provided and its "inherited" flag unchecked.
Please visit https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_inherited_variables
to have more information on script variables.
RETURNED_FIELDS: Fields of the queried table to be returned in the response
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be "application/json" with eventual encoding.
REQUEST_BODY: a json parameter containing the request body. Example at https://developer.servicenow.com/dev.do#!/reference/api/quebec/rest/c_TableAPI#table-POST (Make sure to select the correct
release name)
DEBUG: to print the full request and response content in the task output
RESPONSE_PATH: which data to extract in the response. It uses the GPath notation (https://groovy-lang.org/processing-xml.html) ]]>
      </description>
      <variables>
        <variable name="ENDPOINT" value="https://SN_SERVER/api/now" inherited="false" model="PA:URL"/>
        <variable name="USER" value="admin" inherited="false" model="PA:NOT_EMPTY_STRING"/>
        <variable name="PASSWORD" value="ENC(sloEQW+wCcO2STVBXkxpgdsQr0xqoEMp)" inherited="false" model="PA:HIDDEN"/>
        <variable name="TASK_TYPE" value="incident" inherited="false" model="PA:LIST(incident,ticket,problem,change_request)"/>
        <variable name="STATE_NOTE" value="The task has been resolved" inherited="false" model="PA:NOT_EMPTY_STRING"/>
        <variable name="STATE" value="6" inherited="false" model="PA:LIST(6,7)"/>
        <variable name="CLOSED_BY" value="" inherited="false"/>
        <variable name="SYS_ID" value="" inherited="true"/>
        <variable name="PATH" value="/table/${TASK_TYPE}" inherited="false" model="PA:NOT_EMPTY_STRING"/>
        <variable name="RETURNED_FIELDS" value="number,sys_created_on,assigned_to,short_description,description,priority" inherited="false"/>
        <variable name="SSL_DISABLE_CHECK" value="true" inherited="false" model="PA:BOOLEAN"/>
        <variable name="CONTENT_TYPE" value="application/json;charset = UTF-8" inherited="false"/>
        <variable name="REQUEST_BODY" value="{&quot;state&quot;:&quot;${STATE}&quot;,&quot;close_notes&quot;:&quot;${STATE_NOTE}&quot;,&quot;close_code&quot;:&quot;Solved (Permanently)&quot;,&quot;closed_by&quot;:&quot;${CLOSED_BY}&quot;}" inherited="false" model="PA:JSON"/>
        <variable name="DEBUG" value="false" inherited="false" model="PA:BOOLEAN"/>
        <variable name="RESPONSE_PATH" value="." inherited="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ServiceNow.png"/>
      </genericInformation>
      <inputFiles>
        <files  includes="rest-assured-fat-3.3.0.jar" accessMode="cacheFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))
                  .urlEncodingEnabled(false)

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

if (Strings.isNullOrEmpty(variables.get("TASK_TYPE"))) {
     throw new IllegalArgumentException("Table to query cannot be empty")
}

if (Strings.isNullOrEmpty(variables.get("SYS_ID"))) {
     throw new IllegalArgumentException("Tasks SYS_ID cannot be empty")
}

// Add fields to be returned in the query response
restCall = restCall.queryParam("sysparm_fields", variables.get("RETURNED_FIELDS").replaceAll(",","%2C"))

// Add others if they have been added in task variables
variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("PARAM_")})
	.forEach({ entry -> 
        restCall = restCall.queryParam(entry.getKey().replace("PARAM_",""), entry.getValue().replaceAll(",","%2C")) 
    });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.put(variables.get("ENDPOINT") + variables.get("PATH") + "/" + variables.get("SYS_ID"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

if (variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
}
result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
println result
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            322.6833190917969
        </positionTop>
        <positionLeft>
            487.10003662109375
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2255px;
            height:2294px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-317.6833190917969px;left:-482.10003662109375px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable active-task" style="top: 322.683px; left: 487.1px;" id="jsPlumb_1_129"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest POST request to create a task on a servicenow instance using a json request body.

A task performing a rest POST request to create a task on a servicenow instance using a json request body.

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user for ServiceNow (inherited from job variable)
PASSWORD: basic auth password for ServiceNow (inherited from job variable)
TASK_TYPE: the type of task to update in ServiceNow. It corresponds to a table in ServiceNow. It can be incident, ticket, problem, change_request.
STATE_NOTE: The note that will be bound to the task resolution
STATE: The future state of the ServiceNow Task. Can be 6 = Resolved, or 7 = Closed
SYS_ID: The System id of the Task in ServiceNow.
By default, it will read it in the script variables. It means that if the ServiceNow Task is created
in the same workflow as this one, there is nothing to do as the Task creation workflow saves the SYS_ID.
If the resolution (this task) is executed elsewhere, the SYS_ID field must be provided and its "inherited" flag unchecked.
RETURNED_FIELDS: Fields of the queried table to be returned in the response
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be "application/json" with eventual encoding.
REQUEST_BODY: a json parameter containing the request body. Example at https://developer.servicenow.com/dev.do#!/reference/api/quebec/rest/c_TableAPI#table-POST (Make sure to select the correct
release name)
DEBUG: to print the full request and response content in the task output
RESPONSE_PATH: which data to extract in the response. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>