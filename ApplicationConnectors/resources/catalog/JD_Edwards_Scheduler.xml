<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.13" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="JD_Edwards_Scheduler" onTaskError="continueJobExecution" priority="normal" projectName="ERP" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd">
  <variables>
    <variable name="JDE_ENDPOINT" value="https://ais_server:port/jderest" description="AIS Server endpoint"/>
    <variable name="JDE_USER" value="demo" description="JD Edwards EnterpriseOne username, which is required if other authentication methods are not being used"/>
    <variable model="PA:HIDDEN" name="JDE_PASSWORD" value="ENC(B8nLpbVTAvupPzLkccUo/g==)"/>
    <variable name="JDE_ENVIRONMENT" value="JDV920" description="Specify the environment to use for login. If not specified, the default environment configured for the AIS Server will be used."/>
    <variable name="JDE_ROLE" value="*ALL" description="Role to use for login. If not specified, the default role configured for the AIS Server will be used."/>
    <variable name="JDE_DEVICE" value="Curl" description="Identifier for the device making the service call. If not provided, the requesting IP address is used."/>
    <variable name="ENDPOINT" value="NTF_1708250001TOOLS" description="Base URL of the server or service that will be queried."/>
  </variables>
  <description>
    <![CDATA[ A workflow template that runs REST requests to interface with a JD Edwards EnterpriseOne AIS Server.
These REST requests are supported beginning with JD Edwards EnterpriseOn Server, version 9.1.4.x.
Before the execution, the user has to provide the following variables:
JDE_ENDPOINT (required) is the AIS Server endpoint.
JDE_USER (required) is the JD Edwards EnterpriseOne username, which is required if other authentication methods are not being used.
JDE_PASSWORD (required) is the JD Edwards EnterpriseOne password, which is required if other authentication methods are not being used.
JDE_DEVICE (optional) is an identifier for the device making the service call. If not provided, the requesting IP address is used.
JDE_ROLE (optional) is the role to use for login. If not specified, the default role configured for the AIS Server will be used.
JDE_ENVIRONMENT (optional) specify the environment to use for login. If not specified, the default environment configured for the AIS Server will be used.
ENDPOINT (required) is the notification or orchestration OMW object name or it's name ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="application-connectors"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/JDE.png"/>
<info name="Documentation" value="https://docs.oracle.com/cd/E53430_01/EOTRS/api-scheduler-service.html"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="Authentication">
      <description>
        <![CDATA[ A task performing a rest POST request to authenticate to a AIS Server.
The authentication is performed via Username/Password Request using a json request body.
It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be "application/json" with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name> ]]>
      </description>
      <variables>
        <variable inherited="false" name="ENDPOINT" value="${JDE_ENDPOINT}" description="base url of the request (inherited from job variable)"/>
        <variable inherited="false" name="PATH" value="/v2/tokenrequest" description="Path of the request (relative to the base url)"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true" description="If true, disable SSL certificate verification"/>
        <variable inherited="false" name="CONTENT_TYPE" value="application/json;charset = UTF-8" description="content-type of the request, should be 'application/json' with eventual encoding."/>
        <variable inherited="false" model="PA:JSON" name="REQUEST_BODY" value="{ &quot;username&quot;: &quot;${JDE_USERNAME}&quot;,         &quot;password&quot;: &quot;${JDE_PASSWORD}&quot;,     &quot;deviceName&quot;: &quot;${JDE_DEVICE}&quot;,        &quot;environment&quot;: &quot;${JDE_ENVIRONMENT}&quot;,        &quot;role&quot;: &quot;${JDE_ROLE}&quot;   }" description="A JSON parameter containing the request body."/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="false" description="If true, print the full request and response content in the task output."/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="string" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"/>
        <variable inherited="false" name="RESPONSE_PATH" value="userInfo.token" description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/JDE.png"/>
        <info name="task.documentation" value="https://docs.oracle.com/cd/E53430_01/EOTRS/api-token-request-service.html"/>
      </genericInformation>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
variables.put("AUTH_TOKEN", result)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            50.53125
        </positionTop>
        <positionLeft>
            141.28125
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Logout">
      <description>
        <![CDATA[ A task performing a rest POST request to logout from the AIS server and terminate the session held for the token passed.

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be "application/json" with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name> ]]>
      </description>
      <variables>
        <variable inherited="true" name="ENDPOINT" value="${JDE_ENDPOINT}" description="Base URL of the server or service that will be queried."/>
        <variable inherited="false" name="PATH" value="/v2/tokenrequest/logout" description="Path of the request (relative to the base url)"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true" description="If true, disable SSL certificate verification"/>
        <variable inherited="false" name="CONTENT_TYPE" value="application/json;charset = UTF-8" description="Content-Type of the request"/>
        <variable inherited="false" model="PA:JSON" name="REQUEST_BODY" value="{ &quot;token&quot;:&quot;${AUTH_TOKEN}&quot; }" description="A JSON parameter containing the request body."/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="false" description="If true, print the full request and response content in the task output."/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="string" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"/>
        <variable inherited="false" name="RESPONSE_PATH" value="." description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/JDE.png"/>
      </genericInformation>
      <depends>
        <task ref="Start_Job"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            359.53125
        </positionTop>
        <positionLeft>
            147.28125
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="Start_Job">
      <description>
        <![CDATA[ A task performing a rest POST request to start a job using the name or OMW object name of the notification or orchestration.

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be "application/json" with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name> ]]>
      </description>
      <variables>
        <variable inherited="true" name="ENDPOINT" value="${JDE_ENDPOINT}" description="Base URL of the server or service that will be queried."/>
        <variable inherited="false" name="PATH" value="/v2/scheduler/startjob/${ENDPOINT}" description="Path of the request (relative to the base url)"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true" description="If true, disable SSL certificate verification"/>
        <variable inherited="false" name="CONTENT_TYPE" value="application/json;charset = UTF-8" description="Content-Type of the request"/>
        <variable inherited="false" model="PA:JSON" name="REQUEST_BODY" value="{ &quot;token&quot;:&quot;$AUTH_TOKEN&quot; }" description="A JSON parameter containing the request body."/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="false" description="If true, print the full request and response content in the task output."/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="json" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"/>
        <variable inherited="false" name="RESPONSE_PATH" value="." description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/JDE.png"/>
        <info name="task.documentation" value="https://docs.oracle.com/cd/E53430_01/EOTRS/op-v2-scheduler-startjob-endpoint-post.html"/>
      </genericInformation>
      <depends>
        <task ref="Authentication"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            180.53125
        </positionTop>
        <positionLeft>
            176.28125
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2144px;
            height:2908px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-45.53125px;left:-136.28125px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_298" style="top: 50.5312px; left: 141.281px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest POST request to authenticate to a AIS Server.
The authentication is performed via Username/Password Request using a json request body.
It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be &quot;application/json&quot; with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name>"><img src="/automation-dashboard/styles/patterns/img/wf-icons/JDE.png" width="20px">&nbsp;<span class="name">Authentication</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_301" style="top: 359.531px; left: 147.281px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest POST request to logout from the AIS server and terminate the session held for the token passed.

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be &quot;application/json&quot; with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name>"><img src="/automation-dashboard/styles/patterns/img/wf-icons/JDE.png" width="20px">&nbsp;<span class="name">Logout</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_ active-task" id="jsPlumb_1_304" style="top: 180.531px; left: 176.281px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest POST request to start a job using the name or OMW object name of the notification or orchestration.

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be &quot;application/json&quot; with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name>"><img src="/automation-dashboard/styles/patterns/img/wf-icons/JDE.png" width="20px">&nbsp;<span class="name">Start_Job</span></a></div><svg style="position:absolute;left:186.5px;top:220.5px" width="50" height="140" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 139 C -10 89 39 50 29 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M0.8665312499999991,106.67003125 L12.992270483519349,89.29284942898282 L4.635446989255534,93.18688346654854 L-0.49087729993210605,85.52393368972729 L0.8665312499999991,106.67003125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M0.8665312499999991,106.67003125 L12.992270483519349,89.29284942898282 L4.635446989255534,93.18688346654854 L-0.49087729993210605,85.52393368972729 L0.8665312499999991,106.67003125" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:182px;top:90.5px" width="54.5" height="91" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 33.5 90 C 43.5 40 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M33.19404300000001,67.17492 L30.874464988967922,46.11264192162641 L27.150423635257035,54.54659212279853 L18.24613711176645,52.15626128636939 L33.19404300000001,67.17492" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M33.19404300000001,67.17492 L30.874464988967922,46.11264192162641 L27.150423635257035,54.54659212279853 L18.24613711176645,52.15626128636939 L33.19404300000001,67.17492" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 182.5px; top: 81px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 187px; top: 390px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 187px; top: 350px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 216px; top: 211px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 216px; top: 171px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
