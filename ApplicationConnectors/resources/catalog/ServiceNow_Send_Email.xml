<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.13" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="ServiceNow_Create_Task" onTaskError="continueJobExecution" priority="normal" projectName="ServiceNow" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd">
  <description>
    <![CDATA[ A workflow that runs a REST request to the EMAIL API of a ServiceNow instance.
It can have up to 100 recipients and emails in copy. The body can be html]]>
  </description>
  <genericInformation>
<info name="bucketName" value="application-connectors"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ServiceNow.png"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="ServiceNow_Send_Email">
      <description>
        <![CDATA[ A task performing a rest POST request to create a task on a servicenow instance using a json request body.

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user for ServiceNow (inherited from job variable)
PASSWORD: basic auth password for ServiceNow (inherited from job variable)
TO: Comma separated list of emails of the direct recipients for the email message (MAX 100 emails)
CC: Comma separated list of emails of the copied recipients for the email message (MAX 100 emails)
SUBJECT: Subject of the email
HTML: Content of the Email, can contain HTML tags
TABLE_NAME: Name of the table to save the email. Use this parameter to associate an email message to a particular related record elsewhere in the system.
This parameter also requires specifying the table_record_id parameter.
TABLE_RECORD_ID: Target-related record to which the email applies. Use this parameter to associate an email message to a particular related record elsewhere in the system.
This parameter also requires specifying the table_name parameter.
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be "application/json" with eventual encoding.
REQUEST_BODY: a json parameter containing the request body
DEBUG: to print the full request and response content in the task output
]]>
      </description>
      <variables>
        <variable name="ENDPOINT" value="https://SN_SERVER/api/now/v1/email" inherited="false" model="PA:URL" description="Base url of the request (inherited from job variable)"/>
        <variable name="USER" value="admin" inherited="false" model="PA:NOT_EMPTY_STRING" description="Basic auth user for ServiceNow (inherited from job variable)"/>
        <variable name="PASSWORD" value="ENC(4vzvbNULmKlWZC4vJCWOmQ==)" inherited="false" model="PA:HIDDEN" description="Basic auth password for ServiceNow (inherited from job variable)"/>
        <variable name="TO" value="" inherited="false" description="Comma separated list of emails of the direct recipients for the email message (MAX 100 emails)"/>
        <variable name="CC" value="" inherited="false" description="Comma separated list of emails of the copied recipients for the email message (MAX 100 emails)"/>
        <variable name="SUBJECT" value="" inherited="false" description="Subject of the email"/>
        <variable name="HTML" value="" inherited="false" description="Content of the Email, can contain HTML tags"/>
        <variable name="TABLE_NAME" value="" inherited="false" description="Name of the table to save the email. Use this parameter to associate an email message to a particular related record elsewhere in the system."/>
        <variable name="TABLE_RECORD_ID" value="" inherited="false" description="Target-related record to which the email applies. Use this parameter to associate an email message to a particular related record elsewhere in the system."/>
        <variable name="SSL_DISABLE_CHECK" value="true" inherited="false" model="PA:BOOLEAN" description="If true, disable SSL certificate verification"/>
        <variable name="CONTENT_TYPE" value="application/json;charset = UTF-8" inherited="false" description="Content-type of the request, should be 'application/json' with eventual encoding."/>
        <variable name="REQUEST_BODY" value="{&quot;to&quot;:&quot;&quot;,&quot;cc&quot;:&quot;&quot;,&quot;subject&quot;:&quot;${SUBJECT}&quot;,&quot;html&quot;:&quot;${HTML}&quot;,&quot;table_name&quot;:&quot;${TABLE_NAME}&quot;,&quot;table_record_id&quot;:&quot;${TABLE_RECORD_ID}&quot;}" inherited="false" model="PA:JSON" description="A json parameter containing the request body"/>
        <variable name="DEBUG" value="false" inherited="false" model="PA:BOOLEAN" description="To print the full request and response content in the task output"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/ServiceNow.png"/>
      </genericInformation>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;
import groovy.json.JsonSlurper;
import groovy.json.JsonOutput;

def jsonSlurper = new JsonSlurper();
def jsonBody = jsonSlurper.parseText(variables.get("REQUEST_BODY"));

if (Strings.isNullOrEmpty(variables.get("REQUEST_BODY"))) {
    println ("Request body is empty, terminating task execution")
    return;
}

if (Strings.isNullOrEmpty(variables.get("TO"))) {
    println ("Recipient is empty, terminating task execution")
    return;
}

debug = Boolean.parseBoolean(variables.get("DEBUG"));

restCall = given().contentType(variables.get("CONTENT_TYPE"))
                  .urlEncodingEnabled(false)

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

jsonBody.to = variables.get("TO").split(",");

if (!Strings.isNullOrEmpty(variables.get("CC"))) {
  jsonBody.cc = variables.get("CC").split(",");
}

restCall = restCall.body(JsonOutput.toJson(jsonBody))

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.post(variables.get("ENDPOINT"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            329.48333740234375
        </positionTop>
        <positionLeft>
            506
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2470px;
            height:3032px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-324.48333740234375px;left:-501px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" style="top: 329.483px; left: 506px;" id="jsPlumb_1_19"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest POST request to create a task on a servicenow instance using a json request body.

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user for servicenow (inherited from job variable)
PASSWORD: basic auth password for servicenow (inherited from job variable)
TASK_TYPE: the type of task to create in ServiceNow. It corresponds to a table in ServiceNow. It can be incident, ticket, problem, change_request
RETURNED_FIELDS: Fields of the queried table to be returned in the response
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be "application/json" with eventual encoding.
REQUEST_BODY: a json parameter containing the request body. Example at https://developer.servicenow.com/dev.do#!/reference/api/quebec/rest/c_TableAPI#table-POST (Make sure to select the correct
release name)
DEBUG: to print the full request and response content in the task output
RESPONSE_PATH: which data to extract in the response. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)
   </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
