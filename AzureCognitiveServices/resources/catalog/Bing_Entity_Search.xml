<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.10"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.10 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.10/schedulerjob.xsd"
    name="Bing Entity Search" projectName="Search"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="SEARCH_TERM" value="microsoft" />
    <variable name="MARKET" value="en-US" />
    <variable name="REPONSE_FILTER" value="" />
    <variable name="OUTPUT_FORMAT" value="HTML" model="PA:LIST(CSV, HTML, JSON)"/>
  </variables>
  <description>
    <![CDATA[ The Entity Search API sends a search query to Bing and gets results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="azure-cognitive-services"/>
    <info name="pca.action.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_bing_entity_search.svg"/>
    <info name="Documentation" value="https://docs.microsoft.com/en-us/azure/cognitive-services/bing-entities-search/search-the-web"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="BingEntitySearch">
      <description>
        <![CDATA[ This task wraps the Entity Search API of Microsoft which sends a search query to Bing and gets results that include entities and places. Place results include restaurants, hotel, or other local businesses. For places, the query can specify the name of the local business or it can ask for a list (for example, restaurants near me). Entity results include persons, places, or things. Place in this context is tourist attractions, states, countries, etc.
The task requires this third-party credential : $LINGUISTIC_ANALYTICS_API_KEY which provides access to this API. Please refer to the User documentation to learn how to add third-party credentials. This task has three attributes: 
$SEARCH_TERM (required) is the user's search term
$RESPONSE_FILTER (optional) is a comma-delimited list of answers to include in the response. Possible values {'Entities', 'Places'}
$MARKET (optional) is the market where the results come from.
The task's output $BING_SPELL CHECK_OUTPUT is the result of the API call in a JSON format. ]]>
      </description>
      <variables>
        <variable name="SEARCH_TERM" value="microsoft" inherited="true" />
        <variable name="MARKET" value="en-US" inherited="true" />
        <variable name="RESPONSE_FILTER" value="" inherited="true" />
        <variable name="OUTPUT_FORMAT" value="HTML" inherited="true" model="PA:LIST(CSV, HTML, JSON)"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_bing_entity_search.svg"/>
      </genericInformation>
      <forkEnvironment javaHome="${PA_SCHEDULER_HOME}/jre" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters 
containerName = 'activeeon/dlm3' 
dockerRunCommand =  'docker run ' 
dockerParameters = '--rm ' 
# Prepare ProActive home volume 
paHomeHost = variables.get("PA_SCHEDULER_HOME") 
paHomeContainer = variables.get("PA_SCHEDULER_HOME") 
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' 
# Prepare working directory (For Dataspaces and serialized task file) 
workspaceHost = localspace 
workspaceContainer = localspace 
workspaceVolume = '-v '+localspace +':'+localspace+' ' 
# Prepare container working directory 
containerWorkingDirectory = '-w '+workspaceContainer+' ' 
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node 
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import requests
import json
import urllib
from pprint import pprint
import pandas as pd
import re

# You can customize the api server location
api_location="westus"

# Congitive Services - Bing Video Search API URL:
#bing_entities_search_url = "https://{0}.api.cognitive.microsoft.com/bing/v7.0/entities".format(api_location)
bing_entities_search_url = "https://api.cognitive.microsoft.com/bing/v7.0/entities"

# READ TASK VARIABLES
if 'variables' in locals():
    if variables.get("SEARCH_TERM") is not None:
        SEARCH_TERM = variables.get("SEARCH_TERM")
    else:
        print("You first need to specify the search term")
        sys.exit(1)
    if variables.get("MARKET") is not None:
        MARKET = variables.get("MARKET")
    if variables.get("RESPONSE_FILTER") is not None:
        RESPONSE_FILTER = variables.get("RESPONSE_FILTER")
    if variables.get("OUTPUT_FORMAT") is not None:
        OUTPUT_FORMAT = variables.get("OUTPUT_FORMAT")
    # Provide a valid subscription API token
    if credentials.get("BING_ENTITY_API_KEY") is not None:
        subscription_key = credentials.get("BING_ENTITY_API_KEY")
    else:
        print("You first need to add your Azure Cognitive Services API key (BING_ENTITY_API_KEY) to the third party credentials")
        sys.exit(1)

# Set API request parameters
#params  = {"q": SEARCH_TERM, "count":COUNT, "pricing": PRICING, "videoLength": VIDEO_LENGTH}
params={'q':SEARCH_TERM}
if MARKET is not None and len(MARKET)>0:
    params['mkt'] = MARKET
if RESPONSE_FILTER is not None and len(RESPONSE_FILTER)>0:
    params['responseFilter'] = RESPONSE_FILTER

print("******** Query params ********")
pprint(params)

# Send API request
headers   = {
    "Ocp-Apim-Subscription-Key": subscription_key,
    'Content-Type': 'text/plain'
}
response = requests.get(bing_entities_search_url, headers=headers, params=params)
response.raise_for_status()

# Get a JSON response
search_results = response.json()

# Print the results
pprint(search_results)

if 'variables' in locals():
    variables.put('BING_VIDEO_SEARCH_OUTPUT', search_results)

print("BEGIN Export_Results")

if search_results.get('entities') is not None:
    OUTPUT_DATA = search_results['entities']["value"]
else:
    OUTPUT_DATA = {}
table = []
for document in OUTPUT_DATA:
    try:
        image=document["image"]["thumbnailUrl"]
        # Extract thumbnail id & construct a direct link to its image file
        #id=re.search(r"th\?id=([\w\d]+)", image).group(1)
        #image="""https://tse3.mm.bing.net/th?id={0}&pid=Api""".format(id)
        image_alt=document["image"]["name"]
        image_url=document["image"]["hostPageUrl"]
        url=document["url"]
    except KeyError:
        image=None
        image_alt=None
        image_url=None
        pass
    try: 
       description = document["description"]
    except KeyError:
        description = None        
        pass
    try: 
       name= document["name"]
    except KeyError:
        name = None        
        pass 
    table.append("""<tr><td><a href="{5}">{0}</a></td><td>{1}</td><td><a href="{4}"><img scr="{2}" alt="{3}" width=100 height=100></a></td>""".format(name, description, image, image_alt, image_url, url))

css_style="""table {
  border: 1px solid #999999;
  text-align: center;
  border-collapse: collapse;
  width: 100%;
}
td {
  border: 1px solid #999999;
  padding: 3px 2px;
  font-size: 13px;
  border-bottom: 1px solid #999999;
}
th {
  font-size: 17px;
  font-weight: bold;
  color: #FFFFFF;
  text-align: center;
  background: #0B6FA4;
  border-left: 2px solid #999999;
}"""
html = ("""<table><tr><th>Name</th><th>Description</th><th>Image</th></tr>{0}</table>""").format("\n".join(table))
html_container="""<!DOCTYPE html>
            <html>
              <head>
                <meta charset="UTF-8">
                  <meta name="description" content="Bing Entites Search API Results">
                    <style>{0}</style>
                  </head>
                  <body>{1}</body></html>""".format(css_style,html)

if OUTPUT_DATA != None and 'resultMetadata' in locals(): 
    dataframe=pd.read_html(html_container,header=0, encoding='utf-8')[0]
    
    if OUTPUT_FORMAT == 'JSON':
        result = json.dumps(search_results).encode('utf-8')
        resultMetadata.put("file.extension", ".json")
        resultMetadata.put("file.name", "result.json")
        resultMetadata.put("content.type", "application/json")
    elif OUTPUT_FORMAT == 'CSV':
        result = dataframe.to_csv(index=False).encode('utf-8')
        resultMetadata.put("file.extension", ".csv")
        resultMetadata.put("file.name", "result.csv")
        resultMetadata.put("content.type", "text/csv")
    elif OUTPUT_FORMAT == 'HTML':
        result = html_container.encode('utf-8')
        resultMetadata.put("file.extension", ".html")
        resultMetadata.put("file.name", "result.html")
        resultMetadata.put("content.type", "text/html")
    print("END Export_Results")  
else:
    print('It is not possible to export the data')

# Uncomment this to render the HTML result locally in your python notebook
#from IPython.display import HTML
#HTML(html_container)
]]>
                </code>
              </script>
            </scriptExecutable>
          </task>
        </taskFlow>
      </job>