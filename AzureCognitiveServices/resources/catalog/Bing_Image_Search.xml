<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.13" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd"  name="Bing_Image_Search" projectName="Search" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="SEARCH_TERM" value="activeeon" description="User's search term"/>
    <variable name="LICENCE" value="" description="Filters images by the following license types: {:'Any', 'Public', 'Share' ,'ShareCommercially' ,'Modify' ,'ModifyCommercially', 'All'}"/>
    <variable name="IMAGE_TYPE" value="" description="Filters images by the following image types: {'AnimatedGif', 'Clipart', 'Line' ,'Photo' ,'Modify' ,'Shopping', 'Transparent'}"/>
    <variable name="COUNT" value="-1" model="PA:Integer" description="Number of images to return in the response"/>
    <variable name="MARKET" value="en-US" description="The market where the results come from. Market codes are listed here: https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#market-codes"/>
    <variable name="OUTPUT_FORMAT" value="HTML" model="PA:LIST(JSON, CSV, HTML)" description="Format of the output file"/>
  </variables>
  <description>
    <![CDATA[ Bing Image Search API provides an experience similar to Bing.com/images by returning images that Bing determines are relevant to a user's query. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="ai-azure-cognitive-services"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_bing_image_search.png"/>
    <info name="Documentation" value="https://docs.microsoft.com/en-us/azure/cognitive-services/bing-image-search/"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Bing_Image_Search" >
      <description>
        <![CDATA[ This task wraps the Bing Image Search API of Microsoft which provides an experience similar to Bing.com/images by returning images that Bing determines are relevant to a query.
The task requires this third-party credential : $BING_SEARCH_API_KEY which provides access to this API. Please refer to the User documentation to learn how to add third-party credentials.
$SEARCH_TERM (required) is the user's search query string.
$LICENCE (optional) filters images by the following license types: {"Any", "Public", "Share" ,"ShareCommercially" ,"Modify" ,"ModifyCommercially", "All"}
$IMAGE_TYPE (optional) filter images by the following image types: {"AnimatedGif", "Clipart", "Line" ,"Photo" ,"Modify" ,"Shopping", "Transparent"}
The task's output $BING_IMAGE_SEARCH_OUTPUT is the result of the API call in a JSON format.
$COUNT (optional) is the number of images to return in the response.
$MARKET is the market where the results come from. Market codes are listed here: https://docs.microsoft.com/fr-fr/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes ]]>
      </description>
      <variables>
        <variable inherited="true" model="PA:Boolean" name="DOCKER_ENABLED" value="True" description="If true, the workflow tasks will be executed inside a docker container"/>
        <variable inherited="true" name="DOCKER_IMAGE" value="activeeon/dlm3" description="Name of the docker image"/>
        <variable name="SEARCH_TERM" value="activeeon" inherited="true" description="User's search term"/>
        <variable name="LICENCE" value="" inherited="true" description="Filters images by the following license types: {:'Any', 'Public', 'Share' ,'ShareCommercially' ,'Modify' ,'ModifyCommercially', 'All'}"/>
        <variable name="IMAGE_TYPE" value="" inherited="true" description="Filters images by the following image types: {'AnimatedGif', 'Clipart', 'Line' ,'Photo' ,'Modify' ,'Shopping', 'Transparent'}"/>
        <variable name="COUNT" value="-1" inherited="true" model="PA:Integer" description="Number of images to return in the response"/>
        <variable name="MARKET" value="en-US" inherited="true" description="The market where the results come from. Market codes are listed here: https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-news-api-v7-reference#market-codes"/>
        <variable name="OUTPUT_FORMAT" value="HTML" inherited="true" model="PA:LIST(JSON, CSV, HTML)" description="Format of the output file"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_bing_image_search.png"/>
        <info name="task.documentation" value="https://docs.microsoft.com/en-us/azure/cognitive-services/bing-image-search/"/>
      </genericInformation>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_vars/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="bash">
            <![CDATA[
pip install lxml
pip install BeautifulSoup4
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import requests
import json
import urllib
from pprint import pprint
import pandas as pd

# You can customize the api server location
#api_location="westcentralus"

# Congitive Services - Bing Image Search API URL:
#bing_image_search_url = "https://{0}.api.cognitive.microsoft.com/bing/v7.0/images/search".format(api_location)
bing_image_search_url = "https://api.cognitive.microsoft.com/bing/v7.0/images/search"


# READ TASK VARIABLES
if 'variables' in locals():
    if variables.get("SEARCH_TERM") is not None:
        SEARCH_TERM = variables.get("SEARCH_TERM")
    else:
        print("You first need to specify the search term")
        sys.exit(1)
    if variables.get("LICENCE") is not None:
        LICENCE = variables.get("LICENCE")
    if variables.get("IMAGE_TYPE") is not None:
        IMAGE_TYPE = variables.get("IMAGE_TYPE")
    if variables.get("COUNT") is not None:
        COUNT = int(variables.get("COUNT"))
    if variables.get("MARKET") is not None:
        MARKET = variables.get("MARKET")
    if variables.get("OUTPUT_FORMAT") is not None:
        OUTPUT_FORMAT = variables.get("OUTPUT_FORMAT")
    # Provide a valid subscription API token
    if credentials.get("BING_SEARCH_API_KEY") is not None:
        subscription_key = credentials.get("BING_SEARCH_API_KEY")
    else:
        print("You first need to add your Azure Cognitive Services API key (BING_SEARCH_API_KEY) to the third party credentials")
        sys.exit(1)

# Set API request parameters
#params  = {"q": SEARCH_TERM, "licence": LICENCE, "imageType": IMAGE_TYPE}
params={'q':SEARCH_TERM}
if LICENCE is not None and len(LICENCE)>0:
    params['licence'] = LICENCE
if IMAGE_TYPE is not None and len(IMAGE_TYPE)>0:
    params['imageType'] = IMAGE_TYPE
if COUNT >0:
    params['count'] = COUNT
# Market Code: https://docs.microsoft.com/fr-fr/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes
if MARKET is not None and len(MARKET)>0:
    params['mkt'] = MARKET

print("******** Query params ********")
pprint(params)

# Send API request
headers   = {
    "Ocp-Apim-Subscription-Key": subscription_key,
    'Content-Type': 'text/plain'
}
response = requests.get(bing_image_search_url, headers=headers, params=params)
response.raise_for_status()

# Get a JSON response
search_results = response.json()

# Print the results
#pprint(search_results)

if 'variables' in locals():
    variables.put('BING_IMAGE_SEARCH_OUTPUT', search_results)

OUTPUT_DATA = search_results["value"]
table = []
for document in OUTPUT_DATA:      
    try: 
       thumbnail= document["thumbnailUrl"]
    except KeyError:
        thumbnail = None        
        pass
    try: 
       image_url= document["contentUrl"]
    except KeyError:
        image_url = None        
        pass 
    try: 
       encodingFormat= document["encodingFormat"]
    except KeyError:
        encodingFormat = None        
        pass
    try: 
       name= document["name"]
    except KeyError:
        name = None        
        pass 
    table.append("""<tr><td><a href="{3}"><img src="{0}" alt="{2}" height="150" width="150"/></a></td><td>{1}</td><td>{2}</td>""".format(thumbnail, encodingFormat, name, image_url))
    
css_style="""table {
  border: 1px solid #999999;
  text-align: center;
  border-collapse: collapse;
  width: 100%;
}
td {
  border: 1px solid #999999;
  padding: 3px 2px;
  font-size: 13px;
  border-bottom: 1px solid #999999;
}
th {
  font-size: 17px;
  font-weight: bold;
  color: #FFFFFF;
  text-align: center;
  background: #0B6FA4;
  border-left: 2px solid #999999;
}"""
html = ("""<table><tr><th width="100">Image</th><th width="100">Type</th><th>Description</th></tr>{0}</table>""").format("\n".join(table))
html_container="""<!DOCTYPE html>
            <html>
              <head>
                <meta charset="UTF-8">
                  <meta name="description" content="Bing Image Search API Results">
                    <style>{0}</style>
                  </head>
                  <body>{1}</body></html>""".format(css_style,html)
if OUTPUT_DATA != None and 'resultMetadata' in locals(): 
    dataframe=pd.read_html(html_container,header=0, encoding='utf-8')[0]
    
    if OUTPUT_FORMAT == 'JSON':
        result = json.dumps(search_results).encode('utf-8')
        resultMetadata.put("file.extension", ".json")
        resultMetadata.put("file.name", "result.json")
        resultMetadata.put("content.type", "application/json")
    elif OUTPUT_FORMAT == 'CSV':
        result = dataframe.to_csv(index=False)
        resultMetadata.put("file.extension", ".csv")
        resultMetadata.put("file.name", "result.csv")
        resultMetadata.put("content.type", "text/csv")
    elif OUTPUT_FORMAT == 'HTML':
        result = html_container.encode('utf-8')
        resultMetadata.put("file.extension", ".html")
        resultMetadata.put("file.name", "result.html")
        resultMetadata.put("content.type", "text/html")
    print("END Export_Results")  
else:
    print('It is not possible to export the data')

# Uncomment this to render the HTML result locally in your python notebook
#from IPython.display import HTML
#HTML(html_container)
]]>
                </code>
              </script>
            </scriptExecutable>
          </task>
        </taskFlow>
        <metadata>
          <visualization>
            <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1139px;
            height:566px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-333.9875030517578px;left:-487px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_109" style="top: 339px; left: 492px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_bing_image_search.png" width="20px">&nbsp;<span class="name">BingImageSearch</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 539px; top: 369px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
            xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
            xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
          </visualization>
        </metadata>
      </job>