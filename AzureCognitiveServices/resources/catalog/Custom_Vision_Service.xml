<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.9"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.9 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.9/schedulerjob.xsd"
    name="Custom_Vision_Service" projectName="Vision"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2"
>
  <description>
    <![CDATA[ Custom Vision Service is a tool for building custom image classifiers. It makes it easy and fast to build, deploy, and improve an image classifier. We provide a REST API and a web interface to upload your images and train. 
https://azure.microsoft.com/en-us/services/cognitive-services/custom-vision-service/ ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="azure-cognitive-services"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_custom_vision.png"/>
    <info name="Documentation" value="https://azure.microsoft.com/en-us/services/cognitive-services/custom-vision-service/"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Custom_Vision_Service">
      <description>
        <![CDATA[ Custom Vision Service is a tool for building custom image classifiers. It makes it easy and fast to build, deploy, and improve an image classifier. We provide a REST API and a web interface to upload your images and train. 
https://azure.microsoft.com/en-us/services/cognitive-services/custom-vision-service/ ]]>
      </description>
      <variables>
        <variable name="IMAGE_URL" value="https://raw.githubusercontent.com/Microsoft/Cognitive-CustomVision-Windows/master/Samples/Images/Test/test_image.jpg" inherited="true" />
        <variable name="AZURE_CUSTOM_VISION_PROJECT_ID" value="49c82070-6b3a-4bf2-ade0-b64a4aceed22" inherited="true" />
        <variable name="AZURE_CUSTOM_VISION_ITERATION_ID" value="" inherited="true" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_custom_vision.png"/>
        <info name="task.documentation" value="https://azure.microsoft.com/en-us/services/cognitive-services/custom-vision-service/"/> 
      </genericInformation>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <code language="python">
              <![CDATA[
#Be aware, that the prefix command is internally split by spaces. So paths with spaces won't work.
# Prepare Docker parameters 
containerName = 'activeeon/dlm3' 
dockerRunCommand =  'docker run ' 
dockerParameters = '--rm ' 
# Prepare ProActive home volume 
paHomeHost = variables.get("PA_SCHEDULER_HOME") 
paHomeContainer = variables.get("PA_SCHEDULER_HOME") 
proActiveHomeVolume = '-v '+paHomeHost +':'+paHomeContainer+' ' 
# Prepare working directory (For Dataspaces and serialized task file) 
workspaceHost = localspace 
workspaceContainer = localspace 
workspaceVolume = '-v '+localspace +':'+localspace+' ' 
# Prepare container working directory 
containerWorkingDirectory = '-w '+workspaceContainer+' ' 
# Save pre execution command into magic variable 'preJavaHomeCmd', which is picked up by the node 
preJavaHomeCmd = dockerRunCommand + dockerParameters + proActiveHomeVolume + workspaceVolume + containerWorkingDirectory + containerName
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
print("BEGIN Custom_Vision_Service API")

import http.client, urllib.request, urllib.parse, urllib.error, base64, requests, json
import pandas as pd

from pandas.io.json import json_normalize
from azure.cognitiveservices.vision.customvision.prediction import prediction_endpoint
from azure.cognitiveservices.vision.customvision.prediction.prediction_endpoint import models

if 'variables' in locals():
  IMAGE_URL = variables.get("IMAGE_URL")
  PROJECT_ID = variables.get("AZURE_CUSTOM_VISION_PROJECT_ID")
  ITERATION_ID = variables.get("AZURE_CUSTOM_VISION_ITERATION_ID")
  PREDICTION_KEY = credentials.get("AZURE_CUSTOM_VISION_PREDICTION_KEY")

assert IMAGE_URL is not None
assert PREDICTION_KEY is not None
assert PROJECT_ID is not None
#assert ITERATION_ID is not None

# Perform prediction
predictor = prediction_endpoint.PredictionEndpoint(PREDICTION_KEY)
results = predictor.predict_image_url(PROJECT_ID, ITERATION_ID, url=IMAGE_URL)
#output_json = json.dumps(results)

# Alternatively, if the images were on disk in a folder called Images along side the sample.py then
# they could be added by the following.
#
# Open the sample image and get back the prediction results.
# with open("Images\\test\\test_image.jpg", mode="rb") as test_data:
#     results = predictor.predict_image(project.id, test_data.read(), iteration.id)

# Display the results.
prediction_html = []
data = {}

for prediction in results.predictions:
  print("\t" + prediction.tag + ": {0:.2f}%".format(prediction.probability * 100))
  prediction_html.append("<tr><td>{0}</td><td>{1:.2f}%</td></td>".format(prediction.tag, prediction.probability * 100))
  data[prediction.tag] = "{0:.2f}%".format(prediction.probability * 100)

json_data = json.dumps(data)

if 'variables' in locals():
  variables.put("AZURE_CUSTOM_VISION_OUTPUT_JSON", json_data)

# Output preview
css_style = """
table {
  border: 1px solid #999999;
  text-align: center;
  border-collapse: collapse;
  width: 100%;
}
td {
  border: 1px solid #999999;
  padding: 3px 2px;
  font-size: 13px;
  border-bottom: 1px solid #999999;
}
th {
  font-size: 17px;
  font-weight: bold;
  color: #FFFFFF;
  text-align: center;
  background: #0B6FA4;
  border-left: 2px solid #999999
}
"""

prediction_table_html = """<table><th>Tag</th><th>Probability</th>{0}</table>""".format("\n".join(prediction_html))

table = []
table.append("""<tr><td><a href="{0}"><img src="{0}" height="150" width="150"/></a></td><td>{1}</td>""".format(IMAGE_URL, prediction_table_html))

html = """<table><th>Image</th><th>Reponse</th></tr>{0}</table>""".format("\n".join(table))

html_container = """

            
            
            
            <!DOCTYPE html>
            <html>
              <head>
                <meta charset="UTF-8">
                  <meta name="description" content="Face API">
                    <style>{0}</style>
                  </head>
                  <body>{1}</body></html>
""".format(css_style, html)

if 'variables' in locals():
  result = html_container.encode('utf-8')
  resultMetadata.put("file.extension", ".html")
  resultMetadata.put("file.name", "result.html")
  resultMetadata.put("content.type", "text/html")

print("END Custom_Vision_Service API")
]]>
                </code>
              </script>
            </scriptExecutable>
            <controlFlow block="none"></controlFlow>
          </task>
        </taskFlow>
      </job>