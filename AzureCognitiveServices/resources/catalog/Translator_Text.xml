<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.13" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd"  name="Translator_Text" projectName="Language" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <variables>
    <variable name="SOURCE_LANGUAGE" value="en-us" description="String representing the language code of the translation text. For example, en for English."/>
    <variable name="TARGET_LANGUAGE" value="fr-fr" description="String representing the language code to translate the text into."/>
    <variable name="TEXT" value="hello" description="String representing the text to translate"/>
    <variable name="FUNCTION" value="Translate" model="PA:LIST(Translate)" description="List containing different types of text translation. For now, we support only one function."/>
    <variable name="OUTPUT_FORMAT" value="HTML" model="PA:LIST(CSV, HTML, XML)" description="Format of the output file"/>
  </variables>
  <description>
    <![CDATA[ The Microsoft Translator Text API can be seamlessly integrated into your applications, websites, tools, or other solutions to provide multi-language user experiences in more than 60 languages. It can be used on any hardware platform and with any operating system to perform text to text language translation. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="ai-azure-cognitive-services"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_translatortext.png"/>
    <info name="Documentation" value="https://docs.microsoft.com/en-us/azure/cognitive-services/translator/translator-info-overview"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Translator_Text" >
      <description>
        <![CDATA[ This task wraps the Translator Text API of Microsoft which can be seamlessly integrated into your applications, websites, tools, or other solutions to provide multi-language user experiences in more than 60 languages. It can be used on any hardware platform and with any operating system to perform text to text language translation.
The task requires this third-party credential : $TEXT_ANALYTICS_API_KEY which provides access to this API. Please refer to the User documentation to learn how to add third-party credentials.
$TEXT (required) is a string representing the text to translate.
$SOURCE_LANGUAGE (optional) is a string representing the language code of the translation text. For example, en for English.
$TARGET_LANGUAGE (required) is a string representing the language code to translate the text into.
$FUNCTION (required) is a list containing different types of text translation. For now, we support only one function.
The task's output $TRANSLATOR_TEXT_OUTPUT is the result of the API call in a XML format. ]]>
      </description>
      <variables>
        <variable inherited="true" model="PA:Boolean" name="DOCKER_ENABLED" value="True" description="If true, the workflow tasks will be executed inside a docker container"/>
        <variable inherited="true" name="DOCKER_IMAGE" value="activeeon/dlm3" description="Name of the docker image"/>
        <variable name="SOURCE_LANGUAGE" value="en-us" inherited="true" description="String representing the language code of the translation text. For example, en for English."/>
        <variable name="TARGET_LANGUAGE" value="fr-fr" inherited="true" description="String representing the language code to translate the text into."/>
        <variable name="TEXT" value="hello" inherited="true" description="String representing the text to translate"/>
        <variable name="FUNCTION" value="Translate" inherited="true" model="PA:LIST(Translate)" description="List containing different types of text translation. For now, we support only one function."/>
        <variable name="OUTPUT_FORMAT" value="HTML" inherited="true" model="PA:LIST(CSV, HTML, XML)" description="Format of the output file"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_translatortext.png"/>
        <info name="task.documentation" value="https://docs.microsoft.com/en-us/azure/cognitive-services/translator/translator-info-overview"/>
      </genericInformation>
      <forkEnvironment javaHome="/usr" >
        <envScript>
          <script>
            <file language="groovy" url="${PA_CATALOG_REST_URL}/buckets/scripts/resources/fork_env_docker_vars/raw"/>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="cpython">
            <![CDATA[
import requests
import json
from pprint import pprint
import pandas as pd
import csv
#from xml.etree import ElementTree
from bs4 import BeautifulSoup

# You can customize the api server location
#api_location="westus"

# Congitive Services - Text Analytics API URL:
#text_analytics_base_url = "https://{0}.api.microsofttranslator.com/V2/Http.svc/Translate.".format(api_location)
text_translation_base_url = "https://api.microsofttranslator.com/V2/Http.svc/"

functions_list = ["Translate", "Detect", "Speak","BreakSentences","GetLanguagesForTranslate"]


# READ TASK VARIABLES
if 'variables' in locals():
    if variables.get('FUNCTION') is not None:
        FUNCTION = variables.get('FUNCTION')
        if FUNCTION in functions_list:
            function_url = text_translation_base_url + FUNCTION
        else:
            print("You must specify a Microsoft Translator function name (Translate, Detect, etc.).")
            sys.exit(1)
    if variables.get("TEXT") is not None:
        TEXT = variables.get("TEXT")
    if variables.get("SOURCE_LANGUAGE") is not None:
        SOURCE_LANGUAGE = variables.get("SOURCE_LANGUAGE")
    if variables.get("TARGET_LANGUAGE") is not None:
        TARGET_LANGUAGE = variables.get("TARGET_LANGUAGE")
    if variables.get("OUTPUT_FORMAT") is not None:
        OUTPUT_FORMAT = variables.get("OUTPUT_FORMAT")
    # Provide a valid subscription API token
    if credentials.get("TEXT_TRANSLATION_API_KEY") is not None:
        subscription_key = credentials.get("TEXT_TRANSLATION_API_KEY")
    else:
        print("You first need to add your Azure Text Analytics Service API key (TEXT_TRANSLATION_API_KEY) to the third party credentials")
        sys.exit(1)
        
# Setting request parameters
## Mandatory parameters
params={"text":TEXT}
if len(TARGET_LANGUAGE)>0:
    params["to"]=TARGET_LANGUAGE
## Optional parameters
if len(SOURCE_LANGUAGE)>0:
    params["from"]=SOURCE_LANGUAGE

print("******** Query params ********")
pprint(params)

# Send API request
headers   = {
    "Ocp-Apim-Subscription-Key": subscription_key
}
response  = requests.get(function_url, headers=headers, params=params)
response.raise_for_status()

# Put the results in the output variable for propagation
if 'variables' in locals():
    variables.put('TEXT_TRANSLATION_OUTPUT', response.content)


# Get response as XML
api_results=BeautifulSoup(response.content,"lxml")

# Print the results
#print(api_results)


print("BEGIN Export_Results")
    
# Convert the results into HTML
table="<tr><td>{0}</td><td>{1}</td><td>{2}</td>".format(TEXT, TARGET_LANGUAGE, api_results.string)

css_style="""table {
  border: 1px solid #999999;
  text-align: center;
  border-collapse: collapse;
  width: 100%;
}
td {
  border: 1px solid #999999;
  padding: 3px 2px;
  font-size: 13px;
  border-bottom: 1px solid #999999;
}
th {
  font-size: 17px;
  font-weight: bold;
  color: #FFFFFF;
  text-align: center;
  background: #0B6FA4;
  border-left: 2px solid #999999;
}"""
html = """<table><tr><th>Text</th><th width=10%>Target Language</th><th>Translation</th></tr>{0}</table>""".format(table)
html_container="""<!DOCTYPE html>
            <html>
              <head>
                <meta charset="UTF-8">
                  <meta name="description" content="Microsoft Text Translator API">
                    <style>{0}</style>
                  </head>
                  <body>{1}</body></html>""".format(css_style,html)
if api_results != None and 'resultMetadata' in locals(): 
    #dataframe = pd.read_json(json.dumps(OUTPUT_DATA), orient='table', encoding='utf-8')
    dataframe=pd.read_html(html_container,header=0, encoding='utf-8')[0]
    
    if OUTPUT_FORMAT == 'XML':
        result = response.content
        resultMetadata.put("file.extension", ".xml")
        resultMetadata.put("file.name", "result.xml")
        resultMetadata.put("content.type", "application/xml")
    elif OUTPUT_FORMAT == 'CSV':
        result = dataframe.to_csv(index=False).encode('utf-8')
        resultMetadata.put("file.extension", ".csv")
        resultMetadata.put("file.name", "result.csv")
        resultMetadata.put("content.type", "text/csv")
    elif OUTPUT_FORMAT == 'HTML':
        result = html_container.encode('utf-8')
        resultMetadata.put("file.extension", ".html")
        resultMetadata.put("file.name", "result.html")
        resultMetadata.put("content.type", "text/html")
    print("END Export_Results")  
else:
    print('It is not possible to export the data')

# Uncomment this to render the HTML result locally in your python notebook
#from IPython.display import HTML
#HTML(html_container)
]]>
                </code>
              </script>
            </scriptExecutable>
          </task>
        </taskFlow>
        <metadata>
          <visualization>
            <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:1139px;
            height:566px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-333.9875030517578px;left:-497.5px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_241" style="top: 339px; left: 502.5px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure/api_translatortext.png" width="20px">&nbsp;<span class="name">TranslatorText</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 542px; top: 369px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
            xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
            xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
          </visualization>
        </metadata>
      </job>