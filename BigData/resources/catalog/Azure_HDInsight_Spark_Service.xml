<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.13" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="2" name="Azure_HDInsight_Spark_Service" onTaskError="suspendTask" priority="normal" projectName="6. Azure HDInsight Spark" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd">
  <variables>
    <variable model="PA:NOT_EMPTY_STRING" name="AZURE_SUBSCRIPTION_ID" value="your-subscription-id"/>
    <variable model="PA:NOT_EMPTY_STRING" name="AZURE_TENANT_ID" value="your-tenant-id"/>
    <variable model="PA:NOT_EMPTY_STRING" name="AZURE_APP_ID" value="your-app-id"/>
    <variable model="PA:HIDDEN" name="AZURE_PASSWORD" value=""/>
    <variable model="PA:URL" name="AZURE_AUTH_ENDPOINT" value="https://login.microsoftonline.com"/>
    <variable model="PA:URL" name="AZURE_MANAGEMENT_ENDPOINT" value="https://management.azure.com"/>
    <variable model="PA:NOT_EMPTY_STRING" name="HDINSIGHT_RESOURCE_GROUP_NAME" value="Activeeon-RG-${PA_JOB_ID}"/>
    <variable model="PA:NOT_EMPTY_STRING" name="HDINSIGHT_DEPLOYMENT_NAME" value="Activeeon-Deployment-${PA_JOB_ID}"/>
    <variable model="PA:GLOBAL_FILE" name="SPARK_ARM" value="Azure_HDInsight_Spark_ARM_Template.json"/>
    <variable model="PA:NOT_EMPTY_STRING" name="SPARK_CLUSTER_NAME" value="activeeon-spark-cluster-${PA_JOB_ID}"/>
    <variable model="PA:NOT_EMPTY_STRING" name="SPARK_CLUSTER_USER" value="act-usr"/>
    <variable model="PA:HIDDEN" name="SPARK_CLUSTER_PASSWORD" value=""/>
    <variable model="PA:NOT_EMPTY_STRING" name="SPARK_CLUSTER_SSH_USER" value="act-usr"/>
    <variable model="PA:HIDDEN" name="SPARK_CLUSTER_SSH_PASSWORD" value=""/>
    <variable model="PA:INTEGER" name="SPARK_WORKER_COUNT" value="2"/>
    <variable model="PA:INTEGER" name="SPARK_MIN_WORKERS" value="1"/>
    <variable model="PA:INTEGER" name="SPARK_MAX_WORKERS" value="3"/>
  </variables>
  <description>
    <![CDATA[ A workflow that uses Azure REST API to deploy and undeploy a HDInsight Spark Cluster.
It requires as input the  variable SPARK_ARM, which takes as value a Azure ARM template. A ready-to-use template called "Azure_HDInsight_Spark_ARM_Template.json" is provided in the global dataspace.
The other inputs (such as the users and passwords) must respect the rules of Azure Spark ARM templates. 
Once the Spark cluster is deployed successfully, the workflow produces as job results: (i) URL of the Web UI of the HDInsight Spark cluster, (ii) SSH host of the head node (i.e., master) of the cluster, (iii) SSH port of the head node (i.e., master) of the cluster.
The CLUSTER_SSH_USER and SPARK_CLUSTER_SSH_PASSWORD given as input, as well as the SSH host and port produced as results, can be used in the workflow "Azure_HDInsight_Spark_Submit_Application" (available in the big-data bucket) to submit a Spark application via SSH. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="big-data"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="hdinsight_deploy_spark">
      <description>
        <![CDATA[ A task performing a PUT request to Azure HDInsight REST API in order to deploy a Spark cluster, which name is given as input.
This task requires the Azure authentication token provided the task "azure_authenticate". ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${AZURE_MANAGEMENT_ENDPOINT}"/>
        <variable inherited="false" name="PATH" value="/subscriptions/${AZURE_SUBSCRIPTION_ID}/resourcegroups/${HDINSIGHT_RESOURCE_GROUP_NAME}/providers/Microsoft.Resources/deployments/${HDINSIGHT_DEPLOYMENT_NAME}?api-version=2020-10-01"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true"/>
        <variable inherited="false" name="CONTENT_TYPE" value="application/json;charset = UTF-8"/>
        <variable inherited="false" name="REQUEST_BODY" value="${SPARK_ARM}"/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true"/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="json"/>
        <variable inherited="false" name="RESPONSE_PATH" value="."/>
        <variable inherited="false" name="HEADER_Authorization" value="Bearer ${ACCESS_TOKEN}"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
      </genericInformation>
      <depends>
        <task ref="azure-create_resource_group"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
        <files accessMode="transferFromGlobalSpace" includes="${SPARK_ARM}"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.*
    
jsonFile = new File(variables.get("SPARK_ARM"))

def jsonSlurper = new JsonSlurper()
jsonData = jsonSlurper.parse(jsonFile)

jsonData.properties.template.parameters.clusterName.defaultValue = variables.get("SPARK_CLUSTER_NAME") 
jsonData.properties.template.parameters.clusterLoginUserName.defaultValue =  variables.get("SPARK_CLUSTER_USER")
jsonData.properties.template.parameters.clusterLoginPassword.defaultValue = variables.get("SPARK_CLUSTER_PASSWORD")
jsonData.properties.template.parameters.sshUserName.defaultValue = variables.get("SPARK_CLUSTER_SSH_USER")
jsonData.properties.template.parameters.sshPassword.defaultValue= variables.get("SPARK_CLUSTER_SSH_PASSWORD")
    
jsonData.properties.template.resources[1].properties.computeProfile.roles[1].targetInstanceCount = variables.get("SPARK_WORKER_COUNT")
jsonData.properties.template.resources[1].properties.computeProfile.roles[1].autoscale.capacity.minInstanceCount = variables.get("SPARK_MIN_WORKERS")
jsonData.properties.template.resources[1].properties.computeProfile.roles[1].autoscale.capacity.maxInstanceCount = variables.get("SPARK_MAX_WORKERS")

def modifiedJson = JsonOutput.prettyPrint(JsonOutput.toJson(jsonData))

jsonFile.write(modifiedJson)

println modifiedJson
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("AZURE_PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("AZURE_PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

requestBody = variables.get("REQUEST_BODY")
if (requestBody != null && !requestBody.isEmpty()) {
    
    if (!requestBody.startsWith("{")){
        File jsonFile = new File(requestBody);
        restCall = restCall.body(jsonFile)
    }
    else{
        restCall = restCall.body(requestBody)
    }    
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}

response = restCall.put(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            608.453125
        </positionTop>
        <positionLeft>
            331.390625
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="azure_authenticate">
      <description>
        <![CDATA[ A task performing a POST request to Azure REST API in order to authenticate to Azure and acquire an authentication token. ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${AZURE_AUTH_ENDPOINT}"/>
        <variable inherited="false" name="PATH" value="/${AZURE_TENANT_ID}/oauth2/token"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true"/>
        <variable inherited="false" name="CONTENT_TYPE" value="application/x-www-form-urlencoded"/>
        <variable inherited="false" name="REQUEST_BODY" value="&amp;grant_type=client_credentials&amp;client_id=${AZURE_APP_ID}&amp;client_secret=%AZURE_PASSWORD%&amp;resource=https%3A%2F%2Fmanagement.azure.com%2F"/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true"/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="json"/>
        <variable inherited="false" name="RESPONSE_PATH" value="access_token"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png"/>
      </genericInformation>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("AZURE_PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("AZURE_PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY").replace("%AZURE_PASSWORD%",variables.get("AZURE_PASSWORD")))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}

variables.put("ACCESS_TOKEN",result)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            361.453125
        </positionTop>
        <positionLeft>
            328.390625
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="hdinsight_check_deployment">
      <description>
        <![CDATA[ A task performing a Get request to Azure HDInsight REST API in order to  check the status of the deployment, which name is given as input.
This task requires the Azure authentication token provided the task "azure_authenticate". ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${AZURE_MANAGEMENT_ENDPOINT}"/>
        <variable inherited="false" name="PATH" value="/subscriptions/${AZURE_SUBSCRIPTION_ID}/resourcegroups/${HDINSIGHT_RESOURCE_GROUP_NAME}/providers/Microsoft.Resources/deployments/${HDINSIGHT_DEPLOYMENT_NAME}?api-version=2020-10-01"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true"/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true"/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="json"/>
        <variable inherited="false" name="RESPONSE_PATH" value="."/>
        <variable inherited="false" name="HEADER_Authorization" value="Bearer ${ACCESS_TOKEN}"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
      </genericInformation>
      <depends>
        <task ref="hdinsight_deploy_spark"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="bash">
            <![CDATA[

]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given()

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("AZURE_PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("AZURE_PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("PARAM_")}).forEach({entry -> restCall = restCall.param(entry.getKey().replace("PARAM_",""), entry.getValue()) });

if (debug) {
    println "-------------- REQUEST ------------------"
	restCall = restCall.log().all()
}

response = restCall.get(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(HttpStatus.SC_OK)
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            746.453125
        </positionTop>
        <positionLeft>
            331.390625
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="hdinsight_delete_spark_deployment">
      <description>
        <![CDATA[ A task performing a DELETE request to Azure HDInsight REST API in order to remove the deployment, which name is given as input.
This task requires the Azure authentication token provided the task "azure_authenticate_new". ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${AZURE_MANAGEMENT_ENDPOINT}"/>
        <variable inherited="false" name="PATH" value="/subscriptions/${AZURE_SUBSCRIPTION_ID}/resourcegroups/${HDINSIGHT_RESOURCE_GROUP_NAME}/providers/Microsoft.Resources/deployments/${HDINSIGHT_DEPLOYMENT_NAME}?api-version=2020-10-01"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true"/>
        <variable inherited="false" name="CONTENT_TYPE" value="application/json;charset = UTF-8"/>
        <variable inherited="false" model="PA:JSON" name="REQUEST_BODY" value="{}"/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true"/>
        <variable inherited="false" name="RESPONSE_PATH" value=""/>
        <variable inherited="false" name="HEADER_Authorization" value="Bearer ${ACCESS_TOKEN}"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
      </genericInformation>
      <depends>
        <task ref="hdinsight_delete_spark_cluster"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("AZURE_PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("AZURE_PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.delete(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            741.453125
        </positionTop>
        <positionLeft>
            699.390625
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="hdinsight_delete_spark_resource_group">
      <description>
        <![CDATA[ A task performing a DELETE request to Azure HDInsight REST API in order to remove the resource group, which name is given as input.
This task requires the Azure authentication token provided the task "azure_authenticate_new". ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${AZURE_MANAGEMENT_ENDPOINT}"/>
        <variable inherited="false" name="PATH" value="/subscriptions/${AZURE_SUBSCRIPTION_ID}/resourcegroups/${HDINSIGHT_RESOURCE_GROUP_NAME}?api-version=2020-10-01"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true"/>
        <variable inherited="false" name="CONTENT_TYPE" value="application/json;charset = UTF-8"/>
        <variable inherited="false" model="PA:JSON" name="REQUEST_BODY" value="{}"/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true"/>
        <variable inherited="false" name="RESPONSE_PATH" value=""/>
        <variable inherited="false" name="HEADER_Authorization" value="Bearer ${ACCESS_TOKEN}"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
      </genericInformation>
      <depends>
        <task ref="hdinsight_delete_spark_deployment"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("AZURE_PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("AZURE_PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.delete(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            864.453125
        </positionTop>
        <positionLeft>
            694.390625
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" maxNumberOfExecution="2" name="hdinsight_delete_spark_cluster">
      <description>
        <![CDATA[ A task performing a DELETE request to Azure HDInsight REST API in order to undeploy the Spark cluster, which name is given as input.
This task requires the Azure authentication token provided the task "azure_authenticate_new". ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${AZURE_MANAGEMENT_ENDPOINT}"/>
        <variable inherited="false" name="PATH" value="/subscriptions/${AZURE_SUBSCRIPTION_ID}/resourcegroups/${HDINSIGHT_RESOURCE_GROUP_NAME}/providers/Microsoft.HDInsight/clusters/${SPARK_CLUSTER_NAME}?api-version=2018-06-01-preview"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true"/>
        <variable inherited="false" name="CONTENT_TYPE" value="application/json;charset = UTF-8"/>
        <variable inherited="false" model="PA:JSON" name="REQUEST_BODY" value="{}"/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true"/>
        <variable inherited="false" name="RESPONSE_PATH" value=""/>
        <variable inherited="false" name="HEADER_Authorization" value="Bearer ${ACCESS_TOKEN}"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
      </genericInformation>
      <depends>
        <task ref="azure_authenticate_new"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("AZURE_PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("AZURE_PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.delete(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            613.453125
        </positionTop>
        <positionLeft>
            716.390625
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="wait_for_stop">
      <description>
        <![CDATA[ A task that declares being ready for receiving the signal "Terminate_Job_and_Services", then iterates to check whether this signal is received (for example when sent by user from the Workflow Execution portal). When this signal is received, the task terminates. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/signal-wait.png"/>
      </genericInformation>
      <depends>
        <task ref="hdinsight_get_spark_cluster_info"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
if (variables.get("PA_TASK_ITERATION")==0){
    signalapi.readyForSignal("Terminate_Job_and_Services")
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <loop target="wait_for_stop">
          <script>
            <code language="groovy">
              <![CDATA[
if (signalapi.isReceived("Terminate_Job_and_Services")){
    loop = false
} else {
    loop = "* * * * *"
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            342.453125
        </positionTop>
        <positionLeft>
            758.390625
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="azure_authenticate_new">
      <description>
        <![CDATA[ A task performing a POST request to Azure REST API in order to authenticate again to Azure and acquire a new authentication token. ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${AZURE_AUTH_ENDPOINT}"/>
        <variable inherited="false" name="PATH" value="/${AZURE_TENANT_ID}/oauth2/token"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true"/>
        <variable inherited="false" name="CONTENT_TYPE" value="application/x-www-form-urlencoded"/>
        <variable inherited="false" name="REQUEST_BODY" value="&amp;grant_type=client_credentials&amp;client_id=${AZURE_APP_ID}&amp;client_secret=%AZURE_PASSWORD%&amp;resource=https%3A%2F%2Fmanagement.azure.com%2F"/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true"/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="json"/>
        <variable inherited="false" name="RESPONSE_PATH" value="access_token"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png"/>
      </genericInformation>
      <depends>
        <task ref="wait_for_stop"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("AZURE_PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("AZURE_PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY").replace("%AZURE_PASSWORD%",variables.get("AZURE_PASSWORD")))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}

variables.put("ACCESS_TOKEN",result)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            481.453125
        </positionTop>
        <positionLeft>
            729.390625
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="azure-create_resource_group">
      <description>
        <![CDATA[ A task performing a PUT request to Azure HDInsight REST API in order to create a Resource Group, which name is given as input.
This task requires the Azure authentication token provided the task "azure_authenticate". ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${AZURE_MANAGEMENT_ENDPOINT}"/>
        <variable inherited="false" name="PATH" value="/subscriptions/${AZURE_SUBSCRIPTION_ID}/resourcegroups/${HDINSIGHT_RESOURCE_GROUP_NAME}?api-version=2020-10-01"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true"/>
        <variable inherited="false" name="CONTENT_TYPE" value="application/json;charset = UTF-8"/>
        <variable inherited="false" model="PA:JSON" name="REQUEST_BODY" value="{   &quot;location&quot;: &quot;eastus2&quot; }"/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true"/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="json"/>
        <variable inherited="false" name="RESPONSE_PATH" value="."/>
        <variable inherited="false" name="HEADER_Authorization" value="Bearer ${ACCESS_TOKEN}"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hdinsight.png"/>
      </genericInformation>
      <depends>
        <task ref="azure_authenticate"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("AZURE_PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("AZURE_PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}

response = restCall.put(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            488.453125
        </positionTop>
        <positionLeft>
            330.390625
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="hdinsight_get_spark_cluster_info">
      <description>
        <![CDATA[ A task that performs iteratively a GET request to Azure HDInsight REST API, in order to get information about the cluster deployment status. If the deployment status is "Succeeded". The cluster Web UI, SSH host and SSH port are extracted and provided as job results, then the loop stops. 
This task requires the Azure authentication token provided the task "azure_authenticate". ]]>
      </description>
      <variables>
        <variable inherited="false" model="PA:URL" name="ENDPOINT" value="${AZURE_MANAGEMENT_ENDPOINT}"/>
        <variable inherited="false" name="PATH" value="/subscriptions/${AZURE_SUBSCRIPTION_ID}/resourceGroups/${HDINSIGHT_RESOURCE_GROUP_NAME}/providers/Microsoft.HDInsight/clusters/${SPARK_CLUSTER_NAME}?api-version=2018-06-01-preview"/>
        <variable inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true"/>
        <variable inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true"/>
        <variable inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="json"/>
        <variable inherited="false" name="RESPONSE_PATH" value="."/>
        <variable inherited="false" name="HEADER_Authorization" value="Bearer ${ACCESS_TOKEN}"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
      </genericInformation>
      <depends>
        <task ref="hdinsight_check_deployment"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="bash">
            <![CDATA[
sleep 30
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given()

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("AZURE_PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("AZURE_PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("PARAM_")}).forEach({entry -> restCall = restCall.param(entry.getKey().replace("PARAM_",""), entry.getValue()) });

if (debug) {
    println "-------------- REQUEST ------------------"
	restCall = restCall.log().all()
}

response = restCall.get(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(HttpStatus.SC_OK)
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <loop target="hdinsight_get_spark_cluster_info">
          <script>
            <code language="groovy">
              <![CDATA[
provisioningState = variables.get("PROVISIONING_STATE")
if (provisioningState=="InProgress"){
   loop= "* * * * *" 
} else if (provisioningState=="Failed" || provisioningState=="Canceled"){
   loop=false
   throw new Exception("HDInsight Spark cluster deployment "+ provisioningState)
} else {
   loop=false
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.*
    
def slurper = new JsonSlurper()
    
jsonData = slurper.parseText(JsonOutput.toJson(result))

provisioningState=jsonData.properties.provisioningState

variables.put("PROVISIONING_STATE",provisioningState)

println variables.get("PROVISIONING_STATE")

if (provisioningState=="Succeeded"){
    
    SSHEndpoint=jsonData.properties.connectivityEndpoints[0]
    WebUIEndpoint=jsonData.properties.connectivityEndpoints[1]
    
    println "_____________________SSH ENDPOINT________________"
    println SSHEndpoint
    println "Name: " + SSHEndpoint.name
    println "Location: " + SSHEndpoint.location
    println "Protocol: " + SSHEndpoint.protocol
    println "Port: " + SSHEndpoint.port
    resultMap.put("SPARK_SSH_Host", SSHEndpoint.location)
    resultMap.put("SPARK_SSH_Port", SSHEndpoint.port)
    
    println "_____________________WEB UI ENDPOINT________________"
    println WebUIEndpoint
    println "Name: " + WebUIEndpoint.name
    println "Location: " + WebUIEndpoint.location
    println "Protocol: " + WebUIEndpoint.protocol
    println "Port: " + WebUIEndpoint.port
    sparkWebUI = WebUIEndpoint.name.toLowerCase() + "://" + WebUIEndpoint.location + ":" + WebUIEndpoint.port
    resultMap.put("SPARK_WEB_UI",sparkWebUI)
}
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            874.453125
        </positionTop>
        <positionLeft>
            326.390625
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2732px;
            height:3128px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-337.453125px;left:-321.390625px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_805" style="top: 608.453px; left: 331.391px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a PUT request to Azure HDInsight REST API in order to deploy a Spark cluster, which name is given as input.
This task requires the Azure authentication token provided the task &quot;azure_authenticate&quot;."><img src="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" width="20px">&nbsp;<span class="name">hdinsight_deploy_spark</span></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_808" style="top: 361.453px; left: 328.391px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a POST request to Azure REST API in order to authenticate to Azure and acquire an authentication token."><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png" width="20px">&nbsp;<span class="name">azure_authenticate</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_811" style="top: 746.453px; left: 331.391px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a Get request to Azure HDInsight REST API in order to  check the status of the deployment, which name is given as input.
This task requires the Azure authentication token provided the task &quot;azure_authenticate&quot;."><img src="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" width="20px">&nbsp;<span class="name">hdinsight_check_deployment</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_814" style="top: 741.453px; left: 699.391px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a DELETE request to Azure HDInsight REST API in order to remove the deployment, which name is given as input.
This task requires the Azure authentication token provided the task &quot;azure_authenticate_new&quot;."><img src="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" width="20px">&nbsp;<span class="name">hdinsight_delete_spark_deployment</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_817" style="top: 864.453px; left: 694.391px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a DELETE request to Azure HDInsight REST API in order to remove the resource group, which name is given as input.
This task requires the Azure authentication token provided the task &quot;azure_authenticate_new&quot;."><img src="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" width="20px">&nbsp;<span class="name">hdinsight_delete_spark_resource_group</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_820" style="top: 613.453px; left: 716.391px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a DELETE request to Azure HDInsight REST API in order to undeploy the Spark cluster, which name is given as input.
This task requires the Azure authentication token provided the task &quot;azure_authenticate_new&quot;."><img src="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" width="20px">&nbsp;<span class="name">hdinsight_delete_spark_cluster</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_823" style="top: 342.453px; left: 758.391px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task that declares to be ready for the signal &quot;Terminate_Job_and_Services&quot;, then iterates to check whether this signal is received (for example when sent by user from the Workflow Execution portal). When this signal is received, the task terminates."><img src="/automation-dashboard/styles/patterns/img/wf-icons/signal-wait.png" width="20px">&nbsp;<span class="name">wait_for_stop</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_826" style="top: 481.453px; left: 729.391px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a POST request to Azure REST API in order to authenticate again to Azure and acquire a new authentication token."><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png" width="20px">&nbsp;<span class="name">azure_authenticate_new</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_829" style="top: 488.453px; left: 330.391px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a PUT request to Azure HDInsight REST API in order to create a Resource Group, which name is given as input.
This task requires the Azure authentication token provided the task &quot;azure_authenticate&quot;."><img src="/automation-dashboard/styles/patterns/img/wf-icons/hdinsight.png" width="20px">&nbsp;<span class="name">azure-create_resource_group</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_832" style="top: 874.453px; left: 326.391px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task that performs iteratively a GET request to Azure HDInsight REST API, in order to get information about the cluster deployment status. If the deployment status is &quot;Succeeded&quot;. The cluster Web UI, SSH host and SSH port are extracted and provided as job results, then the loop stops. 
This task requires the Azure authentication token provided the task &quot;azure_authenticate&quot;."><img src="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" width="20px">&nbsp;<span class="name">hdinsight_get_spark_cluster_info</span></a></div><svg style="position:absolute;left:390.5px;top:527.5px" width="33.5" height="81" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 80 C -10 30 22.5 50 12.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.8328550000000003,59.88118 L9.062119149469435,41.707035225557576 L0.9945983941115473,46.169669969951265 L-4.6493908805793005,38.87958183144603 L-1.8328550000000003,59.88118" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.8328550000000003,59.88118 L9.062119149469435,41.707035225557576 L0.9945983941115473,46.169669969951265 L-4.6493908805793005,38.87958183144603 L-1.8328550000000003,59.88118" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:390.5px;top:647.5px" width="33" height="99" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 12 98 C 22 48 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.727556,74.41826400000001 L17.1413921743079,53.50545159767145 L11.291962488592459,60.631753047362665 L3.3548812216705537,55.941045109079 L13.727556,74.41826400000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.727556,74.41826400000001 L17.1413921743079,53.50545159767145 L11.291962488592459,60.631753047362665 L3.3548812216705537,55.941045109079 L13.727556,74.41826400000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:786px;top:652.5px" width="27" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 16 50 6 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.3283750000000003,66.78168750000002 L6.746408504660842,47.633624821401554 L-0.8485771407519243,52.86011437424426 L-7.175164621094911,46.153826962153474 L-2.3283750000000003,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.3283750000000003,66.78168750000002 L6.746408504660842,47.633624821401554 L-0.8485771407519243,52.86011437424426 L-7.175164621094911,46.153826962153474 L-2.3283750000000003,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:786px;top:780.5px" width="25.5" height="84" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 4.5 83 C 14.5 33 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M6.947846999999999,62.650558000000004 L12.159398067525082,42.11182056386294 L5.714969561616014,48.704948898138454 L-1.7862110343364686,43.34469800224692 L6.947846999999999,62.650558000000004" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M6.947846999999999,62.650558000000004 L12.159398067525082,42.11182056386294 L5.714969561616014,48.704948898138454 L-1.7862110343364686,43.34469800224692 L6.947846999999999,62.650558000000004" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:790.5px;top:520.5px" width="22.5" height="93" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 1.5 92 C 11.5 42 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.205616,69.96108799999999 L10.221520815510303,49.643389083766394 L3.5225844956614516,55.97775978515496 L-3.7618073993347254,50.32642058810494 L4.205616,69.96108799999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.205616,69.96108799999999 L10.221520815510303,49.643389083766394 L3.5225844956614516,55.97775978515496 L-3.7618073993347254,50.32642058810494 L4.205616,69.96108799999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:406px;top:291.5px" width="412.5" height="673" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 391.5 0 C 401.5 -50 -10 622 0 572 " transform="translate(10.5,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M316.85569987499997,99.75601350000002 L311.6678980953159,120.30076252973282 L309.13639051369626,111.43557954435668 L299.98833205095923,112.58145316842914 L316.85569987499997,99.75601350000002" class="" stroke="#666" fill="#666" transform="translate(10.5,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M316.85569987499997,99.75601350000002 L311.6678980953159,120.30076252973282 L309.13639051369626,111.43557954435668 L299.98833205095923,112.58145316842914 L316.85569987499997,99.75601350000002" class="" stroke="#666" fill="#666" transform="translate(10.5,50.5)"></path></svg><svg style="position:absolute;left:838.0266769263776px;top:291.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_858" style="position: absolute; transform: translate(-50%, -50%); left: 850px; top: 361.5px;">loop</div><svg style="position:absolute;left:790.5px;top:381.5px" width="28" height="100" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 99 C -10 49 17 50 7 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.2004660000000005,75.323682 L7.051569739573505,56.26063306564392 L-0.5915768874973599,61.41643655657482 L-6.855675703851675,54.651743953141285 L-2.2004660000000005,75.323682" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.2004660000000005,75.323682 L7.051569739573505,56.26063306564392 L-0.5915768874973599,61.41643655657482 L-6.855675703851675,54.651743953141285 L-2.2004660000000005,75.323682" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:377.5px;top:400.5px" width="46.5" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 25.5 87 C 35.5 37 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M26.054347875,64.92074025000001 L25.486509164424525,43.73872997715829 L21.076994098386145,51.83540688082566 L12.401175795250175,48.716083753772146 L26.054347875,64.92074025000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M26.054347875,64.92074025000001 L25.486509164424525,43.73872997715829 L21.076994098386145,51.83540688082566 L12.401175795250175,48.716083753772146 L26.054347875,64.92074025000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:402.5px;top:785.5px" width="24.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 3.5 88 C 13.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M6.031265625,66.78168750000002 L11.53929128462053,46.32046433683204 L5.000190602067454,52.819707543808825 L-2.422688671570663,47.35153935976458 L6.031265625,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M6.031265625,66.78168750000002 L11.53929128462053,46.32046433683204 L5.000190602067454,52.819707543808825 L-2.422688671570663,47.35153935976458 L6.031265625,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:487.0266769263776px;top:823.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_873" style="position: absolute; transform: translate(-50%, -50%); left: 499px; top: 893.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 391px; top: 638px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 391px; top: 598px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 378px; top: 391px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 403px; top: 776px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 403px; top: 736px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 786.5px; top: 771px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 786.5px; top: 731px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 791px; top: 894px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 791px; top: 854px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 792.5px; top: 643px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 792.5px; top: 603px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 798px; top: 372px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 798px; top: 332px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 848px; top: 332px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 848px; top: 372px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 791px; top: 511px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 791px; top: 471px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 403.5px; top: 518px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 403.5px; top: 478px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 406.5px; top: 904px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 406.5px; top: 864px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 497px; top: 864px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 497px; top: 904px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
