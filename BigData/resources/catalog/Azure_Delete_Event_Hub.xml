<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<job xmlns="urn:proactive:jobdescriptor:3.14" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" maxNumberOfExecution="1" name="Azure_Delete_Event_Hub" onTaskError="continueJobExecution" priority="normal" projectName="09. Azure Event Hub" tags="Azure,Big Data,Streaming,Event Hub,REST API" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd">
  <variables>
    <variable advanced="false" description="The subscription id of your Microsoft Azure account." group="Subscription Parameters" hidden="false" model="PA:NOT_EMPTY_STRING" name="SUBSCRIPTION_ID" value="change-it-and-put-your-azure-subscription-id"/>
    <variable advanced="true" description="The tenant id of your Microsoft Azure account." group="Subscription Parameters" hidden="false" model="PA:NOT_EMPTY_STRING" name="TENANT_ID" value="change-it-and-put-your-azure-tenant-id"/>
    <variable advanced="true" description="ID of a Azure client application." group="Subscription Parameters" hidden="false" model="PA:NOT_EMPTY_STRING" name="APP_ID" value="change-it-and-put-your-azure-client-application-id"/>
    <variable advanced="true" description="Secret key needed to access the Azure client application." group="Subscription Parameters" hidden="false" model="PA:HIDDEN" name="PASSWORD" value="ENC(L/ks1WBUEKZZ2K0wm+3i1A==)"/>
    <variable advanced="false" description="Hidden variable that contains the authentication endpoint of Azure REST API." hidden="true" model="PA:URL" name="AUTHENTICATION_ENDPOINT" value="https://login.microsoftonline.com"/>
    <variable advanced="false" description="Hidden variable that contains the REST endpoint for managing Azure resources." hidden="true" model="PA:URL" name="MANAGEMENT_ENDPOINT" value="https://management.azure.com"/>
    <variable advanced="true" description="The name of the Resource Group where the Event Hub is created." group="Deployment Parameters" hidden="false" model="PA:NOT_EMPTY_STRING" name="RESOURCE_GROUP_NAME" value="rg-of-${EVENT_HUB_NAME}"/>
    <variable advanced="true" description="The name of the Namespace where the Event Hub is created." group="Deployment Parameters" hidden="false" model="PA:NOT_EMPTY_STRING" name="NAMESPACE" value="ns-of-${EVENT_HUB_NAME}"/>
    <variable advanced="false" description="Name of the Event Hub to be deleted." group="Deployment Parameters" hidden="false" model="PA:NOT_EMPTY_STRING" name="EVENT_HUB_NAME" value="activeeon-event-hub-${PA_JOB_ID}"/>
  </variables>
  <description>
    <![CDATA[ A workflow that uses Azure REST API to delete a Event Hub. ]]>
  </description>
  <genericInformation>
<info name="bucketName" value="microsoft-shell-demo"/>
<info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_event_hub.png"/>
<info name="Documentation" value="https://azure.microsoft.com/en-us/products/event-hubs/"/>
<info name="group" value="public-objects"/>
</genericInformation>
  <taskFlow>
    <task fork="true" name="ad_token_for_event_hub">
      <description>
        <![CDATA[ A task performing a POST request to Azure REST API in order to authenticate to Azure and acquire an authentication token. ]]>
      </description>
      <variables>
        <variable description="Base URL of the server or service that will be queried." inherited="false" model="PA:URL" name="ENDPOINT" value="${AUTHENTICATION_ENDPOINT}"/>
        <variable description="Path of the request (relative to the base url)" inherited="false" name="PATH" value="/${TENANT_ID}/oauth2/token"/>
        <variable description="If true, disable SSL certificate verification" inherited="false" model="PA:Boolean" name="SSL_DISABLE_CHECK" value="true"/>
        <variable description="Content-Type of the request" inherited="false" name="CONTENT_TYPE" value="application/x-www-form-urlencoded"/>
        <variable advanced="false" description="A JSON parameter containing the request body." hidden="false" inherited="false" name="REQUEST_BODY" value="&amp;grant_type=client_credentials&amp;client_id=${APP_ID}&amp;client_secret=%PASSWORD%&amp;resource=https%3A%2F%2Feventhubs.azure.net%2F"/>
        <variable description="If true, print the full request and response content in the task output." inherited="false" model="PA:Boolean" name="DEBUG" value="true"/>
        <variable description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="json"/>
        <variable advanced="false" description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response" hidden="false" inherited="false" name="RESPONSE_PATH" value="."/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png"/>
      </genericInformation>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY").replace("%PASSWORD%",variables.get("PASSWORD")))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;

    case "string":
    result = response.prettyPrint()
    break;
}

variables.put("ACCESS_TOKEN",result)
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.*

// =========== Manage Azure Access token ============
def slurper = new JsonSlurper()
jsonData = slurper.parseText(JsonOutput.toJson(result))

access_token=jsonData.access_token
variables.put("EVENT_HUB_ACCESS_TOKEN",access_token)
println variables.get("EVENT_HUB_ACCESS_TOKEN")

expires_on=jsonData.expires_on
variables.put("EVENT_HUB_ACCESS_TOKEN_EXPIRES_ON",expires_on)
println variables.get("EVENT_HUB_ACCESS_TOKEN_EXPIRES_ON")
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            174.1875
        </positionTop>
        <positionLeft>
            604.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="ad_token_for_resource_management">
      <description>
        <![CDATA[ A task performing a POST request to Azure REST API in order to authenticate to Azure and acquire an authentication token. ]]>
      </description>
      <variables>
        <variable description="Base URL of the server or service that will be queried." inherited="false" model="PA:URL" name="ENDPOINT" value="${AUTHENTICATION_ENDPOINT}"/>
        <variable description="Path of the request (relative to the base url)" inherited="false" name="PATH" value="/${TENANT_ID}/oauth2/token"/>
        <variable description="If true, disable SSL certificate verification" inherited="false" model="PA:Boolean" name="SSL_DISABLE_CHECK" value="true"/>
        <variable description="Content-Type of the request" inherited="false" name="CONTENT_TYPE" value="application/x-www-form-urlencoded"/>
        <variable advanced="false" description="A JSON parameter containing the request body." hidden="false" inherited="false" name="REQUEST_BODY" value="&amp;grant_type=client_credentials&amp;client_id=${APP_ID}&amp;client_secret=%PASSWORD%&amp;resource=https%3A%2F%2Fmanagement.azure.com%2F"/>
        <variable description="If true, print the full request and response content in the task output." inherited="false" model="PA:Boolean" name="DEBUG" value="true"/>
        <variable description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="json"/>
        <variable advanced="false" description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response" hidden="false" inherited="false" name="RESPONSE_PATH" value="."/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png"/>
      </genericInformation>
      <depends>
        <task ref="delete_event_hub"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY").replace("%PASSWORD%",variables.get("PASSWORD")))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;

    case "string":
    result = response.prettyPrint()
    break;
}

variables.put("ACCESS_TOKEN",result)
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.*

// =========== Manage Azure Access token ============
def slurper = new JsonSlurper()
jsonData = slurper.parseText(JsonOutput.toJson(result))

access_token=jsonData.access_token
variables.put("AZURE_MANAGEMENT_ACCESS_TOKEN",access_token)
println variables.get("AZURE_MANAGEMENT_ACCESS_TOKEN")

expires_on=jsonData.expires_on
variables.put("AZURE_MANAGEMENT_ACCESS_TOKEN_EXPIRES_ON",expires_on)
println variables.get("AZURE_MANAGEMENT_ACCESS_TOKEN_EXPIRES_ON")
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            429.171875
        </positionTop>
        <positionLeft>
            560.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="delete_event_hub">
      <description>
        <![CDATA[ A task performing a rest DELETE request using a json request body.
This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be "application/json" with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name> ]]>
      </description>
      <variables>
        <variable advanced="false" description="Base URL of the server or service that will be queried." group="Http Connection" hidden="false" inherited="false" model="PA:URL" name="ENDPOINT" value="https://${NAMESPACE}.servicebus.windows.net"/>
        <variable advanced="true" description="If true, disable SSL certificate verification" group="Http Connection" hidden="false" inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true"/>
        <variable advanced="true" description="If true, print the full request and response content in the task output." group="Http Connection" hidden="false" inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true"/>
        <variable advanced="false" description="Path of the request (relative to the base url)" group="Http Request" hidden="false" inherited="false" name="PATH" value="/${EVENT_HUB_NAME}?api-version=2014-01"/>
        <variable advanced="true" description="Content-Type of the request, should be &quot;application/json&quot; with eventual encoding." group="Http Request" hidden="false" inherited="false" name="CONTENT_TYPE" value="application/atom+xml;type=entry;charset=utf-8"/>
        <variable advanced="false" description="A JSON parameter containing the request body." group="Http Request" hidden="false" inherited="false" model="PA:JSON" name="REQUEST_BODY" value="{  }"/>
        <variable advanced="false" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;" group="Http Response" hidden="false" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="string"/>
        <variable advanced="false" description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response" hidden="false" inherited="false" name="RESPONSE_PATH" value="."/>
        <variable advanced="false" description="Additional headers of the request, provided as a JSON key/value structure. Headers can also be specified by adding &lt;i&gt;HEADER_headername&lt;/i&gt; variables." group="Http Request" hidden="false" inherited="false" model="PA:JSON" name="HEADERS" value="{ &quot;Authorization&quot;: &quot;Bearer ${EVENT_HUB_ACCESS_TOKEN}&quot; }"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_event_hub.png"/>
      </genericInformation>
      <depends>
        <task ref="ad_token_for_event_hub"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;
import groovy.json.JsonSlurper;
import io.restassured.specification.ProxySpecification

debug = Boolean.parseBoolean(variables.get("DEBUG"))

if(variables.get("PROXY_HOST")?.trim() && variables.get("PROXY_PORT")?.trim()){
  proxySpecification = new ProxySpecification(variables.get("PROXY_HOST"), variables.get("PROXY_PORT"), variables.get("PROXY_SCHEME"))
  RestAssured.proxy(proxySpecification)
}

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

def jsonSlurper = new JsonSlurper()
if (variables.get("HEADERS") != null && variables.get("HEADERS").length() > 0) {
    headersObject = jsonSlurper.parseText(variables.get("HEADERS"))
    if (!headersObject instanceof Map) {
        throw new IllegalArgumentException("HEADERS must contain a JSON Map structure")
    } else {
        headersObject.each { restCall = restCall.header(it.key, it.value) }
    }
}

if (variables.get("QUERY_PARAMETERS") != null && variables.get("QUERY_PARAMETERS").length() > 0) {
    paramsObject = jsonSlurper.parseText(variables.get("QUERY_PARAMETERS"))
    if (!paramsObject instanceof Map) {
        throw new IllegalArgumentException("QUERY_PARAMETERS must contain a JSON Map structure")
    } else {
        paramsObject.each { restCall = restCall.queryParam(it.key, it.value) }
    }
}

if (variables.get("COOKIES") != null && variables.get("COOKIES").length() > 0) {
    cookiesObject = jsonSlurper.parseText(variables.get("COOKIES"))
    if (!cookiesObject instanceof Map) {
        throw new IllegalArgumentException("COOKIES must contain a JSON Map structure")
    } else {
        cookiesObject.each { restCall = restCall.cookie(it.key, it.value) }
    }
}

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.delete(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;

    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            302.1875
        </positionTop>
        <positionLeft>
            604.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="delete_namespace">
      <description>
        <![CDATA[ A task performing a rest DELETE request using a json request body.
This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be "application/json" with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name> ]]>
      </description>
      <variables>
        <variable advanced="false" description="Base URL of the server or service that will be queried." group="Http Connection" hidden="false" inherited="false" model="PA:URL" name="ENDPOINT" value="${MANAGEMENT_ENDPOINT}"/>
        <variable advanced="true" description="If true, disable SSL certificate verification" group="Http Connection" hidden="false" inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true"/>
        <variable advanced="true" description="If true, print the full request and response content in the task output." group="Http Connection" hidden="false" inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true"/>
        <variable advanced="false" description="Path of the request (relative to the base url)" group="Http Request" hidden="false" inherited="false" name="PATH" value="/subscriptions/${SUBSCRIPTION_ID}/resourcegroups/${RESOURCE_GROUP_NAME}/providers/Microsoft.EventHub/namespaces/${NAMESPACE}?api-version=2021-11-01"/>
        <variable advanced="true" description="Content-Type of the request, should be &quot;application/json&quot; with eventual encoding." group="Http Request" hidden="false" inherited="false" name="CONTENT_TYPE" value="application/json;charset = UTF-8"/>
        <variable advanced="false" description="A JSON parameter containing the request body." group="Http Request" hidden="false" inherited="false" model="PA:JSON" name="REQUEST_BODY" value="{ }"/>
        <variable advanced="false" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;" group="Http Response" hidden="false" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" name="RESPONSE_FORMAT" value="string"/>
        <variable advanced="false" description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response" hidden="false" inherited="false" name="RESPONSE_PATH" value="."/>
        <variable advanced="false" description="Additional headers of the request, provided as a JSON key/value structure. Headers can also be specified by adding &lt;i&gt;HEADER_headername&lt;/i&gt; variables." group="Http Request" hidden="false" inherited="false" model="PA:JSON" name="HEADERS" value="{ &quot;Authorization&quot;: &quot;Bearer ${AZURE_MANAGEMENT_ACCESS_TOKEN}&quot; }"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_event_hub_topic.png"/>
      </genericInformation>
      <depends>
        <task ref="ad_token_for_resource_management"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;
import groovy.json.JsonSlurper;
import io.restassured.specification.ProxySpecification

debug = Boolean.parseBoolean(variables.get("DEBUG"))

if(variables.get("PROXY_HOST")?.trim() && variables.get("PROXY_PORT")?.trim()){
  proxySpecification = new ProxySpecification(variables.get("PROXY_HOST"), variables.get("PROXY_PORT"), variables.get("PROXY_SCHEME"))
  RestAssured.proxy(proxySpecification)
}

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

def jsonSlurper = new JsonSlurper()
if (variables.get("HEADERS") != null && variables.get("HEADERS").length() > 0) {
    headersObject = jsonSlurper.parseText(variables.get("HEADERS"))
    if (!headersObject instanceof Map) {
        throw new IllegalArgumentException("HEADERS must contain a JSON Map structure")
    } else {
        headersObject.each { restCall = restCall.header(it.key, it.value) }
    }
}

if (variables.get("QUERY_PARAMETERS") != null && variables.get("QUERY_PARAMETERS").length() > 0) {
    paramsObject = jsonSlurper.parseText(variables.get("QUERY_PARAMETERS"))
    if (!paramsObject instanceof Map) {
        throw new IllegalArgumentException("QUERY_PARAMETERS must contain a JSON Map structure")
    } else {
        paramsObject.each { restCall = restCall.queryParam(it.key, it.value) }
    }
}

if (variables.get("COOKIES") != null && variables.get("COOKIES").length() > 0) {
    cookiesObject = jsonSlurper.parseText(variables.get("COOKIES"))
    if (!cookiesObject instanceof Map) {
        throw new IllegalArgumentException("COOKIES must contain a JSON Map structure")
    } else {
        cookiesObject.each { restCall = restCall.cookie(it.key, it.value) }
    }
}

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.delete(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;

    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            558.1875
        </positionTop>
        <positionLeft>
            606.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" name="delete_resource_group">
      <description>
        <![CDATA[ A task performing a DELETE request to Azure HDInsight REST API in order to remove the resource group, which name is given as input.
This task requires the Azure authentication token provided the task "azure_authenticate_new". ]]>
      </description>
      <variables>
        <variable description="Base URL of the server or service that will be queried." inherited="false" model="PA:URL" name="ENDPOINT" value="${MANAGEMENT_ENDPOINT}"/>
        <variable description="Path of the request (relative to the base url)" inherited="false" name="PATH" value="/subscriptions/${SUBSCRIPTION_ID}/resourcegroups/${RESOURCE_GROUP_NAME}?api-version=2020-10-01"/>
        <variable description="If true, disable SSL certificate verification" inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true"/>
        <variable description="Content-Type of the request" inherited="false" name="CONTENT_TYPE" value="application/json;charset = UTF-8"/>
        <variable description="A JSON parameter containing the request body." inherited="false" model="PA:JSON" name="REQUEST_BODY" value="{}"/>
        <variable description="If true, print the full request and response content in the task output." inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true"/>
        <variable description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response" inherited="false" name="RESPONSE_PATH" value=""/>
        <variable advanced="false" description="HTTP Authorization request header that contains the credentials to authenticate the user to the server" hidden="false" inherited="false" name="HEADER_Authorization" value="Bearer ${AZURE_MANAGEMENT_ACCESS_TOKEN}"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hdinsight.png"/>
      </genericInformation>
      <depends>
        <task ref="delete_namespace"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("AZURE_PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("AZURE_PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.delete(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;

    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"/>
      <metadata>
        <positionTop>
            686.1875
        </positionTop>
        <positionLeft>
            604.25
        </positionLeft>
      </metadata>
    </task>
    <task fork="true" maxNumberOfExecution="1" name="check_delete_operation">
      <description>
        <![CDATA[ A task that performs iteratively a GET request to Azure HDInsight REST API, in order to get information about the cluster deployment status. If the deployment status is "Succeeded". The cluster Web UI, SSH host and SSH port are extracted and provided as job results, then the loop stops.
This task requires the Azure authentication token provided the task "azure_authenticate". ]]>
      </description>
      <variables>
        <variable description="Base URL of the server or service that will be queried." inherited="false" model="PA:URL" name="ENDPOINT" value="${MANAGEMENT_ENDPOINT}"/>
        <variable advanced="false" description="Path of the request (relative to the base url)" hidden="false" inherited="false" name="PATH" value="/subscriptions/${SUBSCRIPTION_ID}/resourcegroups/${RESOURCE_GROUP_NAME}?api-version=2020-10-01"/>
        <variable description="If true, disable SSL certificate verification" inherited="false" model="PA:BOOLEAN" name="SSL_DISABLE_CHECK" value="true"/>
        <variable description="If true, print the full request and response content in the task output." inherited="false" model="PA:BOOLEAN" name="DEBUG" value="true"/>
        <variable advanced="false" description="HTTP Authorization request header that contains the credentials to authenticate the user to the server" hidden="false" inherited="false" name="HEADER_Authorization" value="Bearer ${AZURE_MANAGEMENT_ACCESS_TOKEN}"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hdinsight.png"/>
      </genericInformation>
      <depends>
        <task ref="delete_resource_group"/>
      </depends>
      <inputFiles>
        <files accessMode="cacheFromGlobalSpace" includes="rest-assured-fat-3.3.0.jar"/>
      </inputFiles>
      <forkEnvironment>
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given()

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("PARAM_")}).forEach({entry -> restCall = restCall.param(entry.getKey().replace("PARAM_",""), entry.getValue()) });

if (debug) {
    println "-------------- REQUEST ------------------"
	restCall = restCall.log().all()
}

response = restCall.head(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}
if (response.statusCode==HttpStatus.SC_NOT_FOUND) {
    variables.put("CLUSTER_STATE","NOT_FOUND")
} else {
response = response.then().assertThat()
  .statusCode(HttpStatus.SC_NO_CONTENT)
  .extract();
}

if (debug) {
    println "-------------- RESULT -------------------"
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;

    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;

    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow>
        <loop target="check_delete_operation">
          <script>
            <code language="groovy">
              <![CDATA[
loop = "* * * * *"

if (variables.get("CLUSTER_STATE")=="NOT_FOUND"){
	loop = "false"
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[

]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            814.171875
        </positionTop>
        <positionLeft>
            604.25
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2736px;
            height:3260px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-169.1875px;left:-555.25px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_943" style="top: 174.203px; left: 604.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a POST request to Azure REST API in order to authenticate to Azure and acquire an authentication token."><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png" width="20px">&nbsp;<span class="name">ad_token_for_event_hub</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i id="called-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_946" style="top: 429.187px; left: 560.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a POST request to Azure REST API in order to authenticate to Azure and acquire an authentication token."><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png" width="20px">&nbsp;<span class="name">ad_token_for_resource_management</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i id="called-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_949" style="top: 302.203px; left: 604.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest DELETE request using a json request body.
This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be &quot;application/json&quot; with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name>"><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure_event_hub.png" width="20px">&nbsp;<span class="name">delete_event_hub</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i id="called-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_952" style="top: 558.203px; left: 606.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest DELETE request using a json request body.
This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
CONTENT_TYPE: content-type of the request, should be &quot;application/json&quot; with eventual encoding.
REQUEST_BODY: a json parameter containing the request body.
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
QUERY_PARAM_<param_name>"><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure_event_hub_topic.png" width="20px">&nbsp;<span class="name">delete_namespace</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i id="called-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_955" style="top: 686.203px; left: 604.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a DELETE request to Azure HDInsight REST API in order to remove the resource group, which name is given as input.
This task requires the Azure authentication token provided the task &quot;azure_authenticate_new&quot;."><img src="/automation-dashboard/styles/patterns/img/wf-icons/hdinsight.png" width="20px">&nbsp;<span class="name">delete_resource_group</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i id="called-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_958" style="top: 814.187px; left: 604.25px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task that performs iteratively a GET request to Azure HDInsight REST API, in order to get information about the cluster deployment status. If the deployment status is &quot;Succeeded&quot;. The cluster Web UI, SSH host and SSH port are extracted and provided as job results, then the loop stops.
This task requires the Azure authentication token provided the task &quot;azure_authenticate&quot;."><img src="/automation-dashboard/styles/patterns/img/wf-icons/hdinsight.png" width="20px">&nbsp;<span class="name">check_delete_operation</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i id="called-icon"></i></a></div><svg style="position:absolute;left:653px;top:341.5px" width="21.5" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 87 C -10 37 10.5 50 0.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.7747343749999995,65.86284375000001 L4.9278885342289325,46.12279308344341 L-2.2798358243061143,51.87159379066753 L-9.063361425103546,45.62789453274952 L-2.7747343749999995,65.86284375000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.7747343749999995,65.86284375000001 L4.9278885342289325,46.12279308344341 L-2.2798358243061143,51.87159379066753 L-9.063361425103546,45.62789453274952 L-2.7747343749999995,65.86284375000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:653.5px;top:213.5px" width="36.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 25.5 50 15.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.5081120000000008,66.303232 L9.893523217345216,48.44258491288153 L1.703724183338643,52.67663637484854 L-3.733072407806235,45.23074872954288 L-1.5081120000000008,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.5081120000000008,66.303232 L9.893523217345216,48.44258491288153 L1.703724183338643,52.67663637484854 L-3.733072407806235,45.23074872954288 L-1.5081120000000008,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:653px;top:468.5px" width="26" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 5 89 C 15 39 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M7.40624,67.21769599999999 L12.458449338190006,46.63918340061357 L6.065314342880473,53.28206116042133 L-1.4771855013886555,47.980109057733095 L7.40624,67.21769599999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M7.40624,67.21769599999999 L12.458449338190006,46.63918340061357 L6.065314342880473,53.28206116042133 L-1.4771855013886555,47.980109057733095 L7.40624,67.21769599999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:658px;top:597.5px" width="28" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 7 88 C 17 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M9.235168,66.303232 L13.724569009562899,45.59465217000355 L7.514881717901915,52.40932631773681 L-0.1693366727002843,47.314938452101636 L9.235168,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M9.235168,66.303232 L13.724569009562899,45.59465217000355 L7.514881717901915,52.40932631773681 L-0.1693366727002843,47.314938452101636 L9.235168,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:665px;top:725.5px" width="23" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 2 88 C 12 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.652999999999999,66.78168750000002 L10.556660138865833,46.431090531734775 L3.8927913941925145,52.80234263424697 L-3.422684726887219,47.19129913754225 L4.652999999999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M4.652999999999999,66.78168750000002 L10.556660138865833,46.431090531734775 L3.8927913941925145,52.80234263424697 L-3.422684726887219,47.19129913754225 L4.652999999999999,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:731.0266769263776px;top:763.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_981" style="position: absolute; transform: translate(-50%, -50%); left: 743px; top: 833.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 669.5px; top: 204px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 653.5px; top: 459px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 653.5px; top: 419px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 654px; top: 332px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 654px; top: 292px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 658.5px; top: 588px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 658.5px; top: 548px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 665.5px; top: 716px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 665.5px; top: 676px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 667.5px; top: 844px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 667.5px; top: 804px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 741px; top: 804px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 741px; top: 844px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
