<?xml version="1.0" encoding="UTF-8"?>
<job
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="Docker_Swarm_HDFS_Spark_Service" projectName="01. Spark" tags="Swarm,Docker,Big Data,Artificial Intelligence,HDFS,Spark,Service Automation,Analytics" priority="normal" onTaskError="cancelJob"  maxNumberOfExecution="1"  >
  <variables>
    <variable name="node_source_name" value="" model="PA:MODEL_FROM_URL(${PA_SCHEDULER_REST_PUBLIC_URL}/rm/model/nodesources?infrastructure=%5E(%3F!(Default)).*$)" description="Must be set to the targeted node source. The workflow tasks will be run only on nodes belonging to this node source."   />
    <variable name="nb_spark_hdfs_workers" value="3" model="PA:INTEGER" description="Number of HDFS/Spark nodes."   />
    <variable name="INSTANCE_NAME" value="docker-swarm-spark-$PA_JOB_ID" model="PA:NOT_EMPTY_STRING" description="Service instance name."   />
  </variables>
  <description>
    <![CDATA[ Deploy a Docker Swarm-HDFS-Spark platform of nb_spark_hdfs_workers datanodes-spark workers. node_source_name refers to the targeted node source of the Spark deployment. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="service-automation"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Error_if_empty_node_source_name"

          onTaskError="cancelJob"


          fork="true">
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def node_source_name = variables.get("node_source_name")
if (node_source_name.isEmpty()){
  println("A node source name must be selected.")
  throw new IllegalStateException("A node source name must be selected.")
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
          -12.887496948242188
        </positionTop>
        <positionLeft>
          498.3500061035156
        </positionLeft>
      </metadata>
    </task>
    <task name="Start_Docker_Swarm_Service"

          onTaskError="cancelJob"


          fork="true">
      <description>
        <![CDATA[ Start the Docker_Swarm service. ]]>
      </description>
      <variables>
        <variable name="SERVICE_ACTIVATION_WORKFLOW" value="service-automation/Docker_Swarm" inherited="false" model="PA:CATALOG_OBJECT(Workflow/psa,,,Docker_Swarm%)" description="The service activation workflow. Please keep the default value for this variable."  advanced="false" hidden="false"/>
        <variable name="INSTANCE_NAME" value="swarm-$PA_JOB_ID" inherited="false"  description="The name of the service to be deployed"   />
        <variable name="TARGETED_PA_NODE_SOURCE_NAME" value="$node_source_name" inherited="false"     />
        <variable name="TARGETED_NB_PA_NODES" value="$nb_spark_hdfs_workers" inherited="false"     />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/swarm.png"/>
      </genericInformation>
      <depends>
        <task ref="Error_if_empty_node_source_name"/>
      </depends>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw" language="groovy">
            <arguments>
              <argument value="false"/>
              <argument value="false"/>
              <argument value="INSTANCE_NAME"/>
              <argument value="TARGETED_PA_NODE_SOURCE_NAME"/>
              <argument value="TARGETED_NB_PA_NODES"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
// Propagate the swarm service instance id for spark
def instance_name = variables.get("INSTANCE_NAME")
def instance_id = variables.get("INSTANCE_ID_" + instance_name)
variables.put("propagated_swarm_service_instance_id", instance_id)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
          115.48750305175781
        </positionTop>
        <positionLeft>
          498.3500061035156
        </positionLeft>
      </metadata>
    </task>
    <task name="Start_HDFS_Service"

          onTaskError="cancelJob"


          fork="true">
      <description>
        <![CDATA[ Start the HDFS service. ]]>
      </description>
      <variables>
        <variable name="SERVICE_ACTIVATION_WORKFLOW" value="service-automation/HDFS" inherited="false" model="PA:CATALOG_OBJECT(Workflow/psa,,,HDFS%)" description="The service activation workflow. Please keep the default value for this variable."  advanced="false" hidden="false"/>
        <variable name="INSTANCE_NAME" value="hdfs-$PA_JOB_ID" inherited="false"  description="The name of the service to be deployed"   />
        <variable name="swarm_service_instance_id" value="$propagated_swarm_service_instance_id" inherited="false"     />
        <variable name="nb_hdfs_datanodes" value="$nb_spark_hdfs_workers" inherited="false"     />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hdfs.png"/>
      </genericInformation>
      <depends>
        <task ref="Start_Docker_Swarm_Service"/>
      </depends>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw" language="groovy">
            <arguments>
              <argument value="true"/>
              <argument value="false"/>
              <argument value="INSTANCE_NAME"/>
              <argument value="swarm_service_instance_id"/>
              <argument value="nb_hdfs_datanodes"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
// Propagate the hdfs service instance id for spark
def instance_name = variables.get("INSTANCE_NAME")
def instance_id = variables.get("INSTANCE_ID_" + instance_name)
variables.put("propagated_hdfs_service_instance_id", instance_id)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
          243.8874969482422
        </positionTop>
        <positionLeft>
          498.3500061035156
        </positionLeft>
      </metadata>
    </task>
    <task name="Start_Spark_Service"

          onTaskError="cancelJob"


          fork="true">
      <description>
        <![CDATA[ Start the Spark service. ]]>
      </description>
      <variables>
        <variable name="SERVICE_ACTIVATION_WORKFLOW" value="service-automation/Spark" inherited="false" model="PA:CATALOG_OBJECT(Workflow/psa,,,Spark%)" description="The service activation workflow. Please keep the default value for this variable."  advanced="false" hidden="false"/>
        <variable name="INSTANCE_NAME" value="spark-$PA_JOB_ID" inherited="false"  description="The name of the service to be deployed"   />
        <variable name="swarm_service_instance_id" value="$propagated_swarm_service_instance_id" inherited="false"     />
        <variable name="hdfs_service_instance_id" value="$propagated_hdfs_service_instance_id" inherited="false"     />
        <variable name="nb_spark_workers" value="$nb_spark_hdfs_workers" inherited="false"     />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
      </genericInformation>
      <depends>
        <task ref="Start_HDFS_Service"/>
      </depends>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw" language="groovy">
            <arguments>
              <argument value="true"/>
              <argument value="false"/>
              <argument value="INSTANCE_NAME"/>
              <argument value="swarm_service_instance_id"/>
              <argument value="hdfs_service_instance_id"/>
              <argument value="nb_spark_workers"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
// Retrieve variables
def spark_service_instance_name = variables.get("INSTANCE_NAME")
def spark_service_instance_id = variables.get("INSTANCE_ID_" + spark_service_instance_name)

// To results
resultMap.put("spark_service_instance_id", spark_service_instance_id)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
          372.3000030517578
        </positionTop>
        <positionLeft>
          498.3500061035156
        </positionLeft>
      </metadata>
    </task>
    <task name="wait_user_action"




          fork="true">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png"/>
        <info name="task.documentation" value="user/ProActiveUserGuide.html#_loop"/>
      </genericInformation>
      <depends>
        <task ref="Start_Spark_Service"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.scheduler.common.job.JobVariable

// Skip waiting for signal used when executing workflow from workflow tests
if (variables.get("SKIP_SIGNAL") && variables.get("SKIP_SIGNAL").toBoolean()) {
    println("Skipping waiting for signal ...");
    return;
}

def signals = ['Undeploy_Platform','Submit_Python_Spark_Pi','Submit_Scala_Spark_Pi','Submit_Scala_Spark_Write_Read_HDFS']

// Manage the signal 'Undeploy_Platform'
signalapi.readyForSignal("Undeploy_Platform")

// Manage the signal 'Submit_Python_Spark_Pi'
List <JobVariable> submitPythonSparkPiJobVariables = new java.util.ArrayList<JobVariable>()
submitPythonSparkPiJobVariables.add(new JobVariable("nb_random_points", "10000", "PA:INTEGER", "Number of random points.", "", false, false))
signalapi.readyForSignal("Submit_Python_Spark_Pi", submitPythonSparkPiJobVariables)

// Manage the signal 'Submit_Scala_Spark_Pi'
List <JobVariable> submitScalaSparkPiJobVariables = new java.util.ArrayList<JobVariable>()
submitScalaSparkPiJobVariables.add(new JobVariable("nb_random_points", "10000", "PA:INTEGER", "Number of random points.", "", false, false))
signalapi.readyForSignal("Submit_Scala_Spark_Pi", submitScalaSparkPiJobVariables)

// Manage the signal 'Submit_Scala_Spark_Write_Read_HDFS'
List <JobVariable> submitSubmitScalaSparkWriteReadHDFSJobVariables = new java.util.ArrayList<JobVariable>()
submitSubmitScalaSparkWriteReadHDFSJobVariables.add(new JobVariable("parquet_file_path", "/user/hdfs/wiki/testwiki", "PA:NOT_EMPTY_STRING", "Parquet file path in the HDFS.", "", false, false))
submitSubmitScalaSparkWriteReadHDFSJobVariables.add(new JobVariable("csv_file_path", "/user/hdfs/wiki/testwiki.csv", "PA:NOT_EMPTY_STRING", "CSV file path.", "", false, false))
signalapi.readyForSignal("Submit_Scala_Spark_Write_Read_HDFS", submitSubmitScalaSparkWriteReadHDFSJobVariables)

// Receive the signal
receivedSignal = signalapi.waitForAny(signals.toSet())
println(receivedSignal)

signals.each {  signalapi.removeSignal("ready_"+it) }

if (receivedSignal.getName() == "Undeploy_Platform") {
    variables.put("SIGNAL_ACTION","UNDEPLOY_PLATFORM")
    println("Undeploying platform ...")

} else if (receivedSignal.getName() == "Submit_Python_Spark_Pi"){
    variables.put("SIGNAL_ACTION","SUBMIT_PYTHON_SPARK_PI_SIGNAL")
    variables.put("nb_random_points",receivedSignal.getUpdatedVariables().get("nb_random_points"))
    println("Submitting Spark application to the cluster ...")

} else if (receivedSignal.getName() == "Submit_Scala_Spark_Pi"){
    variables.put("SIGNAL_ACTION","SUBMIT_SCALA_SPARK_PI_SIGNAL")
    variables.put("nb_random_points",receivedSignal.getUpdatedVariables().get("nb_random_points"))
    println("Submitting Spark application to the cluster ...")

} else if (receivedSignal.getName() == "Submit_Scala_Spark_Write_Read_HDFS"){
    variables.put("SIGNAL_ACTION","SUBMIT_SCALA_SPARK_WRITE_READ_HDFS_SIGNAL")
    variables.put("parquet_file_path",receivedSignal.getUpdatedVariables().get("parquet_file_path"))
    variables.put("csv_file_path",receivedSignal.getUpdatedVariables().get("csv_file_path"))
    println("Submitting Spark application to the cluster ...")
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="start"></controlFlow>
      <metadata>
        <positionTop>
          498.68751525878906
        </positionTop>
        <positionLeft>
          498.3500061035156
        </positionLeft>
      </metadata>
    </task>
    <task name="handle_user_actions"




          fork="true">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png"/>
      </genericInformation>
      <depends>
        <task ref="wait_user_action"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.JsonSlurper

if(variables.get("SIGNAL_ACTION")=="UNDEPLOY_PLATFORM"){

    schedulerapi.connect()

    def spark_instance_name = "spark-" + variables.get("PA_JOB_ID")
    def hdfs_instance_name = "hdfs-" + variables.get("PA_JOB_ID")
    def swarm_instance_name = "swarm-" + variables.get("PA_JOB_ID")

    def spark_service_instance_id = variables.get("INSTANCE_ID_" + spark_instance_name)
    def hdfs_service_instance_id = variables.get("INSTANCE_ID_" + hdfs_instance_name)
    def swarm_service_instance_id = variables.get("INSTANCE_ID_" + swarm_instance_name)

    def workflow_variables = new HashMap<>()
    workflow_variables.put("SPARK_INSTANCE_NAME", spark_instance_name)
    workflow_variables.put("HDFS_INSTANCE_NAME", hdfs_instance_name)
    workflow_variables.put("SWARM_INSTANCE_NAME", swarm_instance_name)

    workflow_variables.put("INSTANCE_ID_" + spark_instance_name, spark_service_instance_id)
    workflow_variables.put("INSTANCE_ID_" + hdfs_instance_name, hdfs_service_instance_id)
    workflow_variables.put("INSTANCE_ID_" + swarm_instance_name, swarm_service_instance_id)

    def called_workflow = "data-big-data/Docker_Swarm_HDFS_Spark_Terminate_Service"

    // submitting the job
    def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]
    def jobid = schedulerapi.submitFromCatalog(variables.get("PA_CATALOG_REST_URL"), called_workflow, workflow_variables, generic_infos_map)
    println "Job submitted with job id " + jobid

    // waiting for its termination
    def timeout_in_sec = 300
    schedulerapi.waitForJob(jobid.toString(), timeout_in_sec * 1000)
    variables.put("isFinished", true)


} else if(variables.get("SIGNAL_ACTION")=="SUBMIT_PYTHON_SPARK_PI_SIGNAL"){

    // connect to the scheduler
    schedulerapi.connect()

    def workflow_variables = new HashMap<>()
    workflow_variables.put("nb_random_points", variables.get("nb_random_points"))
   	def spark_instance_name = "spark-" + variables.get("PA_JOB_ID")
    def spark_service_instance_id = variables.get("INSTANCE_ID_" + spark_instance_name)
    workflow_variables.put("spark_service_instance_id", spark_service_instance_id)

    called_workflow = "data-big-data/Python_Spark_Pi"

    // submitting the job
    def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]
    jobid = schedulerapi.submitFromCatalog(variables.get("PA_CATALOG_REST_URL"), called_workflow, workflow_variables, generic_infos_map)

    println "Job submitted with job id " + jobid
    result = jobid


} else if(variables.get("SIGNAL_ACTION")=="SUBMIT_SCALA_SPARK_PI_SIGNAL"){

    // connect to the scheduler
    schedulerapi.connect()

    def workflow_variables = new HashMap<>()
    workflow_variables.put("nb_random_points", variables.get("nb_random_points"))
   	def spark_instance_name = "spark-" + variables.get("PA_JOB_ID")
    def spark_service_instance_id = variables.get("INSTANCE_ID_" + spark_instance_name)
    workflow_variables.put("spark_service_instance_id", spark_service_instance_id)

    called_workflow = "data-big-data/Scala_Spark_Pi"

    // submitting the job
    def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]
    jobid = schedulerapi.submitFromCatalog(variables.get("PA_CATALOG_REST_URL"), called_workflow, workflow_variables, generic_infos_map)

    println "Job submitted with job id " + jobid
    result = jobid


} else if(variables.get("SIGNAL_ACTION")=="SUBMIT_SCALA_SPARK_WRITE_READ_HDFS_SIGNAL"){

    // connect to the scheduler
    schedulerapi.connect()

    def workflow_variables = new HashMap<>()
    workflow_variables.put("parquet_file_path", variables.get("parquet_file_path"))
   	workflow_variables.put("csv_file_path", variables.get("csv_file_path"))
   	def spark_instance_name = "spark-" + variables.get("PA_JOB_ID")
    def spark_service_instance_id = variables.get("INSTANCE_ID_" + spark_instance_name)
    workflow_variables.put("spark_service_instance_id", spark_service_instance_id)

    called_workflow = "data-big-data/Scala_Spark_Write_Read_HDFS"

    // submitting the job
    def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]
    jobid = schedulerapi.submitFromCatalog(variables.get("PA_CATALOG_REST_URL"), called_workflow, workflow_variables, generic_infos_map)

    println "Job submitted with job id " + jobid
    result = jobid
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow  block="end">
        <loop target="wait_user_action">
          <script>
            <code language="groovy">
              <![CDATA[
if(!variables.get("isFinished")){
	loop = '* * * * *';
}else{
   loop = false;
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
          623.0875396728516
        </positionTop>
        <positionLeft>
          498.3500061035156
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2257px;
            height:2581px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:17.887496948242188px;left:-493.3500061035156px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_100" style="top: -12.8995px; left: 498.35px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Error_if_empty_node_source_name</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_103" style="top: 115.5px; left: 498.35px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Start the Docker_Swarm service."><img src="/automation-dashboard/styles/patterns/img/wf-icons/swarm.png" width="20px">&nbsp;<span class="name">Start_Docker_Swarm_Service</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon" class="glyphicon glyphicon-arrow-right"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_106" style="top: 243.899px; left: 498.35px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Start the HDFS service."><img src="/automation-dashboard/styles/patterns/img/wf-icons/hdfs.png" width="20px">&nbsp;<span class="name">Start_HDFS_Service</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon" class="glyphicon glyphicon-arrow-right"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_109" style="top: 372.3px; left: 498.35px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Start the Spark service."><img src="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" width="20px">&nbsp;<span class="name">Start_Spark_Service</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon" class="glyphicon glyphicon-arrow-right"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_112" style="top: 498.699px; left: 498.35px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png" width="20px">&nbsp;<span class="name">wait_user_action</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_115" style="top: 623.097px; left: 498.35px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png" width="20px">&nbsp;<span class="name">handle_user_actions</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><svg style="position:absolute;left:574.5px;top:26.5px" width="33.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 22.5 50 12.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.7647200000000005,66.303232 L8.955147275230877,48.02525493465072 L0.9308726161701921,52.565190638595936 L-4.782894086173185,45.32966231848053 L-1.7647200000000005,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.7647200000000005,66.303232 L8.955147275230877,48.02525493465072 L0.9308726161701921,52.565190638595936 L-4.782894086173185,45.32966231848053 L-1.7647200000000005,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:554px;top:154.5px" width="41.5" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 89 C -10 39 30.5 50 20.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.0044066250000012,66.74071675 L11.517842394635135,49.647054781590576 L3.073657634674195,53.34783088122744 L-1.875043474137434,45.56899052191638 L-1.0044066250000012,66.74071675" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.0044066250000012,66.74071675 L11.517842394635135,49.647054781590576 L3.073657634674195,53.34783088122744 L-1.875043474137434,45.56899052191638 L-1.0044066250000012,66.74071675" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:553.5px;top:283.5px" width="21.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 10.5 50 0.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.7747343749999995,66.78168750000002 L4.918836648297567,47.038107153227145 L-2.286251050858403,52.790212093809444 L-9.072638757893003,46.54962382908555 L-2.7747343749999995,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.7747343749999995,66.78168750000002 L4.918836648297567,47.038107153227145 L-2.286251050858403,52.790212093809444 L-9.072638757893003,46.54962382908555 L-2.7747343749999995,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:545px;top:411.5px" width="29.5" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 87 C -10 37 18.5 50 8.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.125484375,65.86284375000001 L7.590322450053323,47.03193570661965 L-0.17671617285377517,51.99913924888258 L-6.273382051064109,45.08316750447342 L-2.125484375,65.86284375000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.125484375,65.86284375000001 L7.590322450053323,47.03193570661965 L-0.17671617285377517,51.99913924888258 L-6.273382051064109,45.08316750447342 L-2.125484375,65.86284375000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:545px;top:538.5px" width="29.5" height="85" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 8.5 84 C 18.5 34 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M10.640350999999999,63.573684000000014 L14.776333191943666,42.79163281856162 L8.68363384624335,49.71109917680796 L0.9137483687516177,44.74834997231827 L10.640350999999999,63.573684000000014" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M10.640350999999999,63.573684000000014 L14.776333191943666,42.79163281856162 L8.68363384624335,49.71109917680796 L0.9137483687516177,44.74834997231827 L10.640350999999999,63.573684000000014" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:612.5px;top:488.5px" width="51" height="185" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 0 C 50 -50 7 134 17 84 " transform="translate(0.5,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M20.804227749999995,-4.451209500000002 L33.301854444898105,12.66046274425977 L24.863006357202696,8.947533583502782 L19.903111361395318,16.719241351462472 L20.804227749999995,-4.451209500000002" class="" stroke="#316b31" fill="#316b31" transform="translate(0.5,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M20.804227749999995,-4.451209500000002 L33.301854444898105,12.66046274425977 L24.863006357202696,8.947533583502782 L19.903111361395318,16.719241351462472 L20.804227749999995,-4.451209500000002" class="" stroke="#316b31" fill="#316b31" transform="translate(0.5,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_138" style="position: absolute; transform: translate(-50%, -50%); left: 636px; top: 580.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 587.5px; top: 17px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 575px; top: 145px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 575px; top: 105px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 554.5px; top: 274px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 554.5px; top: 234px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 554px; top: 402px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 554px; top: 362px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 545.5px; top: 529px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 545.5px; top: 489px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 603px; top: 529px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 554px; top: 653px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 554px; top: 613px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 620px; top: 613px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>