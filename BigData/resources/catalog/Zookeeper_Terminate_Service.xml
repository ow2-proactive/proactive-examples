<?xml version="1.0" encoding="UTF-8"?>
<job xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:proactive:jobdescriptor:3.9"
	xsi:schemaLocation="urn:proactive:jobdescriptor:3.9 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.9/schedulerjob.xsd"
	name="Zookeeper_Terminate_Service" projectName="1. Zookeeper" priority="normal"
	onTaskError="continueJobExecution" maxNumberOfExecution="2">
	<description>
        	<![CDATA[ This workflow calls ProActive-Cloud-Automation service to undeploy a running instance of Apache Zookeeper coordination server (https://zookeeper.apache.org/). ]]>
	</description>
	<genericInformation>
		<info name="bucketName" value="big-data" />
		<info name="workflow.icon"
			value="/automation-dashboard/styles/patterns/img/wf-icons/zookeeper.jpg" />
		<info name="group" value="public-objects" />
	</genericInformation>
	<taskFlow>
		<task name="Zookeeper_Terminate_Service">
			<description>
        <![CDATA[ This task calls ProActive-Cloud-Automation service to undeploy a running instance of Apache Zookeeper coordination server (https://zookeeper.apache.org/). ]]>
			</description>
			<variables>
				<variable name="instance_name" value="zookeeper-server-1"
					inherited="false" />
				<variable name="service_model" value="http://models.activeeon.com/pca/zookeeper"
					inherited="false" />
			</variables>
			<genericInformation>
				<info name="task.icon"
					value="/automation-dashboard/styles/patterns/img/wf-icons/zookeeper.jpg" />
			</genericInformation>
			<inputFiles>
				<files includes="cloud-automation-service-client-8.2.0-SNAPSHOT.jar"
					accessMode="transferFromGlobalSpace" />
			</inputFiles>
			<forkEnvironment>
				<additionalClasspath>
					<pathElement path="cloud-automation-service-client-8.2.0-SNAPSHOT.jar" />
				</additionalClasspath>
			</forkEnvironment>
			<scriptExecutable>
				<script>
					<code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.client.api.CloudAutomationApi;
import java.util.Optional;

zookeeper_model = variables.get("service_model")
zookeeper_instanceName = variables.get("instance_name")

schedulerapi.connect();

pcaUrl = variables.get("PA_SCHEDULER_REST_URL").replaceAll("/rest\\z", "/cloud-automation-service");
sessionId = schedulerapi.getSession();
api = new CloudAutomationApi(pcaUrl, sessionId);

//Stop Zookeeper
Optional<String> zookeeper_endpoint  = api.getServiceEndpoint(zookeeper_model,zookeeper_instanceName);
if( zookeeper_endpoint.isPresent()) {
            api.terminateServiceFromInstanceName(zookeeper_model, zookeeper_instanceName);
}
]]>
					</code>
				</script>
			</scriptExecutable>
		</task>
	</taskFlow>
</job>
