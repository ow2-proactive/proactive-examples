<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.11" xsi:schemaLocation="urn:proactive:jobdescriptor:3.11 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.11/schedulerjob.xsd"  name="Kafka_Start_Or_Bind_Service" projectName="2. Kafka" priority="normal" onTaskError="continueJobExecution"  maxNumberOfExecution="2" >
  <description>
    <![CDATA[ This workflow calls ProActive-Cloud-Automation service to deploy an instance of Apache Kafka publish/subscribe system (https://kafka.apache.org/). The deployed instance consists in a single publish/subscribe broker that is based on Apache Zookeeper coordination server. The name and the endpoint of the deployed instance are added to the list of variables. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="big-data"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/kafka.png"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Kafka_Start_or_Bind_Service" >
      <description>
        <![CDATA[ This task calls ProActive-Cloud-Automation service to deploy an instance of Apache Kafka publish/subscribe system (https://kafka.apache.org/). The deployed instance consists in a single publish/subscribe broker that is based on Apache Zookeeper coordination server. The name and the endpoint of the deployed instance are added to the list of variables. ]]>
      </description>
      <variables>
        <variable name="INSTANCE_NAME" value="kafka-server-1" inherited="false" />
        <variable name="SERVICE_ID" value="Kafka" inherited="false" />
        <variable name="ZOOKEEPER_SERVICE_ID" value="Zookeeper" inherited="false" />
        <variable name="ZOOKEEPER_INSTANCE_NAME" value="zookeeper-server-1" inherited="false" />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/kafka.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.pca.service.client.ApiClient
import org.ow2.proactive.pca.service.client.api.ServiceInstanceRestApi
import org.ow2.proactive.pca.service.client.model.ServiceInstanceData
import org.ow2.proactive.pca.service.client.model.ServiceDescription


println("BEGIN " + variables.get("PA_TASK_NAME"))

// Get schedulerapi access and acquire session id
schedulerapi.connect()
def sessionId = schedulerapi.getSession()

// Define PCA URL
def scheduler_rest_url = variables.get("PA_SCHEDULER_REST_URL")
def pcaUrl = scheduler_rest_url.replaceAll("/rest\\z", "/cloud-automation-service")

// Connect to APIs
def apiClient = new ApiClient()
apiClient.setBasePath(pcaUrl)
def serviceInstanceRestApi = new ServiceInstanceRestApi(apiClient)

def serviceId = variables.get("SERVICE_ID")
def instanceName = variables.get("INSTANCE_NAME")
def zookeeperServiceId = variables.get("ZOOKEEPER_SERVICE_ID")
def zookeeperInstanceName = variables.get("ZOOKEEPER_INSTANCE_NAME")
println("SERVICE_ID:    " + serviceId)
println("INSTANCE_NAME: " + instanceName)
println("ZOOKEEPER_SERVICE_ID:    " + zookeeperServiceId)
println("ZOOKEEPER_INSTANCE_NAME: " + zookeeperInstanceName)

/*********************************************************************************
*                     Using existing instance (if it exists)                     *
/********************************************************************************/
boolean instance_exists = false
List<ServiceInstanceData> service_instances = serviceInstanceRestApi.getServiceInstancesUsingGET()

for (ServiceInstanceData serviceInstanceData : service_instances) {
    if ( (serviceInstanceData.getServiceId() == serviceId) && (serviceInstanceData.getInstanceStatus()  == "RUNNING")){
        if (serviceInstanceData.getVariables().get("INSTANCE_NAME") == instanceName) {
            instance_exists = true
            def instanceId = serviceInstanceData.getInstanceId()
            endpoint = serviceInstanceData.getDeployments().iterator().next().getEndpoint().getUrl()
            println("INSTANCE_ID: " + instanceId)
            println("ENDPOINT:    " + endpoint)
            variables.put("INSTANCE_ID", instanceId)
            variables.put("ENDPOINT", endpoint)
            break
        }
      }
}
/*********************************************************************************
*                             Creating a new instance                            *
/********************************************************************************/
println("INSTANCE_EXISTS ? " + instance_exists)

if (!instance_exists){
    // Prepare service description
    ServiceDescription serviceDescription = new ServiceDescription()
    serviceDescription.setBucketName("cloud-automation")
    serviceDescription.setWorkflowName(serviceId)
    serviceDescription.putVariablesItem("INSTANCE_NAME", instanceName)
    serviceDescription.putVariablesItem("ZOOKEEPER_SERVICE_ID", zookeeperServiceId)
    serviceDescription.putVariablesItem("ZOOKEEPER_INSTANCE_NAME", zookeeperInstanceName)

    // Run service
    def serviceInstanceData = serviceInstanceRestApi.createRunningServiceInstanceUsingPOST(sessionId, serviceDescription, variables.get("PA_JOB_ID"))

    // Acquire service Instance ID
    def serviceInstanceId = serviceInstanceData.getInstanceId()

    // Create synchro channel
    def channel = "Service_Instance_" + serviceInstanceId
    println("CHANNEL: " + channel)
    synchronizationapi.createChannelIfAbsent(channel, false)
    synchronizationapi.waitUntil(channel, "RUNNING", "{k,x -> x == true}")

    // Acquire service endpoint
    serviceInstanceData = serviceInstanceRestApi.getServiceInstanceUsingGET(serviceInstanceId)
    def instanceId = serviceInstanceData.getInstanceId()
    endpoint = serviceInstanceData.getDeployments().iterator().next().getEndpoint().getUrl()

    println("INSTANCE_ID: " + instanceId)
    println("ENDPOINT: " + endpoint)

    variables.put("INSTANCE_ID", instanceId)
    variables.put("ENDPOINT", endpoint)
}

println("END " + variables.get("PA_TASK_NAME"))
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html><head><link rel="stylesheet" href="/studio/styles/studio-standalone.css"><style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2476px;
            height:2795px;
            }
        </style></head><body><div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-407.51419830322266px;left:-487.9118957519531px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable active-task" id="jsPlumb_1_1782" style="top: 412.515px; left: 492.926px;"><a class="task-name"><img src="/automation-dashboard/styles/patterns/img/wf-icons/kafka.png" width="20px">&nbsp;<span class="name">Kafka_Start_or_Bind_Service</span></a></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 577px; top: 443px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1"
      xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div></body></html>
 ]]>
    </visualization>
  </metadata>
</job>
