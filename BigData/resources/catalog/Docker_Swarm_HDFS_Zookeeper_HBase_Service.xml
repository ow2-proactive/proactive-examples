<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="Docker_Swarm_HDFS_Zookeeper_HBase_Service" projectName="02. Hadoop HBase (NoSQL DB)" tags="Swarm,Docker,Zookeeper,Big Data,HDFS,Service Automation,Analytics,HBase" priority="normal" onTaskError="cancelJob"  maxNumberOfExecution="1"  >
  <variables>
    <variable name="INSTANCE_NAME" value="docker-swarm-hdfs-zookeeper-hbase-$PA_JOB_ID" model="PA:NOT_EMPTY_STRING" description="Service instance name."  advanced="false" hidden="false"/>
    <variable name="node_source_name" value="" model="PA:MODEL_FROM_URL(${PA_SCHEDULER_REST_PUBLIC_URL}/rm/model/nodesources)" description="The targeted node source of the Swarm, HDFS and HBase deployment."  advanced="false" hidden="false"/>
    <variable name="nb_hbase_hdfs_workers" value="3" model="PA:NOT_EMPTY_STRING" description="Number of worker nodes"  advanced="false" hidden="false"/>
    <variable name="targeted_nb_hosts" value="1" model="PA:Integer" description="Minimum number of machines (hosts) that will be contained in the docker swarm infrastructure. This should correspond to the number of machines (VMs) contained in the target node source."  advanced="true" hidden="false"/>
    <variable name="HOST_CHECK" value="" model="PA:SPEL(T(Integer).parseInt(variables[&#x27;nb_hbase_hdfs_workers&#x27;]) &gt;= T(Integer).parseInt(variables[&#x27;targeted_nb_hosts&#x27;]))" description="Check NB_NODES &gt;= NB_HOSTS"  advanced="false" hidden="true"/>
  </variables>
  <description>
    <![CDATA[ Deploy a Docker Swarm-HDFS-Zookeeper-HBase platform of nb_hbase_hdfs_workers region servers and hdfs data nodes. node_source_name refers to the targeted node source of the Swarm-HBase-HDFS deployment. The TARGETED_NB_PA_HOSTS refers to Minimum number of machines (hosts) that will be contained in the docker swarm infrastructure. This should correspond to the number of machines (VMs) contained in the target node source. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="data-big-data"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="Error_if_empty_node_source_name_and_set_nb_swarm"
    
    onTaskError="cancelJob" 
    
    
    fork="true">
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// Error if empty node source
def node_source_name = variables.get("node_source_name")
if (node_source_name.isEmpty()){
  println("A node source name must be selected.")
  throw new IllegalStateException("A node source name must be selected.")
}

// Set nb swarm by adding 3 swarm (nb_hbase_hdfs_workers + 2 master + 1 thrift server)
def nb_swarm_workers = (variables.get("nb_hbase_hdfs_workers") as int) + 3
variables.put("nb_swarm_workers", nb_swarm_workers)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            106.64999389648438
        </positionTop>
        <positionLeft>
            498.3500061035156
        </positionLeft>
      </metadata>
    </task>
    <task name="Start_Docker_Swarm_Service" 
    
    onTaskError="cancelJob" 
    
    
    fork="true">
      <description>
        <![CDATA[ Start the Docker_Swarm service. ]]>
      </description>
      <variables>
        <variable name="SERVICE_ACTIVATION_WORKFLOW" value="service-automation/Docker_Swarm" inherited="false" model="PA:CATALOG_OBJECT(Workflow/psa,,,Docker_Swarm%)" description="The service activation workflow. Please keep the default value for this variable."  advanced="false" hidden="false"/>
        <variable name="INSTANCE_NAME" value="swarm-$PA_JOB_ID" inherited="false"  description="The name of the service to be deployed"  advanced="false" hidden="false"/>
        <variable name="NODE_SOURCE" value="$node_source_name" inherited="false"  description="TARGETED_PA_NODE_SOURCE_NAME refers to the targeted node source of the Docker Swarm deployment." group="" advanced="false" hidden="false"/>
        <variable name="TARGETED_NB_PA_NODES" value="$nb_swarm_workers" inherited="false"  description="Number of worker nodes"  advanced="false" hidden="false"/>
        <variable name="TARGETED_NB_PA_HOSTS" value="$targeted_nb_hosts" inherited="false" model="PA:Integer" description="Minimum number of machines (hosts) that will be contained in the docker swarm infrastructure. This should correspond to the number of machines (VMs) contained in the target node source."  advanced="true" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/swarm.png"/>
      </genericInformation>
      <depends>
        <task ref="Error_if_empty_node_source_name_and_set_nb_swarm"/>
      </depends>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw" language="groovy">
            <arguments>
              <argument value="false"/>
              <argument value="false"/>
              <argument value="INSTANCE_NAME"/>
              <argument value="NODE_SOURCE"/>
              <argument value="TARGETED_NB_PA_NODES"/>
              <argument value="TARGETED_NB_PA_HOSTS"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
// Propagate the swarm service instance id for hdfs
def instance_name = variables.get("INSTANCE_NAME")
def instance_id = variables.get("INSTANCE_ID_" + instance_name)
variables.put("propagated_swarm_service_instance_id", instance_id)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            235.0500030517578
        </positionTop>
        <positionLeft>
            498.3500061035156
        </positionLeft>
      </metadata>
    </task>
    <task name="Start_HDFS_Service" 
    
    onTaskError="cancelJob" 
    
    
    fork="true">
      <description>
        <![CDATA[ Start the HDFS service. ]]>
      </description>
      <variables>
        <variable name="SERVICE_ACTIVATION_WORKFLOW" value="service-automation/HDFS" inherited="false" model="PA:CATALOG_OBJECT(Workflow/psa,,,HDFS%)" description="The service activation workflow. Please keep the default value for this variable."  advanced="false" hidden="false"/>
        <variable name="INSTANCE_NAME" value="hdfs-$PA_JOB_ID" inherited="false"  description="The name of the service to be deployed"   />
        <variable name="swarm_service_instance_id" value="$propagated_swarm_service_instance_id" inherited="false"  description="Instance id of the targeted Docker Swarm service"  advanced="false" hidden="false"/>
        <variable name="nb_hdfs_datanodes" value="$nb_hbase_hdfs_workers" inherited="false"  description="Datanodes number (HDFS workers)"  advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hdfs.png"/>
      </genericInformation>
      <depends>
        <task ref="Start_Docker_Swarm_Service"/>
      </depends>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw" language="groovy">
            <arguments>
              <argument value="true"/>
              <argument value="false"/>
              <argument value="INSTANCE_NAME"/>
              <argument value="swarm_service_instance_id"/>
              <argument value="nb_hdfs_datanodes"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
// Propagate the hdfs service instance id for hbase
def instance_name = variables.get("INSTANCE_NAME")
def instance_id = variables.get("INSTANCE_ID_" + instance_name)
variables.put("propagated_hdfs_service_instance_id", instance_id)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            363.4499969482422
        </positionTop>
        <positionLeft>
            498.3500061035156
        </positionLeft>
      </metadata>
    </task>
    <task name="Start_Zookeeper" 
    
    
    
    
    fork="true">
      <variables>
        <variable name="SERVICE_ACTIVATION_WORKFLOW" value="service-automation/Zookeeper" inherited="false" model="PA:CATALOG_OBJECT(Workflow/psa,,,Zookeeper%)" description="The service activation workflow. Please keep the default value for this variable."  advanced="false" hidden="false"/>
        <variable name="INSTANCE_NAME" value="zookeeper-${PA_JOB_ID}" inherited="false"  description="The name of the service to be deployed"  advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/zookeeper.jpg"/>
      </genericInformation>
      <depends>
        <task ref="Start_HDFS_Service"/>
      </depends>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw" language="groovy">
            <arguments>
              <argument value="false"/>
              <argument value="false"/>
              <argument value="INSTANCE_NAME"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
// Propagate the Zookeeper service instance id for hbase
def instance_name = variables.get("INSTANCE_NAME")
def instance_id = variables.get("INSTANCE_ID_" + instance_name)
variables.put("propagated_Zookeeper_service_instance_id", instance_id)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            491.8500213623047
        </positionTop>
        <positionLeft>
            498.3500061035156
        </positionLeft>
      </metadata>
    </task>
    <task name="Start_HBase_Service" 
    
    onTaskError="cancelJob" 
    
    
    fork="true">
      <description>
        <![CDATA[ Start the HBase service. ]]>
      </description>
      <variables>
        <variable name="SERVICE_ACTIVATION_WORKFLOW" value="service-automation/HBase" inherited="false" model="PA:CATALOG_OBJECT(Workflow/psa,,,HBase%)" description="The service activation workflow. Please keep the default value for this variable."  advanced="false" hidden="false"/>
        <variable name="nb_hbase_region_servers" value="$nb_hbase_hdfs_workers" inherited="false"  description="RegionServers number (HBase workers)"  advanced="false" hidden="false"/>
        <variable name="INSTANCE_NAME" value="hbase-$PA_JOB_ID" inherited="false"  description="The name of the service to be deployed"  advanced="false" hidden="false"/>
        <variable name="swarm_service_instance_id" value="$propagated_swarm_service_instance_id" inherited="false"  description="Instance id of the targeted Docker Swarm service"  advanced="false" hidden="false"/>
        <variable name="hdfs_service_instance_id" value="$propagated_hdfs_service_instance_id" inherited="false"  description="The instance ID of the targeted HDFS service"  advanced="false" hidden="false"/>
        <variable name="ZOOKEEPER_INSTANCE_ID" value="$propagated_Zookeeper_service_instance_id" inherited="false"  description="The instance ID of the targeted Zookeeper service"  advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png"/>
      </genericInformation>
      <depends>
        <task ref="Start_Zookeeper"/>
      </depends>
      <scriptExecutable>
        <script>
          <file url="${PA_CATALOG_REST_URL}/buckets/service-automation/resources/Service_Start/raw" language="groovy">
            <arguments>
              <argument value="true"/>
              <argument value="false"/>
              <argument value="INSTANCE_NAME"/>
              <argument value="swarm_service_instance_id"/>
              <argument value="hdfs_service_instance_id"/>
              <argument value="ZOOKEEPER_INSTANCE_ID"/>
              <argument value="nb_hbase_region_servers"/>
            </arguments>
          </file>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
// Retrieve variables
def hbase_service_instance_name = variables.get("INSTANCE_NAME")
def hbase_service_instance_id = variables.get("INSTANCE_ID_" + hbase_service_instance_name)

// To results
resultMap.put("hbase_service_instance_id", hbase_service_instance_id)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            620.2499847412109
        </positionTop>
        <positionLeft>
            498.3500061035156
        </positionLeft>
      </metadata>
    </task>
    <task name="wait_user_action" 
    
    
    
    
    fork="true">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png"/>
        <info name="task.documentation" value="user/ProActiveUserGuide.html#_loop"/>
      </genericInformation>
      <depends>
        <task ref="Start_HBase_Service"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.scheduler.common.job.JobVariable

// Skip waiting for signal used when executing workflow from workflow tests
if (variables.get("SKIP_SIGNAL") && variables.get("SKIP_SIGNAL").toBoolean()) {
    println("Skipping waiting for signal ...");
    return;
}

def signals = ['Undeploy_Platform','Submit_HBase_Exec_Java_File','Submit_HBase_Load_Csv_From_HDFS','Submit_Phoenix_HBase_Sql_Queries','Submit_Run_HBase_Shell_Commands']

// Manage the signal 'Undeploy_Platform'
signalapi.readyForSignal("Undeploy_Platform")

// Manage the signal 'Submit_HBase_Exec_Java_File'
List <JobVariable> submitHBaseExecJavaFileJobVariables = new java.util.ArrayList<JobVariable>()
submitHBaseExecJavaFileJobVariables.add(new JobVariable("HBase_java_file", "HelloHBase.java", "PA:GLOBAL_FILE", "Upload a java file to execute HBase commands.", "", false, false))
submitHBaseExecJavaFileJobVariables.add(new JobVariable("main", "HelloHBase", "PA:NOT_EMPTY_STRING", "Write the main class in the java file here to be executed after compiling the file, for this example the java file is HelloHBase.java and the main class is HelloHBase.", "", false, false))
signalapi.readyForSignal("Submit_HBase_Exec_Java_File", submitHBaseExecJavaFileJobVariables)

// Manage the signal 'Submit_HBase_Load_Csv_From_HDFS'
signalapi.readyForSignal("Submit_HBase_Load_Csv_From_HDFS")

// Manage the signal 'Submit_Phoenix_HBase_Sql_Queries'
signalapi.readyForSignal("Submit_Phoenix_HBase_Sql_Queries")

// Manage the signal 'Submit_Run_HBase_Shell_Commands'
signalapi.readyForSignal("Submit_Run_HBase_Shell_Commands")

// Receive the signal
receivedSignal = signalapi.waitForAny(signals.toSet())
println(receivedSignal)

signals.each {  signalapi.removeSignal("ready_"+it) }

if (receivedSignal.getName() == "Undeploy_Platform") {
    variables.put("SIGNAL_ACTION","UNDEPLOY_PLATFORM")
    println("Undeploying platform ...")

} else if (receivedSignal.getName() == "Submit_HBase_Exec_Java_File"){
    variables.put("SIGNAL_ACTION","SUBMIT_HBASE_EXEC_JAVA_FILE_SIGNAL")
    variables.put("HBase_java_file",receivedSignal.getUpdatedVariables().get("HBase_java_file"))
    variables.put("main",receivedSignal.getUpdatedVariables().get("main"))

} else if (receivedSignal.getName() == "Submit_HBase_Load_Csv_From_HDFS"){
    variables.put("SIGNAL_ACTION","SUBMIT_HBASE_LOAD_CSV_FROM_HDFS_SIGNAL")

} else if (receivedSignal.getName() == "Submit_Phoenix_HBase_Sql_Queries"){
    variables.put("SIGNAL_ACTION","SUBMIT_PHOENIX_HBASE_SQL_QUERIES_SIGNAL")

} else if (receivedSignal.getName() == "Submit_Run_HBase_Shell_Commands"){
    variables.put("SIGNAL_ACTION","SUBMIT_RUN_HBASE_SHELL_COMMANDS_SIGNAL")

}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="start"></controlFlow>
      <metadata>
        <positionTop>
            746.6500091552734
        </positionTop>
        <positionLeft>
            498.3500061035156
        </positionLeft>
      </metadata>
    </task>
    <task name="handle_user_actions" 
    
    
    
    
    fork="true">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png"/>
      </genericInformation>
      <depends>
        <task ref="wait_user_action"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.JsonSlurper

if(variables.get("SIGNAL_ACTION")=="UNDEPLOY_PLATFORM"){

    schedulerapi.connect()

    def hbase_instance_name = "hbase-" + variables.get("PA_JOB_ID")
    def zookeeper_instance_name = "zookeeper-" + variables.get("PA_JOB_ID")
    def hdfs_instance_name = "hdfs-" + variables.get("PA_JOB_ID")
    def swarm_instance_name = "swarm-" + variables.get("PA_JOB_ID")

    def hbase_service_instance_id = variables.get("INSTANCE_ID_" + hbase_instance_name)
    def zookeeper_service_instance_id = variables.get("INSTANCE_ID_" + zookeeper_instance_name)
    def hdfs_service_instance_id = variables.get("INSTANCE_ID_" + hdfs_instance_name)
    def swarm_service_instance_id = variables.get("INSTANCE_ID_" + swarm_instance_name)

    def workflow_variables = new HashMap<>()
    workflow_variables.put("HBASE_INSTANCE_NAME", hbase_instance_name)
    workflow_variables.put("ZOOKEEPER_INSTANCE_NAME", zookeeper_instance_name)
    workflow_variables.put("HDFS_INSTANCE_NAME", hdfs_instance_name)
    workflow_variables.put("SWARM_INSTANCE_NAME", swarm_instance_name)

    workflow_variables.put("INSTANCE_ID_" + hbase_instance_name, hbase_service_instance_id)
    workflow_variables.put("INSTANCE_ID_" + zookeeper_instance_name, zookeeper_service_instance_id)
    workflow_variables.put("INSTANCE_ID_" + hdfs_instance_name, hdfs_service_instance_id)
    workflow_variables.put("INSTANCE_ID_" + swarm_instance_name, swarm_service_instance_id)

    def called_workflow = "data-big-data/Docker_Swarm_HDFS_Zookeeper_HBase_Terminate_Service"

    // submitting the job
    def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]
    def jobid = schedulerapi.submitFromCatalog(variables.get("PA_CATALOG_REST_URL"), called_workflow, workflow_variables, generic_infos_map)
    println "Job submitted with job id " + jobid

    // waiting for its termination
    def timeout_in_sec = 300
    schedulerapi.waitForJob(jobid.toString(), timeout_in_sec * 1000)
    variables.put("isFinished", true)

} else if(variables.get("SIGNAL_ACTION")=="SUBMIT_HBASE_EXEC_JAVA_FILE_SIGNAL"){

    // connect to the scheduler
    schedulerapi.connect()

    def workflow_variables = new HashMap<>()
    workflow_variables.put("HBase_java_file", variables.get("HBase_java_file"))
   	workflow_variables.put("main", variables.get("main"))
    def hbase_instance_name = "hbase-" + variables.get("PA_JOB_ID")
    def hbase_service_instance_id = variables.get("INSTANCE_ID_" + hbase_instance_name)
    workflow_variables.put("hbase_service_instance_id", hbase_service_instance_id)

    called_workflow = "data-big-data/HBase_Exec_Java_File"


    // submitting the job
    def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]
    jobid = schedulerapi.submitFromCatalog(variables.get("PA_CATALOG_REST_URL"), called_workflow, workflow_variables, generic_infos_map)

    println "Job submitted with job id " + jobid
    result = jobid

} else if(variables.get("SIGNAL_ACTION")=="SUBMIT_HBASE_LOAD_CSV_FROM_HDFS_SIGNAL"){

    // connect to the scheduler
    schedulerapi.connect()

    def workflow_variables = new HashMap<>()
    def hbase_instance_name = "hbase-" + variables.get("PA_JOB_ID")
    def hbase_service_instance_id = variables.get("INSTANCE_ID_" + hbase_instance_name)
    workflow_variables.put("hbase_service_instance_id", hbase_service_instance_id)

    called_workflow = "data-big-data/HBase_Load_Csv_From_HDFS"


    // submitting the job
    def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]
    jobid = schedulerapi.submitFromCatalog(variables.get("PA_CATALOG_REST_URL"), called_workflow, workflow_variables, generic_infos_map)

    println "Job submitted with job id " + jobid
    result = jobid

} else if(variables.get("SIGNAL_ACTION")=="SUBMIT_PHOENIX_HBASE_SQL_QUERIES_SIGNAL"){

    // connect to the scheduler
    schedulerapi.connect()

    def workflow_variables = new HashMap<>()
    def hbase_instance_name = "hbase-" + variables.get("PA_JOB_ID")
    def hbase_service_instance_id = variables.get("INSTANCE_ID_" + hbase_instance_name)
    workflow_variables.put("hbase_service_instance_id", hbase_service_instance_id)

    called_workflow = "data-big-data/Phoenix_HBase_Sql_Queries"


    // submitting the job
    def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]
    jobid = schedulerapi.submitFromCatalog(variables.get("PA_CATALOG_REST_URL"), called_workflow, workflow_variables, generic_infos_map)

    println "Job submitted with job id " + jobid
    result = jobid

} else if(variables.get("SIGNAL_ACTION")=="SUBMIT_RUN_HBASE_SHELL_COMMANDS_SIGNAL"){

    // connect to the scheduler
    schedulerapi.connect()

    def workflow_variables = new HashMap<>()
    def hbase_instance_name = "hbase-" + variables.get("PA_JOB_ID")
    def hbase_service_instance_id = variables.get("INSTANCE_ID_" + hbase_instance_name)
    workflow_variables.put("hbase_service_instance_id", hbase_service_instance_id)

    called_workflow = "data-big-data/Run_HBase_Shell_Commands"


    // submitting the job
    def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]
    jobid = schedulerapi.submitFromCatalog(variables.get("PA_CATALOG_REST_URL"), called_workflow, workflow_variables, generic_infos_map)

    println "Job submitted with job id " + jobid
    result = jobid

}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow  block="end">
        <loop target="wait_user_action">
          <script>
            <code language="groovy">
              <![CDATA[
if(!variables.get("isFinished")){
	loop = '* * * * *';
}else{
   loop = false;
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            871.0500335693359
        </positionTop>
        <positionLeft>
            498.3500061035156
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2257px;
            height:2539px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-101.64999389648438px;left:-493.3500061035156px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_307" style="top: 106.65px; left: 498.35px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">Error_if_empty_node_source_name_and_set_nb_swarm</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_310" style="top: 235.05px; left: 498.35px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Start the Docker_Swarm service."><img src="/automation-dashboard/styles/patterns/img/wf-icons/swarm.png" width="20px">&nbsp;<span class="name">Start_Docker_Swarm_Service</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon" class="glyphicon glyphicon-arrow-right"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_313" style="top: 363.45px; left: 498.35px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Start the HDFS service."><img src="/automation-dashboard/styles/patterns/img/wf-icons/hdfs.png" width="20px">&nbsp;<span class="name">Start_HDFS_Service</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon" class="glyphicon glyphicon-arrow-right"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_316" style="top: 491.851px; left: 498.35px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/zookeeper.jpg" width="20px">&nbsp;<span class="name">Start_Zookeeper</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon" class="glyphicon glyphicon-arrow-right"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_319" style="top: 620.251px; left: 498.35px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Start the HBase service."><img src="/automation-dashboard/styles/patterns/img/wf-icons/hbase.png" width="20px">&nbsp;<span class="name">Start_HBase_Service</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon" class="glyphicon glyphicon-arrow-right"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon" class="glyphicon glyphicon-list-alt"></i></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_322" style="top: 746.651px; left: 498.35px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png" width="20px">&nbsp;<span class="name">wait_user_action</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_325" style="top: 871.051px; left: 498.35px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png" width="20px">&nbsp;<span class="name">handle_user_actions</span></a>&nbsp;&nbsp;<a id="called-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: 17px; right: 3px;"><i title="Workflows being Called by this Task" id="called-icon"></i></a><a title="Scripts being Called by this Task" id="reference-icon-a" href="javascript:void(0)" class="pointer" style=" position: inherit; top: -7px; right: 3px;"><i id="reference-icon"></i></a></div><svg style="position:absolute;left:574.5px;top:146.5px" width="33.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 22.5 50 12.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.7647200000000005,66.303232 L8.955147275230877,48.02525493465072 L0.9308726161701921,52.565190638595936 L-4.782894086173185,45.32966231848053 L-1.7647200000000005,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.7647200000000005,66.303232 L8.955147275230877,48.02525493465072 L0.9308726161701921,52.565190638595936 L-4.782894086173185,45.32966231848053 L-1.7647200000000005,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:554px;top:274.5px" width="41.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 30.5 50 20.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.080432000000001,66.303232 L11.3951921061979,49.175511685817675 L2.9611229197005473,52.899283558177174 L-2.0087563356249163,45.13395676611713 L-1.080432000000001,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.080432000000001,66.303232 L11.3951921061979,49.175511685817675 L2.9611229197005473,52.899283558177174 L-2.0087563356249163,45.13395676611713 L-1.080432000000001,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:544.5px;top:402.5px" width="30.5" height="90" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 89 C -10 39 19.5 50 9.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.0213280000000005,67.21769599999999 L7.953789877908019,48.52285651628578 L0.1188473594883126,53.38224698557913 L-5.881659136512839,46.38268115679747 L-2.0213280000000005,67.21769599999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.0213280000000005,67.21769599999999 L7.953789877908019,48.52285651628578 L0.1188473594883126,53.38224698557913 L-5.881659136512839,46.38268115679747 L-2.0213280000000005,67.21769599999999" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:544.5px;top:531.5px" width="32" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 11 88 C 21 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M12.893024,66.303232 L16.31083689897854,45.39106915184926 L10.460052179499373,52.5162581434697 L2.523863042448242,47.824040972349884 L12.893024,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M12.893024,66.303232 L16.31083689897854,45.39106915184926 L10.460052179499373,52.5162581434697 L2.523863042448242,47.824040972349884 L12.893024,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:545px;top:659.5px" width="31.5" height="88" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 87 C -10 37 20.5 50 10.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.9631718750000002,65.86284375000001 L8.233145278112556,47.28772284829004 L0.3410752397081034,52.053772628655196 L-5.57592584323226,44.98347573358193 L-1.9631718750000002,65.86284375000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.9631718750000002,65.86284375000001 L8.233145278112556,47.28772284829004 L0.3410752397081034,52.053772628655196 L-5.57592584323226,44.98347573358193 L-1.9631718750000002,65.86284375000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:545px;top:786.5px" width="29.5" height="85" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 8.5 84 C 18.5 34 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M10.640350999999999,63.573684000000014 L14.776333191943666,42.79163281856162 L8.68363384624335,49.71109917680796 L0.9137483687516177,44.74834997231827 L10.640350999999999,63.573684000000014" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M10.640350999999999,63.573684000000014 L14.776333191943666,42.79163281856162 L8.68363384624335,49.71109917680796 L0.9137483687516177,44.74834997231827 L10.640350999999999,63.573684000000014" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:612.5px;top:736.5px" width="51" height="185" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 0 C 50 -50 7 134 17 84 " transform="translate(0.5,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M20.804227749999995,-4.451209500000002 L33.301854444898105,12.66046274425977 L24.863006357202696,8.947533583502782 L19.903111361395318,16.719241351462472 L20.804227749999995,-4.451209500000002" class="" stroke="#316b31" fill="#316b31" transform="translate(0.5,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M20.804227749999995,-4.451209500000002 L33.301854444898105,12.66046274425977 L24.863006357202696,8.947533583502782 L19.903111361395318,16.719241351462472 L20.804227749999995,-4.451209500000002" class="" stroke="#316b31" fill="#316b31" transform="translate(0.5,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_351" style="position: absolute; transform: translate(-50%, -50%); left: 636px; top: 828.5px;">loop</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 587.5px; top: 137px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 575px; top: 265px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 575px; top: 225px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 554.5px; top: 393px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 554.5px; top: 353px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 545px; top: 522px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 545px; top: 482px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 556px; top: 650px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 556px; top: 610px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 545.5px; top: 777px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 545.5px; top: 737px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 603px; top: 777px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 554px; top: 901px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 554px; top: 861px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 620px; top: 861px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>