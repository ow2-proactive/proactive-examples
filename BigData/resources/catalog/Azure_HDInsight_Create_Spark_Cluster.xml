<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.14" xsi:schemaLocation="urn:proactive:jobdescriptor:3.14 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.14/schedulerjob.xsd"  name="Azure_HDInsight_Create_Spark_Cluster" projectName="08. Azure HDInsight Spark Workflows" tags="Azure,Big Data,Spark,HDInsight" priority="normal" onTaskError="suspendTask"  maxNumberOfExecution="1"  >
  <variables>
    <variable name="USE_JSON_INPUT_FILE" value="false" model="PA:Boolean" description="A boolean variable indicating whether the input parameters of the workflow are provided in a JSON file placed in the global data space. If not, the workflow will consider the input variables form." group="Input File Parameters" advanced="false" hidden="false"/>
    <variable name="JSON_INPUT_FILE" value=""  description="A JSON file placed in the global data space, which contains all input parameters of the workflow." group="Input File Parameters" advanced="false" hidden="false"/>
    <variable name="JSON_INPUT_FILE_HANDLER" value="" model="PA:SPEL(variables[&#x27;USE_JSON_INPUT_FILE&#x27;] == &#x27;true&#x27; ?  showVar(&#x27;JSON_INPUT_FILE&#x27;) &amp;&amp; hideGroup(&#x27;Subscription Parameters&#x27;) &amp;&amp; hideGroup(&#x27;Deployment Parameters&#x27;) &amp;&amp; hideGroup(&#x27;Spark Cluster Parameters&#x27;) &amp;&amp; hideGroup(&#x27;Script Action&#x27;) &amp;&amp; hideGroup(&#x27;ProActive Node Parameters&#x27;) &amp;&amp; hideGroup(&#x27;Number of Workers&#x27;) &amp;&amp;  (models[&#x27;JSON_INPUT_FILE&#x27;] = &#x27;PA:GLOBAL_FILE&#x27;) instanceof T(String) : hideVar(&#x27;JSON_INPUT_FILE&#x27;))" description="A hidden variable that allows to have a dynamic form for input parameters, i.e., variables will appear/disappear dynamically depending on the value of variable &#39;USE_JSON_INPUT_FILE&#39;."  advanced="false" hidden="true"/>
    <variable name="SUBSCRIPTION_ID" value="change-it-and-put-your-azure-subscription-id" model="PA:NOT_EMPTY_STRING" description="The subscription id of your Microsoft Azure account." group="Subscription Parameters" advanced="false" hidden="false"/>
    <variable name="TENANT_ID" value="change-it-and-put-your-azure-tenant-id" model="PA:NOT_EMPTY_STRING" description="The tenant id of your Microsoft Azure account." group="Subscription Parameters" advanced="true" hidden="false"/>
    <variable name="APP_ID" value="change-it-and-put-your-azure-client-application-id" model="PA:NOT_EMPTY_STRING" description="ID of a HDInsights client application." group="Subscription Parameters" advanced="true" hidden="false"/>
    <variable name="PASSWORD" value="ENC(L/ks1WBUEKZZ2K0wm+3i1A==)" model="PA:HIDDEN" description="Secret key needed to access a HDInsight client application." group="Subscription Parameters" advanced="true" hidden="false"/>
    <variable name="AUTHENTICATION_ENDPOINT" value="https://login.microsoftonline.com" model="PA:URL" description="Hidden variable that contains the authentication endpoint of Azure REST API."  advanced="false" hidden="true"/>
    <variable name="MANAGEMENT_ENDPOINT" value="https://management.azure.com" model="PA:URL" description="Hidden variable that contains the REST endpoint for managing Azure HDInsight clusters."  advanced="false" hidden="true"/>
    <variable name="RESOURCE_GROUP_NAME" value="RG-of-${CLUSTER_NAME}" model="PA:NOT_EMPTY_STRING" description="Hidden variable that contains the name of the Resource Group where the Spark cluster will be created. If the value of this variable is changed, it must be also changed in the workflows &#39;Azure_HDInsight_Scale_Spark_Cluster&#39; and &#39;Azure_HDInsight_Delete_Spark_Cluster&#39;" group="Deployment Parameters" advanced="false" hidden="true"/>
    <variable name="RESOURCE_GROUP_LOCATION" value="westeurope" model="PA:NOT_EMPTY_STRING" description="The region of Azure Cloud where the Resource Group will be created" group="Deployment Parameters" advanced="true" hidden="false"/>
    <variable name="DEPLOYMENT_NAME" value="Deployment-of-${CLUSTER_NAME}" model="PA:NOT_EMPTY_STRING" description="Hidden variable that contains the name of the Deployment for the Spark cluster. If the value of this variable is changed, it must be also changed in the workflows &#39;Azure_HDInsight_Scale_Spark_Cluster&#39; and &#39;Azure_HDInsight_Delete_Spark_Cluster&#39;" group="Deployment Parameters" advanced="false" hidden="true"/>
    <variable name="ARM_TEMPLATE" value="Azure_HDInsight_Spark_ARM_Template.json" model="PA:GLOBAL_FILE" description="Microsoft Azure ARM template (a JSON file), which is used to create the Spark cluster. This file must be placed in the global data space." group="Spark Cluster Parameters" advanced="true" hidden="false"/>
    <variable name="CLUSTER_NAME" value="activeeon-spark-cluster-${PA_JOB_ID}" model="PA:NOT_EMPTY_STRING" description="Name of the Spark cluster to be created." group="Spark Cluster Parameters" advanced="false" hidden="false"/>
    <variable name="CLUSTER_USER" value="act-usr" model="PA:NOT_EMPTY_STRING" description="User login needed to access the Web dashboard of the Spark cluster." group="Spark Cluster Parameters" advanced="true" hidden="false"/>
    <variable name="CLUSTER_PASSWORD" value="ENC(7ZqKwLLZE5B3S4BZoPq1wg==)" model="PA:HIDDEN" description="User password needed to access the Web dashboard of the Spark cluster." group="Spark Cluster Parameters" advanced="true" hidden="false"/>
    <variable name="CLUSTER_SSH_USER" value="act-usr" model="PA:NOT_EMPTY_STRING" description="User login needed to access the head node of the Spark cluster, remotely via SSH." group="Spark Cluster Parameters" advanced="true" hidden="false"/>
    <variable name="CLUSTER_SSH_PASSWORD" value="ENC(vIn1k0HbSAYteZas59YECw==)" model="PA:HIDDEN" description="User password needed to access the head node of the Spark cluster, remotely via SSH." group="Spark Cluster Parameters" advanced="true" hidden="false"/>
    <variable name="HEAD_NODE_VM_SIZE" value="Standard_E4_v3" model="PA:LIST(Standard_A4_v2,Standard_A8_v2,Standard_E2_v3, Standard_E4_v3,Standard_E8_v3,Standard_E16_v3,Standard_E20_v3,Standard_E32_v3,Standard_E48_v3)" description="Size of the VM of Spark head node. If the list of VM sizes is changed, it must be also changed in the ARM template (provided in the variable &#39;ARM_TEMPLATE&#39;)." group="Spark Cluster Parameters" advanced="true" hidden="false"/>
    <variable name="WORKER_NODE_VM_SIZE" value="Standard_E4_v3" model="PA:LIST(Standard_A4_v2,Standard_A8_v2,Standard_E2_v3, Standard_E4_v3,Standard_E8_v3,Standard_E16_v3,Standard_E20_v3,Standard_E32_v3,Standard_E48_v3)" description="Size of the VM of Spark worker node. If the list of VM sizes is changed, it must be also changed in the ARM template (provided in the variable &#39;ARM_TEMPLATE&#39;)." group="Spark Cluster Parameters" advanced="true" hidden="false"/>
    <variable name="AUTOSCALING" value="true" model="PA:Boolean" description="Boolean value indicating whether the autoscaling feature (of HDInsight Spark) is activated or not." group="Number of Workers" advanced="false" hidden="false"/>
    <variable name="NUMBER_OF_WORKERS" value="2" model="PA:INTEGER" description="Number of Spark workers (to be used when the autoscaling feature is set to false)." group="Number of Workers" advanced="false" hidden="false"/>
    <variable name="MIN_WORKERS" value="1" model="PA:INTEGER" description="Minimal number of Spark workers (to be used when the autoscaling feature is set to true)." group="Number of Workers" advanced="false" hidden="false"/>
    <variable name="MAX_WORKERS" value="3" model="PA:INTEGER" description="Maximal number of Spark workers (to be used when the autoscaling feature is set to true)." group="Number of Workers" advanced="false" hidden="false"/>
    <variable name="AUTOSCALING_MODE" value="load" model="PA:LIST(load)" description="Autoscaling mode (only the &#39;load&#39; mode is supported by this workflow)." group="Number of Workers" advanced="true" hidden="false"/>
    <variable name="AUTOSCALING_NODES_HANDLER_1" value="" model="PA:SPEL(variables[&#x27;USE_JSON_INPUT_FILE&#x27;] == &#x27;false&#x27; &amp;&amp; variables[&#x27;AUTOSCALING&#x27;] == &#x27;false&#x27; ?  showVar(&#x27;NUMBER_OF_WORKERS&#x27;) : hideVar(&#x27;NUMBER_OF_WORKERS&#x27;))" description="SPEL expression handling the variables to show with respect to the autoscaling setting." group="Number of Workers" advanced="false" hidden="true"/>
    <variable name="AUTOSCALING_NODES_HANDLER_2" value="" model="PA:SPEL(variables[&#x27;USE_JSON_INPUT_FILE&#x27;] == &#x27;false&#x27; &amp;&amp; variables[&#x27;AUTOSCALING&#x27;] == &#x27;true&#x27; ?  showVar(&#x27;MIN_WORKERS&#x27;) &amp;&amp; showVar(&#x27;MAX_WORKERS&#x27;) &amp;&amp; showVar(&#x27;AUTOSCALING_MODE&#x27;) : hideVar(&#x27;MIN_WORKERS&#x27;) &amp;&amp; hideVar(&#x27;MAX_WORKERS&#x27;) &amp;&amp; hideVar(&#x27;AUTOSCALING_MODE&#x27;))" description="SPEL expression handling the variables to show with respect to the autoscaling setting."  advanced="false" hidden="true"/>
    <variable name="SCRIPT_ACTION" value="false" model="PA:Boolean" description="Boolean value indicating whether one or more script actions have to be executed when the Spark cluster is deployed." group="Script Action" advanced="true" hidden="false"/>
    <variable name="HEAD_NODE_SCRIPTS_JSON" value="[ {  &quot;name&quot;: &quot;Script A&quot;, &quot;uri&quot;: &quot;http://script.host:8080/scriptA&quot;,   &quot;parameters&quot;: &quot;p1 p2&quot;},  { &quot;name&quot;: &quot;script B&quot;, &quot;uri&quot;: &quot;http://script.host:8080/scriptB&quot;,  &quot;parameters&quot;: &quot;p1 p2 p3&quot; }]" model="PA:JSON" description="JSON payload describing the script actions to be executed in the head nodes of Spark (used when the &#39;SCRIPT_ACTION&#39; variable is set to true)." group="Script Action" advanced="true" hidden="false"/>
    <variable name="WORKER_NODE_SCRIPTS_JSON" value="[ ]" model="PA:JSON" description="JSON payload describing the script actions to be executed in the worker nodes of Spark (used when the &#39;SCRIPT_ACTION&#39; variable is set to true)." group="Script Action" advanced="true" hidden="false"/>
    <variable name="SCRIPT_ACTION_HANDLER" value="" model="PA:SPEL(variables[&#x27;USE_JSON_INPUT_FILE&#x27;] == &#x27;false&#x27; &amp;&amp; variables[&#x27;SCRIPT_ACTION&#x27;] == &#x27;true&#x27; ?  showVar(&#x27;HEAD_NODE_SCRIPTS_JSON&#x27;) &amp;&amp; showVar(&#x27;WORKER_NODE_SCRIPTS_JSON&#x27;) : hideVar(&#x27;HEAD_NODE_SCRIPTS_JSON&#x27;) &amp;&amp; hideVar(&#x27;WORKER_NODE_SCRIPTS_JSON&#x27;))" description="SPEL expression handling the variables to show with respect to the SCRIPT_ACTION setting."  advanced="false" hidden="true"/>
    <variable name="PROACTIVE_NODE_CREDENTIALS" value="change-it-and-add-a-proactive-user-credentials" model="PA:CREDENTIAL" description="Credentials (login/password) of a ProActive user that will be used to deploy ProActive nodes in Spark head and worker machines. Must be added to the third-party credentials vault (the user login is the key and the password is the credential)." group="ProActive Node Parameters" advanced="false" hidden="false"/>
    <variable name="PROACTIVE_NODE_SOURCE_NAME" value="${CLUSTER_NAME}" model="PA:NOT_EMPTY_STRING" description="Name of the Node Source for ProActive nodes that will be deployed in the Spark cluster." group="ProActive Node Parameters" advanced="true" hidden="false"/>
    <variable name="HEAD_NODE_SCRIPT_NAME" value="Install_ProActive_Node_In_HN" model="PA:NOT_EMPTY_STRING" description="Hidden variable indicating the name of the script action that will deploy ProActive nodes in Spark head machines." group="ProActive Node Parameters" advanced="false" hidden="true"/>
    <variable name="HEAD_NODE_SCRIPT_URI" value="https://gist.github.com/activeeon-bot/5cf5f44d65df2cc1fe2c4ce3c552705b/raw/Install_ProActive_Node.sh" model="PA:URI" description="Hidden variable indicating the URI of the script action that will deploy ProActive nodes in Spark head machines." group="ProActive Node Parameters" advanced="false" hidden="true"/>
    <variable name="WORKER_NODE_SCRIPT_NAME" value="Install_ProActive_Node_In_WN" model="PA:NOT_EMPTY_STRING" description="Hidden variable indicating the name of the script action that will deploy ProActive nodes in Spark worker machines." group="ProActive Node Parameters" advanced="false" hidden="true"/>
    <variable name="WORKER_NODE_SCRIPT_URI" value="https://gist.github.com/activeeon-bot/5cf5f44d65df2cc1fe2c4ce3c552705b/raw/Install_ProActive_Node.sh" model="PA:URI" description="Hidden variable indicating the URI of the script action that will deploy ProActive nodes in Spark worker machines." group="ProActive Node Parameters" advanced="false" hidden="true"/>
    <variable name="NUMBER_OF_PROACTIVE_NODES" value="1" model="PA:INTEGER" description="Hidden variable indicating the number of ProActive nodes to be deployed in Spark head and worker machines." group="ProActive Node Parameters" advanced="false" hidden="true"/>
    <variable name="SCALE_WORKFLOW" value="big-data/Azure_HDInsight_Scale_Spark_Cluster" model="PA:CATALOG_OBJECT" description="Hidden variable indicating the workflow (in ProActive catalog) to be executed when the signal &#39;Scale_Nodes&#39; is triggered."  advanced="false" hidden="true"/>
    <variable name="DELETE_WORKFLOW" value="big-data/Azure_HDInsight_Delete_Spark_Cluster" model="PA:CATALOG_OBJECT" description="Hidden variable indicating the workflow (in ProActive catalog) to be executed when the signal &#39;Delete_Cluster&#39; is triggered."  advanced="false" hidden="true"/>
    <variable name="SUBMIT_APPLICATION_WORKFLOW" value="big-data/Azure_HDInsight_Spark_Submit_Application" model="PA:CATALOG_OBJECT" description="Hidden variable indicating the workflow (in ProActive catalog) to be executed when the signal &#39;Submit_Application&#39; is triggered."  advanced="false" hidden="true"/>
  </variables>
  <description>
    <![CDATA[ A workflow that uses Azure REST API to create a HDInsight Spark Cluster. It requires as input the variable ARM_TEMPLATE, which takes as value an Azure ARM template. A ready-to-use template called "Azure_HDInsight_Spark_ARM_Template.json" is provided in the global dataspace. Furthermore, the workflow customizes the ARM template with respect to the provided input variables.
Once the Spark cluster is deployed successfully, the workflow produces as job results: (i) URL of the Web UI of the HDInsight Spark cluster, (ii) SSH host of the head node (i.e., master) of the cluster, (iii) SSH port of the head node (i.e., master) of the cluster, and (iv) a file containing the set of input variables.
Use the Workflow Azure_HDInsight_Spark_Send_Signal${SIGNAL_TO_SEND} to manage the HDInsight cluster, i.e., perform scale or delete operations. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="big-data"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="hdinsight_deploy_spark" fork="true">
      <description>
        <![CDATA[ A task performing a PUT request to Azure HDInsight REST API in order to deploy a Spark cluster, which name is given as input.
This task requires the Azure authentication token provided the task "azure_authenticate". ]]>
      </description>
      <variables>
        <variable name="ENDPOINT" value="${MANAGEMENT_ENDPOINT}" inherited="false" model="PA:URL" description="Base URL of the server or service that will be queried."   />
        <variable name="PATH" value="/subscriptions/${SUBSCRIPTION_ID}/resourcegroups/${RESOURCE_GROUP_NAME}/providers/Microsoft.Resources/deployments/${DEPLOYMENT_NAME}?api-version=2020-10-01" inherited="false"  description="Path of the request (relative to the base url)"   />
        <variable name="SSL_DISABLE_CHECK" value="true" inherited="false" model="PA:Boolean" description="If true, disable SSL certificate verification"   />
        <variable name="CONTENT_TYPE" value="application/json;charset = UTF-8" inherited="false"  description="Content-Type of the request"   />
        <variable name="REQUEST_BODY" value="${ARM_TEMPLATE_CONTENT}" inherited="false"  description="A JSON parameter containing the request body."  advanced="false" hidden="false"/>
        <variable name="DEBUG" value="true" inherited="false" model="PA:Boolean" description="If true, print the full request and response content in the task output."   />
        <variable name="RESPONSE_FORMAT" value="json" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"   />
        <variable name="RESPONSE_PATH" value="." inherited="false"  description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"  />
        <variable name="HEADER_Authorization" value="Bearer ${ACCESS_TOKEN}" inherited="false"  description="HTTP Authorization request header that contains the credentials to authenticate the user to the server"   />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
      </genericInformation>
      <depends>
        <task ref="azure-create_resource_group"/>
      </depends>
      <inputFiles>
        <files  includes="rest-assured-fat-3.3.0.jar" accessMode="cacheFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
if (variables.get("USE_JSON_INPUT_FILE").toLowerCase()=="true"){
    SUBSCRIPTION_ID=variables.get("SUBSCRIPTION_ID")
    RESOURCE_GROUP_NAME=variables.get("RESOURCE_GROUP_NAME")
    DEPLOYMENT_NAME=variables.get("DEPLOYMENT_NAME")
    PATH = "/subscriptions/${SUBSCRIPTION_ID}/resourcegroups/${RESOURCE_GROUP_NAME}/providers/Microsoft.Resources/deployments/${DEPLOYMENT_NAME}?api-version=2020-10-01"
    variables.put("REQUEST_BODY", variables.get("ARM_TEMPLATE"))
    variables.put("PATH", PATH)
}
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

requestBody = variables.get("REQUEST_BODY")
if (requestBody != null && !requestBody.isEmpty()) {
    
    if (!requestBody.startsWith("{")){
        File jsonFile = new File(requestBody);
        restCall = restCall.body(jsonFile)
    }
    else{
        restCall = restCall.body(requestBody)
    }    
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}

response = restCall.put(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            1231.109375
        </positionTop>
        <positionLeft>
            820.625
        </positionLeft>
      </metadata>
    </task>
    <task name="azure_authenticate" fork="true">
      <description>
        <![CDATA[ A task performing a POST request to Azure REST API in order to authenticate to Azure and acquire an authentication token. ]]>
      </description>
      <variables>
        <variable name="ENDPOINT" value="${AUTHENTICATION_ENDPOINT}" inherited="false" model="PA:URL" description="Base URL of the server or service that will be queried."   />
        <variable name="PATH" value="/${TENANT_ID}/oauth2/token" inherited="false"  description="Path of the request (relative to the base url)"   />
        <variable name="SSL_DISABLE_CHECK" value="true" inherited="false" model="PA:Boolean" description="If true, disable SSL certificate verification"   />
        <variable name="CONTENT_TYPE" value="application/x-www-form-urlencoded" inherited="false"  description="Content-Type of the request"   />
        <variable name="REQUEST_BODY" value="&amp;grant_type=client_credentials&amp;client_id=${APP_ID}&amp;client_secret=%PASSWORD%&amp;resource=https%3A%2F%2Fmanagement.azure.com%2F" inherited="false"  description="A JSON parameter containing the request body."   />
        <variable name="DEBUG" value="true" inherited="false" model="PA:Boolean" description="If true, print the full request and response content in the task output."   />
        <variable name="RESPONSE_FORMAT" value="json" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"   />
        <variable name="RESPONSE_PATH" value="." inherited="false"  description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response" advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png"/>
      </genericInformation>
      <inputFiles>
        <files  includes="rest-assured-fat-3.3.0.jar" accessMode="cacheFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY").replace("%PASSWORD%",variables.get("PASSWORD")))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}

variables.put("ACCESS_TOKEN",result)
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.*
   
// =========== Manage Azure Access token ============
def slurper = new JsonSlurper()
jsonData = slurper.parseText(JsonOutput.toJson(result))

access_token=jsonData.access_token
variables.put("ACCESS_TOKEN",access_token)
println variables.get("ACCESS_TOKEN")

expires_on=jsonData.expires_on
variables.put("EXPIRES_ON",expires_on)
println variables.get("EXPIRES_ON")


// =========== Check ProActive user credentials ============
def username = variables.get("PROACTIVE_NODE_CREDENTIALS")
def pwd = credentials.get(username)

def restUrl = variables.get("PA_SCHEDULER_REST_URL")
def post = new URL(restUrl +"/scheduler/login/").openConnection()
def message = "username=${username}&password=${pwd}"
post.setRequestMethod("POST")
post.setDoOutput(true)
post.getOutputStream().write(message.getBytes("UTF-8"))
def postRC = post.getResponseCode();
if (postRC.equals(200)) {
    sessionid=post.getInputStream().getText()
    variables.put("PROACTIVE_SESSION_ID",sessionid)
    println(variables.get("PROACTIVE_SESSION_ID"))
} else {
   throw new RuntimeException("Wrong credentials for user "+ username) 
}

variables.put("PROACTIVE_USER",username)
variables.put("PROACTIVE_PASSWORD",pwd)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            719.09375
        </positionTop>
        <positionLeft>
            820.625
        </positionLeft>
      </metadata>
    </task>
    <task name="hdinsight_check_deployment" fork="true">
      <description>
        <![CDATA[ A task performing a Get request to Azure HDInsight REST API in order to  check the status of the deployment, which name is given as input.
This task requires the Azure authentication token provided the task "azure_authenticate". ]]>
      </description>
      <variables>
        <variable name="ENDPOINT" value="${MANAGEMENT_ENDPOINT}" inherited="false" model="PA:URL" description="Base URL of the server or service that will be queried."   />
        <variable name="PATH" value="/subscriptions/${SUBSCRIPTION_ID}/resourcegroups/${RESOURCE_GROUP_NAME}/providers/Microsoft.Resources/deployments/${DEPLOYMENT_NAME}?api-version=2020-10-01" inherited="false"  description="Path of the request (relative to the base url)"   />
        <variable name="SSL_DISABLE_CHECK" value="true" inherited="false" model="PA:Boolean" description="If true, disable SSL certificate verification"   />
        <variable name="DEBUG" value="true" inherited="false" model="PA:Boolean" description="If true, print the full request and response content in the task output."   />
        <variable name="RESPONSE_FORMAT" value="json" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"   />
        <variable name="RESPONSE_PATH" value="." inherited="false"  description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"  />
        <variable name="HEADER_Authorization" value="Bearer ${ACCESS_TOKEN}" inherited="false"  description="HTTP Authorization request header that contains the credentials to authenticate the user to the server"   />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
      </genericInformation>
      <depends>
        <task ref="hdinsight_deploy_spark"/>
      </depends>
      <inputFiles>
        <files  includes="rest-assured-fat-3.3.0.jar" accessMode="cacheFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
if (variables.get("USE_JSON_INPUT_FILE").toLowerCase()=="true"){
    SUBSCRIPTION_ID=variables.get("SUBSCRIPTION_ID")
    RESOURCE_GROUP_NAME=variables.get("RESOURCE_GROUP_NAME")
    DEPLOYMENT_NAME=variables.get("DEPLOYMENT_NAME")
    PATH = "/subscriptions/${SUBSCRIPTION_ID}/resourcegroups/${RESOURCE_GROUP_NAME}/providers/Microsoft.Resources/deployments/${DEPLOYMENT_NAME}?api-version=2020-10-01"
    variables.put("PATH", PATH)
}
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given()

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("PARAM_")}).forEach({entry -> restCall = restCall.param(entry.getKey().replace("PARAM_",""), entry.getValue()) });

if (debug) {
    println "-------------- REQUEST ------------------"
	restCall = restCall.log().all()
}

response = restCall.get(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(HttpStatus.SC_OK)
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            1359.109375
        </positionTop>
        <positionLeft>
            820.625
        </positionLeft>
      </metadata>
    </task>
    <task name="azure-create_resource_group" fork="true">
      <description>
        <![CDATA[ A task performing a PUT request to Azure HDInsight REST API in order to create a Resource Group, which name is given as input.
This task requires the Azure authentication token provided the task "azure_authenticate". ]]>
      </description>
      <variables>
        <variable name="ENDPOINT" value="${MANAGEMENT_ENDPOINT}" inherited="false" model="PA:URL" description="Base URL of the server or service that will be queried."   />
        <variable name="PATH" value="/subscriptions/${SUBSCRIPTION_ID}/resourcegroups/${RESOURCE_GROUP_NAME}?api-version=2020-10-01" inherited="false"  description="Path of the request (relative to the base url)"   />
        <variable name="SSL_DISABLE_CHECK" value="true" inherited="false" model="PA:Boolean" description="If true, disable SSL certificate verification"   />
        <variable name="CONTENT_TYPE" value="application/json;charset = UTF-8" inherited="false"  description="Content-Type of the request"   />
        <variable name="REQUEST_BODY" value="{&quot;location&quot;: &quot;${RESOURCE_GROUP_LOCATION}&quot;}" inherited="false"  description="A JSON parameter containing the request body."  advanced="false" hidden="false"/>
        <variable name="DEBUG" value="true" inherited="false" model="PA:Boolean" description="If true, print the full request and response content in the task output."   />
        <variable name="RESPONSE_FORMAT" value="json" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"   />
        <variable name="RESPONSE_PATH" value="." inherited="false"  description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"  />
        <variable name="HEADER_Authorization" value="Bearer ${ACCESS_TOKEN}" inherited="false"  description="HTTP Authorization request header that contains the credentials to authenticate the user to the server"   />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/hdinsight.png"/>
      </genericInformation>
      <depends>
        <task ref="prepare_arm_template_params"/>
      </depends>
      <inputFiles>
        <files  includes="rest-assured-fat-3.3.0.jar" accessMode="cacheFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
if (variables.get("USE_JSON_INPUT_FILE").toLowerCase()=="true"){
    SUBSCRIPTION_ID=variables.get("SUBSCRIPTION_ID")
    RESOURCE_GROUP_NAME=variables.get("RESOURCE_GROUP_NAME")
    PATH = "/subscriptions/${SUBSCRIPTION_ID}/resourcegroups/${RESOURCE_GROUP_NAME}?api-version=2020-10-01"
    
    RESOURCE_GROUP_LOCATION=variables.get("RESOURCE_GROUP_LOCATION")
    REQUEST_BODY="{\"location\": \"${RESOURCE_GROUP_LOCATION}\"}"

    variables.put("PATH", PATH)
    variables.put("REQUEST_BODY", REQUEST_BODY)
}
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}

response = restCall.put(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            1103.109375
        </positionTop>
        <positionLeft>
            820.625
        </positionLeft>
      </metadata>
    </task>
    <task name="hdinsight_get_spark_cluster_info" maxNumberOfExecution="3" fork="true">
      <description>
        <![CDATA[ A task that performs iteratively a GET request to Azure HDInsight REST API, in order to get information about the cluster deployment status. If the deployment status is "Succeeded". The cluster Web UI, SSH host and SSH port are extracted and provided as job results, then the loop stops. 
This task requires the Azure authentication token provided the task "azure_authenticate". ]]>
      </description>
      <variables>
        <variable name="ENDPOINT" value="${MANAGEMENT_ENDPOINT}" inherited="false" model="PA:URL" description="Base URL of the server or service that will be queried."   />
        <variable name="PATH" value="/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${RESOURCE_GROUP_NAME}/providers/Microsoft.HDInsight/clusters/${CLUSTER_NAME}?api-version=2018-06-01-preview" inherited="false"  description="Path of the request (relative to the base url)"   />
        <variable name="SSL_DISABLE_CHECK" value="true" inherited="false" model="PA:Boolean" description="If true, disable SSL certificate verification"   />
        <variable name="DEBUG" value="true" inherited="false" model="PA:Boolean" description="If true, print the full request and response content in the task output."   />
        <variable name="RESPONSE_FORMAT" value="json" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"   />
        <variable name="RESPONSE_PATH" value="." inherited="false"  description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"  />
        <variable name="HEADER_Authorization" value="Bearer ${ACCESS_TOKEN}" inherited="false"  description="HTTP Authorization request header that contains the credentials to authenticate the user to the server"   />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
      </genericInformation>
      <depends>
        <task ref="azure_generate_new_access_token_1"/>
      </depends>
      <inputFiles>
        <files  includes="rest-assured-fat-3.3.0.jar" accessMode="cacheFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
if (variables.get("USE_JSON_INPUT_FILE").toLowerCase()=="true"){
    SUBSCRIPTION_ID=variables.get("SUBSCRIPTION_ID")
    RESOURCE_GROUP_NAME=variables.get("RESOURCE_GROUP_NAME")
    CLUSTER_NAME=variables.get("CLUSTER_NAME")
    PATH = "/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${RESOURCE_GROUP_NAME}/providers/Microsoft.HDInsight/clusters/${CLUSTER_NAME}?api-version=2018-06-01-preview"
    variables.put("PATH", PATH)
}

sleep(30000)
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given()

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("PARAM_")}).forEach({entry -> restCall = restCall.param(entry.getKey().replace("PARAM_",""), entry.getValue()) });

if (debug) {
    println "-------------- REQUEST ------------------"
	restCall = restCall.log().all()
}

response = restCall.get(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(HttpStatus.SC_OK)
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow  block="end">
        <loop target="azure_generate_new_access_token_1">
          <script>
            <code language="groovy">
              <![CDATA[
provisioningState = variables.get("PROVISIONING_STATE")
if (provisioningState=="InProgress"){
   loop= "* * * * *" 
} else if (provisioningState=="Failed" || provisioningState=="Canceled"){
   loop=false
   throw new Exception("HDInsight Spark cluster deployment "+ provisioningState)
} else {
   loop=false
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.*
    
def slurper = new JsonSlurper()
    
jsonData = slurper.parseText(JsonOutput.toJson(result))

provisioningState=jsonData.properties.provisioningState

variables.put("PROVISIONING_STATE",provisioningState)

println variables.get("PROVISIONING_STATE")

if (provisioningState=="Succeeded"){
    
    LinkedHashMap resMap = [:]
    
    SSHEndpoint=jsonData.properties.connectivityEndpoints[0]
    WebUIEndpoint=jsonData.properties.connectivityEndpoints[1]
    
    println "_____________________CLUSTER NAME________________"
    resMap.put("SPARK_CLUSTER_NAME",variables.get("CLUSTER_NAME"))
    
    println "_____________________WEB UI ENDPOINT________________"
    println WebUIEndpoint
    println "Name: " + WebUIEndpoint.name
    println "Location: " + WebUIEndpoint.location
    println "Protocol: " + WebUIEndpoint.protocol
    println "Port: " + WebUIEndpoint.port
    sparkWebUI = WebUIEndpoint.name.toLowerCase() + "://" + WebUIEndpoint.location + ":" + WebUIEndpoint.port
    resMap.put("SPARK_WEB_ENDPOINT",sparkWebUI)
    
    println "_____________________AZURE ENDPOINT________________"
    azurePortalEndpoint = "https://portal.azure.com/"
    resMap.put("AZURE_PORTAL_ENDPOINT",azurePortalEndpoint)
    
    schedulerapi.connect()
	schedulerapi.addExternalEndpointUrl(variables.get("PA_JOB_ID"), "Spark Web UI", sparkWebUI , "/automation-dashboard/styles/patterns/img/wf-icons/spark.png")
    schedulerapi.addExternalEndpointUrl(variables.get("PA_JOB_ID"), "Azure Portal", azurePortalEndpoint , "/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png")
    
    println "_____________________SSH ENDPOINT________________"
    println SSHEndpoint
    println "Name: " + SSHEndpoint.name
    println "Location: " + SSHEndpoint.location
    println "Protocol: " + SSHEndpoint.protocol
    println "Port: " + SSHEndpoint.port
    resMap.put("SPARK_SSH_Host", SSHEndpoint.location)
    resMap.put("SPARK_SSH_Port", SSHEndpoint.port)
    
    println "_____________________HEAD NODE TOKEN________________"
    resMap.put("SPARK_HEAD_NODE_TOKEN",variables.get("CLUSTER_NAME")+"-hn")
    resMap.put("SPARK_WORKER_NODE_TOKEN",variables.get("CLUSTER_NAME")+"-wn")
    
    resultMap.putAll(resMap)
    
    variables.put("CLUSTER_SSH_HOST",SSHEndpoint.location)
    variables.put("CLUSTER_SSH_PORT",SSHEndpoint.port)
}
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            1609.109375
        </positionTop>
        <positionLeft>
            820.625
        </positionLeft>
      </metadata>
    </task>
    <task name="prepare_pa_node_params" maxNumberOfExecution="1" fork="true">
      <description>
        <![CDATA[ A task performing a rest POST request using form data.

This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header, form or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
PARAM_<param_name>
QUERY_PARAM_<param_name> ]]>
      </description>
      <variables>
        <variable name="ENDPOINT" value="${PA_SCHEDULER_REST_URL}" inherited="false"  description="Base URL of the server or service that will be queried."  advanced="false" hidden="false"/>
        <variable name="PATH" value="/scheduler/createcredential/" inherited="false"  description="Path of the request (relative to the base url)"  advanced="false" hidden="false"/>
        <variable name="CONTENT_TYPE" value="multipart/form-data" inherited="false" model="PA:LIST(application/x-www-form-urlencoded,multipart/form-data)" description="Content-Type of the request"  advanced="false" hidden="false"/>
        <variable name="SSL_DISABLE_CHECK" value="true" inherited="false" model="PA:Boolean" description="If true, disable SSL certificate verification"   />
        <variable name="DEBUG" value="true" inherited="false" model="PA:Boolean" description="If true, print the full request and response content in the task output."  advanced="false" hidden="false"/>
        <variable name="RESPONSE_FORMAT" value="string" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"  advanced="false" hidden="false"/>
        <variable name="RESPONSE_PATH" value="" inherited="false"  description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response" advanced="false" hidden="false"/>
        <variable name="PARAM_username" value="${PA_USER}" inherited="false"  description="ProActive login name"  advanced="false" hidden="false"/>
        <variable name="PARAM_password" value="${PROACTIVE_PASSWORD}" inherited="false"  description="ProActive login password"  advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/api-rest.png"/>
      </genericInformation>
      <depends>
        <task ref="azure_authenticate"/>
      </depends>
      <inputFiles>
        <files  includes="rest-assured-fat-3.3.0.jar" accessMode="cacheFromGlobalSpace"/>
        <files  includes="${JSON_INPUT_FILE}" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.*

// Configure workflow parameters when using JSON file as iput 
if (variables.get("USE_JSON_INPUT_FILE").toLowerCase()=="true"){
    
    jsonFile = new File(variables.get("JSON_INPUT_FILE"))

    def jsonSlurper = new JsonSlurper()
    jsonData = jsonSlurper.parse(jsonFile)

    println "The workflow will use the following parameters:"
    
    // Process main parameters
    mainParameters = jsonData.Main_Parameters 
    mainParameters.keySet().each{key->        
        variables.put(key,mainParameters.get(key))
        println key +": "+ variables.get(key)
	}
    
    // Process advanced parameters
    advancedParameters = jsonData.Advanced_Parameters 
    advancedParameters.keySet().each{key->        
        variables.put(key,advancedParameters.get(key))
        println key +": "+ variables.get(key)
	}
    
    // Process hidden parameters
    hiddenParameters = jsonData.Hidden_Parameters 
    hiddenParameters.keySet().each{key->        
        variables.put(key,hiddenParameters.get(key))
        println key +": "+ variables.get(key)
	}
}

// Prepare the NodeSource for ProActive Nodes that will be deployed in Spark cluster
def nodeSourceName = variables.get("PROACTIVE_NODE_SOURCE_NAME")

try{
    rmapi.connect()
    def nsMap = rmapi.getExistingNodeSources()
    def ns = nsMap.find{ it.key == nodeSourceName }

    if(ns){
        println "NodeSource '${nodeSourceName}' already exists, thus the operation of NodeSource creation will be skipped."
    } else { 
        // NS configuration settings
        def infrastructureType = "org.ow2.proactive.resourcemanager.nodesource.infrastructure.DefaultInfrastructureManager"
        def infrastructureParameters = [""]
        def infrastructureFileParameters = [""]
        def policyType = "org.ow2.proactive.resourcemanager.nodesource.policy.EmptyPolicy"
        def poliyParameters = ["ALL","ME"]
        def policyFileParameters = []
        def nodesRecoverable = "true"

        // Create and deploy NS
        print "Creating the NodeSource '${nodeSourceName}' ..."
        rmapi.defineNodeSource(nodeSourceName,infrastructureType,(String[]) infrastructureParameters.toArray(),(String[]) infrastructureFileParameters.toArray(), policyType,         (String[]) poliyParameters.toArray(), (String[]) policyFileParameters.toArray(),nodesRecoverable)
        println " OK !"
        print "Deploying the NodeSource '${nodeSourceName}' ..."
        rmapi.deployNodeSource(nodeSourceName)
        println " OK !"
    }
} catch(Exception e){
	throw e
} finally {
	rmapi.disconnect()  
}
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

debug = Boolean.parseBoolean(variables.get("DEBUG"))
contentType = variables.get("CONTENT_TYPE")
isMultiPart = contentType.equals("multipart/form-data")

restCall = given().contentType(contentType + ";charset = UTF-8")

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("PARAM_")}).forEach({entry -> restCall = (isMultiPart ? restCall.multiPart(entry.getKey().replace("PARAM_",""), entry.getValue()) : restCall.formParam(entry.getKey().replace("PARAM_",""), entry.getValue()) )});

variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}

response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
def restUrl = variables.get("PA_SCHEDULER_REST_URL")
def nodeJarUrl = restUrl+"/node.jar"
def host = new URL(restUrl).getHost() 
def protocol = variables.get("PA_NODE_URL").substring(0, restUrl.lastIndexOf("//")-2)
def nsName = variables.get("PROACTIVE_NODE_SOURCE_NAME")

def get = new URL(restUrl +"/rm/url/").openConnection();
def getRC = get.getResponseCode();
if (getRC.equals(200)) {
    rmURL = get.getInputStream().getText()
    println("rmUrl: "+rmURL);
} else {
   throw new RuntimeException("Cannot acquire The RM URL.") 
}

println "nodeJarUrl: "+nodeJarUrl
println "rmHostname: "+host
println "protocol: "+protocol
println "nsName: "+nsName
println "nodeNamingOption: "+variables.get("CLUSTER_NAME")
println "credentials: "+result
println "numberOfNodesPerInstance: "+ 1
println "additionalProperties: "+ "-Dproactive.useIPaddress=true"

def headNodeScriptParameters = restUrl + " " + protocol + " " + host + " " + rmURL + " " + nsName + " " + variables.get("CLUSTER_NAME")+"-hn " + result + " " + variables.get("NUMBER_OF_PROACTIVE_NODES") + " -Dproactive.useIPaddress=true "+ variables.get("PROACTIVE_SESSION_ID")
//println headNodeScriptParameters
variables.put ("HEAD_NODE_SCRIPT_PARAMETERS",headNodeScriptParameters)

def workerNodeScriptParameters = restUrl + " " + protocol + " " + host + " " + rmURL + " " + nsName + " " + variables.get("CLUSTER_NAME")+"-wn " + result + " " + variables.get("NUMBER_OF_PROACTIVE_NODES") + " -Dproactive.useIPaddress=true "+ variables.get("PROACTIVE_SESSION_ID")
//println workerNodeScriptParameters
variables.put ("WORKER_NODE_SCRIPT_PARAMETERS",workerNodeScriptParameters)
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            847.109375
        </positionTop>
        <positionLeft>
            820.625
        </positionLeft>
      </metadata>
    </task>
    <task name="prepare_arm_template_params" fork="true">
      <depends>
        <task ref="prepare_pa_node_params"/>
      </depends>
      <inputFiles>
        <files  includes="${ARM_TEMPLATE}" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.*
    
jsonFile = new File(variables.get("ARM_TEMPLATE"))

def jsonSlurper = new JsonSlurper()
jsonData = jsonSlurper.parse(jsonFile)

jsonData.properties.template.parameters.clusterName.defaultValue = variables.get("CLUSTER_NAME") 
jsonData.properties.template.parameters.clusterLoginUserName.defaultValue =  variables.get("CLUSTER_USER")
jsonData.properties.template.parameters.clusterLoginPassword.defaultValue = variables.get("CLUSTER_PASSWORD")
jsonData.properties.template.parameters.sshUserName.defaultValue = variables.get("CLUSTER_SSH_USER")
jsonData.properties.template.parameters.sshPassword.defaultValue= variables.get("CLUSTER_SSH_PASSWORD")

jsonData.properties.template.parameters.HeadNodeVirtualMachineSize.defaultValue = variables.get("HEAD_NODE_VM_SIZE") 
jsonData.properties.template.parameters.WorkerNodeVirtualMachineSize.defaultValue = variables.get("WORKER_NODE_VM_SIZE") 

jsonData.properties.template.resources[1].properties.computeProfile.roles[1].targetInstanceCount = variables.get("NUMBER_OF_WORKERS")

if (variables.get("AUTOSCALING").toLowerCase()=="true"){
	def autoScaleContent = new JsonSlurper().parseText('{ "capacity": { "minInstanceCount": '+variables.get("MIN_WORKERS")+', "maxInstanceCount": '+variables.get("MAX_WORKERS")+' }},')
    jsonData.properties.template.resources[1].properties.computeProfile.roles[1].put("autoscale",autoScaleContent)
}

def headNodeScriptActionDefaultContent = new JsonSlurper().parseText('[{"name": "'+variables.get("HEAD_NODE_SCRIPT_NAME")+'", "uri": "'+variables.get("HEAD_NODE_SCRIPT_URI")+'", "parameters": "'+variables.get("HEAD_NODE_SCRIPT_PARAMETERS")+'"}]')

def workerNodeScriptActionDefaultContent = new JsonSlurper().parseText('[{"name": "'+variables.get("WORKER_NODE_SCRIPT_NAME")+'", "uri": "'+variables.get("WORKER_NODE_SCRIPT_URI")+'", "parameters": "'+variables.get("WORKER_NODE_SCRIPT_PARAMETERS")+'"}]')

if (variables.get("SCRIPT_ACTION").toLowerCase()=="true"){    
    def headNodeScriptActionContent = new JsonSlurper().parseText(variables.get("HEAD_NODE_SCRIPTS_JSON"))
    assert headNodeScriptActionContent instanceof List    
    headNodeScriptActionContent.each {
        assert !it.name.isEmpty() && !it.uri.isEmpty()
        headNodeScriptActionDefaultContent.add(it)
    }
    
    def workerNodeScriptActionContent = new JsonSlurper().parseText(variables.get("WORKER_NODE_SCRIPTS_JSON"))
    assert workerNodeScriptActionContent instanceof List    
    workerNodeScriptActionContent.each {
        assert !it.name.isEmpty() && !it.uri.isEmpty()
    	workerNodeScriptActionDefaultContent.add(it)
	}
}

jsonData.properties.template.resources[1].properties.computeProfile.roles[0].scriptActions = headNodeScriptActionDefaultContent
jsonData.properties.template.resources[1].properties.computeProfile.roles[1].scriptActions = workerNodeScriptActionDefaultContent

def modifiedJson = JsonOutput.prettyPrint(JsonOutput.toJson(jsonData))

//jsonFile.write(modifiedJson)
variables.put("ARM_TEMPLATE_CONTENT",modifiedJson)

println modifiedJson
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            975.109375
        </positionTop>
        <positionLeft>
            821.625
        </positionLeft>
      </metadata>
    </task>
    <task name="azure_generate_new_access_token_2" fork="true">
      <description>
        <![CDATA[ A task performing a POST request to Azure REST API in order to authenticate to Azure and acquire an authentication token. ]]>
      </description>
      <variables>
        <variable name="ENDPOINT" value="${AUTHENTICATION_ENDPOINT}" inherited="false" model="PA:URL" description="Base URL of the server or service that will be queried."   />
        <variable name="PATH" value="/${TENANT_ID}/oauth2/token" inherited="false"  description="Path of the request (relative to the base url)"   />
        <variable name="SSL_DISABLE_CHECK" value="true" inherited="false" model="PA:Boolean" description="If true, disable SSL certificate verification"   />
        <variable name="CONTENT_TYPE" value="application/x-www-form-urlencoded" inherited="false"  description="Content-Type of the request"   />
        <variable name="REQUEST_BODY" value="&amp;grant_type=client_credentials&amp;client_id=${APP_ID}&amp;client_secret=%PASSWORD%&amp;resource=https%3A%2F%2Fmanagement.azure.com%2F" inherited="false"  description="A JSON parameter containing the request body."   />
        <variable name="DEBUG" value="true" inherited="false" model="PA:Boolean" description="If true, print the full request and response content in the task output."   />
        <variable name="RESPONSE_FORMAT" value="json" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"   />
        <variable name="RESPONSE_PATH" value="." inherited="false"  description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response" advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png"/>
      </genericInformation>
      <depends>
        <task ref="get_input_parameters"/>
      </depends>
      <inputFiles>
        <files  includes="rest-assured-fat-3.3.0.jar" accessMode="cacheFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
currentDate = System.currentTimeMillis()/1000
//println currentDate

if (Long.valueOf(variables.get("EXPIRES_ON")) > currentDate + 300) {
     println "access token is still valid"
     variables.put("GENERATE_NEW_TOKEN", "false")
} else {
      println "access token will expire soon"
      variables.put("GENERATE_NEW_TOKEN", "true")
}
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

def action = variables.get("SIGNAL_ACTION")
   
if (variables.get("GENERATE_NEW_TOKEN") == "true" && action != "DELETE_CLUSTER"){
    
    debug = Boolean.parseBoolean(variables.get("DEBUG"))

    restCall = given().contentType(variables.get("CONTENT_TYPE"))

    if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
        restCall = restCall.relaxedHTTPSValidation()
    }

    if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
        restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
    }

    variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

    variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

    if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
        restCall = restCall.body(variables.get("REQUEST_BODY").replace("%PASSWORD%",variables.get("PASSWORD")))
    }

    if (debug) {
        println "-------------- REQUEST -----------------"
        restCall = restCall.log().all()
    }
    response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

    if (debug) {
        println "-------------- RESPONSE -----------------"
        println response.statusLine()
        println response.prettyPrint()
    } else {
        println response.statusLine()
    }

    response = response.then().assertThat()
      .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
      .extract();

    if (debug) {
        println "-------------- RESULT -------------------"
    }

    if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
    } else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
        result = true;
        // response has no content
        return;
    }

    switch (variables.get("RESPONSE_FORMAT")) {
        case "json":
        if (variables.get("RESPONSE_PATH").isEmpty()) {
            throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
        }
        result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
        println result
        break;

        case "xml":
        if (variables.get("RESPONSE_PATH").isEmpty()) {
            throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
        }
        // html parsing results are not serializable and thus can be returned only in string format
        result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
        println result
        break;

        case "html":
        if (variables.get("RESPONSE_PATH").isEmpty()) {
            throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
        }
        // html parsing results are not serializable and thus can be returned only in string format
        result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
        println result
        break;

        case "contentView":
        result = response.asByteArray();
        resultMetadata.put("content.type", response.contentType())
        // uncomment the following line to allow saving the result as a file on the scheduler portal
        // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
        // resultMetadata.put("file.extension",".png")
        println "See result in \"Task Preview\" tab with content " + response.contentType()
        break;

        case "string":
        result = response.prettyPrint()
        break;
    }
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="start"></controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.*
    
if (variables.get("GENERATE_NEW_TOKEN") == "true"){
    
    def slurper = new JsonSlurper()

    jsonData = slurper.parseText(JsonOutput.toJson(result))

    access_token=jsonData.access_token
    variables.put("ACCESS_TOKEN",access_token)
    println variables.get("ACCESS_TOKEN")

    expires_on=jsonData.expires_on
    variables.put("EXPIRES_ON",expires_on)
    println variables.get("EXPIRES_ON")
    
    variables.put("GENERATE_NEW_TOKEN","false")
}
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            1889.109375
        </positionTop>
        <positionLeft>
            338.375
        </positionLeft>
      </metadata>
    </task>
    <task name="check_spark_cluster_state" maxNumberOfExecution="3" fork="true">
      <description>
        <![CDATA[ A task that performs iteratively a GET request to Azure HDInsight REST API, in order to get information about the cluster deployment status. If the deployment status is "Succeeded". The cluster Web UI, SSH host and SSH port are extracted and provided as job results, then the loop stops. 
This task requires the Azure authentication token provided the task "azure_authenticate". ]]>
      </description>
      <variables>
        <variable name="ENDPOINT" value="${MANAGEMENT_ENDPOINT}" inherited="false" model="PA:URL" description="Base URL of the server or service that will be queried."   />
        <variable name="PATH" value="/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${RESOURCE_GROUP_NAME}/providers/Microsoft.HDInsight/clusters/${CLUSTER_NAME}?api-version=2018-06-01-preview" inherited="false"  description="Path of the request (relative to the base url)"   />
        <variable name="SSL_DISABLE_CHECK" value="true" inherited="false" model="PA:Boolean" description="If true, disable SSL certificate verification"   />
        <variable name="DEBUG" value="true" inherited="false" model="PA:Boolean" description="If true, print the full request and response content in the task output."   />
        <variable name="RESPONSE_FORMAT" value="json" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"   />
        <variable name="RESPONSE_PATH" value="." inherited="false"  description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response"  />
        <variable name="HEADER_Authorization" value="Bearer ${ACCESS_TOKEN}" inherited="false"  description="HTTP Authorization request header that contains the credentials to authenticate the user to the server"   />
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
      </genericInformation>
      <depends>
        <task ref="azure_generate_new_access_token_2"/>
      </depends>
      <inputFiles>
        <files  includes="rest-assured-fat-3.3.0.jar" accessMode="cacheFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
if (variables.get("USE_JSON_INPUT_FILE").toLowerCase()=="true"){
    SUBSCRIPTION_ID=variables.get("SUBSCRIPTION_ID")
    RESOURCE_GROUP_NAME=variables.get("RESOURCE_GROUP_NAME")
    CLUSTER_NAME=variables.get("CLUSTER_NAME")
    PATH = "/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${RESOURCE_GROUP_NAME}/providers/Microsoft.HDInsight/clusters/${CLUSTER_NAME}?api-version=2018-06-01-preview"
    variables.put("PATH", PATH)
}
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import com.google.common.base.Strings;

def action = variables.get("SIGNAL_ACTION")
   
if (action != "DELETE_CLUSTER"){
    debug = Boolean.parseBoolean(variables.get("DEBUG"))

    restCall = given()

    if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
        restCall = restCall.relaxedHTTPSValidation()
    }

    if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
        restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
    }

    variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

    variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("PARAM_")}).forEach({entry -> restCall = restCall.param(entry.getKey().replace("PARAM_",""), entry.getValue()) });

    if (debug) {
        println "-------------- REQUEST ------------------"
        restCall = restCall.log().all()
    }

    response = restCall.get(variables.get("ENDPOINT") + variables.get("PATH"))

    if (debug) {
        println "-------------- RESPONSE -----------------"
        println response.statusLine()
        println response.prettyPrint()
    } else {
        println response.statusLine()
    }

    response = response.then().assertThat()
      .statusCode(HttpStatus.SC_OK)
      .extract();

    if (debug) {
        println "-------------- RESULT -------------------"
    }

    switch (variables.get("RESPONSE_FORMAT")) {
        case "json":
        if (variables.get("RESPONSE_PATH").isEmpty()) {
            throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
        }
        result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
        println result
        break;

        case "xml":
        if (variables.get("RESPONSE_PATH").isEmpty()) {
            throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
        }
        // html parsing results are not serializable and thus can be returned only in string format
        result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
        println result
        break;

        case "html":
        if (variables.get("RESPONSE_PATH").isEmpty()) {
            throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
        }
        // html parsing results are not serializable and thus can be returned only in string format
        result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
        println result
        break;

        case "contentView":
        result = response.asByteArray();
        resultMetadata.put("content.type", response.contentType())
        // uncomment the following line to allow saving the result as a file on the scheduler portal
        // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
        // resultMetadata.put("file.extension",".png")
        println "See result in \"Task Preview\" tab with content " + response.contentType()
        break;

        case "string":
        result = response.prettyPrint()
        break;
    }
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow  block="end">
        <loop target="azure_generate_new_access_token_2">
          <script>
            <code language="groovy">
              <![CDATA[
signalAction=variables.get("SIGNAL_ACTION")

if (signalAction=="DELETE_CLUSTER"){
    loop = false
} else {
    loop = "* * * * *"
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.*

def channelName = "HDInsight-Spark-Cluster-Action"+variables.get("PA_JOB_ID")
def action = synchronizationapi.get(channelName, "SIGNAL_ACTION")
   
if (action != "DELETE_CLUSTER"){
    def slurper = new JsonSlurper()

    jsonData = slurper.parseText(JsonOutput.toJson(result))

    int nbOfWorkers=jsonData.properties.computeProfile.roles[1].targetInstanceCount as int
    println nbOfWorkers
    resultMap.put("SPARK_NUMBER_OF_WORKERS",nbOfWorkers)

    clusterState=jsonData.properties.clusterState
    if ((clusterState=="Deleting") || (clusterState=="DeletePending")) {
        variables.put("SIGNAL_ACTION","DELETE_CLUSTER")
    }
} else {
    variables.put("SIGNAL_ACTION","DELETE_CLUSTER")
}
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            2376.109375
        </positionTop>
        <positionLeft>
            377.375
        </positionLeft>
      </metadata>
    </task>
    <task name="azure_generate_new_access_token_1" fork="true">
      <description>
        <![CDATA[ A task performing a POST request to Azure REST API in order to authenticate to Azure and acquire an authentication token. ]]>
      </description>
      <variables>
        <variable name="ENDPOINT" value="${AUTHENTICATION_ENDPOINT}" inherited="false" model="PA:URL" description="Base URL of the server or service that will be queried."   />
        <variable name="PATH" value="/${TENANT_ID}/oauth2/token" inherited="false"  description="Path of the request (relative to the base url)"   />
        <variable name="SSL_DISABLE_CHECK" value="true" inherited="false" model="PA:Boolean" description="If true, disable SSL certificate verification"   />
        <variable name="CONTENT_TYPE" value="application/x-www-form-urlencoded" inherited="false"  description="Content-Type of the request"   />
        <variable name="REQUEST_BODY" value="&amp;grant_type=client_credentials&amp;client_id=${APP_ID}&amp;client_secret=%PASSWORD%&amp;resource=https%3A%2F%2Fmanagement.azure.com%2F" inherited="false"  description="A JSON parameter containing the request body."   />
        <variable name="DEBUG" value="true" inherited="false" model="PA:Boolean" description="If true, print the full request and response content in the task output."   />
        <variable name="RESPONSE_FORMAT" value="json" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;"   />
        <variable name="RESPONSE_PATH" value="." inherited="false"  description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response" advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png"/>
      </genericInformation>
      <depends>
        <task ref="hdinsight_check_deployment"/>
      </depends>
      <inputFiles>
        <files  includes="rest-assured-fat-3.3.0.jar" accessMode="cacheFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <pre>
        <script>
          <code language="groovy">
            <![CDATA[
currentDate = System.currentTimeMillis()/1000
//println currentDate

if (Long.valueOf(variables.get("EXPIRES_ON")) > currentDate + 300) {
     println "access token is still valid"
     variables.put("GENERATE_NEW_TOKEN", "false")
} else {
      println "access token will expire soon"
      variables.put("GENERATE_NEW_TOKEN", "true")
}
]]>
          </code>
        </script>
      </pre>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;

if (variables.get("GENERATE_NEW_TOKEN") == "true"){
    
    debug = Boolean.parseBoolean(variables.get("DEBUG"))

    restCall = given().contentType(variables.get("CONTENT_TYPE"))

    if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
        restCall = restCall.relaxedHTTPSValidation()
    }

    if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
        restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
    }

    variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("HEADER_")}).forEach({entry -> restCall = restCall.header(entry.getKey().replace("HEADER_",""), entry.getValue()) });

    variables.entrySet().stream().filter({entry -> entry.getKey().startsWith("QUERY_PARAM_")}).forEach({entry -> restCall = restCall.queryParam(entry.getKey().replace("QUERY_PARAM_",""), entry.getValue()) });

    if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
        restCall = restCall.body(variables.get("REQUEST_BODY").replace("%PASSWORD%",variables.get("PASSWORD")))
    }

    if (debug) {
        println "-------------- REQUEST -----------------"
        restCall = restCall.log().all()
    }
    response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

    if (debug) {
        println "-------------- RESPONSE -----------------"
        println response.statusLine()
        println response.prettyPrint()
    } else {
        println response.statusLine()
    }

    response = response.then().assertThat()
      .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
      .extract();

    if (debug) {
        println "-------------- RESULT -------------------"
    }

    if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
    } else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
        result = true;
        // response has no content
        return;
    }

    switch (variables.get("RESPONSE_FORMAT")) {
        case "json":
        if (variables.get("RESPONSE_PATH").isEmpty()) {
            throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
        }
        result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
        println result
        break;

        case "xml":
        if (variables.get("RESPONSE_PATH").isEmpty()) {
            throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
        }
        // html parsing results are not serializable and thus can be returned only in string format
        result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
        println result
        break;

        case "html":
        if (variables.get("RESPONSE_PATH").isEmpty()) {
            throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
        }
        // html parsing results are not serializable and thus can be returned only in string format
        result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
        println result
        break;

        case "contentView":
        result = response.asByteArray();
        resultMetadata.put("content.type", response.contentType())
        // uncomment the following line to allow saving the result as a file on the scheduler portal
        // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
        // resultMetadata.put("file.extension",".png")
        println "See result in \"Task Preview\" tab with content " + response.contentType()
        break;

        case "string":
        result = response.prettyPrint()
        break;
    }
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="start"></controlFlow>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.*
    
if (variables.get("GENERATE_NEW_TOKEN") == "true"){
    
    def slurper = new JsonSlurper()

    jsonData = slurper.parseText(JsonOutput.toJson(result))

    access_token=jsonData.access_token
    variables.put("ACCESS_TOKEN",access_token)
    println variables.get("ACCESS_TOKEN")

    expires_on=jsonData.expires_on
    variables.put("EXPIRES_ON",expires_on)
    println variables.get("EXPIRES_ON")
    
    variables.put("GENERATE_NEW_TOKEN","false")
}
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            1485.109375
        </positionTop>
        <positionLeft>
            820.625
        </positionLeft>
      </metadata>
    </task>
    <task name="get_input_parameters" preciousResult="true" fork="true">
      <description>
        <![CDATA[ The simplest task, ran by a Groovy engine. ]]>
      </description>
      <depends>
        <task ref="hdinsight_get_spark_cluster_info"/>
      </depends>
      <inputFiles>
        <files  includes="${ARM_TEMPLATE}" accessMode="transferFromGlobalSpace"/>
      </inputFiles>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import groovy.json.*
import javax.ws.rs.core.MediaType

def jsonSlurper = new JsonSlurper()
def jsonData = jsonSlurper.parseText('{"Main_Parameters": {},"Advanced_Parameters": {},"Hidden_Parameters": {}}')

// Add main variables
jsonData.Main_Parameters.put("SUBSCRIPTION_ID",variables.get("SUBSCRIPTION_ID"))
jsonData.Main_Parameters.put("CLUSTER_NAME",variables.get("CLUSTER_NAME"))
jsonData.Main_Parameters.put("AUTOSCALING",variables.get("AUTOSCALING"))
if (variables.get("AUTOSCALING").toLowerCase()=="true"){
    jsonData.Main_Parameters.put("MIN_WORKERS",variables.get("MIN_WORKERS"))
    jsonData.Main_Parameters.put("MAX_WORKERS",variables.get("MAX_WORKERS"))
} else {
    jsonData.Main_Parameters.put("NUMBER_OF_WORKERS",variables.get("NUMBER_OF_WORKERS"))
}
jsonData.Main_Parameters.put("PROACTIVE_NODE_CREDENTIALS",variables.get("PROACTIVE_NODE_CREDENTIALS"))

// Add advanced variables
jsonData.Advanced_Parameters.put("TENANT_ID",variables.get("TENANT_ID"))
jsonData.Advanced_Parameters.put("APP_ID",variables.get("APP_ID"))
jsonData.Advanced_Parameters.put("PASSWORD","******")
jsonData.Advanced_Parameters.put("ARM_TEMPLATE",variables.get("ARM_TEMPLATE"))
jsonData.Advanced_Parameters.put("RESOURCE_GROUP_LOCATION",variables.get("RESOURCE_GROUP_LOCATION"))
jsonData.Advanced_Parameters.put("CLUSTER_USER",variables.get("CLUSTER_USER"))
jsonData.Advanced_Parameters.put("CLUSTER_PASSWORD","******")
jsonData.Advanced_Parameters.put("CLUSTER_SSH_USER",variables.get("CLUSTER_SSH_USER"))
jsonData.Advanced_Parameters.put("CLUSTER_SSH_PASSWORD","******")
jsonData.Advanced_Parameters.put("HEAD_NODE_VM_SIZE",variables.get("HEAD_NODE_VM_SIZE"))
jsonData.Advanced_Parameters.put("WORKER_NODE_VM_SIZE",variables.get("WORKER_NODE_VM_SIZE"))
jsonData.Advanced_Parameters.put("AUTOSCALING_MODE",variables.get("AUTOSCALING_MODE"))
jsonData.Advanced_Parameters.put("SCRIPT_ACTION",variables.get("SCRIPT_ACTION"))
if (variables.get("SCRIPT_ACTION").toLowerCase()=="true"){    
    jsonData.Advanced_Parameters.put("HEAD_NODE_SCRIPTS_JSON",variables.get("HEAD_NODE_SCRIPTS_JSON"))
    jsonData.Advanced_Parameters.put("WORKER_NODE_SCRIPTS_JSON",variables.get("WORKER_NODE_SCRIPTS_JSON"))
}
jsonData.Main_Parameters.put("PROACTIVE_NODE_SOURCE_NAME",variables.get("PROACTIVE_NODE_SOURCE_NAME"))

// Add hidden variables
jsonData.Hidden_Parameters.put("AUTHENTICATION_ENDPOINT",variables.get("AUTHENTICATION_ENDPOINT"))
jsonData.Hidden_Parameters.put("MANAGEMENT_ENDPOINT",variables.get("MANAGEMENT_ENDPOINT"))
jsonData.Hidden_Parameters.put("RESOURCE_GROUP_NAME",variables.get("RESOURCE_GROUP_NAME"))
jsonData.Hidden_Parameters.put("DEPLOYMENT_NAME",variables.get("DEPLOYMENT_NAME"))
jsonData.Hidden_Parameters.put("HEAD_NODE_SCRIPT_NAME",variables.get("HEAD_NODE_SCRIPT_NAME"))
jsonData.Hidden_Parameters.put("HEAD_NODE_SCRIPT_URI",variables.get("HEAD_NODE_SCRIPT_URI"))
jsonData.Hidden_Parameters.put("WORKER_NODE_SCRIPT_NAME",variables.get("WORKER_NODE_SCRIPT_NAME"))
jsonData.Hidden_Parameters.put("WORKER_NODE_SCRIPT_URI",variables.get("WORKER_NODE_SCRIPT_URI"))
jsonData.Hidden_Parameters.put("NUMBER_OF_PROACTIVE_NODES",variables.get("NUMBER_OF_PROACTIVE_NODES"))
jsonData.Hidden_Parameters.put("SCALE_WORKFLOW",variables.get("SCALE_WORKFLOW"))
jsonData.Hidden_Parameters.put("DELETE_WORKFLOW",variables.get("DELETE_WORKFLOW"))
jsonData.Hidden_Parameters.put("SUBMIT_APPLICATION_WORKFLOW",variables.get("SUBMIT_APPLICATION_WORKFLOW"))

// Generate JSON file
def jsonFile = new File("Azure_HDInsight_Spark_Cluster_Parameters.json")
jsonFile.write(JsonOutput.prettyPrint(JsonOutput.toJson(jsonData)))

result = jsonFile.bytes
resultMetadata.put("file.name", "Azure_HDInsight_Spark_Cluster_Parameters.json")
resultMetadata.put("content.type", MediaType.APPLICATION_JSON.toString())
]]>
          </code>
        </script>
      </scriptExecutable>
      <post>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.scheduler.common.job.JobVariable

// Initiate workflow signals
def signals = ['Delete_Cluster','Submit_Application']

if (variables.get("AUTOSCALING").toLowerCase()=="false"){
   signals.add("Scale_Nodes") 
}

signalapi.readyForSignal("Delete_Cluster")

List <JobVariable> submitVariables = new java.util.ArrayList<JobVariable>()	
submitVariables.add(new JobVariable("APPLICATION_URL", "https://activeeon-spark-utils.s3.eu-west-3.amazonaws.com/spark-examples_2.11-2.4.6.4.1.4.8.jar", "PA:NOT_EMPTY_STRING", "URL of the Spark application to submit", "Spark application submission", false, false))	
submitVariables.add(new JobVariable("SUBMISSION_PARAMETERS", "--class org.apache.spark.examples.SparkPi --master yarn", "PA:NOT_EMPTY_STRING", "Parameters to be passed to the spark-submit command", "Spark application submission", false, false))	
submitVariables.add(new JobVariable("APPLICATION_ARGUMENTS", "", "", "Arguments to be passed to the Spark application", "Spark application submission", false, false))	
signalapi.readyForSignal("Submit_Application", submitVariables)

if (signals.contains("Scale_Nodes")){
    List <JobVariable> scaleVariables = new java.util.ArrayList<JobVariable>()
    scaleVariables.add(new JobVariable("SCALING_OPERATION", "Scale_UP", "PA:LIST(Scale_UP,Scale_DOWN)", "Type of the scaling operation (up or down)", "Scaling parameters", false, false))
    scaleVariables.add(new JobVariable("NUMBER_OF_WORKERS", "1" , "PA:Integer", "Number of workers concerned by the scale operation", "Scaling parameters", false, false))

    signalapi.readyForSignal("Scale_Nodes", scaleVariables)    
}

variables.put("SIGNALS",signals)

channelName = "HDInsight-Spark-Cluster-Action"+variables.get("PA_JOB_ID")
synchronizationapi.createChannel(channelName, false)
synchronizationapi.put(channelName, "SIGNAL_ACTION", "")
]]>
          </code>
        </script>
      </post>
      <metadata>
        <positionTop>
            1735.109375
        </positionTop>
        <positionLeft>
            820.625
        </positionLeft>
      </metadata>
    </task>
    <task name="manage_spark_cluster_with_signals" fork="true">
      <description>
        <![CDATA[ A template task that sends a ready notification for all the signals specified in the variable SIGNALS, then loops until one signal among those specified is received by the job. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/signal-wait.png"/>
        <info name="TASK.DOCUMENTATION" value="user/ProActiveUserGuide.html#_task_signal_api"/>
      </genericInformation>
      <depends>
        <task ref="get_input_parameters"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
signals = variables.get("SIGNALS")

receivedSignal = signalapi.waitForAny(signals.toSet())
println(receivedSignal)

channelName = "HDInsight-Spark-Cluster-Action"+variables.get("PA_JOB_ID")
action = synchronizationapi.get(channelName, "SIGNAL_ACTION")

if (receivedSignal.getName() == "Delete_Cluster" || action == "DELETE_CLUSTER") {
    signalapi.removeSignal("ready_Scale_Nodes")
    signalapi.removeSignal("ready_Submit_Application")
    channelName = "HDInsight-Spark-Cluster-Action"+variables.get("PA_JOB_ID")
	synchronizationapi.put(channelName, "SIGNAL_ACTION", "DELETE_CLUSTER")
    variables.put("SIGNAL_ACTION","DELETE_CLUSTER")    
    println("Deleting Spark cluster ...")
} else if (receivedSignal.getName() == "Scale_Nodes"){
    scalingOperation = receivedSignal.getUpdatedVariables().get("SCALING_OPERATION")
    numberOfWorkers = receivedSignal.getUpdatedVariables().get("NUMBER_OF_WORKERS")
    variables.put("SIGNAL_ACTION","SCALE_NODES")
    variables.put("SCALING_OPERATION",scalingOperation)
    variables.put("NUMBER_OF_WORKERS",numberOfWorkers)
    
    println(scalingOperation+ " the cluster nodes to "+numberOfWorkers)
} else if (receivedSignal.getName() == "Submit_Application"){
    applicationURL = receivedSignal.getUpdatedVariables().get("APPLICATION_URL")
    submissionParameters = receivedSignal.getUpdatedVariables().get("SUBMISSION_PARAMETERS")
    applicationArguments = receivedSignal.getUpdatedVariables().get("APPLICATION_ARGUMENTS")
    variables.put("SIGNAL_ACTION","SUBMIT_APPLICATION")
    variables.put("SPARK_APPLICATION_URL",applicationURL)
    variables.put("SUBMISSION_PARAMETERS",submissionParameters)
    variables.put("APPLICATION_ARGUMENTS",applicationArguments)
    
    println("Submitting Spark application: "+applicationURL)
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="start"></controlFlow>
      <metadata>
        <positionTop>
            1866.09375
        </positionTop>
        <positionLeft>
            952.875
        </positionLeft>
      </metadata>
    </task>
    <task name="submit_job_and_wait" fork="true">
      <description>
        <![CDATA[ Submit a workflow referenced in the ProActive Catalog (or accessible by url) and wait for its termination by checking every minute if the job is terminated. ]]>
      </description>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_submit_job_and_wait.png"/>
        <info name="task.documentation" value="user/ProActiveUserGuide.html#_chaining_workflows_submit_a_workflow_from_another_workflow"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def action = variables.get("SIGNAL_ACTION")
def called_workflow = null
def workflow_variables = new HashMap<>()

if (action?.trim()) {
    	
        workflow_variables.put("SUBSCRIPTION_ID",variables.get("SUBSCRIPTION_ID"))	
        workflow_variables.put("TENANT_ID",variables.get("TENANT_ID"))	
        workflow_variables.put("APP_ID",variables.get("APP_ID"))	
        workflow_variables.put("PASSWORD",variables.get("PASSWORD"))	
        workflow_variables.put("AUTHENTICATION_ENDPOINT",variables.get("AUTHENTICATION_ENDPOINT"))	
        workflow_variables.put("MANAGEMENT_ENDPOINT",variables.get("MANAGEMENT_ENDPOINT"))	
        workflow_variables.put("RESOURCE_GROUP_NAME",variables.get("RESOURCE_GROUP_NAME"))	
        workflow_variables.put("CLUSTER_NAME",variables.get("CLUSTER_NAME"))	
        if (action == "SCALE_NODES"){	
            called_workflow = variables.get("SCALE_WORKFLOW")       	
            workflow_variables.put("SCALING_OPERATION",variables.get("SCALING_OPERATION"))	
            workflow_variables.put("NUMBER_OF_WORKERS",variables.get("NUMBER_OF_WORKERS"))	
        } else if (action == "DELETE_CLUSTER") {	
            called_workflow = variables.get("DELETE_WORKFLOW")	
            workflow_variables.put("DEPLOYMENT_NAME",variables.get("DEPLOYMENT_NAME"))	
            workflow_variables.put("PROACTIVE_NODE_SOURCE_NAME", variables.get("PROACTIVE_NODE_SOURCE_NAME"))	
        }
    
    // connect to the scheduler
    schedulerapi.connect()
    def jobid
    if( !variables.get("jobSubmitted") ){

        println "Submitting workflow " + called_workflow

        // submitting the job
        def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]
        jobid = schedulerapi.submitFromCatalog(variables.get("PA_CATALOG_REST_URL"), called_workflow, workflow_variables, generic_infos_map)
        variables.put("jobSubmitted", true)

        println "Job submitted with job id " + jobid
        variables.put("jobID", jobid)
    }

    if( jobid == null ){
        jobid = variables.get("jobID")
    }
    isFinished = schedulerapi.isJobFinished(jobid)

    variables.put("isFinished", isFinished)

    result = jobid
} else {
     variables.put("isFinished", true)
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="submit_job_and_wait">
          <script>
            <code language="javascript">
              <![CDATA[
// You can use a Cron Expression here
              // examples http://www.sauronsoftware.it/projects/cron4j/manual.php#p02
if(!variables.get("isFinished")){
	loop = '* * * * *';
}else{
    variables.put("jobSubmitted", false);
	loop = false;
}
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            2243.109375
        </positionTop>
        <positionLeft>
            645.125
        </positionLeft>
      </metadata>
    </task>
    <task name="end_management_operation" fork="true">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png"/>
      </genericInformation>
      <depends>
        <task ref="Continuation"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.scheduler.common.job.JobVariable

if (variables.get("SIGNAL_ACTION") == "SCALE_NODES"){
    signalapi.removeSignal("Scale_Nodes")
    
    List <JobVariable> scaleVariables = new java.util.ArrayList<JobVariable>()
    
    scaleVariables.add(new JobVariable("SCALING_OPERATION", "Scale_UP", "PA:LIST(Scale_UP,Scale_DOWN)", "Type of the scaling operation (up or down)", "Scaling parameters", false, false))
    scaleVariables.add(new JobVariable("NUMBER_OF_WORKERS", "1" , "PA:Integer", "Number of workers concerned by the scale operation", "Scaling parameters", false, false))
    
    signalapi.readyForSignal("Scale_Nodes", scaleVariables)
	variables.put("SIGNAL_ACTION","")

} else if (variables.get("SIGNAL_ACTION") == "SUBMIT_APPLICATION"){	
    signalapi.removeSignal("Submit_Application")	
    	
    List <JobVariable> submitVariables = new java.util.ArrayList<JobVariable>()	
	submitVariables.add(new JobVariable("APPLICATION_URL", "https://activeeon-spark-utils.s3.eu-west-3.amazonaws.com/spark-examples_2.11-2.4.6.4.1.4.8.jar", "PA:NOT_EMPTY_STRING", "URL of the 	Spark application to submit", "Spark application submission", false, false))	
	submitVariables.add(new JobVariable("SUBMISSION_PARAMETERS", "--class org.apache.spark.examples.SparkPi --master yarn", "PA:NOT_EMPTY_STRING", "Parameters to be passed to the spark-submit 	command", "Spark application submission", false, false))	
	submitVariables.add(new JobVariable("APPLICATION_ARGUMENTS", "", "", "Arguments to be passed to the Spark application", "Spark application submission", false, false))	
    	
    signalapi.readyForSignal("Submit_Application", submitVariables)  
    variables.put("SIGNAL_ACTION","")
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow  block="end">
        <loop target="manage_spark_cluster_with_signals">
          <script>
            <code language="groovy">
              <![CDATA[
signalAction=variables.get("SIGNAL_ACTION")

loop = signalAction=="DELETE_CLUSTER" ? false : true

variables.put("SIGNAL_ACTION","")
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
      <metadata>
        <positionTop>
            2369.09375
        </positionTop>
        <positionLeft>
            1018.375
        </positionLeft>
      </metadata>
    </task>
    <task name="Submit_Job_No_Wait" fork="true">
      <description>
        <![CDATA[ Submit a workflow referenced in the ProActive Catalog (or accessible by url) without waiting for its termination ]]>
      </description>
      <variables>
        <variable name="called_workflow" value="basic-examples/Native_Task" inherited="false" model="PA:CATALOG_OBJECT" description="Workflow to submit from the ProActive Catalog"  advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_submit_job_no_wait.png"/>
        <info name="task.documentation" value="user/ProActiveUserGuide.html#_chaining_workflows_submit_a_workflow_from_another_workflow"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def action = variables.get("SIGNAL_ACTION")
if (action?.trim()) { 	
    	
    called_workflow = variables.get("SUBMIT_APPLICATION_WORKFLOW")	
	workflow_variables = new HashMap<>()
    workflow_variables.put("SPARK_APPLICATION_URL",variables.get("SPARK_APPLICATION_URL"))
    workflow_variables.put("SUBMISSION_PARAMETERS", variables.get("SUBMISSION_PARAMETERS"))	
    workflow_variables.put("APPLICATION_ARGUMENTS", variables.get("APPLICATION_ARGUMENTS"))	
    workflow_variables.put("SPARK_HEAD_NODE_ACCESS_TOKEN",variables.get("CLUSTER_NAME")+"-hn")	
    
    // connect to the scheduler
    schedulerapi.connect()   

    println "Submitting workflow " + called_workflow

    // submitting the job
    def generic_infos_map = ["PARENT_JOB_ID" : variables.get("PA_JOB_ID")]
    jobid = schedulerapi.submitFromCatalog(variables.get("PA_CATALOG_REST_URL"), called_workflow, workflow_variables, generic_infos_map)

    println "Job submitted with job id " + jobid

    result = jobid
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            2243.109375
        </positionTop>
        <positionLeft>
            815.125
        </positionLeft>
      </metadata>
    </task>
    <task name="Condition" fork="true">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
        <info name="task.documentation" value="user/ProActiveUserGuide.html#_branch"/>
      </genericInformation>
      <depends>
        <task ref="manage_spark_cluster_with_signals"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <if target="submit_job_and_wait"
        else="Submit_Job_No_Wait"
        continuation="Continuation">
          <script>
            <code language="groovy">
              <![CDATA[
action = variables.get("SIGNAL_ACTION")

if ( action == "SCALE_NODES" || action == "DELETE_CLUSTER") { 
    branch = "if"
} else  if ( action == "SUBMIT_APPLICATION" ) {
    branch = "else"
}
]]>
            </code>
          </script>
        </if>
      </controlFlow>
      <metadata>
        <positionTop>
            2111.109375
        </positionTop>
        <positionLeft>
            822.375
        </positionLeft>
      </metadata>
    </task>
    <task name="Continuation" fork="true">
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png"/>
      </genericInformation>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[

]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            2243.109375
        </positionTop>
        <positionLeft>
            966.625
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2736px;
            height:3260px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-714.09375px;left:-333.375px"><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1604" style="top: 1231.11px; left: 820.625px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a PUT request to Azure HDInsight REST API in order to deploy a Spark cluster, which name is given as input.
This task requires the Azure authentication token provided the task &quot;azure_authenticate&quot;."><img src="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" width="20px">&nbsp;<span class="name">hdinsight_deploy_spark</span></a></div><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_1607" style="top: 719.096px; left: 820.625px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a POST request to Azure REST API in order to authenticate to Azure and acquire an authentication token."><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png" width="20px">&nbsp;<span class="name">azure_authenticate</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1610" style="top: 1359.11px; left: 820.625px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a Get request to Azure HDInsight REST API in order to  check the status of the deployment, which name is given as input.
This task requires the Azure authentication token provided the task &quot;azure_authenticate&quot;."><img src="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" width="20px">&nbsp;<span class="name">hdinsight_check_deployment</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1613" style="top: 1103.11px; left: 820.625px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a PUT request to Azure HDInsight REST API in order to create a Resource Group, which name is given as input.
This task requires the Azure authentication token provided the task &quot;azure_authenticate&quot;."><img src="/automation-dashboard/styles/patterns/img/wf-icons/hdinsight.png" width="20px">&nbsp;<span class="name">azure-create_resource_group</span></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1616" style="top: 1609.11px; left: 820.625px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task that performs iteratively a GET request to Azure HDInsight REST API, in order to get information about the cluster deployment status. If the deployment status is &quot;Succeeded&quot;. The cluster Web UI, SSH host and SSH port are extracted and provided as job results, then the loop stops. 
This task requires the Azure authentication token provided the task &quot;azure_authenticate&quot;."><img src="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" width="20px">&nbsp;<span class="name">hdinsight_get_spark_cluster_info</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1619" style="top: 847.111px; left: 820.625px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest POST request using form data.

This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication

It accepts the following parameters:
ENDPOINT: base url of the request (inherited from job variable)
USER: basic auth user (if required, inherited from job variable)
PASSWORD: basic auth password (if required, inherited from job variable)
PATH: path of the request (relative to the base url)
SSL_DISABLE_CHECK: to disable ssl certificate check
DEBUG: to print the full request and response content in the task output
RESPONSE_FORMAT: format of the response, either
  - string : plain text
  - json: a json response which will be parsed using RESPONSE_PATH
  - xml: a xml response which will be parsed using RESPONSE_PATH
  - html: an html response which will be parsed using RESPONSE_PATH
  - contentView: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)
RESPONSE_PATH: which data to extract in the response if json, xml or html format is selected. It uses the GPath notation (https://groovy-lang.org/processing-xml.html)

Header, form or query parameters can also be added dynamically, by adding variables in the format:
HEADER_<header_name>
PARAM_<param_name>
QUERY_PARAM_<param_name>"><img src="/automation-dashboard/styles/patterns/img/wf-icons/api-rest.png" width="20px">&nbsp;<span class="name">prepare_pa_node_params</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1622" style="top: 975.111px; left: 821.625px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">prepare_arm_template_params</span></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1625" style="top: 1889.11px; left: 338.375px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a POST request to Azure REST API in order to authenticate to Azure and acquire an authentication token."><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png" width="20px">&nbsp;<span class="name">azure_generate_new_access_token_2</span></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1628" style="top: 2376.11px; left: 377.375px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task that performs iteratively a GET request to Azure HDInsight REST API, in order to get information about the cluster deployment status. If the deployment status is &quot;Succeeded&quot;. The cluster Web UI, SSH host and SSH port are extracted and provided as job results, then the loop stops. 
This task requires the Azure authentication token provided the task &quot;azure_authenticate&quot;."><img src="/automation-dashboard/styles/patterns/img/wf-icons/spark.png" width="20px">&nbsp;<span class="name">check_spark_cluster_state</span></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1631" style="top: 1485.11px; left: 820.625px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a POST request to Azure REST API in order to authenticate to Azure and acquire an authentication token."><img src="/automation-dashboard/styles/patterns/img/wf-icons/azure_icon.png" width="20px">&nbsp;<span class="name">azure_generate_new_access_token_1</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1634" style="top: 1735.11px; left: 820.625px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="The simplest task, ran by a Groovy engine."><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">get_input_parameters</span></a></div><div class="task block-start ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1637" style="top: 1866.1px; left: 952.875px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A template task that sends a ready notification for all the signals specified in the variable SIGNALS, then loops until one signal among those specified is received by the job."><img src="/automation-dashboard/styles/patterns/img/wf-icons/signal-wait.png" width="20px">&nbsp;<span class="name">manage_spark_cluster_with_signals</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1640" style="top: 2243.11px; left: 645.125px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Submit a workflow referenced in the ProActive Catalog (or accessible by url) and wait for its termination by checking every minute if the job is terminated."><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_submit_job_and_wait.png" width="20px">&nbsp;<span class="name">submit_job_and_wait</span></a></div><div class="task block-end ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1643" style="top: 2369.1px; left: 1018.38px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_loop.png" width="20px">&nbsp;<span class="name">end_management_operation</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_ active-task" id="jsPlumb_1_1646" style="top: 2243.11px; left: 815.125px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="Submit a workflow referenced in the ProActive Catalog (or accessible by url) without waiting for its termination"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_submit_job_no_wait.png" width="20px">&nbsp;<span class="name">Submit_Job_No_Wait</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1649" style="top: 2111.11px; left: 822.375px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Condition</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_1652" style="top: 2243.11px; left: 966.625px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/automation-dashboard/styles/patterns/img/wf-icons/controls_if.png" width="20px">&nbsp;<span class="name">Continuation</span></a></div><svg style="position:absolute;left:880px;top:1142.5px" width="34.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 23.5 50 13.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.6791840000000007,66.303232 L9.270911242155975,48.16224486622712 L1.1898804291624296,52.60036845615213 L-4.431952301691888,45.293180437064684 L-1.6791840000000007,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.6791840000000007,66.303232 L9.270911242155975,48.16224486622712 L1.1898804291624296,52.60036845615213 L-4.431952301691888,45.293180437064684 L-1.6791840000000007,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:880px;top:1270.5px" width="33" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 12 88 C 22 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.807488,66.303232 L16.95868678791453,45.34923605175552 L11.199122872356591,52.54836263090405 L3.2038174188185877,47.95760117939893 L13.807488,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.807488,66.303232 L16.95868678791453,45.34923605175552 L11.199122872356591,52.54836263090405 L3.2038174188185877,47.95760117939893 L13.807488,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:893.5px;top:1014.5px" width="26" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 88 C -10 38 15 50 5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.40953125,66.78168750000002 L6.41844882380946,47.518594087559144 L-1.1087489198275216,52.84224829573104 L-7.520990380459522,46.21781175738666 L-2.40953125,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.40953125,66.78168750000002 L6.41844882380946,47.518594087559144 L-1.1087489198275216,52.84224829573104 L-7.520990380459522,46.21781175738666 L-2.40953125,66.78168750000002" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:901px;top:1524.5px" width="33.5" height="85" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 84 C -10 34 22.5 50 12.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.8008593750000004,63.10631250000001 L9.004740557805773,44.87888783022979 L0.9592305215437311,49.381083767370555 L-4.720488174823684,42.11879793368606 L-1.8008593750000004,63.10631250000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-1.8008593750000004,63.10631250000001 L9.004740557805773,44.87888783022979 L0.9592305215437311,49.381083767370555 L-4.720488174823684,42.11879793368606 L-1.8008593750000004,63.10631250000001" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:991.5px;top:1524.5px" width="46" height="85" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 25 0 C 35 50 -10 34 0 84 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M25.69552,21.354623999999994 L25.11975649746595,42.536420344718955 L20.713270952133648,34.438094274550046 L12.036286222915898,37.55417129685261 L25.69552,21.354623999999994" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M25.69552,21.354623999999994 L25.11975649746595,42.536420344718955 L20.713270952133648,34.438094274550046 L12.036286222915898,37.55417129685261 L25.69552,21.354623999999994" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_1672" style="position: absolute; transform: translate(-50%, -50%); left: 1014px; top: 1566.5px;">loop</div><svg style="position:absolute;left:870px;top:758.5px" width="37.5" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 16.5 88 C 26.5 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M17.922576,66.303232 L19.885371730082234,45.204714684274435 L14.541569557866197,52.71762213373894 L6.29976186382118,48.585721126408245 L17.922576,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M17.922576,66.303232 L19.885371730082234,45.204714684274435 L14.541569557866197,52.71762213373894 L6.29976186382118,48.585721126408245 L17.922576,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:886.5px;top:886.5px" width="33" height="89" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 12 88 C 22 38 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.807488,66.303232 L16.95868678791453,45.34923605175552 L11.199122872356591,52.54836263090405 L3.2038174188185877,47.95760117939893 L13.807488,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.807488,66.303232 L16.95868678791453,45.34923605175552 L11.199122872356591,52.54836263090405 L3.2038174188185877,47.95760117939893 L13.807488,66.303232" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:431px;top:1774.5px" width="466.5" height="115" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 114 C -10 64 455.5 50 445.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M82.56124800000002,78.886656 L103.5143900110661,82.04352784790547 L96.31682306501835,76.28201502077741 L100.90974903184349,68.28795278288712 L82.56124800000002,78.886656" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M82.56124800000002,78.886656 L103.5143900110661,82.04352784790547 L96.31682306501835,76.28201502077741 L100.90974903184349,68.28795278288712 L82.56124800000002,78.886656" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:431px;top:1928.5px" width="33.5" height="448" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 12.5 447 C 22.5 397 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M12.76992,348.185088 L18.893625733143047,327.8996196027982 L12.161148735755637,334.1983300644443 L4.9068677975873465,328.50839086704264 L12.76992,348.185088" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M12.76992,348.185088 L18.893625733143047,327.8996196027982 L12.161148735755637,334.1983300644443 L4.9068677975873465,328.50839086704264 L12.76992,348.185088" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:520.5px;top:1928.5px" width="35" height="448" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 14 0 C 24 50 -10 397 0 447 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.982976,98.81491200000002 L20.034073236339033,119.12215756005493 L13.324172350310796,112.79940261464724 L6.0495826216918145,118.46335391036574 L13.982976,98.81491200000002" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M13.982976,98.81491200000002 L20.034073236339033,119.12215756005493 L13.324172350310796,112.79940261464724 L6.0495826216918145,118.46335391036574 L13.982976,98.81491200000002" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_1690" style="position: absolute; transform: translate(-50%, -50%); left: 537.5px; top: 2152px;">loop</div><svg style="position:absolute;left:892px;top:1398.5px" width="42.5" height="87" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 21.5 86 C 31.5 36 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M22.494896,64.474304 L23.005082922142627,43.29082672868133 L18.189487460157476,51.15276289902182 L9.683541821164445,47.59623526852386 L22.494896,64.474304" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M22.494896,64.474304 L23.005082922142627,43.29082672868133 L18.189487460157476,51.15276289902182 L9.683541821164445,47.59623526852386 L22.494896,64.474304" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:876.5px;top:1648.5px" width="45.5" height="87" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 86 C -10 36 34.5 50 24.5 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-0.7382880000000014,64.474304 L12.676758321278143,48.071970867242285 L4.047423186965754,51.31767189163158 L-0.4798737870902743,43.28625968027653 L-0.7382880000000014,64.474304" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-0.7382880000000014,64.474304 L12.676758321278143,48.071970867242285 L4.047423186965754,51.31767189163158 L-0.4798737870902743,43.28625968027653 L-0.7382880000000014,64.474304" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:876.5px;top:1774.5px" width="185" height="92" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 164 91 C 174 41 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M141.1875,62.71875 L125.14418512777297,48.876349633351914 L128.16147906424257,57.588177070861434 L120.0136121986344,61.90237056910933 L141.1875,62.71875" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M141.1875,62.71875 L125.14418512777297,48.876349633351914 L128.16147906424257,57.588177070861434 L120.0136121986344,61.90237056910933 L141.1875,62.71875" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:754.0266769263776px;top:2192.5px" width="20.473323073622403" height="141" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 40 C -10 90 -10 -50 0 0 " transform="translate(19.973323073622403,50.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.4569999999999963,49.16001999999999 L-8.714346841294152,28.91537600442066 L-10.77778447022079,37.90104376767174 L-19.973323073622403,37.23616047464146 L-2.4569999999999963,49.16001999999999" class="" stroke="#316b31" fill="#316b31" transform="translate(19.973323073622403,50.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_1705" style="position: absolute; transform: translate(-50%, -50%); left: 766px; top: 2262.5px;">loop</div><svg style="position:absolute;left:1006.5px;top:2282.5px" width="103.5" height="87" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 82.5 86 C 92.5 36 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M75.1608,60.929855999999994 L63.55130534276654,43.20361461036333 L64.05204685922102,52.40955062652697 L55.03099996929352,54.312367751142304 L75.1608,60.929855999999994" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M75.1608,60.929855999999994 L63.55130534276654,43.20361461036333 L64.05204685922102,52.40955062652697 L55.03099996929352,54.312367751142304 L75.1608,60.929855999999994" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:1138.5px;top:1905.5px" width="53" height="464" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 0 C -10 50 42 413 32 463 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#316b31" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M3.460352000000001,101.87564800000003 L12.16376990084302,121.19534046244067 L4.67110289291061,115.82319553622719 L-1.7837776353841353,122.40609135535126 L3.460352000000001,101.87564800000003" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M3.460352000000001,101.87564800000003 L12.16376990084302,121.19534046244067 L4.67110289291061,115.82319553622719 L-1.7837776353841353,122.40609135535126 L3.460352000000001,101.87564800000003" class="" stroke="#316b31" fill="#316b31" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_1714" style="position: absolute; transform: translate(-50%, -50%); left: 1164.5px; top: 2137px;">loop</div><svg style="position:absolute;left:861.5px;top:1905.5px" width="200" height="206" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 0 205 C -10 155 189 50 179 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M28.302251750000007,155.70993375 L47.54157508676147,146.83026948024602 L38.361947598234565,145.9732752142901 L37.804916551051576,136.77057363201143 L28.302251750000007,155.70993375" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M28.302251750000007,155.70993375 L47.54157508676147,146.83026948024602 L38.361947598234565,145.9732752142901 L37.804916551051576,136.77057363201143 L28.302251750000007,155.70993375" class="" stroke="#666" fill="#666" transform="translate(10.5,0.5)"></path></svg><svg style="position:absolute;left:634.5px;top:2150.5px" width="198" height="93" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 92 C -10 42 187 50 177 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M25.86583575,63.14091049999999 L47.05306976666927,62.82292508698164 L39.00896036958039,58.31822709403401 L42.23038636070329,49.67980046740125 L25.86583575,63.14091049999999" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M25.86583575,63.14091049999999 L47.05306976666927,62.82292508698164 L39.00896036958039,58.31822709403401 L42.23038636070329,49.67980046740125 L25.86583575,63.14091049999999" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_1723" style="position: absolute; transform: translate(-50%, -50%); left: 733px; top: 2196.5px;">if</div><svg style="position:absolute;left:804.5px;top:2150.5px" width="28" height="93" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 92 C -10 42 17 50 7 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.2195652500000005,69.4706815 L7.148241046157215,50.46425613388559 L-0.5261218712810516,55.57347856116828 L-6.748961892674504,48.77081275516664 L-2.2195652500000005,69.4706815" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-2.2195652500000005,69.4706815 L7.148241046157215,50.46425613388559 L-0.5261218712810516,55.57347856116828 L-6.748961892674504,48.77081275516664 L-2.2195652500000005,69.4706815" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_1727" style="position: absolute; transform: translate(-50%, -50%); left: 818px; top: 2196.5px;">else</div><svg style="position:absolute;left:811.5px;top:2150.5px" width="166" height="93" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector"><path d="M 145 92 C 155 42 -10 50 0 0 " transform="translate(10.5,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#00f" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M125.98401875,63.9884395 L110.68963817723183,49.32276791990073 L113.24534976286233,58.1810035394287 L104.88220221666053,62.06143690703841 L125.98401875,63.9884395" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M125.98401875,63.9884395 L110.68963817723183,49.32276791990073 L113.24534976286233,58.1810035394287 L104.88220221666053,62.06143690703841 L125.98401875,63.9884395" class="" stroke="#00f" fill="#00f" transform="translate(10.5,0.5)"></path></svg><div class="_jsPlumb_overlay l1 component label" id="jsPlumb_1_1731" style="position: absolute; transform: translate(-50%, -50%); left: 894px; top: 2196.5px;">continuation</div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 880.5px; top: 1261px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 880.5px; top: 1221px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 870.5px; top: 749px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 892.5px; top: 1389px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 892.5px; top: 1349px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 894px; top: 1133px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 894px; top: 1093px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 901.5px; top: 1639px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 901.5px; top: 1599px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 992px; top: 1599px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 887px; top: 877px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 887px; top: 837px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 899px; top: 1005px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 899px; top: 965px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 431.5px; top: 1919px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 431.5px; top: 1879px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 535px; top: 1919px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 444px; top: 2406px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 444px; top: 2366px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 521px; top: 2366px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 914px; top: 1515px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 1017px; top: 1515px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 914px; top: 1475px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 877px; top: 1765px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 877px; top: 1725px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1041px; top: 1896px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1041px; top: 1856px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 1139px; top: 1896px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 699.5px; top: 2273px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 764px; top: 2233px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint loop-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 764px; top: 2273px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 635px; top: 2233px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 1089.5px; top: 2399px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1089.5px; top: 2359px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint loop-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 1171px; top: 2359px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#316b31" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 870.5px; top: 2273px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 805px; top: 2233px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 862px; top: 2141px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 862px; top: 2101px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint if-source-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 812px; top: 2141px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 1007px; top: 2273px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint if-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected _jsPlumb_endpoint_full" style="position: absolute; height: 20px; width: 20px; left: 957px; top: 2233px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#00f" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>
