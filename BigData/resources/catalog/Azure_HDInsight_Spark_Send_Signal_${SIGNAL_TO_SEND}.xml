<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.13" xsi:schemaLocation="urn:proactive:jobdescriptor:3.13 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.13/schedulerjob.xsd"  name="Azure_HDInsight_Spark_Send_Signal_${SIGNAL_TO_SEND}" projectName="08. Azure HDInsight Spark Workflows" priority="normal" onTaskError="cancelJob"  maxNumberOfExecution="1"  >
  <variables>
    <variable name="IDENTIFY_JOB" value="Use_Job_ID" model="PA:LIST(Use_Job_ID, Use_Workflow_Name_and_Variable)" description="How to identifiy the job to which the signal will be sent." group="Job Identification Parameters" advanced="false" hidden="false"/>
    <variable name="JOB_ID" value="1"  description="ID of the job to which the signal will be sent." group="Job Identification Parameters" advanced="false" hidden="false"/>
    <variable name="WORKFLOW_NAME" value="big-data/Azure_HDInsight_Create_Spark_Cluster"  description="Name of the workflow of the job to which the signal will be sent." group="Job Identification Parameters" advanced="false" hidden="false"/>
    <variable name="WORKFLOW_VARIABLE_KEY" value="CLUSTER_NAME"  description="Name of a variable of the job to which the signal will be sent." group="Job Identification Parameters" advanced="false" hidden="false"/>
    <variable name="WORKFLOW_VARIABLE_VALUE" value="activeeon-spark-cluster-xx"  description="Value of a variable of the job to which the signal will be sent." group="Job Identification Parameters" advanced="false" hidden="false"/>
    <variable name="JOB_IDENTIFICATION_HANDLER" value="" model="PA:SPEL(variables[&#39;IDENTIFY_JOB&#39;] == &#39;Use_Workflow_Name_and_Variable&#39; ?  hideVar(&#39;JOB_ID&#39;) &amp;&amp; showVar(&#39;WORKFLOW_NAME&#39;) &amp;&amp; showVar(&#39;WORKFLOW_VARIABLE_KEY&#39;) &amp;&amp; showVar(&#39;WORKFLOW_VARIABLE_VALUE&#39;) &amp;&amp; (models[&#39;WORKFLOW_NAME&#39;] = &#39;PA:CATALOG_OBJECT(Workflow/standard)&#39;) instanceof T(String) :  showVar(&#39;JOB_ID&#39;) &amp;&amp; hideVar(&#39;WORKFLOW_NAME&#39;) &amp;&amp; hideVar(&#39;WORKFLOW_VARIABLE_KEY&#39;) &amp;&amp; hideVar(&#39;WORKFLOW_VARIABLE_VALUE&#39;) &amp;&amp; (models[&#39;JOB_ID&#39;] = &#39;PA:INTEGER&#39;) instanceof T(String))"   advanced="false" hidden="true"/>
    <variable name="SIGNAL_TO_SEND" value="Delete_Cluster" model="PA:LIST(Delete_Cluster,Scale_Nodes)" description="Signal to send to the considered job." group="Signal Parameters" advanced="false" hidden="false"/>
    <variable name="SCALING_OPERATION" value="Scale_UP" model="PA:LIST(Scale_UP,Scale_DOWN)" description="Type of the scaling operation (up or down)." group="Signal Parameters" advanced="false" hidden="false"/>
    <variable name="NUMBER_OF_WORKERS" value="1" model="PA:INTEGER" description="Number of workers concerned by the scale operation" group="Signal Parameters" advanced="false" hidden="false"/>
    <variable name="SIGNAL_HANDLER" value="" model="PA:SPEL(variables[&#39;SIGNAL_TO_SEND&#39;] == &#39;Scale_Nodes&#39; ?  showVar(&#39;SCALING_OPERATION&#39;) &amp;&amp; showVar(&#39;NUMBER_OF_WORKERS&#39;) : hideVar(&#39;SCALING_OPERATION&#39;) &amp;&amp; hideVar(&#39;NUMBER_OF_WORKERS&#39;) )"  group="Signal Parameters" advanced="false" hidden="true"/>
  </variables>
  <description>
    <![CDATA[ A workflow that sends a signal to a running job that manages a HDInsight Spark cluster. The job is determined based on the job id, or the name of the associated workflow and the value of a key variable. Use this workflow to scale or delete a given HDInsight cluster. ]]>
  </description>
  <genericInformation>
    <info name="bucketName" value="big-data"/>
    <info name="workflow.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/spark.png"/>
    <info name="group" value="public-objects"/>
  </genericInformation>
  <taskFlow>
    <task name="find_job" fork="true">
      <description>
        <![CDATA[ A task that finds a running job (managing an HDInsight Spark cluster) based on the associated workflow name and the value of a key variable. ]]>
      </description>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.scheduler.common.job.*
import org.ow2.proactive.scheduler.common.task.*
import org.ow2.proactive.scripting.*

import org.ow2.proactive.scheduler.common.JobFilterCriteria
import org.ow2.proactive.scheduler.common.JobSortParameter
import org.ow2.proactive.db.SortParameter
import org.ow2.proactive.db.SortOrder

schedulerapi.connect()

if (variables.get("IDENTIFY_JOB")=="Use_Workflow_Name_and_Variable"){
    
    // connect to the scheduler
	schedulerapi.connect()
    
    def jobName = variables.get("WORKFLOW_NAME")
    jobName=jobName.substring(jobName.lastIndexOf("/")+1)
    def varName=variables.get("WORKFLOW_VARIABLE_KEY")
    def varValue=variables.get("WORKFLOW_VARIABLE_VALUE")

    println "Looking for the job having as workflow name '${jobName}' and the variable ${varName}=${varValue}"

    def filterCriteria = new JobFilterCriteria(false, false, true, false, false, jobName, null, null, null) 
    def sortParam = new SortParameter(JobSortParameter.ID, SortOrder.ASC) 
    def sortParameters = [sortParam]

    jobs = schedulerapi.getJobs(0, 1000000000, filterCriteria, sortParameters)        
    list = jobs.getList() as Set    
    
    if (varName?.trim() && varValue?.trim()){
        list = list.findAll { it.getVariables().containsKey(varName) && it.getVariables()[varName]==varValue }
    }

    if (list.size() == 0) {
        throw new RuntimeException("None of the running jobs correspond to the search criteria.")
    } else if (list.size() > 1) {
        throw new RuntimeException("Many running jobs correspond to the search criteria.")
    }
    
    variables.put("JOB_ID",list[0].getJobId())
}

schedulerapi.disconnect()

jobid = variables.get("JOB_ID")
println "The signal will be sent to the job: $jobid"  

variables.put("REQ_PATH", "/scheduler/job/${jobid}/signals")

reqBody ="{}"
if (variables.get("SIGNAL_TO_SEND")=="Scale_Nodes"){
    scaleOp = variables.get("SCALING_OPERATION")
    workers = variables.get("NUMBER_OF_WORKERS")
    reqBody ="{\"SCALING_OPERATION\":\"$scaleOp\", \"NUMBER_OF_WORKERS\":$workers}"
}

variables.put("REQ_BODY", reqBody)
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            203.8636245727539
        </positionTop>
        <positionLeft>
            661.3778686523438
        </positionLeft>
      </metadata>
    </task>
    <task name="send_signal" fork="true">
      <description>
        <![CDATA[ A task performing a rest POST request to ProActive Scheduler in order to send a signal to a given job. ]]>
      </description>
      <variables>
        <variable name="ENDPOINT" value="${PA_SCHEDULER_REST_URL}" inherited="false"  description="Base URL of the server or service that will be queried." group="Http Connection" advanced="false" hidden="false"/>
        <variable name="SSL_DISABLE_CHECK" value="true" inherited="false" model="PA:BOOLEAN" description="If true, disable SSL certificate verification" group="Http Connection" advanced="true" hidden="false"/>
        <variable name="DEBUG" value="true" inherited="false" model="PA:BOOLEAN" description="If true, print the full request and response content in the task output." group="Http Connection" advanced="true" hidden="false"/>
        <variable name="PATH" value="${REQ_PATH}" inherited="false"  description="Path of the request (relative to the base url)" group="Http Request" advanced="false" hidden="false"/>
        <variable name="CONTENT_TYPE" value="application/json;charset = UTF-8" inherited="false"  description="Content-Type of the request, should be &quot;application/json&quot; with eventual encoding." group="Http Request" advanced="true" hidden="false"/>
        <variable name="REQUEST_BODY" value="${REQ_BODY}" inherited="false"  description="A JSON parameter containing the request body." group="Http Request" advanced="false" hidden="false"/>
        <variable name="RESPONSE_FORMAT" value="json" inherited="false" model="PA:LIST(string,json,xml,html,contentView)" description="Format of the response, either: &lt;ul style=&quot;color:red;&quot;&gt;   &lt;li&gt;&lt;b&gt;string&lt;/b&gt;: plain text&lt;/li&gt;   &lt;li&gt;&lt;b&gt;json&lt;/b&gt;: a json response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;xml&lt;/b&gt;: a xml response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;html&lt;/b&gt;&lt;/li&gt;: an html response which will be parsed using &lt;i&gt;RESPONSE_PATH&lt;/i&gt;&lt;/li&gt;   &lt;li&gt;&lt;b&gt;contentView&lt;/b&gt;: the response will be stored in raw format, and the response content-type will be used for previewing (suitable for binary formats such as files, images, pdf documents, etc)&lt;/li&gt; &lt;/ul&gt;" group="Http Response" advanced="false" hidden="false"/>
        <variable name="RESPONSE_PATH" value="." inherited="false"  description="Which data to extract in the response if json, xml or html format is selected. It uses the &lt;a href=&quot;https://groovy-lang.org/processing-xml.html&quot; target=&quot;_blank&quot;&gt;GPath notation&lt;/a&gt;" group="Http Response" advanced="false" hidden="false"/>
        <variable name="HEADERS" value="{ }" inherited="false" model="PA:JSON" description="Additional headers of the request, provided as a JSON key/value structure. Headers can also be specified by adding &lt;i&gt;HEADER_headername&lt;/i&gt; variables." group="Http Request" advanced="false" hidden="false"/>
        <variable name="QUERY_PARAMETERS" value="{ &quot;signal&quot;: &quot;${SIGNAL_TO_SEND}&quot; }" inherited="false" model="PA:JSON" description="Query parameters of the request, provided as a JSON key/value structure. Parameters can also be specified by adding &lt;i&gt;QUERY_PARAM_paramname&lt;/i&gt; variables." group="Http Request" advanced="false" hidden="false"/>
      </variables>
      <genericInformation>
        <info name="task.icon" value="/automation-dashboard/styles/patterns/img/wf-icons/api-rest.png"/>
      </genericInformation>
      <depends>
        <task ref="find_job"/>
      </depends>
      <inputFiles>
        <files  includes="rest-assured-fat-3.3.0.jar" accessMode="cacheFromGlobalSpace"/>
      </inputFiles>
      <forkEnvironment >
        <envScript>
          <script>
            <code language="groovy">
              <![CDATA[
def jarFile = new File(cachespace, "rest-assured-fat-3.3.0.jar")

forkEnvironment.addAdditionalClasspath(jarFile.getAbsolutePath())
]]>
            </code>
          </script>
        </envScript>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// See https://github.com/rest-assured/rest-assured/wiki/Usage for documentation

import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static io.restassured.config.EncoderConfig.*;
import static org.hamcrest.Matchers.*;
import org.apache.commons.httpclient.HttpStatus;
import io.restassured.http.ContentType;
import io.restassured.RestAssured;
import com.google.common.base.Strings;
import groovy.json.JsonSlurper;

debug = Boolean.parseBoolean(variables.get("DEBUG"))

restCall = given().contentType(variables.get("CONTENT_TYPE"))

if (Boolean.parseBoolean(variables.get("SSL_DISABLE_CHECK"))) {
    restCall = restCall.relaxedHTTPSValidation()
}

if (!Strings.isNullOrEmpty(variables.get("USER")) && !Strings.isNullOrEmpty(variables.get("PASSWORD"))) {
    restCall = restCall.auth().preemptive().basic(variables.get("USER"), variables.get("PASSWORD"))
}

def jsonSlurper = new JsonSlurper()
if (variables.get("HEADERS") != null && variables.get("HEADERS").length() > 0) {
    headersObject = jsonSlurper.parseText(variables.get("HEADERS"))
    if (!headersObject instanceof Map) {
        throw new IllegalArgumentException("HEADERS must contain a JSON Map structure")
    } else {
        headersObject.each { restCall = restCall.header(it.key, it.value) }
    }
}

schedulerapi.connect()
restCall = restCall.header("sessionid", schedulerapi.getSession())

if (variables.get("QUERY_PARAMETERS") != null && variables.get("QUERY_PARAMETERS").length() > 0) {
    paramsObject = jsonSlurper.parseText(variables.get("QUERY_PARAMETERS"))
    if (!paramsObject instanceof Map) {
        throw new IllegalArgumentException("QUERY_PARAMETERS must contain a JSON Map structure")
    } else {
        paramsObject.each { restCall = restCall.queryParam(it.key, it.value) }
    }
}

if (variables.get("REQUEST_BODY") != null && !variables.get("REQUEST_BODY").isEmpty()) {
    restCall = restCall.body(variables.get("REQUEST_BODY"))
}

if (debug) {
    println "-------------- REQUEST -----------------"
	restCall = restCall.log().all()
}
response = restCall.post(variables.get("ENDPOINT") + variables.get("PATH"))

if (debug) {
    println "-------------- RESPONSE -----------------"
	println response.statusLine()
    println response.prettyPrint()
} else {
	println response.statusLine()
}

response = response.then().assertThat()
  .statusCode(allOf(greaterThanOrEqualTo(HttpStatus.SC_OK),lessThan(HttpStatus.SC_MULTIPLE_CHOICES)))
  .extract();

if (debug) {
    println "-------------- RESULT -------------------"
}

if (response.statusCode() == HttpStatus.SC_NO_CONTENT && !variables.get("RESPONSE_PATH").isEmpty()) {
    throw new IllegalStateException("A RESPONSE_PATH was requested but http response has no content.")
} else if (response.statusCode() == HttpStatus.SC_NO_CONTENT) {
    result = true;
    // response has no content
    return;
}

switch (variables.get("RESPONSE_FORMAT")) {
    case "json":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for json format")
    }
    result = response.jsonPath().get(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "xml":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for xml format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.xmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "html":
    if (variables.get("RESPONSE_PATH").isEmpty()) {
        throw new IllegalArgumentException("Invalid RESPONSE_PATH for html format")
    }
    // html parsing results are not serializable and thus can be returned only in string format
    result = response.htmlPath().getString(variables.get("RESPONSE_PATH"));
    println result
    break;
    
    case "contentView":
    result = response.asByteArray();
    resultMetadata.put("content.type", response.contentType())
    // uncomment the following line to allow saving the result as a file on the scheduler portal
    // see https://doc.activeeon.com/latest/user/ProActiveUserGuide.html#_assigning_metadata_to_task_result
    // resultMetadata.put("file.extension",".png")
    println "See result in \"Task Preview\" tab with content " + response.contentType()
    break;
    
    case "string":
    result = response.prettyPrint()
    break;
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <metadata>
        <positionTop>
            380.6533889770508
        </positionTop>
        <positionLeft>
            662.2158813476562
        </positionLeft>
      </metadata>
    </task>
  </taskFlow>
  <metadata>
    <visualization>
      <![CDATA[ <html>
    <head>
    <link rel="stylesheet" href="/studio/styles/studio-standalone.css">
        <style>
        #workflow-designer {
            left:0 !important;
            top:0 !important;
            width:2423px;
            height:2814px;
            }
        </style>
    </head>
    <body>
    <div id="workflow-visualization-view"><div id="workflow-visualization" style="position:relative;top:-198.8636245727539px;left:-656.3778686523438px"><div class="task _jsPlumb_endpoint_anchor_ ui-draggable" id="jsPlumb_1_118" style="top: 203.877px; left: 661.392px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="This task has no description"><img src="/studio/images/Groovy.png" width="20px">&nbsp;<span class="name">find_job</span></a></div><div class="task ui-draggable _jsPlumb_endpoint_anchor_" id="jsPlumb_1_121" style="top: 380.667px; left: 662.23px;"><a class="task-name" data-toggle="tooltip" data-placement="right" title="A task performing a rest POST request using a json request body. This template supports only basic authentication, for more advanced authentication settings, please modify the template according to the rest-assured documentation:
https://github.com/rest-assured/rest-assured/wiki/Usage#authentication"><img src="/automation-dashboard/styles/patterns/img/wf-icons/api-rest.png" width="20px">&nbsp;<span class="name">send_signal</span></a></div><svg style="position:absolute;left:697.7070318312294px;top:243.5px" width="14.792968168770638" height="138" pointer-events="none" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml" class="_jsPlumb_connector "><path d="M 0 137 C -10 87 -10 50 0 0 " transform="translate(14.292968168770638,0.5)" pointer-events="visibleStroke" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="none" stroke="#666" style=""></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-5.231249999999999,104.92821875000001 L-0.3703887325232271,84.30366959763442 L-6.701549915452853,91.0056393137526 L-14.292968168770638,85.77396951308727 L-5.231249999999999,104.92821875000001" class="" stroke="#666" fill="#666" transform="translate(14.292968168770638,0.5)"></path><path pointer-events="all" version="1.1" xmlns="http://www.w3.org/1999/xhtml" d="M-5.231249999999999,104.92821875000001 L-0.3703887325232271,84.30366959763442 L-6.701549915452853,91.0056393137526 L-14.292968168770638,85.77396951308727 L-5.231249999999999,104.92821875000001" class="" stroke="#666" fill="#666" transform="translate(14.292968168770638,0.5)"></path></svg><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 702px; top: 234px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint source-endpoint dependency-source-endpoint connected _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable" style="position: absolute; height: 20px; width: 20px; left: 702px; top: 411px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div><div class="_jsPlumb_endpoint target-endpoint dependency-target-endpoint _jsPlumb_endpoint_anchor_ ui-draggable ui-droppable _jsPlumb_endpoint_connected" style="position: absolute; height: 20px; width: 20px; left: 702px; top: 371px;"><svg style="position:absolute;left:0px;top:0px" width="20" height="20" pointer-events="all" position="absolute" version="1.1" xmlns="http://www.w3.org/1999/xhtml"><circle cx="10" cy="10" r="10" version="1.1" xmlns="http://www.w3.org/1999/xhtml" fill="#666" stroke="none" style=""></circle></svg></div></div></div>
    </body>
</html>
 ]]>
    </visualization>
  </metadata>
</job>